language: scala
name: HumanEval_3_below_zero
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (i <- 0 until\
    \ operations.length) {\n            balance += operations(i)\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        operations.foreach(operation\
    \ => {\n            balance += operation\n            if (balance < 0) return\
    \ true\n        })\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj_21ok2c.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            balance += op\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805651
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        var belowZero\
    \ = false\n        for (op <- operations) {\n            balance += op\n     \
    \       if (balance < 0) belowZero = true\n        }\n        return belowZero\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
    \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n  \
    \  assert(belowZero((List[Long](1l.toLong, -2l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxcr0a_69.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            balance += operation\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805651
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (i <- 0 until\
    \ operations.length) {\n            balance += operations(i)\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (i <- 0 until\
    \ operations.length) {\n            balance += operations(i)\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        operations.foreach(operation\
    \ => {\n            balance += operation\n            if (balance < 0) return\
    \ true\n        })\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxcr0a_69.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            balance += operation\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805651
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj_21ok2c.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            balance += op\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805651
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxcr0a_69.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            balance += operation\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805651
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (operation\
    \ <- operations) {\n            balance += operation\n            if (balance\
    \ < 0) return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805652
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    // zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n    // at that point\
    \ function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
    \ : List[Long]) : Boolean = {\n        var balance = 0\n        for (op <- operations)\
    \ {\n            balance += op\n            if (balance < 0) return true\n   \
    \     }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(belowZero((List[Long]())) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
    \ 2l.toLong, -3l.toLong, 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n  \
    \  assert(belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\
    \ == (true));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
    \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong))) == (false));\n \
    \   assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong, -2l.toLong,\
    \ 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
    \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj_21ok2c.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            balance += op\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659805651
