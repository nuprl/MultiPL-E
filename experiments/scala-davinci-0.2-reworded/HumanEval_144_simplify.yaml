name: HumanEval_144_simplify
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Your task is to implement a function that will simplify the expression\n\
  \    // x * n. The function returns true if x * n evaluates to a whole number and\
  \ false\n    // otherwise. Both x and n, are string representation of a fraction,\
  \ and have the following format,\n    // <numerator>/<denominator> where both numerator\
  \ and denominator are positive whole numbers.\n    // You can assume that x, and\
  \ n are valid fractions, and do not have zero as denominator.\n    // >>> simplify((\"\
  1/5\"), (\"5/1\"))\n    // (true)\n    // >>> simplify((\"1/6\"), (\"2/1\"))\n \
  \   // (false)\n    // >>> simplify((\"7/10\"), (\"10/2\"))\n    // (false)\n  \
  \  def simplify(x : String, n : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(simplify((\"1/5\"\
  ), (\"5/1\")) == (true));\n    assert(simplify((\"1/6\"), (\"2/1\")) == (false));\n\
  \    assert(simplify((\"5/1\"), (\"3/1\")) == (true));\n    assert(simplify((\"\
  7/10\"), (\"10/2\")) == (false));\n    assert(simplify((\"2/10\"), (\"50/10\"))\
  \ == (true));\n    assert(simplify((\"7/2\"), (\"4/2\")) == (true));\n    assert(simplify((\"\
  11/6\"), (\"6/1\")) == (true));\n    assert(simplify((\"2/3\"), (\"5/2\")) == (false));\n\
  \    assert(simplify((\"5/2\"), (\"3/5\")) == (false));\n    assert(simplify((\"\
  2/4\"), (\"8/4\")) == (true));\n    assert(simplify((\"2/4\"), (\"4/2\")) == (true));\n\
  \    assert(simplify((\"1/5\"), (\"5/1\")) == (true));\n    assert(simplify((\"\
  1/5\"), (\"1/5\")) == (false));\n    }\n\n}\n"
completions: ["        val (xn, xd) = x.split(\"/\").map(_.toInt)\n        val (nn,\
    \ nd) = n.split(\"/\").map(_.toInt)\n        val (numerator, denominator) = (xn\
    \ * nn, xd * nd)\n        val gcd = BigInt(numerator).gcd(denominator).toInt\n\
    \        (numerator / gcd) % (denominator / gcd) == 0", "        val xn = x.split(\"\
    /\")\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n\
    \        val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n\
    \        val ndenominator = nn(1).toInt\n        val numerator = xnumerator *\
    \ nnumerator\n        val denominator = xdenominator * ndenominator\n        val\
    \ gcd = gcd(numerator, denominator)\n        val newnumerator = numerator / gcd\n\
    \        val newdenominator = denominator / gcd\n        newnumerator % newdenominator\
    \ == 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n \
    \       val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n\
    \        if (xn % nx == 0) true else false", "        val xs = x.split(\"/\")\n\
    \        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val\
    \ xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx ==\
    \ 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n    \
    \    val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n\
    \        xn % nx == 0", "        val xn = x.split(\"/\")\n        val nn = n.split(\"\
    /\")\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val xnumerator2 = xnumerator * ndenominator\n        val xdenominator2\
    \ = xdenominator * nnumerator\n        val gcd = gcd2(xnumerator2, xdenominator2)\n\
    \        val xnumerator3 = xnumerator2 / gcd\n        val xdenominator3 = xdenominator2\
    \ / gcd\n        if (xdenominator3 == 1) true else false", "        val xn = x.split(\"\
    /\")\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n\
    \        val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n\
    \        val ndenominator = nn(1).toInt\n        val numerator = xnumerator *\
    \ nnumerator\n        val denominator = xdenominator * ndenominator\n        val\
    \ gcd = gcd(numerator, denominator)\n        val simplifiedNumerator = numerator\
    \ / gcd\n        val simplifiedDenominator = denominator / gcd\n        if (simplifiedNumerator\
    \ % simplifiedDenominator == 0) true else false", "        val x_ = x.split(\"\
    /\")\n        val n_ = n.split(\"/\")\n        val x_n = (x_(0).toInt * n_(1).toInt,\
    \ x_(1).toInt * n_(0).toInt)\n        val gcd = gcd(x_n._1, x_n._2)\n        val\
    \ x_n_ = (x_n._1 / gcd, x_n._2 / gcd)\n        x_n_._1 % x_n_._2 == 0", "    \
    \    val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn\
    \ = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n  \
    \      if (xn % nx == 0) true else false", "        val xs = x.split(\"/\")\n\
    \        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        val gcd = gcd(xn, nx)\n \
    \       xn / gcd == nx / gcd", "        val xn = x.split(\"/\")\n        val nn\
    \ = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n        val xdenominator\
    \ = xn(1).toInt\n        val nnumerator = nn(0).toInt\n        val ndenominator\
    \ = nn(1).toInt\n        val numerator = xnumerator * nnumerator\n        val\
    \ denominator = xdenominator * ndenominator\n        val gcd = gcd(numerator,\
    \ denominator)\n        val numerator2 = numerator / gcd\n        val denominator2\
    \ = denominator / gcd\n        numerator2 % denominator2 == 0", "        val xs\
    \ = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n        xn == nx",
  "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn\
    \ = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n  \
    \      xn % nx == 0", "        val (xn, xd) = x.split(\"/\").map(_.toInt)\n  \
    \      val (nn, nd) = n.split(\"/\").map(_.toInt)\n        val (numerator, denominator)\
    \ = (xn * nn, xd * nd)\n        val gcd = BigInt(numerator).gcd(denominator).toInt\n\
    \        val (numerator2, denominator2) = (numerator / gcd, denominator / gcd)\n\
    \        denominator2 % numerator2 == 0", "        val xs = x.split(\"/\")\n \
    \       val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val\
    \ (xn, xd) = (x.split(\"/\")(0).toInt, x.split(\"/\")(1).toInt)\n        val (nn,\
    \ nd) = (n.split(\"/\")(0).toInt, n.split(\"/\")(1).toInt)\n        val (xn2,\
    \ xd2) = (xn * nd, xd * nn)\n        val (xn3, xd3) = (xn2 / gcd(xn2, xd2), xd2\
    \ / gcd(xn2, xd2))\n        xn3 % xd3 == 0", "        val xs = x.split(\"/\")\n\
    \        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        if (xn % nx == 0) true else\
    \ false", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n\
    \        val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n\
    \        val gcd = gcd(xn, nx)\n        xn / gcd == nx / gcd", "        val x_split\
    \ = x.split(\"/\")\n        val n_split = n.split(\"/\")\n        val x_num =\
    \ x_split(0).toInt\n        val x_den = x_split(1).toInt\n        val n_num =\
    \ n_split(0).toInt\n        val n_den = n_split(1).toInt\n        val num = x_num\
    \ * n_num\n        val den = x_den * n_den\n        val gcd = gcd(num, den)\n\
    \        val num_simplified = num / gcd\n        val den_simplified = den / gcd\n\
    \        if (num_simplified % den_simplified == 0) true else false", "       \
    \ val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx ==\
    \ 0", "        val x_ = x.split(\"/\")\n        val n_ = n.split(\"/\")\n    \
    \    val x_num = x_(0).toInt\n        val x_den = x_(1).toInt\n        val n_num\
    \ = n_(0).toInt\n        val n_den = n_(1).toInt\n        val num = x_num * n_num\n\
    \        val den = x_den * n_den\n        val gcd = BigInt(num).gcd(BigInt(den)).toInt\n\
    \        val num_ = num / gcd\n        val den_ = den / gcd\n        if (num_\
    \ == den_) true else false", "        val xSplit = x.split(\"/\")\n        val\
    \ nSplit = n.split(\"/\")\n        val xNumerator = xSplit(0).toInt\n        val\
    \ xDenominator = xSplit(1).toInt\n        val nNumerator = nSplit(0).toInt\n \
    \       val nDenominator = nSplit(1).toInt\n        val numerator = xNumerator\
    \ * nDenominator\n        val denominator = xDenominator * nNumerator\n      \
    \  val gcd = BigInt(numerator).gcd(denominator)\n        val simplifiedNumerator\
    \ = numerator / gcd.toInt\n        val simplifiedDenominator = denominator / gcd.toInt\n\
    \        if (simplifiedDenominator == 1) true else false", "        val xs = x.split(\"\
    /\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        if (xn % nx == 0) true else\
    \ false", "        val (xn, xd) = x.split(\"/\").map(_.toInt)\n        val (nn,\
    \ nd) = n.split(\"/\").map(_.toInt)\n        val (g, xn2, nn2) = gcd(xn * nd,\
    \ nn * xd)\n        xn2 % nn2 == 0", "        val xs = x.split(\"/\")\n      \
    \  val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n     \
    \   val nx = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val xn\
    \ = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator =\
    \ xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * nnumerator\n        val denominator = xdenominator * ndenominator\n\
    \        val gcd = BigInt(numerator).gcd(denominator)\n        val result = numerator\
    \ / gcd.toInt\n        if (result == denominator / gcd.toInt) true else false",
  "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn\
    \ = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n  \
    \      val gcd = gcd(xn, xd)\n        val xn2 = xn / gcd\n        val xd2 = xd\
    \ / gcd\n        xn2 == xd2", "        val xn = x.split(\"/\")\n        val nn\
    \ = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n        val xdenominator\
    \ = xn(1).toInt\n        val nnumerator = nn(0).toInt\n        val ndenominator\
    \ = nn(1).toInt\n        val numerator = xnumerator * nnumerator\n        val\
    \ denominator = xdenominator * ndenominator\n        val gcd = gcd(numerator,\
    \ denominator)\n        numerator / gcd == denominator / gcd", "        val xs\
    \ = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx ==\
    \ 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n    \
    \    val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n\
    \        xn % nx == 0", "        val xn = x.split(\"/\")\n        val nn = n.split(\"\
    /\")\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = gcd(numerator, denominator)\n        numerator\
    \ / gcd == denominator / gcd", "        val xs = x.split(\"/\")\n        val ns\
    \ = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val nx\
    \ = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val xs = x.split(\"\
    /\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val\
    \ xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx ==\
    \ 0", "        val (xn, xd) = (x.split(\"/\")(0).toInt, x.split(\"/\")(1).toInt)\n\
    \        val (nn, nd) = (n.split(\"/\")(0).toInt, n.split(\"/\")(1).toInt)\n \
    \       val (xnn, xdd) = (xn * nd, xd * nn)\n        val (gcd, lcm) = (gcd(xnn,\
    \ xdd), lcm(xnn, xdd))\n        (xnn / gcd) == (xdd / gcd)", "        val xs =\
    \ x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx ==\
    \ 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n    \
    \    val xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n\
    \        val gcd = BigInt(xn).gcd(xd).toInt\n        xn / gcd == xd / gcd", " \
    \       val (xn, xd) = (x.split(\"/\")(0).toInt, x.split(\"/\")(1).toInt)\n  \
    \      val (nn, nd) = (n.split(\"/\")(0).toInt, n.split(\"/\")(1).toInt)\n   \
    \     val (g, l) = if (xd > nd) (xd, nd) else (nd, xd)\n        val (gcd, lcm)\
    \ = (gcd(g, l), lcm(g, l))\n        val (xn2, nn2) = (xn * (lcm / xd), nn * (lcm\
    \ / nd))\n        val (xn3, nn3) = (xn2 / gcd, nn2 / gcd)\n        xn3 == nn3",
  "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn\
    \ = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n  \
    \      xn % nx == 0", "        val (a, b) = (x.split(\"/\")(0).toInt, x.split(\"\
    /\")(1).toInt)\n        val (c, d) = (n.split(\"/\")(0).toInt, n.split(\"/\")(1).toInt)\n\
    \        val (e, f) = (a * c, b * d)\n        val g = gcd(e, f)\n        if (e\
    \ / g == f / g) true else false", "        val (xn, xd) = x.split(\"/\").map(_.toInt)\n\
    \        val (nn, nd) = n.split(\"/\").map(_.toInt)\n        val (gcd, lcm) =\
    \ (gcd(xd, nd), lcm(xd, nd))\n        val (xn2, nn2) = (xn * (lcm / xd), nn *\
    \ (lcm / nd))\n        val (gcd2, lcm2) = (gcd(xn2, nn2), lcm(xn2, nn2))\n   \
    \     (xn2 * nn2) % lcm2 == 0", "        val (xn, xd) = (x.split(\"/\")(0).toInt,\
    \ x.split(\"/\")(1).toInt)\n        val (nn, nd) = (n.split(\"/\")(0).toInt, n.split(\"\
    /\")(1).toInt)\n        val (xn1, xd1) = (xn * nd, xd * nn)\n        val g = gcd(xn1,\
    \ xd1)\n        xn1 / g == xd1 / g", "        val xs = x.split(\"/\")\n      \
    \  val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n     \
    \   val nx = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val xs\
    \ = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n        val gcd =\
    \ gcd(xn, nx)\n        xn / gcd == nx / gcd", "        val xn = x.split(\"/\"\
    )\n        val nn = n.split(\"/\")\n        val xnum = xn(0).toInt\n        val\
    \ xden = xn(1).toInt\n        val nnum = nn(0).toInt\n        val nden = nn(1).toInt\n\
    \        val num = xnum * nnum\n        val den = xden * nden\n        val gcd\
    \ = BigInt(num).gcd(den)\n        val num2 = num / gcd.toInt\n        val den2\
    \ = den / gcd.toInt\n        num2 % den2 == 0", "        val x_numerator = x.split(\"\
    /\")(0).toInt\n        val x_denominator = x.split(\"/\")(1).toInt\n        val\
    \ n_numerator = n.split(\"/\")(0).toInt\n        val n_denominator = n.split(\"\
    /\")(1).toInt\n        val product_numerator = x_numerator * n_numerator\n   \
    \     val product_denominator = x_denominator * n_denominator\n        val gcd\
    \ = BigInt(product_numerator).gcd(BigInt(product_denominator)).toInt\n       \
    \ product_numerator / gcd == product_denominator / gcd", "        val (xn, xd)\
    \ = (x.split(\"/\")(0).toInt, x.split(\"/\")(1).toInt)\n        val (nn, nd) =\
    \ (n.split(\"/\")(0).toInt, n.split(\"/\")(1).toInt)\n        val (xn2, xd2) =\
    \ (xn * nd, xd * nn)\n        val g = gcd(xn2, xd2)\n        (xn2 / g) % (xd2\
    \ / g) == 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\"\
    )\n        val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt *\
    \ xs(1).toInt\n        xn == nx", "        val xs = x.split(\"/\")\n        val\
    \ ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val\
    \ nx = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val xn = x.split(\"\
    /\")\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n\
    \        val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n\
    \        val ndenominator = nn(1).toInt\n        val result = (xnumerator * nnumerator)\
    \ / (xdenominator * ndenominator)\n        if (result % 1 == 0) true else false",
  "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn\
    \ = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n  \
    \      if (xn % nx == 0) true else false", "        val xn = x.split(\"/\").map(_.toInt)\n\
    \        val nn = n.split(\"/\").map(_.toInt)\n        val r = (xn(0) * nn(1))\
    \ * (nn(0) * xn(1))\n        if (r % (xn(1) * nn(1)) == 0) true else false", " \
    \       val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val\
    \ xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n\
    \        xn % nx == 0", "        val x_numerator = x.split(\"/\")(0).toInt\n \
    \       val x_denominator = x.split(\"/\")(1).toInt\n        val n_numerator =\
    \ n.split(\"/\")(0).toInt\n        val n_denominator = n.split(\"/\")(1).toInt\n\
    \        val numerator = x_numerator * n_numerator\n        val denominator =\
    \ x_denominator * n_denominator\n        val gcd = BigInt(numerator).gcd(denominator).toInt\n\
    \        numerator / gcd == denominator / gcd", "        val xs = x.split(\"/\"\
    )\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        val gcd = BigInt(xn).gcd(BigInt(nx)).toInt\n\
    \        xn / gcd == nx / gcd", "        val xs = x.split(\"/\")\n        val\
    \ ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val\
    \ nx = ns(0).toInt * xs(1).toInt\n        if (xn % nx == 0) true else false",
  "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn\
    \ = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n  \
    \      xn == nx", "        val xn = x.split(\"/\")\n        val nn = n.split(\"\
    /\")\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val xnumerator2 = xnumerator * ndenominator\n        val xdenominator2\
    \ = xdenominator * nnumerator\n        val gcd = gcd(xnumerator2, xdenominator2)\n\
    \        val xnumerator3 = xnumerator2 / gcd\n        val xdenominator3 = xdenominator2\
    \ / gcd\n        if (xdenominator3 == 1) true else false", "        val (xn, xd)\
    \ = (x.split(\"/\")(0).toInt, x.split(\"/\")(1).toInt)\n        val (nn, nd) =\
    \ (n.split(\"/\")(0).toInt, n.split(\"/\")(1).toInt)\n        val (gcd, lcm) =\
    \ (gcd(xd, nd), lcm(xd, nd))\n        val (xn2, nn2) = (xn * (lcm / xd), nn *\
    \ (lcm / nd))\n        val (xn3, nn3) = (xn2 * nn2, lcm)\n        val (gcd2, lcm2)\
    \ = (gcd(xn3, nn3), lcm(xn3, nn3))\n        val (xn4, nn4) = (xn3 / gcd2, nn3\
    \ / gcd2)\n        val (xn5, nn5) = (xn4 / nn4, nn4 / nn4)\n        xn5 == 1",
  "        val x_ = x.split(\"/\")\n        val n_ = n.split(\"/\")\n        val x_n\
    \ = x_(0).toInt * n_(1).toInt\n        val n_x = n_(0).toInt * x_(1).toInt\n \
    \       val x_n_ = x_n * n_(0).toInt\n        val n_x_ = n_x * x_(0).toInt\n \
    \       if (x_n_ == n_x_) true else false", "        val xs = x.split(\"/\")\n\
    \        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val\
    \ xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toLong\
    \ * ns(1).toLong\n        val nx = ns(0).toLong * xs(1).toLong\n        val gcd\
    \ = gcd(xn, nx)\n        xn / gcd == nx / gcd", "        val xArray = x.split(\"\
    /\")\n        val nArray = n.split(\"/\")\n        val xNumerator = xArray(0).toInt\n\
    \        val xDenominator = xArray(1).toInt\n        val nNumerator = nArray(0).toInt\n\
    \        val nDenominator = nArray(1).toInt\n        val xNumeratorN = xNumerator\
    \ * nDenominator\n        val nNumeratorX = nNumerator * xDenominator\n      \
    \  val xDenominatorN = xDenominator * nDenominator\n        val nDenominatorX\
    \ = nDenominator * xDenominator\n        val xNumeratorNX = xNumeratorN * xDenominator\n\
    \        val nNumeratorXX = nNumeratorX * xDenominator\n        val xDenominatorNN\
    \ = xDenominatorN * nDenominator\n        val nDenominatorXX = nDenominatorX *\
    \ xDenominator\n        val xNumeratorNXN = xNumeratorNX * nDenominator\n    \
    \    val nNumeratorXXN = nNumeratorXX * nDenominator\n        val xDenominatorNNX\
    \ = xDenominatorNN * xDenominator\n        val nDenominatorXXN = nDenominatorXX\
    \ * nDenominator\n        val xNumeratorNXND = xNumeratorNXN * xDenominator\n\
    \        val nNumeratorXXND = nNumeratorXXN * xDenominator\n        val xDenominatorNNXD\
    \ = xDenominatorNNX * nDenominator\n        val nDenominatorXXND = nDenominatorXXN\
    \ * nDenominator\n        val xNumeratorNXNDD = xNumeratorNXND * nDenominator\n\
    \        val nNumeratorXXNDD = nNumeratorXXND * nDenominator\n        val xDenominatorNNXDD\
    \ = xDenominatorNNXD * xDenominator\n        val nDenominatorXXNDD = nDenominatorXXND\
    \ * nDenominator\n        val xNumeratorNXNDDD = xNumeratorNXND", "        val\
    \ xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator\
    \ = BigInt(xn(0))\n        val xdenominator = BigInt(xn(1))\n        val nnumerator\
    \ = BigInt(nn(0))\n        val ndenominator = BigInt(nn(1))\n        val numerator\
    \ = xnumerator * nnumerator\n        val denominator = xdenominator * ndenominator\n\
    \        val gcd = numerator.gcd(denominator)\n        val numerator2 = numerator\
    \ / gcd\n        val denominator2 = denominator / gcd\n        numerator2 % denominator2\
    \ == 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n \
    \       val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n\
    \        xn % nx == 0", "        val (xn, xd) = (x.split(\"/\")(0).toInt, x.split(\"\
    /\")(1).toInt)\n        val (nn, nd) = (n.split(\"/\")(0).toInt, n.split(\"/\"\
    )(1).toInt)\n        val (xn2, xd2) = (xn * nd, xd * nn)\n        val gcd = BigInt(xn2).gcd(xd2).toInt\n\
    \        val (xn3, xd3) = (xn2 / gcd, xd2 / gcd)\n        xd3 == 1", "       \
    \ val x_n = x.split(\"/\")\n        val n_n = n.split(\"/\")\n        val x_num\
    \ = x_n(0).toInt\n        val x_den = x_n(1).toInt\n        val n_num = n_n(0).toInt\n\
    \        val n_den = n_n(1).toInt\n        val num = x_num * n_num\n        val\
    \ den = x_den * n_den\n        val gcd = gcd(num, den)\n        val num_s = num\
    \ / gcd\n        val den_s = den / gcd\n        if (num_s % den_s == 0) true else\
    \ false", "        val x_ = x.split(\"/\")\n        val n_ = n.split(\"/\")\n\
    \        val x_num = x_(0).toInt\n        val x_den = x_(1).toInt\n        val\
    \ n_num = n_(0).toInt\n        val n_den = n_(1).toInt\n        val num = x_num\
    \ * n_num\n        val den = x_den * n_den\n        val gcd = gcd_iter(num, den)\n\
    \        val num_ = num / gcd\n        val den_ = den / gcd\n        if (num_\
    \ % den_ == 0) true else false", "        val (x1, x2) = x.split(\"/\").map(_.toInt)\n\
    \        val (n1, n2) = n.split(\"/\").map(_.toInt)\n        val (a, b) = (x1\
    \ * n2, x2 * n1)\n        val g = gcd(a, b)\n        a / g == b / g", "      \
    \  val x_ = x.split(\"/\")\n        val n_ = n.split(\"/\")\n        val x_numerator\
    \ = x_(0).toInt\n        val x_denominator = x_(1).toInt\n        val n_numerator\
    \ = n_(0).toInt\n        val n_denominator = n_(1).toInt\n        val x_n = x_numerator\
    \ * n_denominator\n        val n_n = n_numerator * x_denominator\n        val\
    \ gcd = gcd_recursive(x_n, n_n)\n        val x_n_ = x_n / gcd\n        val n_n_\
    \ = n_n / gcd\n        if (x_n_ == n_n_) true else false", "        val xs = x.split(\"\
    /\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        val gcd = gcd(xn, nx)\n \
    \       xn / gcd == nx / gcd", "        val xArray = x.split(\"/\")\n        val\
    \ nArray = n.split(\"/\")\n        val xNumerator = BigInt(xArray(0))\n      \
    \  val xDenominator = BigInt(xArray(1))\n        val nNumerator = BigInt(nArray(0))\n\
    \        val nDenominator = BigInt(nArray(1))\n        val numerator = xNumerator\
    \ * nNumerator\n        val denominator = xDenominator * nDenominator\n      \
    \  val gcd = numerator.gcd(denominator)\n        val simplifiedNumerator = numerator\
    \ / gcd\n        val simplifiedDenominator = denominator / gcd\n        simplifiedDenominator\
    \ == 1", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n \
    \       val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n\
    \        xn == nx", "        val xn = x.split(\"/\")\n        val nn = n.split(\"\
    /\")\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = BigInt(numerator).gcd(denominator)\n     \
    \   val result = numerator / gcd.toInt\n        val result2 = denominator / gcd.toInt\n\
    \        if (result == result2) true else false", "        val (xn, xd) = (x.split(\"\
    /\")(0).toInt, x.split(\"/\")(1).toInt)\n        val (nn, nd) = (n.split(\"/\"\
    )(0).toInt, n.split(\"/\")(1).toInt)\n        val (xn1, xd1) = (xn * nd, xd *\
    \ nn)\n        val gcd = BigInt(xn1).gcd(xd1).toInt\n        val (xn2, xd2) =\
    \ (xn1 / gcd, xd1 / gcd)\n        xd2 == 1", "        val xn = x.split(\"/\")\n\
    \        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n     \
    \   val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n   \
    \     val ndenominator = nn(1).toInt\n        val numerator = xnumerator * nnumerator\n\
    \        val denominator = xdenominator * ndenominator\n        val gcd = BigInt(numerator).gcd(denominator)\n\
    \        val simplified = numerator / gcd.toInt == denominator / gcd.toInt\n \
    \       simplified", "        val x_numerator = x.split(\"/\")(0).toInt\n    \
    \    val x_denominator = x.split(\"/\")(1).toInt\n        val n_numerator = n.split(\"\
    /\")(0).toInt\n        val n_denominator = n.split(\"/\")(1).toInt\n        val\
    \ result_numerator = x_numerator * n_numerator\n        val result_denominator\
    \ = x_denominator * n_denominator\n        val gcd = gcd(result_numerator, result_denominator)\n\
    \        val simplified_numerator = result_numerator / gcd\n        val simplified_denominator\
    \ = result_denominator / gcd\n        if (simplified_numerator % simplified_denominator\
    \ == 0) true else false", "        val x_numerator = x.split(\"/\")(0).toInt\n\
    \        val x_denominator = x.split(\"/\")(1).toInt\n        val n_numerator\
    \ = n.split(\"/\")(0).toInt\n        val n_denominator = n.split(\"/\")(1).toInt\n\
    \        val result_numerator = x_numerator * n_numerator\n        val result_denominator\
    \ = x_denominator * n_denominator\n        val gcd = gcd(result_numerator, result_denominator)\n\
    \        if (result_numerator % result_denominator == 0) true\n        else if\
    \ (result_numerator % gcd == 0 && result_denominator % gcd == 0) true\n      \
    \  else false", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt\
    \ * xs(1).toInt\n        if (xn % nx == 0) true else false", "        val xn =\
    \ x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n\
    \        val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n\
    \        val ndenominator = nn(1).toInt\n        val product = (xnumerator * nnumerator)\
    \ / (xdenominator * ndenominator)\n        if (product % 1 == 0) true else false",
  "        val (xn, xd) = x.split(\"/\").map(_.toInt)\n        val (nn, nd) = n.split(\"\
    /\").map(_.toInt)\n        val (numerator, denominator) = (xn * nn, xd * nd)\n\
    \        val gcd = BigInt(numerator).gcd(denominator).toInt\n        val (numerator2,\
    \ denominator2) = (numerator / gcd, denominator / gcd)\n        denominator2 ==\
    \ 1", "        val (x1, x2) = x.split(\"/\").map(_.toInt)\n        val (n1, n2)\
    \ = n.split(\"/\").map(_.toInt)\n        val (a, b) = (x1 * n2, x2 * n1)\n   \
    \     val g = gcd(a, b)\n        (a / g) % (b / g) == 0", "        val xs = x.split(\"\
    /\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        if (xn == nx) true else false",
  "        val (xn, xd) = (x.split(\"/\")(0).toInt, x.split(\"/\")(1).toInt)\n   \
    \     val (nn, nd) = (n.split(\"/\")(0).toInt, n.split(\"/\")(1).toInt)\n    \
    \    val (a, b) = (xn * nd, xd * nn)\n        val (c, d) = (a / gcd(a, b), b /\
    \ gcd(a, b))\n        c % d == 0", "        val xn = x.split(\"/\")\n        val\
    \ nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n        val xdenominator\
    \ = xn(1).toInt\n        val nnumerator = nn(0).toInt\n        val ndenominator\
    \ = nn(1).toInt\n        val numerator = xnumerator * nnumerator\n        val\
    \ denominator = xdenominator * ndenominator\n        val gcd = gcd(numerator,\
    \ denominator)\n        val simplified = numerator / gcd\n        if (simplified\
    \ == denominator) true else false", "        val xn = x.split(\"/\")\n       \
    \ val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n        val xdenominator\
    \ = xn(1).toInt\n        val nnumerator = nn(0).toInt\n        val ndenominator\
    \ = nn(1).toInt\n        val numerator = xnumerator * nnumerator\n        val\
    \ denominator = xdenominator * ndenominator\n        val gcd = gcd(numerator,\
    \ denominator)\n        val simplifiedNumerator = numerator / gcd\n        val\
    \ simplifiedDenominator = denominator / gcd\n        if (simplifiedNumerator %\
    \ simplifiedDenominator == 0) true else false", "        val (xn, xd) = x.split(\"\
    /\").map(_.toInt)\n        val (nn, nd) = n.split(\"/\").map(_.toInt)\n      \
    \  val (numerator, denominator) = (xn * nn, xd * nd)\n        val gcd = BigInt(numerator).gcd(denominator).toInt\n\
    \        numerator / gcd == denominator / gcd", "        val xs = x.split(\"/\"\
    )\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val\
    \ xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n        val gcd =\
    \ gcd(xn, nx)\n        xn / gcd == nx / gcd", "        val xn = x.split(\"/\"\
    )\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n   \
    \     val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n \
    \       val ndenominator = nn(1).toInt\n        val numerator = xnumerator * nnumerator\n\
    \        val denominator = xdenominator * ndenominator\n        val gcd = gcd(numerator,\
    \ denominator)\n        numerator / gcd == denominator / gcd", "        val xs\
    \ = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n        xn == nx",
  "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn\
    \ = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n  \
    \      if (xn % nx == 0) true else false", "        val x_numerator = x.split(\"\
    /\")(0).toInt\n        val x_denominator = x.split(\"/\")(1).toInt\n        val\
    \ n_numerator = n.split(\"/\")(0).toInt\n        val n_denominator = n.split(\"\
    /\")(1).toInt\n        val product_numerator = x_numerator * n_numerator\n   \
    \     val product_denominator = x_denominator * n_denominator\n        val gcd\
    \ = gcd_iter(product_numerator, product_denominator)\n        val simplified_numerator\
    \ = product_numerator / gcd\n        val simplified_denominator = product_denominator\
    \ / gcd\n        if (simplified_numerator % simplified_denominator == 0) true\
    \ else false", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\"\
    )\n        val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt *\
    \ xs(1).toInt\n        val gcd = BigInt(xn).gcd(BigInt(nx)).toInt\n        xn\
    \ / gcd == nx / gcd", "        val xn = x.split(\"/\")\n        val nn = n.split(\"\
    /\")\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = BigInt(numerator).gcd(denominator)\n     \
    \   numerator / gcd.toInt == denominator / gcd.toInt", "        val xn = x.split(\"\
    /\").map(_.toInt)\n        val nn = n.split(\"/\").map(_.toInt)\n        val num\
    \ = xn(0) * nn(1)\n        val den = xn(1) * nn(0)\n        if (num % den == 0)\
    \ true else false", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt\
    \ * xs(1).toInt\n        xn % nx == 0", "        val (xn, xd) = x.split(\"/\"\
    ).map(_.toInt)\n        val (nn, nd) = n.split(\"/\").map(_.toInt)\n        val\
    \ (a, b) = (xn * nd, xd * nn)\n        val g = gcd(a, b)\n        a / g == b /\
    \ g", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n    \
    \    val xn = xs(0).toLong * ns(1).toLong\n        val nx = ns(0).toLong * xs(1).toLong\n\
    \        val gcd = gcd(xn, nx)\n        xn / gcd == nx / gcd", "        val xs\
    \ = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n        if (xn ==\
    \ nx) true else false", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt\
    \ * xs(1).toInt\n        xn % nx == 0", "        val (xn, xd) = x.split(\"/\"\
    ).map(_.toInt)\n        val (nn, nd) = n.split(\"/\").map(_.toInt)\n        val\
    \ (xn2, xd2) = (xn * nd, xd * nn)\n        val g = gcd(xn2, xd2)\n        (xn2\
    \ / g) % (xd2 / g) == 0", "        val (xn, xd) = x.split(\"/\").map(_.toInt)\n\
    \        val (nn, nd) = n.split(\"/\").map(_.toInt)\n        val (gcd, lcm) =\
    \ (gcd(xd, nd), lcm(xd, nd))\n        val (xn2, nn2) = (xn * (lcm / xd), nn *\
    \ (lcm / nd))\n        (xn2 * nn2) % lcm == 0", "        val (x1, x2) = x.split(\"\
    /\").map(_.toInt)\n        val (n1, n2) = n.split(\"/\").map(_.toInt)\n      \
    \  val (a, b) = (x1 * n2, x2 * n1)\n        val (c, d) = (a / gcd(a, b), b / gcd(a,\
    \ b))\n        c % d == 0", "        val xs = x.split(\"/\")\n        val ns =\
    \ n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val nx =\
    \ ns(0).toInt * xs(1).toInt\n        val gcd = gcd(xn, nx)\n        val xn2 =\
    \ xn / gcd\n        val nx2 = nx / gcd\n        if (xn2 == nx2) true else false",
  "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn\
    \ = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n  \
    \      xn % nx == 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt\
    \ * xs(1).toInt\n        xn % nx == 0", "        val xs = x.split(\"/\")\n   \
    \     val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n  \
    \      val nx = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val\
    \ (xn, xd) = x.split(\"/\").map(_.toInt)\n        val (nn, nd) = n.split(\"/\"\
    ).map(_.toInt)\n        val (numerator, denominator) = (xn * nn, xd * nd)\n  \
    \      val gcd = BigInt(numerator).gcd(denominator).toInt\n        val (numerator2,\
    \ denominator2) = (numerator / gcd, denominator / gcd)\n        denominator2 ==\
    \ 1", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n    \
    \    val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n\
    \        val gcd = BigInt(xn).gcd(BigInt(nx)).toInt\n        xn / gcd == nx /\
    \ gcd", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n  \
    \      val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n\
    \        xn % nx == 0", "        val xn = x.split(\"/\")\n        val nn = n.split(\"\
    /\")\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val xnumerator2 = xnumerator * ndenominator\n        val xdenominator2\
    \ = xdenominator * nnumerator\n        val gcd = gcd(xnumerator2, xdenominator2)\n\
    \        val xnumerator3 = xnumerator2 / gcd\n        val xdenominator3 = xdenominator2\
    \ / gcd\n        if (xdenominator3 == 1) true else false", "        val (xn, xd)\
    \ = x.split(\"/\").map(_.toInt)\n        val (nn, nd) = n.split(\"/\").map(_.toInt)\n\
    \        val (numerator, denominator) = (xn * nn, xd * nd)\n        val gcd =\
    \ BigInt(numerator).gcd(denominator).toInt\n        val (numerator2, denominator2)\
    \ = (numerator / gcd, denominator / gcd)\n        denominator2 % numerator2 ==\
    \ 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n    \
    \    val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n\
    \        xn % nx == 0", "        val x_n = x.split(\"/\")\n        val n_n = n.split(\"\
    /\")\n        val x_n_n = x_n(0).toInt * n_n(1).toInt\n        val x_n_d = x_n(1).toInt\
    \ * n_n(0).toInt\n        val gcd = gcd_rec(x_n_n, x_n_d)\n        val x_n_n_s\
    \ = x_n_n / gcd\n        val x_n_d_s = x_n_d / gcd\n        if (x_n_n_s % x_n_d_s\
    \ == 0) true else false", "        val x_ = x.split(\"/\")\n        val n_ = n.split(\"\
    /\")\n        val x_num = x_(0).toInt\n        val x_den = x_(1).toInt\n     \
    \   val n_num = n_(0).toInt\n        val n_den = n_(1).toInt\n        val num\
    \ = x_num * n_num\n        val den = x_den * n_den\n        val gcd = gcd_iter(num,\
    \ den)\n        val num_ = num / gcd\n        val den_ = den / gcd\n        num_\
    \ % den_ == 0", "        val xn = x.split(\"/\")\n        val nn = n.split(\"\
    /\")\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = gcdFunc(numerator, denominator)\n        if\
    \ (gcd == 1) return false\n        else return true", "        val xs = x.split(\"\
    /\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val\
    \ x_n = x.split(\"/\")\n        val n_n = n.split(\"/\")\n        val x_num =\
    \ x_n(0).toInt\n        val x_den = x_n(1).toInt\n        val n_num = n_n(0).toInt\n\
    \        val n_den = n_n(1).toInt\n        val num = x_num * n_num\n        val\
    \ den = x_den * n_den\n        val gcd = gcd_iter(num, den)\n        val num_s\
    \ = num / gcd\n        val den_s = den / gcd\n        if (num_s % den_s == 0)\
    \ true else false", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toLong * ns(1).toLong\n        val nx = ns(0).toLong\
    \ * xs(1).toLong\n        xn == nx", "        val xs = x.split(\"/\")\n      \
    \  val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n     \
    \   val nx = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val xs\
    \ = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx ==\
    \ 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n    \
    \    val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n\
    \        xn % nx == 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt\
    \ * xs(1).toInt\n        xn % nx == 0", "        val xn = x.split(\"/\")\n   \
    \     val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n        val\
    \ xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n        val\
    \ ndenominator = nn(1).toInt\n        val numerator = xnumerator * nnumerator\n\
    \        val denominator = xdenominator * ndenominator\n        numerator % denominator\
    \ == 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n \
    \       val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n\
    \        xn == nx", "        val x_ = x.split(\"/\")\n        val n_ = n.split(\"\
    /\")\n        val x_numerator = x_(0).toInt\n        val x_denominator = x_(1).toInt\n\
    \        val n_numerator = n_(0).toInt\n        val n_denominator = n_(1).toInt\n\
    \        val numerator = x_numerator * n_numerator\n        val denominator =\
    \ x_denominator * n_denominator\n        val gcd = gcd_recursive(numerator, denominator)\n\
    \        val simplified_numerator = numerator / gcd\n        val simplified_denominator\
    \ = denominator / gcd\n        if (simplified_denominator == 1) true else false",
  "        val x_split = x.split(\"/\")\n        val n_split = n.split(\"/\")\n  \
    \      val x_numerator = BigInt(x_split(0))\n        val x_denominator = BigInt(x_split(1))\n\
    \        val n_numerator = BigInt(n_split(0))\n        val n_denominator = BigInt(n_split(1))\n\
    \        val numerator = x_numerator * n_numerator\n        val denominator =\
    \ x_denominator * n_denominator\n        val gcd = numerator.gcd(denominator)\n\
    \        val simplified_numerator = numerator / gcd\n        val simplified_denominator\
    \ = denominator / gcd\n        simplified_numerator % simplified_denominator ==\
    \ 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n    \
    \    val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n\
    \        xn % nx == 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toLong * ns(1).toLong\n        val nx = ns(0).toLong\
    \ * xs(1).toLong\n        xn == nx", "        val xs = x.split(\"/\")\n      \
    \  val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n     \
    \   val nx = ns(0).toInt * xs(1).toInt\n        xn == nx", "        val xs = x.split(\"\
    /\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val\
    \ (xn, xd) = (x.split(\"/\")(0).toInt, x.split(\"/\")(1).toInt)\n        val (nn,\
    \ nd) = (n.split(\"/\")(0).toInt, n.split(\"/\")(1).toInt)\n        val (xn2,\
    \ xd2) = (xn * nd, xd * nn)\n        val (gcd, lcm) = (gcd(xn2, xd2), lcm(xn2,\
    \ xd2))\n        (xn2 / gcd) == (lcm / xd2)", "        val xArray = x.split(\"\
    /\")\n        val nArray = n.split(\"/\")\n        val xNumerator = xArray(0).toInt\n\
    \        val xDenominator = xArray(1).toInt\n        val nNumerator = nArray(0).toInt\n\
    \        val nDenominator = nArray(1).toInt\n        val numerator = xNumerator\
    \ * nDenominator\n        val denominator = xDenominator * nNumerator\n      \
    \  val gcd = gcd(numerator, denominator)\n        numerator / gcd == denominator\
    \ / gcd", "        val x_numerator = x.split(\"/\")(0).toInt\n        val x_denominator\
    \ = x.split(\"/\")(1).toInt\n        val n_numerator = n.split(\"/\")(0).toInt\n\
    \        val n_denominator = n.split(\"/\")(1).toInt\n        val result_numerator\
    \ = x_numerator * n_numerator\n        val result_denominator = x_denominator\
    \ * n_denominator\n        val gcd = gcd_recursive(result_numerator, result_denominator)\n\
    \        if (result_numerator % result_denominator == 0) true\n        else if\
    \ (result_numerator % gcd == 0 && result_denominator % gcd == 0) true\n      \
    \  else false", "        val xn = x.split(\"/\")\n        val nn = n.split(\"\
    /\")\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        if (numerator % denominator == 0) true else false",
  "        val (xn, xd) = x.split(\"/\").map(_.toInt)\n        val (nn, nd) = n.split(\"\
    /\").map(_.toInt)\n        val (gcd, lcm) = (gcd(xd, nd), lcm(xd, nd))\n     \
    \   val (xn2, nn2) = (xn * (lcm / xd), nn * (lcm / nd))\n        val (xn3, nn3)\
    \ = (xn2 * nn2, lcm)\n        val (gcd2, lcm2) = (gcd(xn3, nn3), lcm(xn3, nn3))\n\
    \        (xn3 / gcd2) == (nn3 / gcd2)", "        val (xNum, xDen) = x.split(\"\
    /\").map(_.toInt)\n        val (nNum, nDen) = n.split(\"/\").map(_.toInt)\n  \
    \      val (num, den) = (xNum * nNum, xDen * nDen)\n        val gcd = BigInt(num).gcd(den).toInt\n\
    \        (num / gcd) % (den / gcd) == 0", "        val xs = x.split(\"/\")\n \
    \       val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        xn == nx", "        val xs\
    \ = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toLong\
    \ * ns(1).toLong\n        val nx = ns(0).toLong * xs(1).toLong\n        xn % nx\
    \ == 0", "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n \
    \       val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val xnumerator2 = xnumerator * ndenominator\n        val xdenominator2\
    \ = xdenominator * nnumerator\n        val gcd = gcd2(xnumerator2, xdenominator2)\n\
    \        val xnumerator3 = xnumerator2 / gcd\n        val xdenominator3 = xdenominator2\
    \ / gcd\n        if (xdenominator3 == 1) true else false", "        val xs = x.split(\"\
    /\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val\
    \ xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n        if (xn %\
    \ nx == 0) true else false", "        val xs = x.split(\"/\")\n        val ns\
    \ = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val nx\
    \ = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val (xn, xd) =\
    \ (x.split(\"/\")(0).toInt, x.split(\"/\")(1).toInt)\n        val (nn, nd) = (n.split(\"\
    /\")(0).toInt, n.split(\"/\")(1).toInt)\n        val (gcd, lcm) = (gcd(xd, nd),\
    \ lcm(xd, nd))\n        val (xn1, nn1) = (xn * (lcm / xd), nn * (lcm / nd))\n\
    \        (xn1 * nn1) % lcm == 0", "        val xs = x.split(\"/\")\n        val\
    \ ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val\
    \ nx = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val xn = x.split(\"\
    /\").map(_.toInt)\n        val nn = n.split(\"/\").map(_.toInt)\n        val xn_\
    \ = xn(0) * nn(1)\n        val nn_ = nn(0) * xn(1)\n        xn_ % nn_ == 0", " \
    \       val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val\
    \ xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n\
    \        xn == nx", "        val xn = x.split(\"/\")\n        val nn = n.split(\"\
    /\")\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = BigInt(numerator).gcd(denominator)\n     \
    \   val simplifiedNumerator = numerator / gcd.toInt\n        val simplifiedDenominator\
    \ = denominator / gcd.toInt\n        simplifiedDenominator == 1", "        val\
    \ xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx ==\
    \ 0", "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n    \
    \    val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n  \
    \      val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = BigInt(numerator).gcd(denominator)\n     \
    \   val result = numerator / gcd\n        if (result == denominator) true else\
    \ false", "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n\
    \        val xnum = xn(0).toInt\n        val xden = xn(1).toInt\n        val nnum\
    \ = nn(0).toInt\n        val nden = nn(1).toInt\n        val xnumerator = xnum\
    \ * nden\n        val xdenominator = xden * nnum\n        val gcd = BigInt(xnumerator).gcd(xdenominator)\n\
    \        val xnumerator_ = xnumerator / gcd.toInt\n        val xdenominator_ =\
    \ xdenominator / gcd.toInt\n        xnumerator_ % xdenominator_ == 0", "     \
    \   val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn =\
    \ xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n    \
    \    xn == nx", "        val xn = x.split(\"/\")\n        val nn = n.split(\"\
    /\")\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = gcd(numerator, denominator)\n        numerator\
    \ / gcd == denominator / gcd", "        val (xn, xd) = x.split(\"/\").map(_.toInt)\n\
    \        val (nn, nd) = n.split(\"/\").map(_.toInt)\n        val (xn2, xd2) =\
    \ (xn * nd, xd * nn)\n        val (gcd, lcm) = (gcd(xn2, xd2), lcm(xn2, xd2))\n\
    \        (xn2 / gcd) == (xd2 / gcd)", "        val xn = x.split(\"/\")\n     \
    \   val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n        val\
    \ xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n        val\
    \ ndenominator = nn(1).toInt\n        val numerator = xnumerator * nnumerator\n\
    \        val denominator = xdenominator * ndenominator\n        val gcd = BigInt(numerator).gcd(denominator)\n\
    \        val numerator2 = numerator / gcd.toInt\n        val denominator2 = denominator\
    \ / gcd.toInt\n        if (numerator2 % denominator2 == 0) true else false", " \
    \       val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val\
    \ xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n\
    \        xn % nx == 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt\
    \ * xs(1).toInt\n        xn % nx == 0", "        val xSplit = x.split(\"/\")\n\
    \        val nSplit = n.split(\"/\")\n        val xNumerator = xSplit(0).toInt\n\
    \        val xDenominator = xSplit(1).toInt\n        val nNumerator = nSplit(0).toInt\n\
    \        val nDenominator = nSplit(1).toInt\n        val xNumeratorN = xNumerator\
    \ * nDenominator\n        val nNumeratorX = nNumerator * xDenominator\n      \
    \  val xDenominatorN = xDenominator * nDenominator\n        val nDenominatorX\
    \ = nDenominator * xDenominator\n        val xNumeratorNXDenominatorN = xNumeratorN\
    \ * xDenominatorN\n        val nNumeratorXXDenominatorN = nNumeratorX * xDenominatorN\n\
    \        val xNumeratorNXDenominatorX = xNumeratorN * xDenominatorX\n        val\
    \ nNumeratorXXDenominatorX = nNumeratorX * xDenominatorX\n        val xNumeratorNXDenominatorNXDenominatorX\
    \ = xNumeratorNXDenominatorN * xDenominatorX\n        val nNumeratorXXDenominatorNXDenominatorX\
    \ = nNumeratorXXDenominatorN * xDenominatorX\n        val xNumeratorNXDenominatorNXDenominatorN\
    \ = xNumeratorNXDenominatorN * xDenominatorN\n        val nNumeratorXXDenominatorNXDenominatorN\
    \ = nNumeratorXXDenominatorN * xDenominatorN\n        val xNumeratorNXDenominatorXNDenominatorX\
    \ = xNumeratorNXDenominatorX * nDenominatorX\n        val nNumeratorXXDenominatorXNDenominatorX\
    \ = nNumeratorXXDenominatorX * nDenominatorX\n        val xNumeratorNXDenominatorXNDenominatorN\
    \ = xNumeratorNXDenominatorX * nDenominatorN\n        val nNumeratorXXDenominatorXNDenominatorN\
    \ = n", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n  \
    \      val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n\
    \        val gcd = BigInt(xn).gcd(BigInt(nx)).toInt\n        xn / gcd == nx /\
    \ gcd", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n  \
    \      val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n\
    \        xn % nx == 0", "        val (xn, xd) = (x.split(\"/\")(0).toInt, x.split(\"\
    /\")(1).toInt)\n        val (nn, nd) = (n.split(\"/\")(0).toInt, n.split(\"/\"\
    )(1).toInt)\n        val (xn2, xd2) = (xn * nd, xd * nn)\n        val (gcd, lcm)\
    \ = (gcd(xn2, xd2), lcm(xn2, xd2))\n        (xn2 / gcd) == (xd2 / gcd)", "   \
    \     val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator\
    \ = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * nnumerator\n        val denominator = xdenominator * ndenominator\n\
    \        val gcd = gcd(numerator, denominator)\n        val numerator2 = numerator\
    \ / gcd\n        val denominator2 = denominator / gcd\n        if (numerator2\
    \ % denominator2 == 0) true else false", "        val xs = x.split(\"/\")\n  \
    \      val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n \
    \       val nx = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val\
    \ xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator\
    \ = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * nnumerator\n        val denominator = xdenominator * ndenominator\n\
    \        val gcd = gcd(numerator, denominator)\n        val simplifiedNumerator\
    \ = numerator / gcd\n        val simplifiedDenominator = denominator / gcd\n \
    \       if (simplifiedNumerator % simplifiedDenominator == 0) true else false",
  "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator\
    \ = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val xnumerator2\
    \ = xnumerator * ndenominator\n        val xdenominator2 = xdenominator * nnumerator\n\
    \        val gcd = gcd2(xnumerator2, xdenominator2)\n        val xnumerator3 =\
    \ xnumerator2 / gcd\n        val xdenominator3 = xdenominator2 / gcd\n       \
    \ if (xdenominator3 == 1) true else false", "        val xs = x.split(\"/\")\n\
    \        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        val gcd = gcd(xn, nx)\n \
    \       (xn / gcd) % (nx / gcd) == 0", "        val xArray = x.split(\"/\")\n\
    \        val nArray = n.split(\"/\")\n        val xNumerator = xArray(0).toInt\n\
    \        val xDenominator = xArray(1).toInt\n        val nNumerator = nArray(0).toInt\n\
    \        val nDenominator = nArray(1).toInt\n        val xFraction = xNumerator.toDouble\
    \ / xDenominator.toDouble\n        val nFraction = nNumerator.toDouble / nDenominator.toDouble\n\
    \        val result = xFraction * nFraction\n        result % 1 == 0", "     \
    \   val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn =\
    \ xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n    \
    \    val gcd = gcd(xn, nx)\n        val xn2 = xn / gcd\n        val nx2 = nx /\
    \ gcd\n        xn2 == nx2", "        val x_num = x.split(\"/\")(0).toInt\n   \
    \     val x_den = x.split(\"/\")(1).toInt\n        val n_num = n.split(\"/\")(0).toInt\n\
    \        val n_den = n.split(\"/\")(1).toInt\n        val num = x_num * n_num\n\
    \        val den = x_den * n_den\n        val gcd = BigInt(num).gcd(BigInt(den)).toInt\n\
    \        num / gcd == den / gcd", "        val xn = x.split(\"/\")\n        val\
    \ nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n        val xdenominator\
    \ = xn(1).toInt\n        val nnumerator = nn(0).toInt\n        val ndenominator\
    \ = nn(1).toInt\n        val numerator = xnumerator * nnumerator\n        val\
    \ denominator = xdenominator * ndenominator\n        val gcd = gcd(numerator,\
    \ denominator)\n        numerator / gcd == denominator / gcd", "        val (xn,\
    \ xd) = (x.split(\"/\")(0).toInt, x.split(\"/\")(1).toInt)\n        val (nn, nd)\
    \ = (n.split(\"/\")(0).toInt, n.split(\"/\")(1).toInt)\n        val (xn2, xd2)\
    \ = (xn * nd, xd * nn)\n        val (xn3, xd3) = (xn2 / gcd(xn2, xd2), xd2 / gcd(xn2,\
    \ xd2))\n        xn3 % xd3 == 0", "        val xs = x.split(\"/\")\n        val\
    \ ns = n.split(\"/\")\n        val xn = xs(0).toLong * ns(1).toLong\n        val\
    \ xd = xs(1).toLong * ns(0).toLong\n        val gcd = BigInt(xn).gcd(BigInt(xd)).toLong\n\
    \        xn / gcd == xd / gcd", "        val xs = x.split(\"/\")\n        val\
    \ ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val\
    \ nx = ns(0).toInt * xs(1).toInt\n        if (xn % nx == 0) true else false",
  "        val (xn, xd) = (x.split(\"/\")(0).toInt, x.split(\"/\")(1).toInt)\n   \
    \     val (nn, nd) = (n.split(\"/\")(0).toInt, n.split(\"/\")(1).toInt)\n    \
    \    val (gcd, lcm) = (gcd(xd, nd), lcm(xd, nd))\n        val (xn2, nn2) = (xn\
    \ * (lcm / xd), nn * (lcm / nd))\n        (xn2 * nn2) % lcm == 0", "        val\
    \ xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toLong\
    \ * ns(1).toLong\n        val nx = ns(0).toLong * xs(1).toLong\n        xn % nx\
    \ == 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n \
    \       val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n\
    \        val gcd = gcd(xn, nx)\n        xn / gcd == nx / gcd", "        val xs\
    \ = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx ==\
    \ 0", "        val x_num = x.split(\"/\")(0).toInt\n        val x_den = x.split(\"\
    /\")(1).toInt\n        val n_num = n.split(\"/\")(0).toInt\n        val n_den\
    \ = n.split(\"/\")(1).toInt\n        val num = x_num * n_num\n        val den\
    \ = x_den * n_den\n        val gcd = BigInt(num).gcd(BigInt(den)).toInt\n    \
    \    val num_simplified = num / gcd\n        val den_simplified = den / gcd\n\
    \        num_simplified % den_simplified == 0", "        val xn = x.split(\"/\"\
    )\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n   \
    \     val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n \
    \       val ndenominator = nn(1).toInt\n        val numerator = xnumerator * nnumerator\n\
    \        val denominator = xdenominator * ndenominator\n        val gcd = BigInt(numerator).gcd(denominator)\n\
    \        val simplifiedNumerator = numerator / gcd.toInt\n        val simplifiedDenominator\
    \ = denominator / gcd.toInt\n        if (simplifiedDenominator == 1) true else\
    \ false", "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n\
    \        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = BigInt(numerator).gcd(denominator)\n     \
    \   val numerator2 = numerator / gcd.toInt\n        val denominator2 = denominator\
    \ / gcd.toInt\n        if (denominator2 == 1) true else false", "        val xn\
    \ = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator =\
    \ xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * nnumerator\n        val denominator = xdenominator * ndenominator\n\
    \        val gcd = BigInt(numerator).gcd(denominator)\n        val numerator2\
    \ = numerator / gcd.toInt\n        val denominator2 = denominator / gcd.toInt\n\
    \        if (numerator2 % denominator2 == 0) true else false", "        val xn\
    \ = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator =\
    \ xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * nnumerator\n        val denominator = xdenominator * ndenominator\n\
    \        val gcd = BigInt(numerator).gcd(denominator)\n        if (gcd == denominator)\
    \ true else false", "        val xn = x.split(\"/\")\n        val nn = n.split(\"\
    /\")\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = gcd(numerator, denominator)\n        numerator\
    \ / gcd == denominator / gcd", "        val xs = x.split(\"/\")\n        val ns\
    \ = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val nx\
    \ = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val xs = x.split(\"\
    /\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val\
    \ (xn, xd) = (x.split(\"/\")(0).toInt, x.split(\"/\")(1).toInt)\n        val (nn,\
    \ nd) = (n.split(\"/\")(0).toInt, n.split(\"/\")(1).toInt)\n        val (gcd,\
    \ lcm) = (gcd(xd, nd), lcm(xd, nd))\n        val (xn2, nn2) = (xn * (lcm / xd),\
    \ nn * (lcm / nd))\n        val (xn3, nn3) = (xn2 * nn2, lcm)\n        val (gcd2,\
    \ lcm2) = (gcd(xn3, nn3), lcm(xn3, nn3))\n        val (xn4, nn4) = (xn3 / gcd2,\
    \ nn3 / gcd2)\n        xn4 == nn4", "        val x_num = x.split(\"/\")(0).toInt\n\
    \        val x_den = x.split(\"/\")(1).toInt\n        val n_num = n.split(\"/\"\
    )(0).toInt\n        val n_den = n.split(\"/\")(1).toInt\n        val num = x_num\
    \ * n_num\n        val den = x_den * n_den\n        val gcd = gcd_euclid(num,\
    \ den)\n        val num_simplified = num / gcd\n        val den_simplified = den\
    \ / gcd\n        if (num_simplified % den_simplified == 0) true else false", " \
    \       val xarr = x.split(\"/\")\n        val narr = n.split(\"/\")\n       \
    \ val xn = xarr(0).toInt * narr(1).toInt\n        val xd = xarr(1).toInt * narr(0).toInt\n\
    \        val gcd = BigInt(xn).gcd(BigInt(xd)).toInt\n        val xn2 = xn / gcd\n\
    \        val xd2 = xd / gcd\n        xn2 % xd2 == 0", "        val xn = x.split(\"\
    /\")\n        val nn = n.split(\"/\")\n        val xnumerator = BigInt(xn(0))\n\
    \        val xdenominator = BigInt(xn(1))\n        val nnumerator = BigInt(nn(0))\n\
    \        val ndenominator = BigInt(nn(1))\n        val numerator = xnumerator\
    \ * nnumerator\n        val denominator = xdenominator * ndenominator\n      \
    \  val gcd = numerator.gcd(denominator)\n        val simplified = (numerator /\
    \ gcd, denominator / gcd)\n        simplified._1 % simplified._2 == 0", "    \
    \    val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn\
    \ = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n  \
    \      xn == nx", "        val xn = x.split(\"/\")\n        val nn = n.split(\"\
    /\")\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val product = xnumerator * nnumerator\n        val productdenominator\
    \ = xdenominator * ndenominator\n        if (product % productdenominator == 0)\
    \ true else false", "        val xs = x.split(\"/\")\n        val xn = xs(0).toInt\n\
    \        val xd = xs(1).toInt\n        val ns = n.split(\"/\")\n        val nn\
    \ = ns(0).toInt\n        val nd = ns(1).toInt\n        val rn = xn * nn\n    \
    \    val rd = xd * nd\n        val gcd = BigInt(rn).gcd(rd)\n        rn / gcd\
    \ == rd", "        val (xn, xd) = x.split(\"/\").map(_.toInt)\n        val (nn,\
    \ nd) = n.split(\"/\").map(_.toInt)\n        val (numerator, denominator) = (xn\
    \ * nn, xd * nd)\n        val gcd = BigInt(numerator).gcd(denominator).toInt\n\
    \        val (numerator2, denominator2) = (numerator / gcd, denominator / gcd)\n\
    \        numerator2 % denominator2 == 0", "        val xs = x.split(\"/\")\n \
    \       val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        val gcd = gcd(xn, nx)\n \
    \       val xn2 = xn / gcd\n        val nx2 = nx / gcd\n        xn2 == nx2", " \
    \       val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val\
    \ xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n\
    \        val gcd = gcd(xn, nx)\n        val xn2 = xn / gcd\n        val nx2 =\
    \ nx / gcd\n        xn2 == nx2", "        val x_ = x.split(\"/\")\n        val\
    \ n_ = n.split(\"/\")\n        val x_numerator = x_(0).toInt\n        val x_denominator\
    \ = x_(1).toInt\n        val n_numerator = n_(0).toInt\n        val n_denominator\
    \ = n_(1).toInt\n        val numerator = x_numerator * n_numerator\n        val\
    \ denominator = x_denominator * n_denominator\n        val gcd = gcd_iter(numerator,\
    \ denominator)\n        numerator / gcd == denominator / gcd", "        val x_numerator\
    \ = x.split(\"/\")(0).toInt\n        val x_denominator = x.split(\"/\")(1).toInt\n\
    \        val n_numerator = n.split(\"/\")(0).toInt\n        val n_denominator\
    \ = n.split(\"/\")(1).toInt\n        val numerator = x_numerator * n_numerator\n\
    \        val denominator = x_denominator * n_denominator\n        if (numerator\
    \ % denominator == 0) true else false", "        val xs = x.split(\"/\")\n   \
    \     val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n  \
    \      val nx = ns(0).toInt * xs(1).toInt\n        xn % nx == 0"]
stop_tokens:
- "\n    }\n"
