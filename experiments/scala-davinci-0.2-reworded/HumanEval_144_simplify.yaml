name: HumanEval_144_simplify
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Your task is to implement a function that will simplify the expression\n\
  \    // x * n. The function returns true if x * n evaluates to a whole number and\
  \ false\n    // otherwise. Both x and n, are string representation of a fraction,\
  \ and have the following format,\n    // <numerator>/<denominator> where both numerator\
  \ and denominator are positive whole numbers.\n    // You can assume that x, and\
  \ n are valid fractions, and do not have zero as denominator.\n    // >>> simplify((\"\
  1/5\"), (\"5/1\"))\n    // (true)\n    // >>> simplify((\"1/6\"), (\"2/1\"))\n \
  \   // (false)\n    // >>> simplify((\"7/10\"), (\"10/2\"))\n    // (false)\n  \
  \  def simplify(x : String, n : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(simplify((\"1/5\"\
  ), (\"5/1\")) == (true));\n    assert(simplify((\"1/6\"), (\"2/1\")) == (false));\n\
  \    assert(simplify((\"5/1\"), (\"3/1\")) == (true));\n    assert(simplify((\"\
  7/10\"), (\"10/2\")) == (false));\n    assert(simplify((\"2/10\"), (\"50/10\"))\
  \ == (true));\n    assert(simplify((\"7/2\"), (\"4/2\")) == (true));\n    assert(simplify((\"\
  11/6\"), (\"6/1\")) == (true));\n    assert(simplify((\"2/3\"), (\"5/2\")) == (false));\n\
  \    assert(simplify((\"5/2\"), (\"3/5\")) == (false));\n    assert(simplify((\"\
  2/4\"), (\"8/4\")) == (true));\n    assert(simplify((\"2/4\"), (\"4/2\")) == (true));\n\
  \    assert(simplify((\"1/5\"), (\"5/1\")) == (true));\n    assert(simplify((\"\
  1/5\"), (\"1/5\")) == (false));\n    }\n\n}\n"
completions: ["        val (xn, xd) = x.split(\"/\").map(_.toInt)\n        val (nn,\
    \ nd) = n.split(\"/\").map(_.toInt)\n        val (numerator, denominator) = (xn\
    \ * nn, xd * nd)\n        val gcd = BigInt(numerator).gcd(denominator).toInt\n\
    \        (numerator / gcd) % (denominator / gcd) == 0", "        val xn = x.split(\"\
    /\")\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n\
    \        val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n\
    \        val ndenominator = nn(1).toInt\n        val numerator = xnumerator *\
    \ nnumerator\n        val denominator = xdenominator * ndenominator\n        val\
    \ gcd = gcd(numerator, denominator)\n        val newnumerator = numerator / gcd\n\
    \        val newdenominator = denominator / gcd\n        newnumerator % newdenominator\
    \ == 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n \
    \       val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n\
    \        if (xn % nx == 0) true else false", "        val xs = x.split(\"/\")\n\
    \        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val\
    \ xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx ==\
    \ 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n    \
    \    val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n\
    \        xn % nx == 0", "        val xn = x.split(\"/\")\n        val nn = n.split(\"\
    /\")\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val xnumerator2 = xnumerator * ndenominator\n        val xdenominator2\
    \ = xdenominator * nnumerator\n        val gcd = gcd2(xnumerator2, xdenominator2)\n\
    \        val xnumerator3 = xnumerator2 / gcd\n        val xdenominator3 = xdenominator2\
    \ / gcd\n        if (xdenominator3 == 1) true else false", "        val xn = x.split(\"\
    /\")\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n\
    \        val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n\
    \        val ndenominator = nn(1).toInt\n        val numerator = xnumerator *\
    \ nnumerator\n        val denominator = xdenominator * ndenominator\n        val\
    \ gcd = gcd(numerator, denominator)\n        val simplifiedNumerator = numerator\
    \ / gcd\n        val simplifiedDenominator = denominator / gcd\n        if (simplifiedNumerator\
    \ % simplifiedDenominator == 0) true else false", "        val x_ = x.split(\"\
    /\")\n        val n_ = n.split(\"/\")\n        val x_n = (x_(0).toInt * n_(1).toInt,\
    \ x_(1).toInt * n_(0).toInt)\n        val gcd = gcd(x_n._1, x_n._2)\n        val\
    \ x_n_ = (x_n._1 / gcd, x_n._2 / gcd)\n        x_n_._1 % x_n_._2 == 0", "    \
    \    val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn\
    \ = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n  \
    \      if (xn % nx == 0) true else false", "        val xs = x.split(\"/\")\n\
    \        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        val gcd = gcd(xn, nx)\n \
    \       xn / gcd == nx / gcd", "        val xn = x.split(\"/\")\n        val nn\
    \ = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n        val xdenominator\
    \ = xn(1).toInt\n        val nnumerator = nn(0).toInt\n        val ndenominator\
    \ = nn(1).toInt\n        val numerator = xnumerator * nnumerator\n        val\
    \ denominator = xdenominator * ndenominator\n        val gcd = gcd(numerator,\
    \ denominator)\n        val numerator2 = numerator / gcd\n        val denominator2\
    \ = denominator / gcd\n        numerator2 % denominator2 == 0", "        val xs\
    \ = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n        xn == nx",
  "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn\
    \ = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n  \
    \      xn % nx == 0", "        val (xn, xd) = x.split(\"/\").map(_.toInt)\n  \
    \      val (nn, nd) = n.split(\"/\").map(_.toInt)\n        val (numerator, denominator)\
    \ = (xn * nn, xd * nd)\n        val gcd = BigInt(numerator).gcd(denominator).toInt\n\
    \        val (numerator2, denominator2) = (numerator / gcd, denominator / gcd)\n\
    \        denominator2 % numerator2 == 0", "        val xs = x.split(\"/\")\n \
    \       val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val\
    \ (xn, xd) = (x.split(\"/\")(0).toInt, x.split(\"/\")(1).toInt)\n        val (nn,\
    \ nd) = (n.split(\"/\")(0).toInt, n.split(\"/\")(1).toInt)\n        val (xn2,\
    \ xd2) = (xn * nd, xd * nn)\n        val (xn3, xd3) = (xn2 / gcd(xn2, xd2), xd2\
    \ / gcd(xn2, xd2))\n        xn3 % xd3 == 0", "        val xs = x.split(\"/\")\n\
    \        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        if (xn % nx == 0) true else\
    \ false", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n\
    \        val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n\
    \        val gcd = gcd(xn, nx)\n        xn / gcd == nx / gcd", "        val x_split\
    \ = x.split(\"/\")\n        val n_split = n.split(\"/\")\n        val x_num =\
    \ x_split(0).toInt\n        val x_den = x_split(1).toInt\n        val n_num =\
    \ n_split(0).toInt\n        val n_den = n_split(1).toInt\n        val num = x_num\
    \ * n_num\n        val den = x_den * n_den\n        val gcd = gcd(num, den)\n\
    \        val num_simplified = num / gcd\n        val den_simplified = den / gcd\n\
    \        if (num_simplified % den_simplified == 0) true else false"]
stop_tokens:
- "\n    }\n"
