name: HumanEval_36_fizz_buzz
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return the number of times the digit 7 appears in integers less than n which\
  \ are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n    // >>>\
  \ fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n    def\
  \ fizzBuzz(n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) ==\
  \ (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
  \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
  \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
  \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
completions: ["        var count = 0l\n        for (i <- 1l to n - 1) {\n        \
    \    if (i % 11 == 0 || i % 13 == 0) {\n                var temp = i\n       \
    \         while (temp > 0) {\n                    if (temp % 10 == 7) count +=\
    \ 1\n                    temp /= 10\n                }\n            }\n      \
    \  }\n        return count", "        val n1 = n / 11\n        val n2 = n / 13\n\
    \        val n3 = n / (11 * 13)\n        val d1 = n1 * 2\n        val d2 = n2\
    \ * 2\n        val d3 = n3 * 2\n        val d4 = n1 * n2 - n3\n        val d5\
    \ = n1 * n2\n        val d6 = n1 * n2 + n3\n        val d7 = n1 * n2 + n3 * 2\n\
    \        val d8 = n1 * n2 + n3 * 3\n        val d9 = n1 * n2 + n3 * 4\n      \
    \  val d10 = n1 * n2 + n3 * 5\n        val d11 = n1 * n2 + n3 * 6\n        val\
    \ d12 = n1 * n2 + n3 * 7\n        val d13 = n1 * n2 + n3 * 8\n        val d14\
    \ = n1 * n2 + n3 * 9\n        val d15 = n1 * n2 + n3 * 10\n        val d16 = n1\
    \ * n2 + n3 * 11\n        val d17 = n1 * n2 + n3 * 12\n        val d18 = n1 *\
    \ n2 + n3 * 13\n        val d19 = n1 * n2 + n3 * 14\n        val d20 = n1 * n2\
    \ + n3 * 15\n        val d21 = n1 * n2 + n3 * 16\n        val d22 = n1 * n2 +\
    \ n3 * 17\n        val d23 = n1 * n2 + n3 * 18\n        val d24 = n1 * n2 + n3\
    \ * 19\n        val d25 = n1 * n2 + n3 * 20\n        val d26 = n1 * n2 + n3 *\
    \ 21\n        val d27 = n1 * n2 + n3 * 22\n        val d28 = n1 * n2 + n3 * 23\n\
    \        val d29 = n1 * n2 + n3 * 24\n        val d30 = n1 * n2 + n3 * 25\n  \
    \      val d31 = n1 * n2 + n3 * 26\n        val d32 = n1 * n2 +", "        var\
    \ count = 0l\n        for (i <- 1l to n - 1) {\n            if (i % 11 == 0 ||\
    \ i % 13 == 0) {\n                var j = i\n                while (j > 0) {\n\
    \                    if (j % 10 == 7) count += 1\n                    j /= 10\n\
    \                }\n            }\n        }\n        count", "        var count\
    \ = 0l\n        for (i <- 1l to n - 1) {\n            if (i % 11 == 0 || i % 13\
    \ == 0) {\n                var j = i\n                while (j > 0) {\n      \
    \              if (j % 10 == 7) count += 1\n                    j /= 10\n    \
    \            }\n            }\n        }\n        count", "        var count =\
    \ 0l\n        for (i <- 1l to n - 1) {\n            if (i % 11 == 0 || i % 13\
    \ == 0) {\n                var j = i\n                while (j > 0) {\n      \
    \              if (j % 10 == 7) count += 1\n                    j /= 10\n    \
    \            }\n            }\n        }\n        count", "        var count =\
    \ 0l\n        for (i <- 1l to n - 1) {\n            if (i % 11 == 0 || i % 13\
    \ == 0) {\n                var j = i\n                while (j > 0) {\n      \
    \              if (j % 10 == 7) count += 1\n                    j /= 10\n    \
    \            }\n            }\n        }\n        count", "        var count =\
    \ 0l\n        for (i <- 1l to n) {\n            if (i % 11 == 0 || i % 13 == 0)\
    \ {\n                var j = i\n                while (j > 0) {\n            \
    \        if (j % 10 == 7) count += 1\n                    j /= 10\n          \
    \      }\n            }\n        }\n        return count", "        var count\
    \ = 0l\n        for (i <- 1l to n - 1) {\n            if (i % 11 == 0 || i % 13\
    \ == 0) {\n                count += i.toString.count(_ == '7')\n            }\n\
    \        }\n        return count", "        def f(n : Long, acc : Long) : Long\
    \ = {\n            if (n == 0) acc\n            else {\n                val s\
    \ = n.toString\n                if (s.contains('7')) f(n - 1, acc + 1)\n     \
    \           else f(n - 1, acc)\n            }\n        }\n        f(n - 1, 0)",
  "        var count = 0l\n        for (i <- 1l to n - 1) {\n            if (i % 11\
    \ == 0 || i % 13 == 0) {\n                var s = i.toString\n               \
    \ for (c <- s) {\n                    if (c == '7') count += 1\n             \
    \   }\n            }\n        }\n        return count", "        var count = 0l\n\
    \        for (i <- 1l to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                val s = i.toString\n                for (c <- s) {\n        \
    \            if (c == '7') count += 1\n                }\n            }\n    \
    \    }\n        count", "        var count = 0l\n        for (i <- 1l to n - 1)\
    \ {\n            if (i % 11 == 0 || i % 13 == 0) {\n                var j = i\n\
    \                while (j > 0) {\n                    if (j % 10 == 7) count +=\
    \ 1\n                    j /= 10\n                }\n            }\n        }\n\
    \        count", "        var count = 0l\n        for (i <- 1l to n) {\n     \
    \       if (i % 11 == 0 || i % 13 == 0) {\n                count += i.toString.count(_\
    \ == '7')\n            }\n        }\n        return count", "        var count\
    \ = 0l\n        for (i <- 1l to n) {\n            if (i % 11 == 0 || i % 13 ==\
    \ 0) {\n                var num = i\n                while (num > 0) {\n     \
    \               if (num % 10 == 7) count += 1\n                    num /= 10\n\
    \                }\n            }\n        }\n        return count", "       \
    \ var count = 0l\n        for (i <- 1l to n) {\n            if (i % 11 == 0 ||\
    \ i % 13 == 0) {\n                var temp = i\n                while (temp >\
    \ 0) {\n                    if (temp % 10 == 7) count += 1\n                 \
    \   temp /= 10\n                }\n            }\n        }\n        return count",
  "        var count = 0l\n        for (i <- 1 to n.toInt) {\n            if (i %\
    \ 11 == 0 || i % 13 == 0) {\n                count += i.toString.count(_ == '7')\n\
    \            }\n        }\n        return count", "        var count = 0l\n  \
    \      for (i <- 1l to n - 1) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                var num = i\n                while (num > 0) {\n            \
    \        if (num % 10 == 7) count += 1\n                    num /= 10\n      \
    \          }\n            }\n        }\n        return count", "        var count\
    \ = 0l\n        for (i <- 1l to n) {\n            if (i % 11 == 0 || i % 13 ==\
    \ 0) {\n                val s = i.toString\n                for (c <- s) {\n \
    \                   if (c == '7') count += 1\n                }\n            }\n\
    \        }\n        count", "        var count = 0l\n        for (i <- 1l to n\
    \ - 1) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                var j\
    \ = i\n                while (j > 0) {\n                    if (j % 10 == 7) count\
    \ += 1\n                    j /= 10\n                }\n            }\n      \
    \  }\n        count", "        var count = 0l\n        for (i <- 1l to n - 1)\
    \ {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count += i.toString.count(_\
    \ == '7')\n            }\n        }\n        return count"]
stop_tokens:
- "\n    }\n"
