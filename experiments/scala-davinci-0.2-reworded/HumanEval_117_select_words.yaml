name: HumanEval_117_select_words
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string s and a natural number n, you have been tasked to implement\
  \ \n    // a function that returns a list of all words from string s that contain\
  \ exactly \n    // n consonants, in order these words appear in the string s.\n\
  \    // If the string s is empty then the function should return an empty list.\n\
  \    // Note: you may assume the input string contains only letters and spaces.\n\
  \    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n\
  \    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little\
  \ lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"\
  simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"\
  Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"\
  Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s : String,\
  \ n : Long) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(selectWords((\"Mary\
  \ had a little lamb\"), (4l)).equals((List[String](\"little\"))));\n    assert(selectWords((\"\
  Mary had a little lamb\"), (3l)).equals((List[String](\"Mary\", \"lamb\"))));\n\
  \    assert(selectWords((\"simple white space\"), (2l)).equals((List[String]())));\n\
  \    assert(selectWords((\"Hello world\"), (4l)).equals((List[String](\"world\"\
  ))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((List[String](\"Uncle\"\
  ))));\n    assert(selectWords((\"\"), (4l)).equals((List[String]())));\n    assert(selectWords((\"\
  a b c d e f\"), (1l)).equals((List[String](\"b\", \"c\", \"d\", \"f\"))));\n   \
  \ }\n\n}\n"
completions: ["        // Your code here\n        var words = s.split(\" \")\n   \
    \     var result = List[String]()\n        for (word <- words) {\n           \
    \ var count = 0\n            for (c <- word) {\n                if (c != 'a' &&\
    \ c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                    count +=\
    \ 1\n                }\n            }\n            if (count == n) {\n       \
    \         result = word :: result\n            }\n        }\n        result",
  "        // Your code here\n        return null;", "        // Write your code here\n\
    \        return List[String]()", "        // This is a stub. Please replace this\
    \ line with your implementation.\n        List[String]()", "        // Fill in\
    \ the implementation here\n        return List[String]()", "        // your code\
    \ here\n        null", "        // your code here\n        null", "        //\
    \ Fill in the implementation here\n        return List[String]()", "        //\
    \ Your code here\n        null", "        // Write your code here\n        null",
  "        // Write your code here\n        var words = s.split(\" \")\n        var\
    \ result = List[String]()\n        for (word <- words) {\n            var count\
    \ = 0\n            for (c <- word) {\n                if (c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u') count += 1\n            }\n           \
    \ if (count == n) result = word :: result\n        }\n        result", "     \
    \   // Your code here\n        null", "        // This is the solution code.\n\
    \        // It may be possible to refactor this code to be shorter.\n        //\
    \ Please feel free to do so.\n        var words = s.split(\" \")\n        var\
    \ result = List[String]()\n        for (word <- words) {\n            var count\
    \ = 0\n            for (char <- word) {\n                if (char != 'a' && char\
    \ != 'e' && char != 'i' && char != 'o' && char != 'u') {\n                   \
    \ count += 1\n                }\n            }\n            if (count == n) {\n\
    \                result = result :+ word\n            }\n        }\n        return\
    \ result", "        // Write your code here\n        return List[String]()", " \
    \       // Fill in the code here\n        var result = List[String]()\n      \
    \  var words = s.split(\" \")\n        for (word <- words) {\n            var\
    \ count = 0\n            for (c <- word) {\n                if (c != 'a' && c\
    \ != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                    count +=\
    \ 1\n                }\n            }\n            if (count == n) {\n       \
    \         result = result :+ word\n            }\n        }\n        result",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val words = s.split(\"\
    \ \")\n        var result = List[String]()\n        for (word <- words) {\n  \
    \          var count = 0\n            for (char <- word) {\n                if\
    \ (!vowels.contains(char)) count += 1\n            }\n            if (count ==\
    \ n) result = word :: result\n        }\n        result", "        // Fill in\
    \ the code here\n        var result = List[String]()\n        var words = s.split(\"\
    \ \")\n        for (word <- words) {\n            var count = 0\n            for\
    \ (char <- word) {\n                if (char != 'a' && char != 'e' && char !=\
    \ 'i' && char != 'o' && char != 'u') {\n                    count += 1\n     \
    \           }\n            }\n            if (count == n) {\n                result\
    \ = result :+ word\n            }\n        }\n        result", "        // your\
    \ code here\n        null", "        // Write your code here\n        s.split(\"\
    \ \").filter(x => x.count(y => y.isLetter && !y.isVowel) == n).toList", "    \
    \    // Implement this function\n        var result : List[String] = List()\n\
    \        var words : Array[String] = s.split(\" \")\n        for (word <- words)\
    \ {\n            if (word.count(c => c != 'a' && c != 'e' && c != 'i' && c !=\
    \ 'o' && c != 'u') == n) {\n                result = result :+ word\n        \
    \    }\n        }\n        return result", "        // Your code here\n      \
    \  null", "        // Write your code here\n        return List[String]()", " \
    \       // TODO: Implement this function\n        return List[String]()", "  \
    \      // Write your code here\n        return List[String]();", "        // Write\
    \ your code here\n        null", "        // Write your code here\n        val\
    \ vowels = List('a', 'e', 'i', 'o', 'u')\n        val words = s.split(\" \")\n\
    \        val result = new ListBuffer[String]\n        for (word <- words) {\n\
    \            var count = 0\n            for (c <- word) {\n                if\
    \ (!vowels.contains(c)) count += 1\n            }\n            if (count == n)\
    \ result += word\n        }\n        result.toList", "        // Fill in the code\
    \ here\n        var result = List[String]()\n        for (word <- s.split(\" \"\
    )) {\n            var count = 0\n            for (c <- word) {\n             \
    \   if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') count += 1\n\
    \            }\n            if (count == n) result = word :: result\n        }\n\
    \        result", "        // your code here\n        null", "        // Your\
    \ code here\n        null", "        // Write your code here\n        var result\
    \ = List[String]()\n        var words = s.split(\" \")\n        for (word <- words)\
    \ {\n            var count = 0\n            for (c <- word) {\n              \
    \  if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n         \
    \           count += 1\n                }\n            }\n            if (count\
    \ == n) {\n                result = result :+ word\n            }\n        }\n\
    \        return result", "        // your code here\n        null", "        //\
    \ Your code here\n        null", "        // Your code here\n        null", " \
    \       // your code here\n        null", "        // Write your code here\n \
    \       null", "        // Write your code here\n        return List[String]()",
  "        // Write your code here\n        return List[String]()", "        // Your\
    \ code here\n        null", "        // Your code here\n        null", "     \
    \   // Your code here\n        null", "        // This is a stub. Please replace\
    \ this implementation with your own.\n        List[String]()", "        // your\
    \ code here\n        null", "        // TODO: Implement me!\n        List[String]()",
  "        // Write your code here\n        val vowels = Set('a', 'e', 'i', 'o', 'u')\n\
    \        val words = s.split(\" \")\n        val result = new ListBuffer[String]\n\
    \        for (word <- words) {\n            var count = 0\n            for (c\
    \ <- word) {\n                if (!vowels.contains(c)) count += 1\n          \
    \  }\n            if (count == n) result += word\n        }\n        result.toList",
  "        // Fill in the code here\n        var result = List[String]()\n       \
    \ var words = s.split(\" \")\n        for (word <- words) {\n            if (word.count(c\
    \ => c.isLetter && !c.isVowel) == n) {\n                result = result :+ word\n\
    \            }\n        }\n        result", "        // Your code here\n     \
    \   null", "        // Fill in the code here\n        var l = List[String]()\n\
    \        var s1 = s.split(\" \")\n        for (i <- 0 until s1.length) {\n   \
    \         var count = 0\n            for (j <- 0 until s1(i).length) {\n     \
    \           if (s1(i)(j) != 'a' && s1(i)(j) != 'e' && s1(i)(j) != 'i' && s1(i)(j)\
    \ != 'o' && s1(i)(j) != 'u') count += 1\n            }\n            if (count\
    \ == n) l = l :+ s1(i)\n        }\n        l", "        // your code here\n  \
    \      null", "        // your code goes here\n        null", "        // Write\
    \ your code here\n        var result = List[String]()\n        for (word <- s.split(\"\
    \ \")) {\n            var count = 0\n            for (c <- word) {\n         \
    \       if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') count +=\
    \ 1\n            }\n            if (count == n) result = word :: result\n    \
    \    }\n        result", "        // Write your code here\n        return null;",
  "        // Your code here\n        null", "        // Your code here\n        return\
    \ null;", "        // Fill in the implementation here.\n        val vowels = List('a',\
    \ 'e', 'i', 'o', 'u')\n        val words = s.split(\" \")\n        val result\
    \ = new ListBuffer[String]\n        for (word <- words) {\n            var count\
    \ = 0\n            for (c <- word) {\n                if (!vowels.contains(c))\
    \ count += 1\n            }\n            if (count == n) result += word\n    \
    \    }\n        result.toList", "        // Your code here\n        null", " \
    \       // Write your code here\n        null", "        // your code here\n \
    \       return List[String]()", "        // Your code here\n        null", " \
    \       // Write your code here\n        null", "        // TODO: Implement this\
    \ function\n        return List[String]()", "        // Your code here\n     \
    \   null", "        // Write your code here\n        var words = s.split(\" \"\
    )\n        var result = List[String]()\n        for (word <- words) {\n      \
    \      if (consonants(word) == n) {\n                result = result :+ word\n\
    \            }\n        }\n        result", "        // Your code here\n     \
    \   null", "        // Your code here\n        null", "        // Write your code\
    \ here\n        null", "        // TODO: implement this function\n        return\
    \ List[String]()", "        // TODO: Implement this function\n        return List[String]()",
  "        // TODO: Implement this function\n        return List[String]()", "   \
    \     // Write your code here\n        return List[String]()", "        // your\
    \ code goes here\n        var result = List[String]()\n        var words = s.split(\"\
    \ \")\n        for (word <- words) {\n            if (word.filter(c => c != 'a'\
    \ && c != 'e' && c != 'i' && c != 'o' && c != 'u').length == n) {\n          \
    \      result = result :+ word\n            }\n        }\n        result", " \
    \       // Your code here\n        null", "        // Your code here\n       \
    \ return null;", "        // Your code here\n        null", '        // Your code
    here', "        // Write your code here\n        return List[String]()", "   \
    \     // Your code here\n        return List[String]()", "        // This is a\
    \ stub. Please replace it with your implementation.\n        List[String]()",
  "        // Write your code here\n        var result = List[String]()\n        var\
    \ words = s.split(\" \")\n        for (word <- words) {\n            var count\
    \ = 0\n            for (c <- word) {\n                if (c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u') {\n                    count += 1\n   \
    \             }\n            }\n            if (count == n) {\n              \
    \  result = result :+ word\n            }\n        }\n        return result",
  "        // Fill in the code here\n        return List[String]()", "        // Write\
    \ your code here\n        null", "        // Your code here\n        null", " \
    \       // your code here\n        List[String]()", "        // Write your code\
    \ here\n        // Return List[String]()\n        List[String]()", "        //\
    \ your code here\n        null", '        // Your code here', "        // your\
    \ code here\n        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val words\
    \ = s.split(\" \")\n        val result = new ListBuffer[String]\n        for (word\
    \ <- words) {\n            var count = 0\n            for (c <- word) {\n    \
    \            if (!vowels.contains(c)) count += 1\n            }\n            if\
    \ (count == n) result += word\n        }\n        result.toList", "        //\
    \ TODO: Implement me\n        List[String]()", "        // Your code here\n  \
    \      null", "        // Write your code here\n        return null;", "     \
    \   // your code here\n        null", "        // Your code here\n        null",
  "        // Your code here\n        return null;", "        // Fill in the code\
    \ here\n        var result = List[String]()\n        var words = s.split(\" \"\
    )\n        for (word <- words) {\n            var count = 0\n            for (c\
    \ <- word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o'\
    \ && c != 'u') {\n                    count += 1\n                }\n        \
    \    }\n            if (count == n) {\n                result = result :+ word\n\
    \            }\n        }\n        result", "        val words = s.split(\" \"\
    )\n        val result = new ListBuffer[String]\n        for (word <- words) {\n\
    \            if (word.length() - word.replaceAll(\"[aeiou]\", \"\").length() ==\
    \ n) {\n                result += word\n            }\n        }\n        result.toList",
  "        // Your code here\n        null", "        // your code here\n        null",
  "        // Your code here\n        null", "        // Write your code here\n  \
    \      return List[String]()", "        // Your code here\n        null", "  \
    \      // Write your code here\n        null", "        // Your code here\n  \
    \      null", "        // Your code here\n        null", "        // your code\
    \ here\n        null", "        // Your code here\n        null", "        //\
    \ Write your code here\n        var words = s.split(\" \")\n        var result\
    \ = List[String]()\n        for (word <- words) {\n            if (word.filter(x\
    \ => x.isLetter && !x.isVowel).length == n) {\n                result = result\
    \ :+ word\n            }\n        }\n        result", "        // Fill in the\
    \ code here\n        var words = s.split(\" \")\n        var result = List[String]()\n\
    \        for (word <- words) {\n            var count = 0\n            for (c\
    \ <- word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o'\
    \ && c != 'u') {\n                    count += 1\n                }\n        \
    \    }\n            if (count == n) {\n                result = word :: result\n\
    \            }\n        }\n        result", "        // Write your code here\n\
    \        var result = List[String]()\n        var words = s.split(\" \")\n   \
    \     for (word <- words) {\n            var count = 0\n            for (c <-\
    \ word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' &&\
    \ c != 'u') count += 1\n            }\n            if (count == n) result = result\
    \ :+ word\n        }\n        result", "        // Write your code here\n    \
    \    return List[String]()", "        // Write your code here\n        val vowels\
    \ = Set('a', 'e', 'i', 'o', 'u')\n        val words = s.split(\" \")\n       \
    \ val result = words.filter(w => w.filter(c => !vowels.contains(c)).length ==\
    \ n)\n        result.toList", "        // Write your code here\n        return\
    \ List[String]()", "        // Write your code here\n        return List[String]()",
  "        // Write your code here\n        return List[String]()", "        // Write\
    \ your code here\n        val words = s.split(\" \")\n        val result = new\
    \ ListBuffer[String]\n        for (word <- words) {\n            if (countConsonants(word)\
    \ == n) result += word\n        }\n        result.toList", "        // Fill in\
    \ the code here\n        var result = List[String]()\n        var words = s.split(\"\
    \ \")\n        for (word <- words) {\n            var count = 0\n            for\
    \ (char <- word) {\n                if (char != 'a' && char != 'e' && char !=\
    \ 'i' && char != 'o' && char != 'u') {\n                    count += 1\n     \
    \           }\n            }\n            if (count == n) {\n                result\
    \ = result :+ word\n            }\n        }\n        result", "        // TODO:\
    \ Implement this function\n        return List[String]()", "        // Fill in\
    \ the code here\n        var result = List[String]()\n        for (word <- s.split(\"\
    \ \")) {\n            var count = 0\n            for (c <- word) {\n         \
    \       if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n    \
    \                count += 1\n                }\n            }\n            if\
    \ (count == n) {\n                result = word :: result\n            }\n   \
    \     }\n        result", "        // Write your code here\n        var words\
    \ = s.split(\" \")\n        var result = List[String]()\n        for (word <-\
    \ words) {\n            if (word.count(c => c != 'a' && c != 'e' && c != 'i' &&\
    \ c != 'o' && c != 'u') == n) {\n                result = result :+ word\n   \
    \         }\n        }\n        return result", "        // Your code here\n \
    \       null", "        // Your code here\n        null", "        // Your code\
    \ here\n        null", "        // Fill in the code here\n        var result =\
    \ List[String]()\n        var words = s.split(\" \")\n        for (word <- words)\
    \ {\n            var count = 0\n            for (c <- word) {\n              \
    \  if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n         \
    \           count += 1\n                }\n            }\n            if (count\
    \ == n) {\n                result = result :+ word\n            }\n        }\n\
    \        result", "        // This will store the result\n        var result :\
    \ List[String] = Nil\n        // Write your code here\n        return result",
  "        // Fill in the implementation here.\n        // You may add additional\
    \ methods and classes as needed.\n        // Do not change the function signature.\n\
    \        var words = s.split(\" \")\n        var result = List[String]()\n   \
    \     for (word <- words) {\n            if (word.filter(x => x.toLower != 'a'\
    \ && x.toLower != 'e' && x.toLower != 'i' && x.toLower != 'o' && x.toLower !=\
    \ 'u').length == n) {\n                result = result :+ word\n            }\n\
    \        }\n        return result", "        // your code here\n        null",
  "        // your solution to Problem 1 here\n        val vowels = List('a', 'e',\
    \ 'i', 'o', 'u')\n        val words = s.split(\" \")\n        val result = new\
    \ ListBuffer[String]()\n        for (word <- words) {\n            var count =\
    \ 0\n            for (char <- word) {\n                if (!vowels.contains(char))\
    \ {\n                    count += 1\n                }\n            }\n      \
    \      if (count == n) {\n                result += word\n            }\n    \
    \    }\n        result.toList", '        // your code here', "        // Write\
    \ your code here\n        null", "        // Fill in the code here\n        var\
    \ words = s.split(\" \")\n        var list = List[String]()\n        for (word\
    \ <- words) {\n            if (word.count(x => x.isLetter && !x.isVowel) == n)\
    \ {\n                list = list :+ word\n            }\n        }\n        list",
  "        // Your code here\n        null", "        // Your code here\n        null",
  "        // TODO: Implement this function\n        return List[String]()", "   \
    \     // Your code here\n        return List[String]()", "        // your code\
    \ here\n        null", "        // Write your code here\n        return List[String]()",
  "        // Fill in the code here\n        var result = List[String]()\n       \
    \ val vowels = List('a', 'e', 'i', 'o', 'u')\n        val words = s.split(\" \"\
    )\n        for (word <- words) {\n            var count = 0\n            for (letter\
    \ <- word) {\n                if (!vowels.contains(letter)) {\n              \
    \      count += 1\n                }\n            }\n            if (count ==\
    \ n) {\n                result = result :+ word\n            }\n        }\n  \
    \      result", "        // Your code here\n        return null;", "        //\
    \ Write your code here\n        null", "        // your code here\n        null",
  "        // Your code here\n        return null;", "        // Your code here\n\
    \        null", "        // Your code here\n        null", "        // Your code\
    \ here\n        null", "        // Write your code here\n        null", "    \
    \    // Write your code here\n        // Return List[String]()\n        return\
    \ List[String]()", "        // Write your code here\n        return null;", " \
    \       // Write your code here\n        var result = List[String]()\n       \
    \ var words = s.split(\" \")\n        for (word <- words) {\n            var count\
    \ = 0\n            for (i <- 0 until word.length) {\n                if (word(i)\
    \ != 'a' && word(i) != 'e' && word(i) != 'i' && word(i) != 'o' && word(i) != 'u')\
    \ {\n                    count += 1\n                }\n            }\n      \
    \      if (count == n) {\n                result = result :+ word\n          \
    \  }\n        }\n        return result", "        // Fill in the code here\n \
    \       var result = List[String]()\n        var words = s.split(\" \")\n    \
    \    for (word <- words) {\n            var count = 0\n            for (c <- word)\
    \ {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c !=\
    \ 'u') {\n                    count += 1\n                }\n            }\n \
    \           if (count == n) {\n                result = result :+ word\n     \
    \       }\n        }\n        result", "        // Your code here\n        return\
    \ List[String]()", "        // Write your code here\n        val vowels = Set('a',\
    \ 'e', 'i', 'o', 'u')\n        val words = s.split(\" \")\n        val result\
    \ = new ListBuffer[String]\n        for (word <- words) {\n            var count\
    \ = 0\n            for (letter <- word) {\n                if (!vowels.contains(letter))\
    \ count += 1\n            }\n            if (count == n) result += word\n    \
    \    }\n        result.toList", "        // your code here\n        null", " \
    \       // Write your code here\n        return List[String]()", "        // Write\
    \ your code here\n        return List[String]()", "        // Fill in the code\
    \ here.\n        var words = s.split(\" \")\n        var result = List[String]()\n\
    \        for (word <- words) {\n            var count = 0\n            for (c\
    \ <- word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o'\
    \ && c != 'u') count += 1\n            }\n            if (count == n) result =\
    \ word :: result\n        }\n        result", "        // Write your code here\n\
    \        // Return List[String]()\n        List[String]()", "        // Fill in\
    \ the code here\n        return List[String]()", "        // your code here\n\
    \        null", "        // your code here\n        null", "        // Fill in\
    \ the code here\n        var words = s.split(\" \")\n        var result = List[String]()\n\
    \        for (word <- words) {\n            if (word.count(c => c.isLetter &&\
    \ !c.isVowel) == n) result = word :: result\n        }\n        result", "   \
    \     // Write your code here\n        val vowels = Set('a', 'e', 'i', 'o', 'u')\n\
    \        val words = s.split(\" \")\n        val result = words.filter(w => w.filter(c\
    \ => !vowels.contains(c)).length == n.toInt)\n        result.toList", "      \
    \  // Your code here\n        var l = s.split(\" \")\n        var result = List[String]()\n\
    \        for (i <- 0 until l.length) {\n            var count = 0\n          \
    \  for (j <- 0 until l(i).length) {\n                if (l(i)(j) != 'a' && l(i)(j)\
    \ != 'e' && l(i)(j) != 'i' && l(i)(j) != 'o' && l(i)(j) != 'u') {\n          \
    \          count += 1\n                }\n            }\n            if (count\
    \ == n) {\n                result = result :+ l(i)\n            }\n        }\n\
    \        return result", "        // Your code here\n        null", "        //\
    \ Write your code here\n        val vowels = Set('a', 'e', 'i', 'o', 'u')\n  \
    \      s.split(\" \").filter(x => x.count(y => !vowels.contains(y)) == n).toList",
  "        // TODO: Implement this function\n        null", "        // Write your\
    \ code here\n        return List[String]()", "        // Write your code here\n\
    \        // Return List[String]()\n        List[String]()", "        // your code\
    \ here\n        null", "        // Your code here\n        null", "        //\
    \ TODO: Implement me!\n        List[String]()", "        // This is a stub. Please\
    \ replace it with your implementation.\n        List[String]()", "        // Write\
    \ your code here\n        // Return List[String]()\n        List[String]()", " \
    \       // Fill in the code here\n        var lst = s.split(\" \").toList\n  \
    \      var result = List[String]()\n        for (i <- lst) {\n            var\
    \ count = 0\n            for (j <- i) {\n                if (j != 'a' && j !=\
    \ 'e' && j != 'i' && j != 'o' && j != 'u') count += 1\n            }\n       \
    \     if (count == n) result = i :: result\n        }\n        result", "    \
    \    // Write your code here\n        return List[String]()", "        // Your\
    \ code here\n        null", "        // Your code here\n        var result = List[String]()\n\
    \        var words = s.split(\" \")\n        for (word <- words) {\n         \
    \   var count = 0\n            for (c <- word) {\n                if (c != 'a'\
    \ && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                    count\
    \ += 1\n                }\n            }\n            if (count == n) {\n    \
    \            result = result :+ word\n            }\n        }\n        result",
  "        // Your code here\n        null", "        // Fill in the code here\n \
    \       val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val words = s.split(\"\
    \ \")\n        val result = new ListBuffer[String]\n        for (word <- words)\
    \ {\n            var count = 0\n            for (c <- word) {\n              \
    \  if (!vowels.contains(c)) count += 1\n            }\n            if (count ==\
    \ n) result += word\n        }\n        result.toList", "        // Write your\
    \ code here\n        null", "        // Fill in the code here\n        var result\
    \ = List[String]()\n        var words = s.split(\" \")\n        for (word <- words)\
    \ {\n            var count = 0\n            for (i <- 0 until word.length) {\n\
    \                if (word(i) != 'a' && word(i) != 'e' && word(i) != 'i' && word(i)\
    \ != 'o' && word(i) != 'u') count += 1\n            }\n            if (count ==\
    \ n) result = result :+ word\n        }\n        result", "        // Your code\
    \ here\n        null", "        // Your code here\n        null", "        //\
    \ Write your code here\n        // Return List[String]()\n        return List[String]()",
  "        // Write your code here\n        return List[String]()", "        // Write\
    \ your code here\n        var result = List[String]()\n        var words = s.split(\"\
    \ \")\n        for (word <- words) {\n            var consonants = 0\n       \
    \     for (c <- word) {\n                if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') consonants += 1\n            }\n            if (consonants\
    \ == n) result = result :+ word\n        }\n        return result", "        //\
    \ Fill in the code here\n        return List[String]()", "        // Write your\
    \ code here\n        null", "        // Your code here\n        return List[String]()",
  "        // your code here\n        null", "        // Write your code here\n  \
    \      // Return List[String]()\n        val vowels = Set('a', 'e', 'i', 'o',\
    \ 'u')\n        val words = s.split(\" \")\n        val result = new ListBuffer[String]\n\
    \        for (word <- words) {\n            var count = 0\n            for (c\
    \ <- word) {\n                if (!vowels.contains(c)) count += 1\n          \
    \  }\n            if (count == n) result += word\n        }\n        result.toList",
  "        // Fill in the code here\n        var words = s.split(\" \")\n        var\
    \ result = List[String]()\n        for (word <- words) {\n            if (word.filter(c\
    \ => c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u').length == n) {\n\
    \                result = result :+ word\n            }\n        }\n        result",
  "        // Write your code here\n        null", "        // Fill in the code here\n\
    \        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val words = s.split(\"\
    \ \")\n        val result = new ListBuffer[String]\n        for (word <- words)\
    \ {\n            var count = 0\n            for (c <- word) {\n              \
    \  if (!vowels.contains(c)) count += 1\n            }\n            if (count ==\
    \ n) result += word\n        }\n        result.toList", "        // Your code\
    \ here\n        null", "        // your code here\n        return List[String]()",
  "        // Write your code here\n        var result = List[String]()\n        var\
    \ words = s.split(\" \")\n        for (word <- words) {\n            var consonants\
    \ = 0\n            for (c <- word) {\n                if (c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u') consonants += 1\n            }\n      \
    \      if (consonants == n) result = result :+ word\n        }\n        return\
    \ result", "        // Write your code here\n        return List[String]()", " \
    \       // Fill in the code here\n        val vowels = List(\"a\", \"e\", \"i\"\
    , \"o\", \"u\")\n        val words = s.split(\" \")\n        val result = words.filter(x\
    \ => x.count(y => vowels.contains(y.toLowerCase)) == n)\n        result.toList",
  "        // Write your code here\n        return List[String]()", "        // your\
    \ code goes here\n        null", "        // TODO\n        List[String]()", " \
    \       // Write your code here\n        val vowels = Set('a', 'e', 'i', 'o',\
    \ 'u')\n        val words = s.split(\" \")\n        val result = words.filter(word\
    \ => word.count(vowels.contains(_)) == n)\n        result.toList"]
stop_tokens:
- "\n    }\n"
