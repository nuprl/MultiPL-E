name: HumanEval_74_total_match
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that accepts two lists of strings and returns the list\
  \ that has \n    // total number of chars in the all strings of the list less than\
  \ the other list.\n    // if the two lists have the same number of chars, return\
  \ the first list.\n    // Examples\n    // >>> totalMatch((List[String]()), (List[String]()))\n\
  \    // (List[String]())\n    // >>> totalMatch((List[String](\"hi\", \"admin\"\
  )), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\", \"Hi\"))\n   \
  \ // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\", \"\
  hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"))\n    //\
  \ >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"hi\"\
  , \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    // >>> totalMatch((List[String](\"\
  4\")), (List[String](\"1\", \"2\", \"3\", \"4\", \"5\")))\n    // (List[String](\"\
  4\"))\n    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
  \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
  hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\",\
  \ \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
  hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"))));\n\
  \    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\"\
  , \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
  hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\",\
  \ \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
  hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
  hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hii\"))).equals((List[String](\"\
  hi\", \"admin\"))));\n    assert(totalMatch((List[String]()), (List[String](\"this\"\
  ))).equals((List[String]())));\n    assert(totalMatch((List[String](\"this\")),\
  \ (List[String]())).equals((List[String]())));\n    }\n\n}\n"
completions: ["        // Fill Up this function body\n        // `lst1` and `lst2`\
    \ are lists of strings\n        // For example,\n        // lst1 = List(\"hi\"\
    , \"admin\")\n        // lst2 = List(\"hI\", \"Hi\")\n        // In this case,\n\
    \        // totalMatch(lst1, lst2) = List(\"hI\", \"Hi\")\n        // because\
    \ the total number of chars in lst2 is 5, which is less than 6 in lst1\n     \
    \   var total1 = 0\n        var total2 = 0\n        for (i <- lst1) {\n      \
    \      total1 += i.length\n        }\n        for (i <- lst2) {\n            total2\
    \ += i.length\n        }\n        if (total1 < total2) {\n            return lst1\n\
    \        } else if (total1 > total2) {\n            return lst2\n        } else\
    \ {\n            return lst1\n        }", "        var total1 = 0\n        var\
    \ total2 = 0\n        for (s <- lst1) total1 += s.length\n        for (s <- lst2)\
    \ total2 += s.length\n        if (total1 < total2) lst1 else lst2", "        //\
    \ Fill Up this function body\n        // `lst1` and `lst2` are lists of strings\n\
    \        // For example,\n        //     lst1 = List(\"hi\", \"admin\")\n    \
    \    //     lst2 = List(\"hI\", \"Hi\")\n        // You have to return a list\
    \ of strings\n        // For example,\n        //     return List(\"hI\", \"Hi\"\
    )\n        var sum1 = 0\n        var sum2 = 0\n        for (i <- lst1) {\n   \
    \         sum1 += i.length\n        }\n        for (i <- lst2) {\n           \
    \ sum2 += i.length\n        }\n        if (sum1 < sum2) {\n            return\
    \ lst1\n        } else if (sum1 > sum2) {\n            return lst2\n        }\
    \ else {\n            return lst1\n        }", "        // Fill Up this function\
    \ body\n        // `totalMatch` is a function that accepts two lists of strings\
    \ and returns the list that has \n        // total number of chars in the all\
    \ strings of the list less than the other list.\n        // if the two lists have\
    \ the same number of chars, return the first list.\n        // Examples\n    \
    \    // >>> totalMatch((List[String]()), (List[String]()))\n        // (List[String]())\n\
    \        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\")))\n \
    \       // (List[String](\"hi\", \"admin\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n        // (List[String](\"\
    hI\", \"hi\", \"hi\"))\n        // >>> totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n       \
    \ var count1 = 0\n        var count2 = 0\n        for (i <- lst1) {\n        \
    \    count1 += i.length\n        }\n        for (i <- lst2) {\n            count2\
    \ += i.length\n        }\n        if (count1 < count2) {\n            lst1\n \
    \       } else if (count1 > count2) {\n            lst2\n        } else {\n  \
    \          lst1\n        }", "        // Fill Up this function body\n        //\
    \ `lst1` and `lst2` are lists of strings\n        // For example,\n        //\
    \ >>> lst1\n        // List(\"hi\", \"admin\")\n        // >>> lst2\n        //\
    \ List(\"hI\", \"Hi\")\n        // You can access the length of a string using\
    \ `.length` method\n        // For example,\n        // >>> \"hi\".length\n  \
    \      // 2\n        // You can access the length of a list using `.length` method\n\
    \        // For example,\n        // >>> List(\"hi\", \"admin\").length\n    \
    \    // 2\n        // You can access the elements of a list using `(index)`\n\
    \        // For example,\n        // >>> List(\"hi\", \"admin\")(0)\n        //\
    \ \"hi\"\n        // >>> List(\"hi\", \"admin\")(1)\n        // \"admin\"\n  \
    \      // You can use `if` and `else`\n        // For example,\n        // >>>\
    \ if (true) {\n        // ...     println(\"Hello\")\n        // ... } else {\n\
    \        // ...     println(\"Bye\")\n        // ... }\n        // Hello\n   \
    \     // You can use `for` loop\n        // For example,\n        // >>> for (i\
    \ <- 1 to 10) {\n        // ...     println(i)\n        // ... }\n        // 1\n\
    \        // 2\n        // 3\n        // 4\n        // 5\n        // 6\n      \
    \  // 7\n        // 8\n        // 9\n        // 10\n        // You can use `while`\
    \ loop\n        // For example,\n        // >>> var i = 1\n        // i: Int =\
    \ 1\n        // >>> while (i <= 10) {\n        // ...     println(i)\n       \
    \ // ...     i += 1\n        // ... }\n        // 1\n        // 2\n        //\
    \ 3\n        // 4\n        // 5\n        // 6\n        // 7\n        // 8\n  \
    \      // 9\n        // 10\n        // You can use `ListBuffer` to create a list\n\
    \        // For example,\n        // >>> var lst = ListBuffer[Int]()\n       \
    \ // lst: scala.collection.mutable.ListBuffer[Int] = ListBuffer()", "        var\
    \ total1 = 0\n        var total2 = 0\n        for (i <- lst1) {\n            total1\
    \ += i.length\n        }\n        for (i <- lst2) {\n            total2 += i.length\n\
    \        }\n        if (total1 < total2) {\n            return lst1\n        }\n\
    \        else if (total1 > total2) {\n            return lst2\n        }\n   \
    \     else {\n            return lst1\n        }", "        if (lst1.length ==\
    \ 0 && lst2.length == 0) return lst1\n        if (lst1.length == 0) return lst2\n\
    \        if (lst2.length == 0) return lst1\n        var total1 = 0\n        var\
    \ total2 = 0\n        for (i <- 0 until lst1.length) {\n            total1 +=\
    \ lst1(i).length\n        }\n        for (i <- 0 until lst2.length) {\n      \
    \      total2 += lst2(i).length\n        }\n        if (total1 < total2) return\
    \ lst1\n        if (total2 < total1) return lst2\n        return lst1", "    \
    \    // Fill Up this function body\n        // `lst1` and `lst2` are lists of\
    \ strings\n        // You have to return a list of strings\n        if (lst1.length\
    \ == 0 && lst2.length == 0) return lst1\n        if (lst1.length == 0) return\
    \ lst2\n        if (lst2.length == 0) return lst1\n        var total1 = 0\n  \
    \      var total2 = 0\n        for (i <- 0 until lst1.length) {\n            total1\
    \ += lst1(i).length\n        }\n        for (i <- 0 until lst2.length) {\n   \
    \         total2 += lst2(i).length\n        }\n        if (total1 < total2) return\
    \ lst1\n        if (total1 > total2) return lst2\n        return lst1", "    \
    \    // Fill Up this function body\n        // `lst1` and `lst2` are lists of\
    \ strings\n        // For example,\n        // >>> lst1\n        // List[String](\"\
    hi\", \"admin\")\n        // >>> lst2\n        // List[String](\"hI\", \"Hi\"\
    )\n        // You can use `lst1.length` to get the number of strings in `lst1`\n\
    \        // You can use `lst1(i).length` to get the number of chars in the ith\
    \ string of `lst1`\n        // You can use `lst1(i).charAt(j)` to get the jth\
    \ char of the ith string of `lst1`\n        // You can use `lst1(i).substring(j,\
    \ k)` to get the substring of the ith string of `lst1` from j to k\n        //\
    \ You can use `lst1(i).indexOf(c)` to get the index of the first occurrence of\
    \ char c in the ith string of `lst1`\n        // You can use `lst1(i).lastIndexOf(c)`\
    \ to get the index of the last occurrence of char c in the ith string of `lst1`\n\
    \        // You can use `lst1(i).startsWith(s)` to check if the ith string of\
    \ `lst1` starts with string s\n        // You can use `lst1(i).endsWith(s)` to\
    \ check if the ith string of `lst1` ends with string s\n        // You can use\
    \ `lst1(i).contains(s)` to check if the ith string of `lst1` contains string s\n\
    \        // You can use `lst1(i).replace(c1, c2)` to replace all occurrences of\
    \ char c1 with char c2 in the ith string of `lst1`\n        // You can use `lst1(i).toUpperCase`\
    \ to convert the ith string of `lst1` to upper case\n        // You can use `lst1(i).toLowerCase`\
    \ to convert the ith string of `lst1` to lower case\n        // You", "      \
    \  // Fill Up this function body\n        // `totalMatch` should return the list\
    \ that has total number of chars in the all strings of the list less than the\
    \ other list.\n        // if the two lists have the same number of chars, return\
    \ the first list.\n        // For example,\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        if (lst1.length\
    \ == 0 && lst2.length == 0) {\n            return lst1\n        }\n        var\
    \ lst1_total = 0\n        var lst2_total = 0\n        for (i <- 0 until lst1.length)\
    \ {\n            lst1_total += lst1(i).length\n        }\n        for (i <- 0\
    \ until lst2.length) {\n            lst2_total += lst2(i).length\n        }\n\
    \        if (lst1_total < lst2_total) {\n            return lst1\n        } else\
    \ if (lst1_total > lst2_total) {\n            return lst2\n        } else {\n\
    \            return lst1\n        }", "        // Fill Up this function body\n\
    \        // `total` is a method on list that calculates the total number of elements\
    \ in the list\n        // `length` is a method on string that calculates the length\
    \ of the string\n        if (lst1.total(x => x.length) < lst2.total(x => x.length))\
    \ lst1 else lst2", "        if (lst1.length == 0 && lst2.length == 0) return lst1\n\
    \        if (lst1.length == 0) return lst2\n        if (lst2.length == 0) return\
    \ lst1\n        var total1 = 0\n        var total2 = 0\n        for (i <- 0 until\
    \ lst1.length) {\n            total1 += lst1(i).length\n        }\n        for\
    \ (i <- 0 until lst2.length) {\n            total2 += lst2(i).length\n       \
    \ }\n        if (total1 < total2) return lst1\n        else if (total1 > total2)\
    \ return lst2\n        else return lst1", "        // Fill Up this function body\n\
    \        // `lst1` and `lst2` are lists of strings\n        // You have to return\
    \ a list of strings\n        var lst1_len = 0\n        var lst2_len = 0\n    \
    \    for (i <- lst1) {\n            lst1_len += i.length\n        }\n        for\
    \ (i <- lst2) {\n            lst2_len += i.length\n        }\n        if (lst1_len\
    \ < lst2_len) lst1\n        else if (lst1_len > lst2_len) lst2\n        else lst1",
  "        if (lst1.length == 0 && lst2.length == 0) return lst1\n        if (lst1.length\
    \ == 0) return lst2\n        if (lst2.length == 0) return lst1\n        var total1\
    \ = 0\n        var total2 = 0\n        for (i <- 0 until lst1.length) {\n    \
    \        total1 += lst1(i).length\n        }\n        for (i <- 0 until lst2.length)\
    \ {\n            total2 += lst2(i).length\n        }\n        if (total1 < total2)\
    \ return lst1\n        else if (total1 > total2) return lst2\n        else return\
    \ lst1", "        // Fill Up this function body\n        // `lst1` and `lst2`\
    \ are lists of strings\n        // For example,\n        // >>> lst1\n       \
    \ // List[String](\"hi\", \"admin\")\n        // >>> lst2\n        // List[String](\"\
    hI\", \"Hi\")\n        // You can access the strings in the list as\n        //\
    \ >>> lst1(0)\n        // \"hi\"\n        // >>> lst1(1)\n        // \"admin\"\
    \n        // You can access the length of the string as\n        // >>> lst1(0).length\n\
    \        // 2\n        // >>> lst1(1).length\n        // 5\n        // You can\
    \ access the chars in the string as\n        // >>> lst1(0)(0)\n        // 'h'\n\
    \        // >>> lst1(0)(1)\n        // 'i'\n        // >>> lst1(1)(0)\n      \
    \  // 'a'\n        // >>> lst1(1)(1)\n        // 'd'\n        // >>> lst1(1)(2)\n\
    \        // 'm'\n        // >>> lst1(1)(3)\n        // 'i'\n        // >>> lst1(1)(4)\n\
    \        // 'n'\n        // You can use `if` and `else` to make decisions\n  \
    \      // >>> if (lst1(0).length == lst2(0).length) {\n        //     lst1(0)\n\
    \        // } else {\n        //     lst2(0)\n        // }\n        // \"hI\"\n\
    \        // You can use `for` loop to iterate over lists\n        // >>> for (i\
    \ <- 0 until lst1.length) {\n        //     lst1(i)\n        // }\n        //\
    \ \"hi\"\n        // \"admin\"\n        // You can use `for` loop to iterate over\
    \ strings\n        // >>> for (i <- 0 until lst1(0).length) {\n        //    \
    \ lst1(0)(i)\n        // }\n        // 'h'\n        // 'i'\n        // You can\
    \ use `for` loop to iterate over ranges\n        // >>>", "        // Fill Up\
    \ this function body\n        // `lst1` and `lst2` are lists of strings\n    \
    \    // You have to return a list of strings\n        if (lst1.length == 0 &&\
    \ lst2.length == 0) return List[String]()\n        if (lst1.length == 0) return\
    \ lst2\n        if (lst2.length == 0) return lst1\n        var total1 = 0\n  \
    \      var total2 = 0\n        for (i <- 0 until lst1.length) total1 += lst1(i).length\n\
    \        for (i <- 0 until lst2.length) total2 += lst2(i).length\n        if (total1\
    \ < total2) return lst1\n        else if (total1 > total2) return lst2\n     \
    \   else return lst1", "        // Fill Up this function body\n        // `lst1`\
    \ and `lst2` are lists of strings\n        // You have to return a list of strings\n\
    \        if (lst1.length == 0 && lst2.length == 0) return lst1\n        if (lst1.length\
    \ == 0) return lst2\n        if (lst2.length == 0) return lst1\n        var total1\
    \ = 0\n        var total2 = 0\n        for (i <- 0 until lst1.length) {\n    \
    \        total1 += lst1(i).length\n        }\n        for (i <- 0 until lst2.length)\
    \ {\n            total2 += lst2(i).length\n        }\n        if (total1 < total2)\
    \ return lst1\n        else if (total1 > total2) return lst2\n        else return\
    \ lst1", "        // Fill Up this function body\n        // `totalMatch` should\
    \ return the list that has total number of chars in the all strings of the list\
    \ less than the other list.\n        // if the two lists have the same number\
    \ of chars, return the first list.\n        // For example,\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        val lst1_total = lst1.foldLeft(0)((acc,\
    \ x) => acc + x.length)\n        val lst2_total = lst2.foldLeft(0)((acc, x) =>\
    \ acc + x.length)\n        if (lst1_total == lst2_total) lst1\n        else if\
    \ (lst1_total < lst2_total) lst1\n        else lst2", "        var total1 = 0\n\
    \        for (i <- lst1) {\n            total1 += i.length\n        }\n      \
    \  var total2 = 0\n        for (i <- lst2) {\n            total2 += i.length\n\
    \        }\n        if (total1 < total2) lst1 else lst2", "        // Fill Up\
    \ this function body\n        // `lst1` and `lst2` are lists of strings\n    \
    \    // For example,\n        // >>> lst1\n        // List(\"hi\", \"admin\")\n\
    \        // >>> lst2\n        // List(\"hI\", \"Hi\")\n        // You can access\
    \ the length of a string using `.length` method\n        // For example,\n   \
    \     // >>> \"hi\".length\n        // 2\n        // You can access the length\
    \ of a list using `.length` method\n        // For example,\n        // >>> List(\"\
    hi\", \"admin\").length\n        // 2\n        // You can access the elements\
    \ of a list using `(index)`\n        // For example,\n        // >>> List(\"hi\"\
    , \"admin\")(0)\n        // \"hi\"\n        // >>> List(\"hi\", \"admin\")(1)\n\
    \        // \"admin\"\n        // You can use `if` and `else`\n        // For\
    \ example,\n        // >>> if (true) {\n        // ...     println(\"hello\")\n\
    \        // ... } else {\n        // ...     println(\"world\")\n        // ...\
    \ }\n        // hello\n        // You can use `for` loop\n        // For example,\n\
    \        // >>> for (i <- 1 to 10) {\n        // ...     println(i)\n        //\
    \ ... }\n        // 1\n        // 2\n        // 3\n        // 4\n        // 5\n\
    \        // 6\n        // 7\n        // 8\n        // 9\n        // 10\n     \
    \   // You can use `while` loop\n        // For example,\n        // >>> var i\
    \ = 0\n        // i: Int = 0\n        // >>> while (i < 10) {\n        // ...\
    \     println(i)\n        // ...     i += 1\n        // ... }\n        // 0\n\
    \        // 1\n        // 2\n        // 3\n        // 4\n        // 5\n      \
    \  // 6\n        // 7\n        // 8\n        // 9\n        // You can use `List()`\
    \ to create a list\n        // For example,\n        // >>> List()\n        //\
    \ List()\n        // You can use `:::` to concatenate two lists\n        // For\
    \ example,\n        // >>> List", "        // Fill Up this function body\n   \
    \     // `lst1` and `lst2` are lists of strings\n        // For example,\n   \
    \     //     lst1 = List(\"hi\", \"admin\")\n        //     lst2 = List(\"hI\"\
    , \"Hi\")\n        // You can use `lst1.length` to get the length of the list\
    \ `lst1`\n        // You can use `lst1(0)` to get the first element of the list\
    \ `lst1`\n        // You can use `lst1(1)` to get the second element of the list\
    \ `lst1`\n        // ...\n        // You can use `lst1(n)` to get the nth element\
    \ of the list `lst1`\n        // You can use `lst1.length` to get the length of\
    \ the list `lst1`\n        // You can use `lst1.isEmpty` to check if the list\
    \ `lst1` is empty\n        // You can use `lst1.head` to get the first element\
    \ of the list `lst1`\n        // You can use `lst1.tail` to get the list without\
    \ the first element of the list `lst1`\n        // You can use `lst1.tail.head`\
    \ to get the second element of the list `lst1`\n        // You can use `lst1.tail.tail`\
    \ to get the list without the first and second elements of the list `lst1`\n \
    \       // ...\n        // You can use `lst1.tail.tail.tail.tail.tail` to get\
    \ the list without the first five elements of the list `lst1`\n        // You\
    \ can use `lst1.tail.tail.tail.tail.tail.tail` to get the list without the first\
    \ six elements of the list `lst1`\n        // ...\n        // You can use `lst1.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.",
  "        // Fill Up this function body\n        // `lst1` and `lst2` are lists of\
    \ strings\n        // You have to return the list that has total number of chars\
    \ in the all strings of the list less than the other list.\n        // if the\
    \ two lists have the same number of chars, return the first list.\n        var\
    \ lst1_len = 0\n        var lst2_len = 0\n        for (i <- lst1) {\n        \
    \    lst1_len += i.length\n        }\n        for (i <- lst2) {\n            lst2_len\
    \ += i.length\n        }\n        if (lst1_len < lst2_len) {\n            return\
    \ lst1\n        } else {\n            return lst2\n        }", "        // Fill\
    \ Up this function body\n        // `lst1` and `lst2` are lists of strings\n \
    \       // For example,\n        // >>> lst1\n        // List[String](\"hi\",\
    \ \"admin\")\n        // >>> lst2\n        // List[String](\"hI\", \"Hi\")\n \
    \       // You can use `lst1.length` to get the length of the list\n        //\
    \ You can use `lst1(0)` to get the first element of the list\n        // You can\
    \ use `lst1(1)` to get the second element of the list\n        // You can use\
    \ `lst1(2)` to get the third element of the list\n        // and so on.\n    \
    \    // You can use `lst1(0).length` to get the length of the first string\n \
    \       // You can use `lst1(1).length` to get the length of the second string\n\
    \        // and so on.\n        // You can use `lst1.isEmpty` to check if the\
    \ list is empty\n        // You can use `lst1.tail` to get the tail of the list\n\
    \        // You can use `lst1.head` to get the head of the list\n        // You\
    \ can use `lst1.tail.head` to get the head of the tail of the list\n        //\
    \ and so on.\n        // You can use `lst1.tail.tail` to get the tail of the tail\
    \ of the list\n        // and so on.\n        // You can use `lst1.tail.tail.tail`\
    \ to get the tail of the tail of the tail of the list\n        // and so on.\n\
    \        // You can use `lst1.tail.tail.tail.tail` to get the tail of the tail\
    \ of the tail of the tail of the list\n        // and so on.\n        // You can\
    \ use `lst1.tail.tail.tail.tail.tail` to get the tail of the tail of the tail\
    \ of the tail of the tail of the list\n        // and so on.\n        // You can\
    \ use `lst1.tail.tail.tail.tail.tail.tail` to get the tail of the tail of the\
    \ tail of the tail of the tail of the tail", "        // Fill Up this function\
    \ body\n        // `lst1` and `lst2` are lists of strings\n        // For example,\
    \ `lst1` is List(\"hi\", \"admin\")\n        // The function should return the\
    \ list that has total number of chars in the all strings of the list less than\
    \ the other list.\n        // For example, if `lst1` is List(\"hi\", \"admin\"\
    ) and `lst2` is List(\"hI\", \"Hi\"), the function should return List(\"hI\",\
    \ \"Hi\")\n        // If the two lists have the same number of chars, return the\
    \ first list.\n        // For example, if `lst1` is List(\"hi\", \"admin\") and\
    \ `lst2` is List(\"hi\", \"hi\", \"admin\", \"project\"), the function should\
    \ return List(\"hi\", \"admin\")\n        // If both lists are empty, return an\
    \ empty list.\n        // For example, if `lst1` is List() and `lst2` is List(),\
    \ the function should return List()\n        var count1 = 0\n        var count2\
    \ = 0\n        for (i <- lst1) {\n            count1 += i.length\n        }\n\
    \        for (i <- lst2) {\n            count2 += i.length\n        }\n      \
    \  if (count1 > count2) lst2\n        else if (count1 < count2) lst1\n       \
    \ else lst1", "        // Fill Up this function body\n        // `lst1` and `lst2`\
    \ are lists of strings\n        // You have to return the list that has the total\
    \ number of chars in the all strings of the list less than the other list\n  \
    \      // If the two lists have the same number of chars, return the first list\n\
    \        // Do not use any inbuilt functions\n        var sum1 = 0\n        var\
    \ sum2 = 0\n        for (i <- lst1) {\n            sum1 += i.length\n        }\n\
    \        for (i <- lst2) {\n            sum2 += i.length\n        }\n        if\
    \ (sum1 < sum2) {\n            return lst1\n        }\n        else if (sum1 >\
    \ sum2) {\n            return lst2\n        }\n        else {\n            return\
    \ lst1\n        }", "        def totalMatchHelper(lst1 : List[String], lst2 :\
    \ List[String], lst1Total : Int, lst2Total : Int) : List[String] = {\n       \
    \     if (lst1.isEmpty && lst2.isEmpty) {\n                if (lst1Total == lst2Total)\
    \ lst1 else if (lst1Total < lst2Total) lst1 else lst2\n            } else if (lst1.isEmpty)\
    \ {\n                totalMatchHelper(lst1, lst2.tail, lst1Total, lst2Total +\
    \ lst2.head.length)\n            } else if (lst2.isEmpty) {\n                totalMatchHelper(lst1.tail,\
    \ lst2, lst1Total + lst1.head.length, lst2Total)\n            } else {\n     \
    \           totalMatchHelper(lst1.tail, lst2.tail, lst1Total + lst1.head.length,\
    \ lst2Total + lst2.head.length)\n            }\n        }\n        totalMatchHelper(lst1,\
    \ lst2, 0, 0)", "        if (lst1.length == 0 && lst2.length == 0) return lst1\n\
    \        var sum1 = 0\n        for (i <- 0 until lst1.length) sum1 += lst1(i).length\n\
    \        var sum2 = 0\n        for (i <- 0 until lst2.length) sum2 += lst2(i).length\n\
    \        if (sum1 < sum2) return lst1\n        else return lst2", "        //\
    \ Fill Up this function body\n        // `lst1` and `lst2` are lists of strings\n\
    \        // You have to return the list that has total number of chars in the\
    \ all strings of the list less than the other list.\n        // if the two lists\
    \ have the same number of chars, return the first list.\n        var sum1 = 0\n\
    \        var sum2 = 0\n        for (i <- lst1) {\n            sum1 += i.length\n\
    \        }\n        for (i <- lst2) {\n            sum2 += i.length\n        }\n\
    \        if (sum1 < sum2) {\n            return lst1\n        } else if (sum1\
    \ > sum2) {\n            return lst2\n        } else {\n            return lst1\n\
    \        }", "        // Fill Up this function body\n        // `lst1` and `lst2`\
    \ are lists of strings\n        // For example,\n        // >>> lst1\n       \
    \ // List[String](\"hi\", \"admin\")\n        // >>> lst2\n        // List[String](\"\
    hI\", \"Hi\")\n        // >>> lst1.length\n        // 2\n        // >>> lst2.length\n\
    \        // 2\n        // >>> lst1(0)\n        // \"hi\"\n        // >>> lst2(0)\n\
    \        // \"hI\"\n        // >>> lst1(0).length\n        // 2\n        // >>>\
    \ lst2(0).length\n        // 2\n        // >>> lst1(1)\n        // \"admin\"\n\
    \        // >>> lst2(1)\n        // \"Hi\"\n        // >>> lst1(1).length\n  \
    \      // 5\n        // >>> lst2(1).length\n        // 2\n        // >>> lst1.map(x\
    \ => x.length)\n        // List[Int](2, 5)\n        // >>> lst2.map(x => x.length)\n\
    \        // List[Int](2, 2)\n        // >>> lst1.map(x => x.length).sum\n    \
    \    // 7\n        // >>> lst2.map(x => x.length).sum\n        // 4\n        if\
    \ (lst1.map(x => x.length).sum < lst2.map(x => x.length).sum) lst1 else lst2",
  "        // Fill Up this function body\n        // `totalMatch` is a function that\
    \ accepts two lists of strings and returns the list that has \n        // total\
    \ number of chars in the all strings of the list less than the other list.\n \
    \       // if the two lists have the same number of chars, return the first list.\n\
    \        // For example,\n        // >>> totalMatch((List[String](\"hi\", \"admin\"\
    )), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n\
    \        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String", "        // Fill Up this function body\n        // `lst1` and\
    \ `lst2` are lists of strings\n        // You have to return a list of strings\n\
    \        // You have to return a list of strings\n        // You have to return\
    \ a list of strings\n        // You have to return a list of strings\n       \
    \ // You have to return a list of strings\n        // You have to return a list\
    \ of strings\n        // You have to return a list of strings\n        // You\
    \ have to return a list of strings\n        // You have to return a list of strings\n\
    \        // You have to return a list of strings\n        // You have to return\
    \ a list of strings\n        // You have to return a list of strings\n       \
    \ // You have to return a list of strings\n        // You have to return a list\
    \ of strings\n        // You have to return a list of strings\n        // You\
    \ have to return a list of strings\n        // You have to return a list of strings\n\
    \        // You have to return a list of strings\n        // You have to return\
    \ a list of strings\n        // You have to return a list of strings\n       \
    \ // You have to return a list of strings\n        // You have to return a list\
    \ of strings\n        // You have to return a list of strings\n        // You\
    \ have to return a list of strings\n        // You have to return a list of strings\n\
    \        // You have to return a list of strings\n        // You have to return\
    \ a list of strings\n        // You have to return a list of strings\n       \
    \ // You have to return a list of strings\n        // You have to return a list\
    \ of strings\n        // You have to return a list of strings\n        // You\
    \ have to return a list of strings\n        // You have to return a list of strings\n\
    \        // You have to return a list of strings\n        // You have to return\
    \ a list of strings\n        // You have to return a list of strings\n       \
    \ // You have to return a list of strings\n        // You have to return a list\
    \ of strings\n        // You have to return a list of strings\n        // You\
    \ have to return a list of strings\n        // You have to return a list of strings\n\
    \        // You have to return a list of strings\n        // You have to return\
    \ a list of strings\n        // You have to return a list of strings\n       ",
  "        if (lst1.length == 0) return lst2\n        if (lst2.length == 0) return\
    \ lst1\n        var total1 = 0\n        var total2 = 0\n        for (i <- 0 until\
    \ lst1.length) {\n            total1 += lst1(i).length\n        }\n        for\
    \ (i <- 0 until lst2.length) {\n            total2 += lst2(i).length\n       \
    \ }\n        if (total1 < total2) return lst1\n        else return lst2", "  \
    \      // Fill Up this function body\n        // `totalMatch` should return the\
    \ list that has total number of chars in the all strings of the list less than\
    \ the other list.\n        // if the two lists have the same number of chars,\
    \ return the first list.\n        if (lst1.length == 0 && lst2.length == 0) {\n\
    \            return lst1\n        }\n        var sum1 = 0\n        var sum2 =\
    \ 0\n        for (i <- 0 until lst1.length) {\n            sum1 += lst1(i).length\n\
    \        }\n        for (i <- 0 until lst2.length) {\n            sum2 += lst2(i).length\n\
    \        }\n        if (sum1 < sum2) {\n            return lst1\n        } else\
    \ if (sum1 > sum2) {\n            return lst2\n        } else {\n            return\
    \ lst1\n        }", "        // Fill Up this function body\n        // `lst1`\
    \ and `lst2` are lists of strings\n        // You have to return a list of strings\n\
    \        if (lst1.length == 0 && lst2.length == 0) return lst1\n        if (lst1.length\
    \ == 0) return lst2\n        if (lst2.length == 0) return lst1\n        var lst1_total\
    \ = 0\n        var lst2_total = 0\n        for (i <- 0 until lst1.length) {\n\
    \            lst1_total += lst1(i).length\n        }\n        for (i <- 0 until\
    \ lst2.length) {\n            lst2_total += lst2(i).length\n        }\n      \
    \  if (lst1_total < lst2_total) return lst1\n        else if (lst1_total > lst2_total)\
    \ return lst2\n        else return lst1", "        // Fill Up this function body\n\
    \        // `lst1` and `lst2` are lists of strings\n        // For example,\n\
    \        // >>> lst1\n        // List[String](\"hi\", \"admin\")\n        // >>>\
    \ lst2\n        // List[String](\"hI\", \"Hi\")\n        // >>> lst1(0)\n    \
    \    // \"hi\"\n        // >>> lst2(1)\n        // \"Hi\"\n        // >>> lst1(0).length\n\
    \        // 2\n        // >>> lst2(1).length\n        // 2\n        // >>> lst1(0)(0)\n\
    \        // 'h'\n        // >>> lst2(1)(1)\n        // 'i'\n        // >>> lst1(0)(0).toUpper\n\
    \        // 'H'\n        // >>> lst2(1)(1).toUpper\n        // 'I'\n        var\
    \ total1 = 0\n        var total2 = 0\n        for (i <- 0 until lst1.length) {\n\
    \            for (j <- 0 until lst1(i).length) {\n                total1 += 1\n\
    \            }\n        }\n        for (i <- 0 until lst2.length) {\n        \
    \    for (j <- 0 until lst2(i).length) {\n                total2 += 1\n      \
    \      }\n        }\n        if (total1 < total2) lst1 else lst2", "        //\
    \ Fill Up this function body\n        // `totalMatch` should return the list that\
    \ has total number of chars in the all strings of the list less than the other\
    \ list.\n        // if the two lists have the same number of chars, return the\
    \ first list.\n        // For example,\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n", "        // Fill Up this\
    \ function body\n        // `totalMatch` should return the list that has total\
    \ number of chars in the all strings of the list less than the other list.\n \
    \       // if the two lists have the same number of chars, return the first list.\n\
    \        var lst1_total = 0\n        var lst2_total = 0\n        for (i <- lst1)\
    \ {\n            lst1_total += i.length\n        }\n        for (i <- lst2) {\n\
    \            lst2_total += i.length\n        }\n        if (lst1_total < lst2_total)\
    \ {\n            return lst1\n        } else if (lst1_total > lst2_total) {\n\
    \            return lst2\n        } else {\n            return lst1\n        }",
  "        // Fill Up this function body\n        // `lst1` and `lst2` are lists of\
    \ strings\n        // Compute and return the list that has the total number of\
    \ chars in the all strings of the list less than the other list\n        // If\
    \ the two lists have the same number of chars, return the first list\n       \
    \ // Constraints: Do not use any inbuilt functions\n        var lst1_len = 0\n\
    \        var lst2_len = 0\n        for (i <- lst1) {\n            lst1_len +=\
    \ i.length\n        }\n        for (i <- lst2) {\n            lst2_len += i.length\n\
    \        }\n        if (lst1_len < lst2_len) lst1\n        else if (lst1_len >\
    \ lst2_len) lst2\n        else lst1", "        // Fill Up this function body\n\
    \        // `lst1` and `lst2` are lists of strings\n        // For example,\n\
    \        // >>> lst1\n        // List(\"hi\", \"admin\")\n        // >>> lst2\n\
    \        // List(\"hI\", \"Hi\")\n        // >>> lst1.head\n        // \"hi\"\n\
    \        // >>> lst1.tail\n        // List(\"admin\")\n        // >>> lst1.tail.head\n\
    \        // \"admin\"\n        // >>> lst1.tail.tail\n        // List()\n    \
    \    // >>> lst1.tail.tail.head\n        // error: java.util.NoSuchElementException:\
    \ head of empty list\n        // >>> lst1.tail.tail.tail\n        // List()\n\
    \        // >>> lst1.length\n        // 2\n        // >>> lst1.length == 0\n \
    \       // false\n        // >>> lst1.length == 1\n        // false\n        //\
    \ >>> lst1.length == 2\n        // true\n        // >>> lst1.length == 3\n   \
    \     // false\n        // >>> lst1.length == 4\n        // false\n        //\
    \ >>> lst1.length == 5\n        // false\n        // >>> lst1.length == 6\n  \
    \      // false\n        // >>> lst1.length == 7\n        // false\n        //\
    \ >>> lst1.length == 8\n        // false\n        // >>> lst1.length == 9\n  \
    \      // false\n        // >>> lst1.length == 10\n        // false\n        //\
    \ >>> lst1.length == 11\n        // false\n        // >>> lst1.length == 12\n\
    \        // false\n        // >>> lst1.length == 13\n        // false\n      \
    \  // >>> lst1.length == 14\n        // false\n        // >>> lst1.length == 15\n\
    \        // false\n        // >>> lst1.length == 16\n        // false\n      \
    \  // >>> lst1.length == 17\n        // false\n        // >>> lst1.length == 18\n\
    \        // false\n        // >>> lst1.length == 19\n        // false\n      \
    \  // >>> lst1.length == 20\n        // false\n        // >>>", "        // Fill\
    \ Up this function body\n        // `lst1` and `lst2` are lists of strings\n \
    \       // Compute and return the list that has total number of chars in the all\
    \ strings of the list less than the other list\n        // if the two lists have\
    \ the same number of chars, return the first list\n        // For example,\n \
    \       // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\")))\n \
    \       // (List[String](\"hi\", \"admin\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n        // (List[String](\"\
    hI\", \"hi\", \"hi\"))\n        // >>> totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n       \
    \ var sum1 = 0\n        var sum2 = 0\n        for (i <- lst1) {\n            sum1\
    \ += i.length\n        }\n        for (i <- lst2) {\n            sum2 += i.length\n\
    \        }\n        if (sum1 < sum2) {\n            return lst1\n        } else\
    \ if (sum1 > sum2) {\n            return lst2\n        } else {\n            return\
    \ lst1\n        }", "        // Fill Up this function body\n        // `lst1`\
    \ and `lst2` are lists of strings\n        // You have to return a list of strings\n\
    \        // The list should contain the strings from the list that has the total\
    \ number of chars in the all strings of the list less than the other list.\n \
    \       // If the two lists have the same number of chars, return the first list.\n\
    \        var sum1 = 0\n        var sum2 = 0\n        for (i <- lst1) {\n     \
    \       sum1 += i.length\n        }\n        for (i <- lst2) {\n            sum2\
    \ += i.length\n        }\n        if (sum1 < sum2) {\n            return lst1\n\
    \        }\n        else if (sum1 > sum2) {\n            return lst2\n       \
    \ }\n        else {\n            return lst1\n        }", "        // Fill Up\
    \ this function body\n        // `lst1` and `lst2` are lists of strings\n    \
    \    // For example,\n        //     lst1 = List(\"hi\", \"admin\")\n        //\
    \     lst2 = List(\"hI\", \"Hi\")\n        // You have to return the list that\
    \ has total number of chars in the all strings of the list less than the other\
    \ list.\n        // For example,\n        //     lst1 = List(\"hi\", \"admin\"\
    )\n        //     lst2 = List(\"hI\", \"Hi\")\n        //     totalMatch(lst1,\
    \ lst2) = List(\"hI\", \"Hi\")\n        //     totalMatch(lst2, lst1) = List(\"\
    hI\", \"Hi\")\n        //     totalMatch(lst1, lst1) = List(\"hi\", \"admin\"\
    )\n        //     totalMatch(lst2, lst2) = List(\"hI\", \"Hi\")\n        //  \
    \   totalMatch(List(), List()) = List()\n        //     totalMatch(List(\"hi\"\
    ), List(\"hI\", \"Hi\")) = List(\"hI\", \"Hi\")\n        //     totalMatch(List(\"\
    hI\", \"Hi\"), List(\"hi\")) = List(\"hI\", \"Hi\")\n        //     totalMatch(List(\"\
    hI\", \"Hi\"), List(\"hI\", \"Hi\")) = List(\"hI\", \"Hi\")\n        //     totalMatch(List(\"\
    hI\", \"Hi\"), List(\"hI\", \"Hi\", \"hi\")) = List(\"hI\", \"Hi\")\n        //\
    \     totalMatch(List(\"hI\", \"Hi\", \"hi\"), List(\"hI\", \"Hi\")) = List(\"\
    hI\", \"Hi\")\n        //     totalMatch(List(\"hI\", \"Hi\", \"hi\"), List(\"\
    hI\", \"Hi\", \"hi\")) = List(\"hI\", \"Hi\", \"hi\")\n        //     totalMatch(List(\"\
    hI\", \"Hi\", \"hi\"), List(\"hI\", \"Hi\", \"hi\", \"hi\")) = List(\"hI\", \"\
    Hi\", \"hi\")\n        //     totalMatch(List(\"hI\", \"Hi\", \"hi\", \"hi\"),\
    \ List(\"hI\", \"Hi\", \"hi\"))", "        if (lst1.length == 0 && lst2.length\
    \ == 0) return lst1\n        if (lst1.length == 0) return lst2\n        if (lst2.length\
    \ == 0) return lst1\n        var total1 = 0\n        var total2 = 0\n        for\
    \ (i <- 0 until lst1.length) {\n            total1 += lst1(i).length\n       \
    \ }\n        for (i <- 0 until lst2.length) {\n            total2 += lst2(i).length\n\
    \        }\n        if (total1 < total2) return lst1\n        if (total2 < total1)\
    \ return lst2\n        return lst1", "        // Fill Up this function body\n\
    \        // `lst1` and `lst2` are lists of strings\n        // You have to return\
    \ the list that has total number of chars in the all strings of the list less\
    \ than the other list.\n        // if the two lists have the same number of chars,\
    \ return the first list.\n        // For example,\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        if (lst1.length\
    \ == 0 && lst2.length == 0) return lst1\n        if (lst1.length == 0) return\
    \ lst2\n        if (lst2.length == 0) return lst1\n        var total1 = 0\n  \
    \      var total2 = 0\n        for (i <- 0 until lst1.length) {\n            total1\
    \ += lst1(i).length\n        }\n        for (i <- 0 until lst2.length) {\n   \
    \         total2 += lst2(i).length\n        }\n        if (total1 < total2) return\
    \ lst1\n        else return lst2", "        // Fill Up this function body\n  \
    \      // `lst1` and `lst2` are lists of strings\n        // You have to return\
    \ a list of strings\n        var lst1_len = 0\n        var lst2_len = 0\n    \
    \    for (i <- lst1) {\n            lst1_len += i.length\n        }\n        for\
    \ (i <- lst2) {\n            lst2_len += i.length\n        }\n        if (lst1_len\
    \ < lst2_len) {\n            return lst1\n        } else if (lst1_len > lst2_len)\
    \ {\n            return lst2\n        } else {\n            return lst1\n    \
    \    }", "        // Fill Up this function body\n        // `lst1` and `lst2`\
    \ are lists of strings\n        // You have to return a list of strings\n    \
    \    if (lst1.length == 0 && lst2.length == 0) {\n            return lst1\n  \
    \      }\n        var sum1 = 0\n        var sum2 = 0\n        for (i <- 0 until\
    \ lst1.length) {\n            sum1 += lst1(i).length\n        }\n        for (i\
    \ <- 0 until lst2.length) {\n            sum2 += lst2(i).length\n        }\n \
    \       if (sum1 < sum2) {\n            return lst1\n        } else {\n      \
    \      return lst2\n        }", "        // Fill Up this function body\n     \
    \   // `totalMatch` should return the list that has total number of chars in the\
    \ all strings of the list less than the other list.\n        // if the two lists\
    \ have the same number of chars, return the first list.\n        // For example,\n\
    \        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\")))\n \
    \       // (List[String](\"hi\", \"admin\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n        // (List[String](\"\
    hI\", \"hi\", \"hi\"))\n        // >>> totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n       \
    \ // >>> totalMatch((List[String]()), (List[String]()))\n        // (List[String]())\n\
    \        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\")))\n \
    \       // (List[String](\"hi\", \"admin\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n        // (List[String](\"\
    hI\", \"hi\", \"hi\"))\n        // >>> totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n       \
    \ // >>> totalMatch((List[String]()), (List[String]()))\n        // (List[String]())\n",
  "        // Fill Up this function body\n        // `lst1` and `lst2` are lists of\
    \ strings\n        // You have to return a list of strings\n        if (lst1.length\
    \ == 0 && lst2.length == 0) return lst1\n        if (lst1.length == 0) return\
    \ lst2\n        if (lst2.length == 0) return lst1\n        var sum1 = 0\n    \
    \    var sum2 = 0\n        for (i <- 0 until lst1.length) {\n            sum1\
    \ += lst1(i).length\n        }\n        for (i <- 0 until lst2.length) {\n   \
    \         sum2 += lst2(i).length\n        }\n        if (sum1 < sum2) return lst1\n\
    \        else if (sum1 > sum2) return lst2\n        else return lst1", "     \
    \   // Fill Up this function body\n        // `totalMatch` should return a list\
    \ of strings\n        // For example if the function is called with\n        //\
    \ totalMatch(List(\"hi\", \"admin\"), List(\"hi\", \"hi\", \"admin\", \"project\"\
    ))\n        // your function should return\n        // List(\"hi\", \"admin\"\
    )\n        var sum1 = 0\n        var sum2 = 0\n        for (i <- lst1) {\n   \
    \         sum1 += i.length\n        }\n        for (i <- lst2) {\n           \
    \ sum2 += i.length\n        }\n        if (sum1 < sum2) {\n            return\
    \ lst1\n        } else if (sum1 > sum2) {\n            return lst2\n        }\
    \ else {\n            return lst1\n        }", "        if (lst1.length == 0 &&\
    \ lst2.length == 0) return lst1\n        if (lst1.length == 0) return lst2\n \
    \       if (lst2.length == 0) return lst1\n        var sum1 = 0\n        var sum2\
    \ = 0\n        for (i <- 0 until lst1.length) {\n            sum1 += lst1(i).length\n\
    \        }\n        for (i <- 0 until lst2.length) {\n            sum2 += lst2(i).length\n\
    \        }\n        if (sum1 < sum2) return lst1\n        if (sum1 > sum2) return\
    \ lst2\n        return lst1", "        if (lst1.length == 0 && lst2.length ==\
    \ 0) return lst1\n        if (lst1.length == 0) return lst2\n        if (lst2.length\
    \ == 0) return lst1\n        var total1 = 0\n        var total2 = 0\n        for\
    \ (i <- 0 until lst1.length) {\n            total1 += lst1(i).length\n       \
    \ }\n        for (i <- 0 until lst2.length) {\n            total2 += lst2(i).length\n\
    \        }\n        if (total1 < total2) return lst1\n        if (total2 < total1)\
    \ return lst2\n        return lst1", "        // Fill Up this function body\n\
    \        // `totalMatch` should return the list that has total number of chars\
    \ in the all strings of the list less than the other list.\n        // if the\
    \ two lists have the same number of chars, return the first list.\n        //\
    \ For example,\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\")))\n \
    \       // (List[String](\"hi\", \"admin\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n        // (List[String](\"\
    hI\", \"hi\", \"hi\"))\n        // >>> totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n       \
    \ // >>> totalMatch((List[String]()), (List[String]()))\n        // (List[String]())\n\
    \        var sum1 = 0\n        var sum2 = 0\n        for (i <- lst1) {\n     \
    \       sum1 += i.length\n        }\n        for (i <- lst2) {\n            sum2\
    \ += i.length\n        }\n        if (sum1 == sum2) {\n            return lst1\n\
    \        } else if (sum1 < sum2) {\n            return lst1\n        } else {\n\
    \            return lst2\n        }", "        // Fill Up this function body\n\
    \        // `lst1` and `lst2` are lists of strings\n        // You have to return\
    \ a list of strings\n        var lst1_total = 0\n        var lst2_total = 0\n\
    \        for (i <- lst1) {\n            lst1_total += i.length\n        }\n  \
    \      for (i <- lst2) {\n            lst2_total += i.length\n        }\n    \
    \    if (lst1_total == lst2_total) {\n            return lst1\n        } else\
    \ if (lst1_total < lst2_total) {\n            return lst1\n        } else {\n\
    \            return lst2\n        }", "        var sum1 = 0\n        var sum2\
    \ = 0\n        for (i <- lst1) {\n            sum1 += i.length\n        }\n  \
    \      for (i <- lst2) {\n            sum2 += i.length\n        }\n        if\
    \ (sum1 < sum2) lst1\n        else if (sum1 > sum2) lst2\n        else lst1",
  "        // Fill Up this function body\n                // method 1\n          \
    \      // if (lst1.length == 0 && lst2.length == 0) return lst1\n            \
    \    // else if (lst1.length == 0) return lst2\n                // else if (lst2.length\
    \ == 0) return lst1\n                // else {\n                //     var sum1\
    \ = 0\n                //     var sum2 = 0\n                //     for (i <- 0\
    \ until lst1.length) {\n                //         sum1 += lst1(i).length\n  \
    \              //     }\n                //     for (i <- 0 until lst2.length)\
    \ {\n                //         sum2 += lst2(i).length\n                //   \
    \  }\n                //     if (sum1 < sum2) return lst1\n                //\
    \     else if (sum1 > sum2) return lst2\n                //     else return lst1\n\
    \                // }\n                // method 2\n                if (lst1.length\
    \ == 0 && lst2.length == 0) return lst1\n                else if (lst1.length\
    \ == 0) return lst2\n                else if (lst2.length == 0) return lst1\n\
    \                else {\n                    var sum1 = 0\n                  \
    \  var sum2 = 0\n                    for (i <- lst1) {\n                     \
    \   sum1 += i.length\n                    }\n                    for (i <- lst2)\
    \ {\n                        sum2 += i.length\n                    }\n       \
    \             if (sum1 < sum2) return lst1\n                    else if (sum1\
    \ > sum2) return lst2\n                    else return lst1\n                }",
  "        if (lst1.length == 0 && lst2.length == 0) return lst1\n        if (lst1.length\
    \ == 0) return lst2\n        if (lst2.length == 0) return lst1\n        var sum1\
    \ = 0\n        var sum2 = 0\n        for (i <- 0 until lst1.length) {\n      \
    \      sum1 += lst1(i).length\n        }\n        for (i <- 0 until lst2.length)\
    \ {\n            sum2 += lst2(i).length\n        }\n        if (sum1 < sum2) return\
    \ lst1\n        if (sum1 > sum2) return lst2\n        return lst1", "        //\
    \ Fill Up this function body\n        // `lst1` and `lst2` are lists of strings\n\
    \        // For example,\n        // >>> lst1\n        // List[String](\"hi\"\
    , \"admin\")\n        // >>> lst2\n        // List[String](\"hI\", \"Hi\")\n \
    \       // You can access the length of a string `s` by `s.length`\n        //\
    \ For example,\n        // >>> \"hi\".length\n        // 2\n        // You can\
    \ access the nth element of a list `l` by `l(n)`\n        // For example,\n  \
    \      // >>> lst1(0)\n        // \"hi\"\n        // >>> lst1(1)\n        // \"\
    admin\"\n        // You can use `if` expression in Scala.\n        // For example,\n\
    \        // >>> if (lst1.length > lst2.length) lst1 else lst2\n        // List[String](\"\
    hI\", \"Hi\")\n        // You can use `for` expression in Scala.\n        // For\
    \ example,\n        // >>> for (s <- lst1) yield s.length\n        // List[Int](2,\
    \ 5)\n        // You can use `sum` method of a list in Scala.\n        // For\
    \ example,\n        // >>> List(1, 2, 3).sum\n        // 6\n        // You can\
    \ use `reduceLeft` method of a list in Scala.\n        // For example,\n     \
    \   // >>> List(1, 2, 3).reduceLeft(_ + _)\n        // 6\n        // You can use\
    \ `reduceLeft` method of a list in Scala.\n        // For example,\n        //\
    \ >>> List(1, 2, 3).reduceLeft(_ + _)\n        // 6\n        // You can use `reduceLeft`\
    \ method of a list in Scala.\n        // For example,\n        // >>> List(1,\
    \ 2, 3).reduceLeft(_ + _)\n        // 6\n        // You can use `reduceLeft` method\
    \ of a list in Scala.\n        // For example,\n        // >>> List(1, 2, 3).reduceLeft(_\
    \ + _)\n        // 6\n        // You can use `reduce", "        // Fill Up this\
    \ function body\n        // `lst1` and `lst2` are lists of strings\n        //\
    \ You have to return a list of strings\n        var sum1 = 0\n        var sum2\
    \ = 0\n        for (i <- lst1) {\n            sum1 += i.length\n        }\n  \
    \      for (i <- lst2) {\n            sum2 += i.length\n        }\n        if\
    \ (sum1 < sum2) {\n            return lst1\n        } else if (sum1 > sum2) {\n\
    \            return lst2\n        } else {\n            return lst1\n        }",
  "        if (lst1.length == 0 && lst2.length == 0) return lst1\n        if (lst1.length\
    \ == 0) return lst2\n        if (lst2.length == 0) return lst1\n        var total1\
    \ = 0\n        var total2 = 0\n        for (i <- 0 until lst1.length) {\n    \
    \        total1 += lst1(i).length\n        }\n        for (i <- 0 until lst2.length)\
    \ {\n            total2 += lst2(i).length\n        }\n        if (total1 < total2)\
    \ return lst1\n        if (total2 < total1) return lst2\n        return lst1",
  "        // Fill Up this function body\n        // `lst1` and `lst2` are lists of\
    \ strings\n        // You have to return a list of strings\n        if (lst1.length\
    \ == 0) return lst2\n        if (lst2.length == 0) return lst1\n        var sum1\
    \ = 0\n        var sum2 = 0\n        for (i <- 0 until lst1.length) {\n      \
    \      sum1 += lst1(i).length\n        }\n        for (i <- 0 until lst2.length)\
    \ {\n            sum2 += lst2(i).length\n        }\n        if (sum1 < sum2) return\
    \ lst1\n        else if (sum1 > sum2) return lst2\n        else return lst1",
  "        // Fill Up this function body\n        // `totalMatch` should return the\
    \ list that has total number of chars in the all strings of the list less than\
    \ the other list.\n        // if the two lists have the same number of chars,\
    \ return the first list.\n        // For example,\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n", "        // Fill Up this\
    \ function body\n        // `lst1` and `lst2` are lists of strings\n        //\
    \ You have to return a list of strings\n        var total1 = 0\n        var total2\
    \ = 0\n        for (i <- lst1) {\n            total1 += i.length\n        }\n\
    \        for (i <- lst2) {\n            total2 += i.length\n        }\n      \
    \  if (total1 < total2) {\n            return lst1\n        } else if (total1\
    \ > total2) {\n            return lst2\n        } else {\n            return lst1\n\
    \        }", "        // Fill Up this function body\n        // `lst1` and `lst2`\
    \ are lists of strings\n        // You have to return the list that has total\
    \ number of chars in the all strings of the list less than the other list.\n \
    \       // if the two lists have the same number of chars, return the first list.\n\
    \        // For example,\n        // >>> totalMatch((List[String](\"hi\", \"admin\"\
    )), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n\
    \        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        var lst1_size\
    \ = 0\n        var lst2_size = 0\n        for (i <- lst1) {\n            lst1_size\
    \ += i.length\n        }\n        for (i <- lst2) {\n            lst2_size +=\
    \ i.length\n        }\n        if (lst1_size < lst2_size) {\n            return\
    \ lst1\n        } else {\n            return lst2\n        }", "        // Fill\
    \ Up this function body\n        // `lst1` and `lst2` are lists of strings\n \
    \       // For example,\n        // >>> lst1\n        // List[String](\"hi\",\
    \ \"admin\")\n        // >>> lst2\n        // List[String](\"hi\", \"hi\", \"\
    admin\", \"project\")\n        // You have to return the list that has total number\
    \ of chars in the all strings of the list less than the other list.\n        //\
    \ For example,\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n        // (List[String](\"\
    hI\", \"hi\", \"hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\"\
    )), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n\
    \        // >>> totalMatch((List[String]()), (List[String]()))\n        // (List[String]())\n\
    \        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n        // (List[String](\"\
    hI\", \"hi\", \"hi\"))\n        // >>> totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n       \
    \ // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\", \"\
    hi\", \"admin", "        if (lst1.length == 0) return lst2\n        if (lst2.length\
    \ == 0) return lst1\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ return lst1\n        return lst2", "        // Fill Up this function body\n\
    \        // `totalMatch` should return the list that has total number of chars\
    \ in the all strings of the list less than the other list.\n        // if the\
    \ two lists have the same number of chars, return the first list.\n        //\
    \ For example,\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\")))\n \
    \       // (List[String](\"hi\", \"admin\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n        // (List[String](\"\
    hI\", \"hi\", \"hi\"))\n        // >>> totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n       \
    \ // >>> totalMatch((List[String]()), (List[String]()))\n        // (List[String]())\n\
    \        var lst1_total = 0\n        var lst2_total = 0\n        for (i <- lst1)\
    \ {\n            lst1_total += i.length\n        }\n        for (i <- lst2) {\n\
    \            lst2_total += i.length\n        }\n        if (lst1_total < lst2_total)\
    \ {\n            return lst1\n        } else {\n            return lst2\n    \
    \    }", "        if (lst1.length == 0 && lst2.length == 0) return lst1\n    \
    \    if (lst1.length == 0) return lst2\n        if (lst2.length == 0) return lst1\n\
    \        var sum1 = 0\n        var sum2 = 0\n        for (i <- 0 until lst1.length)\
    \ {\n            sum1 += lst1(i).length\n        }\n        for (i <- 0 until\
    \ lst2.length) {\n            sum2 += lst2(i).length\n        }\n        if (sum1\
    \ < sum2) return lst1\n        else if (sum1 > sum2) return lst2\n        else\
    \ return lst1", "        if (lst1.length == 0 && lst2.length == 0) return lst1\n\
    \        if (lst1.length == 0) return lst2\n        if (lst2.length == 0) return\
    \ lst1\n        var total1 = 0\n        var total2 = 0\n        for (i <- 0 until\
    \ lst1.length) {\n            total1 += lst1(i).length\n        }\n        for\
    \ (i <- 0 until lst2.length) {\n            total2 += lst2(i).length\n       \
    \ }\n        if (total1 < total2) return lst1\n        if (total2 < total1) return\
    \ lst2\n        return lst1", "        // Fill Up this function body\n       \
    \ // `lst1` and `lst2` are lists of strings\n        // You have to return a list\
    \ of strings\n        var lst1_len = 0\n        var lst2_len = 0\n        for\
    \ (i <- lst1) {\n            lst1_len += i.length\n        }\n        for (i <-\
    \ lst2) {\n            lst2_len += i.length\n        }\n        if (lst1_len <\
    \ lst2_len) lst1\n        else if (lst1_len > lst2_len) lst2\n        else lst1",
  "        if (lst1.length == 0 && lst2.length == 0) return lst1\n        if (lst1.length\
    \ == 0) return lst2\n        if (lst2.length == 0) return lst1\n        var total1\
    \ = 0\n        var total2 = 0\n        for (i <- 0 until lst1.length) {\n    \
    \        total1 += lst1(i).length\n        }\n        for (i <- 0 until lst2.length)\
    \ {\n            total2 += lst2(i).length\n        }\n        if (total1 < total2)\
    \ return lst1\n        if (total2 < total1) return lst2\n        return lst1",
  "        if (lst1.length == 0 && lst2.length == 0) return lst1\n        if (lst1.length\
    \ == 0) return lst2\n        if (lst2.length == 0) return lst1\n        var sum1\
    \ = 0\n        var sum2 = 0\n        for (i <- 0 until lst1.length) {\n      \
    \      sum1 += lst1(i).length\n        }\n        for (i <- 0 until lst2.length)\
    \ {\n            sum2 += lst2(i).length\n        }\n        if (sum1 < sum2) return\
    \ lst1\n        if (sum1 > sum2) return lst2\n        return lst1", "        //\
    \ Fill Up this function body\n        // `lst1` and `lst2` are lists of strings\n\
    \        // You have to return a list of strings\n        if (lst1.length == 0\
    \ && lst2.length == 0) return lst1\n        var lst1_total_chars = 0\n       \
    \ var lst2_total_chars = 0\n        for (i <- 0 until lst1.length) {\n       \
    \     lst1_total_chars += lst1(i).length\n        }\n        for (i <- 0 until\
    \ lst2.length) {\n            lst2_total_chars += lst2(i).length\n        }\n\
    \        if (lst1_total_chars < lst2_total_chars) return lst1\n        else return\
    \ lst2", "        // Fill Up this function body\n        // `totalMatch` should\
    \ return the list that has total number of chars in the all strings of the list\
    \ less than the other list.\n        // if the two lists have the same number\
    \ of chars, return the first list.\n        // For example,\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n", "        if (lst1.length\
    \ == 0 && lst2.length == 0) return lst1\n        if (lst1.length == 0) return\
    \ lst2\n        if (lst2.length == 0) return lst1\n        var total1 = 0\n  \
    \      var total2 = 0\n        for (i <- 0 until lst1.length) {\n            total1\
    \ += lst1(i).length\n        }\n        for (i <- 0 until lst2.length) {\n   \
    \         total2 += lst2(i).length\n        }\n        if (total1 < total2) return\
    \ lst1\n        if (total2 < total1) return lst2\n        return lst1", "    \
    \    // Fill Up this function body\n        // `lst1` and `lst2` are lists of\
    \ strings\n        // You have to return a list of strings\n        if (lst1.length\
    \ == 0 && lst2.length == 0) return lst1\n        if (lst1.length == 0) return\
    \ lst2\n        if (lst2.length == 0) return lst1\n        var sum1 = 0\n    \
    \    var sum2 = 0\n        for (i <- 0 until lst1.length) {\n            sum1\
    \ += lst1(i).length\n        }\n        for (i <- 0 until lst2.length) {\n   \
    \         sum2 += lst2(i).length\n        }\n        if (sum1 < sum2) return lst1\n\
    \        else return lst2", "        if (lst1.length == 0 && lst2.length == 0)\
    \ return lst1\n        if (lst1.length == 0) return lst2\n        if (lst2.length\
    \ == 0) return lst1\n        var total1 = 0\n        var total2 = 0\n        for\
    \ (s <- lst1) total1 += s.length\n        for (s <- lst2) total2 += s.length\n\
    \        if (total1 < total2) return lst1\n        else if (total1 > total2) return\
    \ lst2\n        else return lst1", "        // Fill Up this function body\n  \
    \      // `lst1` and `lst2` are lists of strings\n        // You have to return\
    \ the list that has total number of chars in the all strings of the list less\
    \ than the other list.\n        // if the two lists have the same number of chars,\
    \ return the first list.\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1 else lst2", "        // Fill Up this function body\n        // `lst1` and\
    \ `lst2` are lists of strings\n        // For example,\n        //     lst1 =\
    \ List(\"hi\", \"admin\")\n        //     lst2 = List(\"hI\", \"Hi\")\n      \
    \  // You have to return the list that has total number of chars in the all strings\
    \ of the list less than the other list.\n        // For example,\n        // \
    \    lst1 = List(\"hi\", \"admin\")\n        //     lst2 = List(\"hI\", \"Hi\"\
    )\n        //     totalMatch(lst1, lst2) = List(\"hI\", \"Hi\")\n        //  \
    \   lst1 = List(\"hi\", \"admin\")\n        //     lst2 = List(\"hi\", \"hi\"\
    , \"admin\", \"project\")\n        //     totalMatch(lst1, lst2) = List(\"hi\"\
    , \"admin\")\n        //     lst1 = List(\"hi\", \"admin\")\n        //     lst2\
    \ = List(\"hI\", \"hi\", \"hi\")\n        //     totalMatch(lst1, lst2) = List(\"\
    hI\", \"hi\", \"hi\")\n        //     lst1 = List(\"4\")\n        //     lst2\
    \ = List(\"1\", \"2\", \"3\", \"4\", \"5\")\n        //     totalMatch(lst1, lst2)\
    \ = List(\"4\")\n        var total1 = 0\n        var total2 = 0\n        for (i\
    \ <- lst1) {\n            total1 += i.length\n        }\n        for (i <- lst2)\
    \ {\n            total2 += i.length\n        }\n        if (total1 < total2) lst1\
    \ else lst2", "        // Fill Up this function body\n        // `lst1` and `lst2`\
    \ are lists of strings\n        // For example,\n        // >>> lst1\n       \
    \ // List[String](\"hi\", \"admin\")\n        // >>> lst2\n        // List[String](\"\
    hI\", \"Hi\")\n        // You can access the list of strings as `lst1(0)` and\
    \ `lst2(0)`\n        // For example,\n        // >>> lst1(0)\n        // \"hi\"\
    \n        // >>> lst2(0)\n        // \"hI\"\n        // You can access the string\
    \ as `lst1(0)(0)` and `lst2(0)(0)`\n        // For example,\n        // >>> lst1(0)(0)\n\
    \        // 'h'\n        // >>> lst2(0)(0)\n        // 'h'\n        // You can\
    \ access the char as `lst1(0)(0).toInt` and `lst2(0)(0).toInt`\n        // For\
    \ example,\n        // >>> lst1(0)(0).toInt\n        // 104\n        // >>> lst2(0)(0).toInt\n\
    \        // 104\n        // You can use `toInt` to convert a char to an integer\n\
    \        // For example,\n        // >>> 'a'.toInt\n        // 97\n        //\
    \ You can use `toChar` to convert an integer to a char\n        // For example,\n\
    \        // >>> 97.toChar\n        // 'a'\n        // You can use `+` to concatenate\
    \ two strings\n        // For example,\n        // >>> \"hi\" + \"admin\"\n  \
    \      // \"hiadmin\"\n        // You can use `:+` to concatenate a char to a\
    \ string\n        // For example,\n        // >>> \"hi\" :+ 'a'\n        // \"\
    hia\"\n        // You can use `::` to concatenate a string to a list of strings\n\
    \        // For example,\n        // >>> \"hi\" :: List[String]()\n        //\
    \ List[String](\"hi\")\n        // You can use `:::` to concatenate a list of\
    \ strings to", "        // Fill Up this function body\n        // `lst1` and `lst2`\
    \ are lists of strings\n        // For example,\n        // >>> lst1\n       \
    \ // List[String](\"hi\", \"admin\")\n        // >>> lst2\n        // List[String](\"\
    hI\", \"Hi\")\n        // You can access the length of a string with `.length`\n\
    \        // For example,\n        // >>> \"hi\".length\n        // 2\n       \
    \ // You can access the length of a list with `.length`\n        // For example,\n\
    \        // >>> List[String](\"hi\", \"admin\").length\n        // 2\n       \
    \ // You can access the elements of a list with `(index)`\n        // For example,\n\
    \        // >>> List[String](\"hi\", \"admin\")(0)\n        // \"hi\"\n      \
    \  // You can access the elements of a string with `(index)`\n        // For example,\n\
    \        // >>> \"hi\"(0)\n        // 'h'\n        // You can use `+` to concatenate\
    \ two strings\n        // For example,\n        // >>> \"hi\" + \"admin\"\n  \
    \      // \"hiadmin\"\n        // You can use `+` to concatenate two lists\n \
    \       // For example,\n        // >>> List[String](\"hi\", \"admin\") + List[String](\"\
    hI\", \"Hi\")\n        // List[String](\"hi\", \"admin\", \"hI\", \"Hi\")\n  \
    \      // You can use `:::` to concatenate two lists\n        // For example,\n\
    \        // >>> List[String](\"hi\", \"admin\") ::: List[String](\"hI\", \"Hi\"\
    )\n        // List[String](\"hi\", \"admin\", \"hI\", \"Hi\")\n        // You\
    \ can use `::` to add an element to the front of a list\n        // For example,\n\
    \        // >>> \"hi\" :: List[String](\"admin\")\n        // List[String](\"\
    hi\", \"admin\")\n        // You can use `::` to add an element to the front of\
    \ a list\n        // For example,\n        // >>> List[String](\"admin\") :::\
    \ List[String](\"hi\")\n        // List[String]", "        // Fill Up this function\
    \ body\n        // `totalMatch` should return the list that has total number of\
    \ chars in the all strings of the list less than the other list.\n        // if\
    \ the two lists have the same number of chars, return the first list.\n      \
    \  // For example,\n        // >>> totalMatch((List[String](\"hi\", \"admin\"\
    )), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n\
    \        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        var lst1_len = 0\n \
    \       var lst2_len = 0\n        for (i <- lst1) {\n            lst1_len += i.length\n\
    \        }\n        for (i <- lst2) {\n            lst2_len += i.length\n    \
    \    }\n        if (lst1_len == lst2_len) {\n            return lst1\n       \
    \ } else if (lst1_len < lst2_len) {\n            return lst1\n        } else {\n\
    \            return lst2\n        }", "        // Fill Up this function body\n\
    \        // `lst1` and `lst2` are lists of strings\n        // You have to return\
    \ the list that has total number of chars in the all strings of the list less\
    \ than the other list.\n        // if the two lists have the same number of chars,\
    \ return the first list.\n        var total1 = 0\n        var total2 = 0\n   \
    \     for (i <- lst1) {\n            total1 += i.length\n        }\n        for\
    \ (i <- lst2) {\n            total2 += i.length\n        }\n        if (total1\
    \ < total2) {\n            return lst1\n        } else if (total1 > total2) {\n\
    \            return lst2\n        } else {\n            return lst1\n        }",
  "        if (lst1.length == 0 && lst2.length == 0) return lst1\n        if (lst1.length\
    \ == 0) return lst2\n        if (lst2.length == 0) return lst1\n        var total1\
    \ = 0\n        var total2 = 0\n        for (i <- 0 until lst1.length) {\n    \
    \        total1 += lst1(i).length\n        }\n        for (i <- 0 until lst2.length)\
    \ {\n            total2 += lst2(i).length\n        }\n        if (total1 < total2)\
    \ return lst1\n        if (total2 < total1) return lst2\n        return lst1",
  "        // Fill Up this function body\n        // `totalMatch` should return the\
    \ list that has total number of chars in the all strings of the list less than\
    \ the other list.\n        // if the two lists have the same number of chars,\
    \ return the first list.\n        // For example,\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n", "        // Fill Up this\
    \ function body\n        // `totalMatch` should return the list that has total\
    \ number of chars in the all strings of the list less than the other list.\n \
    \       // if the two lists have the same number of chars, return the first list.\n\
    \        // For example,\n        // >>> totalMatch((List[String](\"hi\", \"admin\"\
    )), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n\
    \        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n", "        if (lst1.length\
    \ == 0 && lst2.length == 0) return lst1\n        if (lst1.length == 0) return\
    \ lst2\n        if (lst2.length == 0) return lst1\n        var total1 = 0\n  \
    \      var total2 = 0\n        for (i <- 0 until lst1.length) {\n            total1\
    \ += lst1(i).length\n        }\n        for (i <- 0 until lst2.length) {\n   \
    \         total2 += lst2(i).length\n        }\n        if (total1 < total2) return\
    \ lst1\n        else if (total1 > total2) return lst2\n        else return lst1",
  "        // Fill Up this function body\n        // `lst1` and `lst2` are lists of\
    \ strings\n        // You have to return a list of strings\n        if (lst1.length\
    \ == 0 && lst2.length == 0) return lst1\n        if (lst1.length == 0) return\
    \ lst2\n        if (lst2.length == 0) return lst1\n        var lst1_total = 0\n\
    \        var lst2_total = 0\n        for (i <- 0 until lst1.length) {\n      \
    \      lst1_total += lst1(i).length\n        }\n        for (i <- 0 until lst2.length)\
    \ {\n            lst2_total += lst2(i).length\n        }\n        if (lst1_total\
    \ < lst2_total) return lst1\n        else if (lst1_total > lst2_total) return\
    \ lst2\n        else return lst1", "        // Fill Up this function body\n  \
    \      // `lst1` and `lst2` are lists of strings\n        // For example, lst1\
    \ = List(\"hi\", \"admin\")\n        // For example, lst2 = List(\"hI\", \"Hi\"\
    )\n        // `return` List that has total number of chars in the all strings\
    \ of the list less than the other list.\n        // if the two lists have the\
    \ same number of chars, return the first list.\n        // For example, return\
    \ List(\"hI\", \"Hi\")\n        if (lst1.length == 0 && lst2.length == 0) return\
    \ List[String]()\n        else if (lst1.length == 0) return lst2\n        else\
    \ if (lst2.length == 0) return lst1\n        else {\n            var sum1 = 0\n\
    \            for (i <- 0 until lst1.length) {\n                sum1 += lst1(i).length\n\
    \            }\n            var sum2 = 0\n            for (i <- 0 until lst2.length)\
    \ {\n                sum2 += lst2(i).length\n            }\n            if (sum1\
    \ < sum2) return lst1\n            else if (sum1 > sum2) return lst2\n       \
    \     else return lst1\n        }", "        // Fill Up this function body\n \
    \       // `lst1` and `lst2` are lists of strings\n        // You have to return\
    \ a list of strings\n        if (lst1.length == 0) return lst2\n        if (lst2.length\
    \ == 0) return lst1\n        var lst1_total = 0\n        var lst2_total = 0\n\
    \        for (i <- 0 until lst1.length) {\n            lst1_total += lst1(i).length\n\
    \        }\n        for (i <- 0 until lst2.length) {\n            lst2_total +=\
    \ lst2(i).length\n        }\n        if (lst1_total == lst2_total) return lst1\n\
    \        if (lst1_total < lst2_total) return lst1\n        return lst2", "   \
    \     // Fill Up this function body\n        // `lst1` and `lst2` are lists of\
    \ strings\n        // You have to return a list of strings\n        if (lst1.length\
    \ == 0 && lst2.length == 0) return List[String]()\n        if (lst1.length ==\
    \ 0) return lst2\n        if (lst2.length == 0) return lst1\n        var sum1\
    \ = 0\n        var sum2 = 0\n        for (i <- 0 until lst1.length) {\n      \
    \      sum1 += lst1(i).length\n        }\n        for (i <- 0 until lst2.length)\
    \ {\n            sum2 += lst2(i).length\n        }\n        if (sum1 < sum2) return\
    \ lst1\n        else return lst2", "        if (lst1.length == 0 && lst2.length\
    \ == 0) return lst1\n        if (lst1.length == 0) return lst2\n        if (lst2.length\
    \ == 0) return lst1\n        var total1 = 0\n        var total2 = 0\n        for\
    \ (i <- 0 until lst1.length) {\n            total1 += lst1(i).length\n       \
    \ }\n        for (i <- 0 until lst2.length) {\n            total2 += lst2(i).length\n\
    \        }\n        if (total1 < total2) return lst1\n        else if (total1\
    \ > total2) return lst2\n        else return lst1", "        // Fill Up this function\
    \ body\n        // `totalMatch` is a function that accepts two lists of strings\
    \ and returns the list that has \n        // total number of chars in the all\
    \ strings of the list less than the other list.\n        // if the two lists have\
    \ the same number of chars, return the first list.\n        var lst1_len = 0\n\
    \        var lst2_len = 0\n        for (i <- lst1) {\n            lst1_len +=\
    \ i.length\n        }\n        for (i <- lst2) {\n            lst2_len += i.length\n\
    \        }\n        if (lst1_len < lst2_len) {\n            return lst1\n    \
    \    } else if (lst1_len > lst2_len) {\n            return lst2\n        } else\
    \ {\n            return lst1\n        }", "        // Fill Up this function body\n\
    \        // `lst1` and `lst2` are lists of strings\n        // For example,\n\
    \        // lst1 = List(\"hi\", \"admin\")\n        // lst2 = List(\"hI\", \"\
    Hi\")\n        // The function should return List(\"hI\", \"Hi\")\n        //\
    \ because the total number of chars in lst2 is less than lst1\n        // lst1\
    \ = List(\"hi\", \"admin\")\n        // lst2 = List(\"hi\", \"hi\", \"admin\"\
    , \"project\")\n        // The function should return List(\"hi\", \"admin\")\n\
    \        // because the total number of chars in lst1 is equal to lst2\n     \
    \   // lst1 = List(\"hi\", \"admin\")\n        // lst2 = List(\"hI\", \"hi\",\
    \ \"hi\")\n        // The function should return List(\"hI\", \"hi\", \"hi\")\n\
    \        // because the total number of chars in lst2 is less than lst1\n    \
    \    // lst1 = List(\"4\")\n        // lst2 = List(\"1\", \"2\", \"3\", \"4\"\
    , \"5\")\n        // The function should return List(\"4\")\n        // because\
    \ the total number of chars in lst1 is equal to lst2\n        val lst1_total =\
    \ lst1.foldLeft(0)((acc, x) => acc + x.length)\n        val lst2_total = lst2.foldLeft(0)((acc,\
    \ x) => acc + x.length)\n        if (lst1_total < lst2_total) lst1\n        else\
    \ if (lst1_total > lst2_total) lst2\n        else lst1", "        if (lst1.length\
    \ == 0 && lst2.length == 0) return lst1\n        if (lst1.length == 0) return\
    \ lst2\n        if (lst2.length == 0) return lst1\n        var total1 = 0\n  \
    \      var total2 = 0\n        for (i <- 0 until lst1.length) {\n            total1\
    \ += lst1(i).length\n        }\n        for (i <- 0 until lst2.length) {\n   \
    \         total2 += lst2(i).length\n        }\n        if (total1 < total2) return\
    \ lst1\n        if (total2 < total1) return lst2\n        return lst1", "    \
    \    // Fill Up this function body\n        // `lst1` and `lst2` are lists of\
    \ strings\n        // You have to return the list that has total number of chars\
    \ in the all strings of the list less than the other list.\n        // if the\
    \ two lists have the same number of chars, return the first list.\n        var\
    \ sum1 = 0\n        var sum2 = 0\n        for (i <- lst1) {\n            sum1\
    \ += i.length\n        }\n        for (i <- lst2) {\n            sum2 += i.length\n\
    \        }\n        if (sum1 < sum2) {\n            return lst1\n        } else\
    \ if (sum1 > sum2) {\n            return lst2\n        } else {\n            return\
    \ lst1\n        }", "        // Fill Up this function body\n        // `lst1`\
    \ and `lst2` are lists of strings\n        // You have to return the list that\
    \ has total number of chars in the all strings of the list less than the other\
    \ list.\n        // if the two lists have the same number of chars, return the\
    \ first list.\n        // For example,\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        val lst1_size\
    \ = lst1.foldLeft(0)((acc, x) => acc + x.length)\n        val lst2_size = lst2.foldLeft(0)((acc,\
    \ x) => acc + x.length)\n        if (lst1_size < lst2_size) lst1 else lst2", " \
    \       if (lst1.length == 0 && lst2.length == 0) return lst1\n        if (lst1.length\
    \ == 0) return lst2\n        if (lst2.length == 0) return lst1\n        var sum1\
    \ = 0\n        var sum2 = 0\n        for (i <- 0 until lst1.length) sum1 += lst1(i).length\n\
    \        for (i <- 0 until lst2.length) sum2 += lst2(i).length\n        if (sum1\
    \ < sum2) return lst1\n        else return lst2", "        // Fill Up this function\
    \ body\n        // `totalChars` is a helper function\n        // Do not modify\
    \ function signature\n        def totalChars(lst : List[String]) : Int = {\n \
    \           // Fill Up this function body\n            // `totalChars` is a helper\
    \ function\n            // Do not modify function signature\n            lst.foldLeft(0)((sum,\
    \ str) => sum + str.length)\n        }\n        if (totalChars(lst1) == totalChars(lst2))\
    \ lst1\n        else if (totalChars(lst1) < totalChars(lst2)) lst1\n        else\
    \ lst2", "        var sum1 = 0\n        var sum2 = 0\n        for (i <- lst1)\
    \ {\n            sum1 += i.length\n        }\n        for (i <- lst2) {\n    \
    \        sum2 += i.length\n        }\n        if (sum1 < sum2) lst1\n        else\
    \ if (sum1 > sum2) lst2\n        else lst1", "        // Fill Up this function\
    \ body\n        // `lst1` and `lst2` are lists of strings\n        // You have\
    \ to return a list of strings\n        if (lst1.length == 0 && lst2.length ==\
    \ 0) return lst1\n        if (lst1.length == 0) return lst2\n        if (lst2.length\
    \ == 0) return lst1\n        var lst1_total = 0\n        var lst2_total = 0\n\
    \        for (i <- 0 until lst1.length) {\n            lst1_total += lst1(i).length\n\
    \        }\n        for (i <- 0 until lst2.length) {\n            lst2_total +=\
    \ lst2(i).length\n        }\n        if (lst1_total < lst2_total) return lst1\n\
    \        else if (lst1_total > lst2_total) return lst2\n        else return lst1",
  "        // Fill Up this function body\n        // `lst1` and `lst2` are lists of\
    \ strings\n        // You have to return a list of strings\n        var lst1_len\
    \ = 0\n        var lst2_len = 0\n        for (i <- lst1) {\n            lst1_len\
    \ += i.length\n        }\n        for (i <- lst2) {\n            lst2_len += i.length\n\
    \        }\n        if (lst1_len < lst2_len) {\n            return lst1\n    \
    \    } else if (lst1_len > lst2_len) {\n            return lst2\n        } else\
    \ {\n            return lst1\n        }", "        // Fill Up this function body\n\
    \        // `lst1` and `lst2` are lists of strings\n        // You have to return\
    \ the list that has total number of chars in the all strings of the list less\
    \ than the other list.\n        // if the two lists have the same number of chars,\
    \ return the first list.\n        var sum1 = 0\n        var sum2 = 0\n       \
    \ for (i <- lst1) {\n            sum1 += i.length\n        }\n        for (i <-\
    \ lst2) {\n            sum2 += i.length\n        }\n        if (sum1 < sum2) {\n\
    \            return lst1\n        } else if (sum1 > sum2) {\n            return\
    \ lst2\n        } else {\n            return lst1\n        }", "        if (lst1.length\
    \ == 0 && lst2.length == 0) return lst1\n        if (lst1.length == 0) return\
    \ lst2\n        if (lst2.length == 0) return lst1\n        var sum1 = 0\n    \
    \    var sum2 = 0\n        for (i <- 0 until lst1.length) {\n            sum1\
    \ += lst1(i).length\n        }\n        for (i <- 0 until lst2.length) {\n   \
    \         sum2 += lst2(i).length\n        }\n        if (sum1 == sum2) return\
    \ lst1\n        if (sum1 < sum2) return lst1\n        return lst2", "        //\
    \ Fill Up this function body\n        // `lst1` and `lst2` are lists of strings\n\
    \        // You have to return a list of strings\n        if (lst1.length == 0\
    \ && lst2.length == 0) return List[String]()\n        if (lst1.length == 0) return\
    \ lst2\n        if (lst2.length == 0) return lst1\n        var total1 = 0\n  \
    \      var total2 = 0\n        for (i <- 0 until lst1.length) total1 += lst1(i).length\n\
    \        for (i <- 0 until lst2.length) total2 += lst2(i).length\n        if (total1\
    \ < total2) return lst1\n        if (total2 < total1) return lst2\n        return\
    \ lst1", "        // Fill Up this function body\n        // `lst1` and `lst2`\
    \ are lists of strings\n        // Do not change the function signature\n    \
    \    // You may create other functions\n        // You may import scala.math._\n\
    \        // You may create a new list and return it\n        if (lst1.length ==\
    \ 0 && lst2.length == 0) {\n            return lst1\n        }\n        var sum1\
    \ = 0\n        var sum2 = 0\n        for (i <- 0 until lst1.length) {\n      \
    \      sum1 += lst1(i).length\n        }\n        for (i <- 0 until lst2.length)\
    \ {\n            sum2 += lst2(i).length\n        }\n        if (sum1 < sum2) {\n\
    \            return lst1\n        } else if (sum1 > sum2) {\n            return\
    \ lst2\n        } else {\n            return lst1\n        }", "        // Fill\
    \ Up this function body\n        // `lst1` and `lst2` are lists of strings\n \
    \       // For example,\n        // >>> lst1\n        // List[String](\"hi\",\
    \ \"admin\")\n        // >>> lst2\n        // List[String](\"hI\", \"Hi\")\n \
    \       // You can use `lst1(0)` to get the first element of the list `lst1`\n\
    \        // You can use `lst1.length` to get the length of the list `lst1`\n \
    \       // You can use `lst1.isEmpty` to check if the list `lst1` is empty\n \
    \       // You can use `lst1.tail` to get the list `lst1` without the first element\n\
    \        // You can use `lst1.head` to get the first element of the list `lst1`\n\
    \        // You can use `lst1.filter` to filter the list `lst1`\n        // You\
    \ can use `lst1.map` to map the list `lst1`\n        // You can use `lst1.foldLeft`\
    \ to fold the list `lst1`\n        // You can use `lst1.foldRight` to fold the\
    \ list `lst1`\n        // You can use `lst1.:::(lst2)` to concatenate the list\
    \ `lst1` and `lst2`\n        // You can use `lst1 ++ lst2` to concatenate the\
    \ list `lst1` and `lst2`\n        // You can use `lst1.reverse` to reverse the\
    \ list `lst1`\n        // You can use `lst1.sortWith(_ < _)` to sort the list\
    \ `lst1`\n        // You can use `lst1.sortWith(_ > _)` to sort the list `lst1`\n\
    \        // You can use `lst1.sortWith(_.length < _.length)` to sort the list\
    \ `lst1`\n        // You can use `lst1.sortWith(_.length > _.length)` to sort\
    \ the list `lst1`\n        // You can use `lst1.sortWith(_", "        def totalMatchHelper(lst1\
    \ : List[String], lst2 : List[String], total1 : Int, total2 : Int) : List[String]\
    \ = {\n            if (lst1.isEmpty && lst2.isEmpty) return List[String]()\n \
    \           else if (lst1.isEmpty) return lst2\n            else if (lst2.isEmpty)\
    \ return lst1\n            else if (total1 < total2) return lst1\n           \
    \ else if (total1 > total2) return lst2\n            else return lst1\n      \
    \  }\n        totalMatchHelper(lst1, lst2, lst1.map(_.length).sum, lst2.map(_.length).sum)",
  "        // Fill Up this function body\n        // `lst1` and `lst2` are lists of\
    \ strings\n        // For example,\n        // >>> lst1\n        // List(\"hi\"\
    , \"admin\")\n        // >>> lst2\n        // List(\"hI\", \"Hi\")\n        //\
    \ >>> lst1.length\n        // 2\n        // >>> lst1(0)\n        // \"hi\"\n \
    \       // >>> lst1(1)\n        // \"admin\"\n        // >>> lst1(0).length\n\
    \        // 2\n        // >>> lst1(1).length\n        // 5\n        // >>> lst1(0).charAt(0)\n\
    \        // 'h'\n        // >>> lst1(0).charAt(1)\n        // 'i'\n        //\
    \ >>> lst1(1).charAt(0)\n        // 'a'\n        // >>> lst1(1).charAt(1)\n  \
    \      // 'd'\n        // >>> lst1(1).charAt(2)\n        // 'm'\n        // >>>\
    \ lst1(1).charAt(3)\n        // 'i'\n        // >>> lst1(1).charAt(4)\n      \
    \  // 'n'\n        // >>> lst1(1).charAt(5)\n        // java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 5\n        // >>> lst1(1).charAt(5)\n        // java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 5\n        // >>> lst1(1).charAt(4)\n        // 'n'\n\
    \        // >>> lst1(1).charAt(3)\n        // 'i'\n        // >>> lst1(1).charAt(2)\n\
    \        // 'm'\n        // >>> lst1(1).charAt(1)\n        // 'd'\n        //\
    \ >>> lst1(1).charAt(0)\n        // 'a'\n        // >>> lst1(0).charAt(1)\n  \
    \      // 'i'\n        // >>> lst1(0).charAt(0)\n        // 'h'\n       ", " \
    \       // Fill Up this function body\n        // `lst1` and `lst2` are lists\
    \ of strings\n        // You have to return a list of strings\n        if (lst1.length\
    \ == 0 && lst2.length == 0) return lst1\n        if (lst1.length == 0) return\
    \ lst2\n        if (lst2.length == 0) return lst1\n        var sum1 = 0\n    \
    \    var sum2 = 0\n        for (i <- 0 until lst1.length) {\n            sum1\
    \ += lst1(i).length\n        }\n        for (i <- 0 until lst2.length) {\n   \
    \         sum2 += lst2(i).length\n        }\n        if (sum1 < sum2) return lst1\n\
    \        else if (sum1 > sum2) return lst2\n        else return lst1", "     \
    \   // Fill Up this function body\n        // `lst1` and `lst2` are lists of strings\n\
    \        // You have to return a list of strings\n        // You can use any number\
    \ of lines\n        // You can use any number of helper functions\n        //\
    \ You can use any number of loops\n        // You can use any number of if-else\
    \ statements\n        // You can use any number of return statements\n       \
    \ // You can use any number of operators\n        // You can use any number of\
    \ data structures\n        // You can use any number of built-in functions\n \
    \       // You can use any number of built-in methods\n        // You can use\
    \ any number of built-in classes\n        // You can use any number of built-in\
    \ objects\n        // You can use any number of built-in packages\n        //\
    \ You can use any number of built-in libraries\n        // You can use any number\
    \ of built-in frameworks\n        // You can use any number of built-in APIs\n\
    \        // You can use any number of built-in protocols\n        // You can use\
    \ any number of built-in algorithms\n        // You can use any number of built-in\
    \ data structures\n        // You can use any number of built-in data types\n\
    \        // You can use any number of built-in data formats\n        // You can\
    \ use any number of built-in data encodings\n        // You can use any number\
    \ of built-in data compression\n        // You can use any number of built-in\
    \ data encryption\n        // You can use any number of built-in data hashing\n\
    \        // You can use any number of built-in data serialization\n        //\
    \ You can use any number of built-in data deserialization\n        // You can\
    \ use any number of built-in data compression\n        // You can use any number\
    \ of built-in data encryption\n        // You can use any number of built-in data\
    \ hashing\n        // You can use any number of built-in data serialization\n\
    \        // You can use any number of built-in data deserialization\n        //\
    \ You can use any number of built-in data compression\n        // You can use\
    \ any number of built-in data encryption\n        // You can use any number of\
    \ built-in data hashing\n        // You can use any number of built-in data serialization\n\
    \        // You can use any number", "        // Fill Up this function body\n\
    \        // `lst1` and `lst2` are lists of strings\n        // You have to return\
    \ a list of strings\n        if (lst1.length > lst2.length) lst2\n        else\
    \ if (lst1.length < lst2.length) lst1\n        else lst1", "        // Fill Up\
    \ this function body\n        // `lst1` and `lst2` are lists of strings\n    \
    \    // For example,\n        // >>> lst1\n        // List(\"hi\", \"admin\")\n\
    \        // >>> lst2\n        // List(\"hI\", \"Hi\")\n        // >>> lst1.length\n\
    \        // 2\n        // >>> lst2.length\n        // 2\n        // >>> lst1(0)\n\
    \        // \"hi\"\n        // >>> lst2(0)\n        // \"hI\"\n        // >>>\
    \ lst1(0).length\n        // 2\n        // >>> lst2(0).length\n        // 2\n\
    \        // >>> lst1(1)\n        // \"admin\"\n        // >>> lst2(1)\n      \
    \  // \"Hi\"\n        // >>> lst1(1).length\n        // 5\n        // >>> lst2(1).length\n\
    \        // 2\n        // >>> lst1(0) + lst1(1)\n        // \"hiadmin\"\n    \
    \    // >>> lst2(0) + lst2(1)\n        // \"hIHi\"\n        // >>> lst1(0) + lst1(1)\
    \ + lst2(0) + lst2(1)\n        // \"hiadminhIHi\"\n        // >>> lst1(0) + lst1(1)\
    \ + lst2(0) + lst2(1).length\n        // 11\n        // >>> lst1(0) + lst1(1).length\
    \ + lst2(0) + lst2(1).length\n        // 8\n        // >>> lst1(0).length + lst1(1).length\
    \ + lst2(0).length + lst2(1).length\n        // 9\n        // >>> lst1(0).length\
    \ + lst1(1).length\n        // 7\n        // >>> lst2(0).length + lst2(1).length\n\
    \        // 4\n        // >>> lst1(0).length + lst1(1).length < lst2(0).length\
    \ + lst2(1).length\n        // false\n        // >>> lst1", "        if (lst1.length\
    \ == 0) return lst2\n        if (lst2.length == 0) return lst1\n        var total1\
    \ = 0\n        var total2 = 0\n        for (i <- 0 until lst1.length) {\n    \
    \        total1 += lst1(i).length\n        }\n        for (i <- 0 until lst2.length)\
    \ {\n            total2 += lst2(i).length\n        }\n        if (total1 < total2)\
    \ return lst1\n        else return lst2", "        // Fill Up this function body\n\
    \        // `lst1` and `lst2` are lists of strings\n        // For example,\n\
    \        // >>> lst1\n        // List[String](\"hi\", \"admin\")\n        // >>>\
    \ lst2\n        // List[String](\"hI\", \"Hi\")\n        // >>> lst1(0)\n    \
    \    // \"hi\"\n        // >>> lst2(1)\n        // \"Hi\"\n        // >>> lst1(0).length\n\
    \        // 2\n        // >>> lst2(1).length\n        // 2\n        // >>> lst1(0)(0)\n\
    \        // 'h'\n        // >>> lst2(1)(1)\n        // 'i'\n        // >>> lst1(0)(0).toUpper\n\
    \        // 'H'\n        // >>> lst2(1)(1).toUpper\n        // 'I'\n        //\
    \ >>> lst1(0)(0).toUpper == lst2(1)(1).toUpper\n        // true\n        // >>>\
    \ lst1(0)(0).toUpper == lst2(1)(1)\n        // false\n        // >>> lst1(0)(0)\
    \ == lst2(1)(1).toUpper\n        // false\n        // >>> lst1(0)(0) == lst2(1)(1)\n\
    \        // false\n        // >>> lst1(0)(0).toUpper == lst2(1)(1).toUpper\n \
    \       // true\n        // >>> lst1(0)(0).toUpper == lst2(1)(1)\n        // false\n\
    \        // >>> lst1(0)(0) == lst2(1)(1).toUpper\n        // false\n        //\
    \ >>> lst1(0)(0) == lst2(1)(1)\n        // false\n        // >>> lst1(0)(0).toUpper\
    \ == lst2(1)(1).toUpper\n        // true\n        // >>> lst1(0)(0).toUpper ==\
    \ lst2(1)(1)\n        // false\n        // >>> lst1(0)(0) == lst2", "        //\
    \ Fill Up this function body\n        // `totalMatch` should return the list that\
    \ has total number of chars in the all strings of the list less than the other\
    \ list.\n        // if the two lists have the same number of chars, return the\
    \ first list.\n        // For example,\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        if (lst1.length == 0\
    \ && lst2.length == 0) {\n            return lst1\n        }\n        var sum1\
    \ = 0\n        var sum2 = 0\n        for (i <- lst1) {\n            sum1 += i.length\n\
    \        }\n        for (i <- lst2) {\n            sum2 += i.length\n        }\n\
    \        if (sum1 == sum2) {\n            return lst1\n        }\n        if (sum1\
    \ < sum2) {\n            return lst1\n        }\n        else {\n            return\
    \ lst2\n        }", "        if (lst1.isEmpty && lst2.isEmpty) return List[String]()\n\
    \        if (lst1.isEmpty) return lst2\n        if (lst2.isEmpty) return lst1\n\
    \        var total1 = 0\n        var total2 = 0\n        for (i <- 0 until lst1.length)\
    \ {\n            total1 += lst1(i).length\n        }\n        for (i <- 0 until\
    \ lst2.length) {\n            total2 += lst2(i).length\n        }\n        if\
    \ (total1 < total2) return lst1\n        else if (total1 > total2) return lst2\n\
    \        else return lst1", "        if (lst1.length == 0 && lst2.length == 0)\
    \ return lst1\n        if (lst1.length == 0) return lst2\n        if (lst2.length\
    \ == 0) return lst1\n        var total1 = 0\n        var total2 = 0\n        lst1.foreach(x\
    \ => total1 += x.length)\n        lst2.foreach(x => total2 += x.length)\n    \
    \    if (total1 < total2) return lst1\n        else if (total1 > total2) return\
    \ lst2\n        else return lst1", "        // Fill Up this function body\n  \
    \      // `lst1` and `lst2` are lists of strings\n        // You have to return\
    \ a list of strings\n        if (lst1.length == 0 && lst2.length == 0) return\
    \ List[String]()\n        if (lst1.length == 0) return lst2\n        if (lst2.length\
    \ == 0) return lst1\n        var sum1 = 0\n        var sum2 = 0\n        for (i\
    \ <- 0 until lst1.length) {\n            sum1 += lst1(i).length\n        }\n \
    \       for (i <- 0 until lst2.length) {\n            sum2 += lst2(i).length\n\
    \        }\n        if (sum1 < sum2) return lst1\n        else return lst2", " \
    \       // Fill Up this function body\n        // `totalMatch` should return the\
    \ list that has total number of chars in the all strings of the list less than\
    \ the other list.\n        // if the two lists have the same number of chars,\
    \ return the first list.\n        var total1 = 0\n        var total2 = 0\n   \
    \     for (i <- lst1) {\n            total1 += i.length\n        }\n        for\
    \ (i <- lst2) {\n            total2 += i.length\n        }\n        if (total1\
    \ < total2) {\n            return lst1\n        } else if (total1 > total2) {\n\
    \            return lst2\n        } else {\n            return lst1\n        }",
  "        // Fill Up this function body\n        // `lst1` and `lst2` are lists of\
    \ strings\n        // You have to return the list that has total number of chars\
    \ in the all strings of the list less than the other list.\n        // if the\
    \ two lists have the same number of chars, return the first list.\n        //\
    \ For example,\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\")))\n \
    \       // (List[String](\"hi\", \"admin\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n        // (List[String](\"\
    hI\", \"hi\", \"hi\"))\n        // >>> totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n       \
    \ // >>> totalMatch((List[String]()), (List[String]()))\n        // (List[String]())\n\
    \        if (lst1.length == 0 && lst2.length == 0) lst1\n        else if (lst1.length\
    \ == 0) lst2\n        else if (lst2.length == 0) lst1\n        else {\n      \
    \      var sum1 = 0\n            var sum2 = 0\n            for (i <- 0 until lst1.length)\
    \ sum1 += lst1(i).length\n            for (i <- 0 until lst2.length) sum2 += lst2(i).length\n\
    \            if (sum1 < sum2) lst1\n            else if (sum1 > sum2) lst2\n \
    \           else lst1\n        }", "        // Fill Up this function body\n  \
    \      // `lst1` and `lst2` are lists of strings\n        // For example,\n  \
    \      // >>> lst1\n        // List(\"hi\", \"admin\")\n        // >>> lst2\n\
    \        // List(\"hI\", \"Hi\")\n        // The function should return the list\
    \ that has total number of chars in the all strings of the list less than the\
    \ other list.\n        // For example,\n        // >>> totalMatch(lst1, lst2)\n\
    \        // List(\"hI\", \"Hi\")\n        // >>> totalMatch(lst2, lst1)\n    \
    \    // List(\"hI\", \"Hi\")\n        // >>> totalMatch(lst1, lst1)\n        //\
    \ List(\"hi\", \"admin\")\n        // >>> totalMatch(lst2, lst2)\n        // List(\"\
    hI\", \"Hi\")\n        // >>> totalMatch(List(\"4\"), List(\"1\", \"2\", \"3\"\
    , \"4\", \"5\"))\n        // List(\"4\")\n        // >>> totalMatch(List(\"1\"\
    , \"2\", \"3\", \"4\", \"5\"), List(\"4\"))\n        // List(\"4\")\n        //\
    \ >>> totalMatch(List(\"1\", \"2\", \"3\", \"4\", \"5\"), List(\"1\", \"2\", \"\
    3\", \"4\", \"5\"))\n        // List(\"1\", \"2\", \"3\", \"4\", \"5\")\n    \
    \    // >>> totalMatch(List(\"1\", \"2\", \"3\", \"4\", \"5\"), List(\"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\"))\n        // List(\"1\", \"2\", \"3\", \"4\"\
    , \"5\")\n        // >>> totalMatch(List(\"1\", \"2\", \"3\", \"4\", \"5\", \"\
    6\"), List(\"1\", \"2\", \"3\", \"4\", \"5\"))\n        // List(\"1\", \"2\",\
    \ \"3\", \"4\", \"5\")\n        // >>> totalMatch(List(\"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\"), List(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"))\n        //\
    \ List(\"1\", \"2\", \"3\", \"4", "        // Fill Up this function body\n   \
    \     // `lst1` and `lst2` are lists of strings\n        // You have to return\
    \ a list of strings\n        if (lst1.length == 0 && lst2.length == 0) {\n   \
    \         return lst1\n        }\n        var lst1_sum = 0\n        var lst2_sum\
    \ = 0\n        for (i <- 0 until lst1.length) {\n            lst1_sum += lst1(i).length\n\
    \        }\n        for (i <- 0 until lst2.length) {\n            lst2_sum +=\
    \ lst2(i).length\n        }\n        if (lst1_sum <= lst2_sum) {\n           \
    \ return lst1\n        }\n        return lst2", "        if (lst1.length == 0\
    \ && lst2.length == 0) return lst1\n        if (lst1.length == 0) return lst2\n\
    \        if (lst2.length == 0) return lst1\n        var total1 = 0\n        var\
    \ total2 = 0\n        for (i <- 0 until lst1.length) {\n            total1 +=\
    \ lst1(i).length\n        }\n        for (i <- 0 until lst2.length) {\n      \
    \      total2 += lst2(i).length\n        }\n        if (total1 < total2) return\
    \ lst1\n        if (total2 < total1) return lst2\n        return lst1", "    \
    \    // Fill Up this function body\n        // `lst1` and `lst2` are lists of\
    \ strings\n        // You have to return a list of strings\n        if (lst1.length\
    \ == 0 && lst2.length == 0) return lst1\n        if (lst1.length == 0) return\
    \ lst2\n        if (lst2.length == 0) return lst1\n        var sum1 = 0\n    \
    \    var sum2 = 0\n        for (i <- 0 until lst1.length) {\n            sum1\
    \ += lst1(i).length\n        }\n        for (i <- 0 until lst2.length) {\n   \
    \         sum2 += lst2(i).length\n        }\n        if (sum1 < sum2) return lst1\n\
    \        else return lst2", "        var lst1_total = 0\n        var lst2_total\
    \ = 0\n        for (i <- lst1) {\n            lst1_total += i.length\n       \
    \ }\n        for (i <- lst2) {\n            lst2_total += i.length\n        }\n\
    \        if (lst1_total < lst2_total) {\n            return lst1\n        }\n\
    \        else if (lst1_total > lst2_total) {\n            return lst2\n      \
    \  }\n        else {\n            return lst1\n        }", "        // Fill Up\
    \ this function body\n        // `lst1` and `lst2` are lists of strings\n    \
    \    // For example,\n        //     lst1 = List(\"hi\", \"admin\")\n        //\
    \     lst2 = List(\"hI\", \"Hi\")\n        // You have to return the list that\
    \ has total number of chars in the all strings of the list less than the other\
    \ list.\n        // For example,\n        //     lst1 = List(\"hi\", \"admin\"\
    )\n        //     lst2 = List(\"hI\", \"Hi\")\n        //     totalMatch(lst1,\
    \ lst2) = List(\"hI\", \"Hi\")\n        //     lst1 = List(\"hi\", \"admin\")\n\
    \        //     lst2 = List(\"hi\", \"hi\", \"admin\", \"project\")\n        //\
    \     totalMatch(lst1, lst2) = List(\"hi\", \"admin\")\n        //     lst1 =\
    \ List(\"hi\", \"admin\")\n        //     lst2 = List(\"hI\", \"hi\", \"hi\")\n\
    \        //     totalMatch(lst1, lst2) = List(\"hI\", \"hi\", \"hi\")\n      \
    \  //     lst1 = List(\"4\")\n        //     lst2 = List(\"1\", \"2\", \"3\",\
    \ \"4\", \"5\")\n        //     totalMatch(lst1, lst2) = List(\"4\")\n       \
    \ // `lst1` and `lst2` are lists of strings\n        // For example,\n       \
    \ //     lst1 = List(\"hi\", \"admin\")\n        //     lst2 = List(\"hI\", \"\
    Hi\")\n        // You have to return the list that has total number of chars in\
    \ the all strings of the list less than the other list.\n        // For example,\n\
    \        //     lst1 = List(\"hi\", \"admin\")\n        //     lst2 = List(\"\
    hI\", \"Hi\")\n        //     totalMatch(lst1, lst2) = List(\"hI\", \"Hi\")\n\
    \        //     lst1 = List(\"hi\", \"admin\")\n        //     lst2 = List(\"\
    hi\", \"hi\", \"admin\", \"project\")\n        //    ", "        // Fill Up this\
    \ function body\n        // `totalMatch` should return the list that has total\
    \ number of chars in the all strings of the list less than the other list.\n \
    \       // if the two lists have the same number of chars, return the first list.\n\
    \        // For example,\n        // >>> totalMatch((List[String](\"hi\", \"admin\"\
    )), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n\
    \        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        var lst1_len = 0\n \
    \       var lst2_len = 0\n        for (i <- lst1) {\n            lst1_len += i.length\n\
    \        }\n        for (i <- lst2) {\n            lst2_len += i.length\n    \
    \    }\n        if (lst1_len < lst2_len) lst1\n        else if (lst1_len > lst2_len)\
    \ lst2\n        else lst1", "        // Fill Up this function body\n        //\
    \ `totalMatch` should return a list of strings\n        // For example if the\
    \ function is called like this:\n        // totalMatch(List(\"hi\", \"admin\"\
    ), List(\"hI\", \"Hi\"))\n        // Then it should return List(\"hI\", \"Hi\"\
    )\n        if (lst1.length == 0 && lst2.length == 0) {\n            return lst1\n\
    \        }\n        if (lst1.length == 0) {\n            return lst2\n       \
    \ }\n        if (lst2.length == 0) {\n            return lst1\n        }\n   \
    \     var lst1_total = 0\n        var lst2_total = 0\n        for (i <- 0 until\
    \ lst1.length) {\n            lst1_total += lst1(i).length\n        }\n      \
    \  for (i <- 0 until lst2.length) {\n            lst2_total += lst2(i).length\n\
    \        }\n        if (lst1_total < lst2_total) {\n            return lst1\n\
    \        }\n        else if (lst1_total > lst2_total) {\n            return lst2\n\
    \        }\n        else {\n            return lst1\n        }", "        // Fill\
    \ Up this function body\n        // `lst1` and `lst2` are lists of strings\n \
    \       // You have to return a list of strings\n        if (lst1.length == 0\
    \ && lst2.length == 0) return lst1\n        if (lst1.length == 0) return lst2\n\
    \        if (lst2.length == 0) return lst1\n        var lst1_total = 0\n     \
    \   var lst2_total = 0\n        for (i <- 0 until lst1.length) {\n           \
    \ lst1_total += lst1(i).length\n        }\n        for (i <- 0 until lst2.length)\
    \ {\n            lst2_total += lst2(i).length\n        }\n        if (lst1_total\
    \ < lst2_total) return lst1\n        else if (lst1_total > lst2_total) return\
    \ lst2\n        else return lst1", "        // Fill Up this function body\n  \
    \      // `lst1` and `lst2` are lists of strings\n        // You have to return\
    \ the list that has total number of chars in the all strings of the list less\
    \ than the other list.\n        // if the two lists have the same number of chars,\
    \ return the first list.\n        if (lst1.length == 0 && lst2.length == 0) {\n\
    \            return lst1\n        }\n        if (lst1.length == 0) {\n       \
    \     return lst2\n        }\n        if (lst2.length == 0) {\n            return\
    \ lst1\n        }\n        var sum1 = 0\n        var sum2 = 0\n        for (i\
    \ <- 0 until lst1.length) {\n            sum1 += lst1(i).length\n        }\n \
    \       for (i <- 0 until lst2.length) {\n            sum2 += lst2(i).length\n\
    \        }\n        if (sum1 < sum2) {\n            return lst1\n        }\n \
    \       if (sum1 > sum2) {\n            return lst2\n        }\n        return\
    \ lst1", "        // Fill Up this function body\n        // `lst1` and `lst2`\
    \ are lists of strings\n        // You have to return a list of strings\n    \
    \    if (lst1.length == 0 && lst2.length == 0) return lst1\n        if (lst1.length\
    \ == 0) return lst2\n        if (lst2.length == 0) return lst1\n        var lst1_total\
    \ = 0\n        var lst2_total = 0\n        for (i <- 0 until lst1.length) lst1_total\
    \ += lst1(i).length\n        for (i <- 0 until lst2.length) lst2_total += lst2(i).length\n\
    \        if (lst1_total == lst2_total) return lst1\n        if (lst1_total < lst2_total)\
    \ return lst1\n        return lst2", "        if (lst1.length == 0) return lst2\n\
    \        if (lst2.length == 0) return lst1\n        var sum1 = 0\n        var\
    \ sum2 = 0\n        for (i <- 0 until lst1.length) {\n            sum1 += lst1(i).length\n\
    \        }\n        for (i <- 0 until lst2.length) {\n            sum2 += lst2(i).length\n\
    \        }\n        if (sum1 < sum2) return lst1\n        else return lst2", " \
    \       // Fill Up this function body\n        // `lst1` and `lst2` are lists\
    \ of strings\n        // You have to return a list of strings\n        var sum1\
    \ = 0\n        var sum2 = 0\n        for (i <- lst1) {\n            sum1 += i.length\n\
    \        }\n        for (i <- lst2) {\n            sum2 += i.length\n        }\n\
    \        if (sum1 < sum2) {\n            return lst1\n        } else if (sum1\
    \ > sum2) {\n            return lst2\n        } else {\n            return lst1\n\
    \        }", "        // Fill Up this function body\n        // `totalMatch` should\
    \ return the list that has total number of chars in the all strings of the list\
    \ less than the other list.\n        // if the two lists have the same number\
    \ of chars, return the first list.\n        // For example,\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n", "        // Fill Up this\
    \ function body\n        // `lst1` and `lst2` are lists of strings\n        //\
    \ You have to return the list that has total number of chars in the all strings\
    \ of the list less than the other list.\n        // if the two lists have the\
    \ same number of chars, return the first list.\n        var sum1 = 0\n       \
    \ var sum2 = 0\n        for (i <- lst1) {\n            sum1 += i.length\n    \
    \    }\n        for (i <- lst2) {\n            sum2 += i.length\n        }\n \
    \       if (sum1 < sum2) {\n            return lst1\n        } else if (sum1 >\
    \ sum2) {\n            return lst2\n        } else {\n            return lst1\n\
    \        }", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n\
    \        else lst2", "        // Fill Up this function body\n        // `totalMatch`\
    \ should return the list that has total number of chars in the all strings of\
    \ the list less than the other list.\n        // if the two lists have the same\
    \ number of chars, return the first list.\n        // For example,\n        //\
    \ >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"Hi\"\
    )))\n        // (List[String](\"hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\")))\n \
    \       // (List[String](\"hi\", \"admin\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n        // (List[String](\"\
    hI\", \"hi\", \"hi\"))\n        // >>> totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n       \
    \ // >>> totalMatch((List[String]()), (List[String]()))\n        // (List[String]())\n\
    \        val lst1_total = lst1.foldLeft(0)((acc, x) => acc + x.length)\n     \
    \   val lst2_total = lst2.foldLeft(0)((acc, x) => acc + x.length)\n        if\
    \ (lst1_total < lst2_total) lst1\n        else if (lst1_total > lst2_total) lst2\n\
    \        else lst1", "        // Fill Up this function body\n        // `lst1`\
    \ and `lst2` are lists of strings\n        // You have to return a list of strings\n\
    \        if (lst1.length == 0 && lst2.length == 0) return lst1\n        if (lst1.length\
    \ == 0) return lst2\n        if (lst2.length == 0) return lst1\n        var sum1\
    \ = 0\n        var sum2 = 0\n        for (i <- 0 until lst1.length) {\n      \
    \      sum1 += lst1(i).length\n        }\n        for (i <- 0 until lst2.length)\
    \ {\n            sum2 += lst2(i).length\n        }\n        if (sum1 < sum2) return\
    \ lst1\n        else return lst2", "        // Fill Up this function body\n  \
    \      // `totalMatch` should return the list that has total number of chars in\
    \ the all strings of the list less than the other list.\n        // if the two\
    \ lists have the same number of chars, return the first list.\n        // For\
    \ example,\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\")))\n \
    \       // (List[String](\"hi\", \"admin\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n        // (List[String](\"\
    hI\", \"hi\", \"hi\"))\n        // >>> totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n       \
    \ // >>> totalMatch((List[String]()), (List[String]()))\n        // (List[String]())\n\
    \        var lst1_total = 0\n        var lst2_total = 0\n        for (i <- lst1)\
    \ {\n            lst1_total += i.length\n        }\n        for (i <- lst2) {\n\
    \            lst2_total += i.length\n        }\n        if (lst1_total < lst2_total)\
    \ {\n            return lst1\n        } else {\n            return lst2\n    \
    \    }", "        if (lst1.length == 0 && lst2.length == 0) return lst1\n    \
    \    if (lst1.length == 0) return lst2\n        if (lst2.length == 0) return lst1\n\
    \        var total1 = 0\n        var total2 = 0\n        for (i <- 0 until lst1.length)\
    \ {\n            total1 += lst1(i).length\n        }\n        for (i <- 0 until\
    \ lst2.length) {\n            total2 += lst2(i).length\n        }\n        if\
    \ (total1 < total2) return lst1\n        else if (total1 > total2) return lst2\n\
    \        else return lst1", "        // Fill Up this function body\n        //\
    \ `lst1` and `lst2` are lists of strings\n        // You have to return the list\
    \ that has total number of chars in the all strings of the list less than the\
    \ other list.\n        // if the two lists have the same number of chars, return\
    \ the first list.\n        var sum1 = 0\n        var sum2 = 0\n        for (i\
    \ <- lst1) {\n            sum1 += i.length\n        }\n        for (i <- lst2)\
    \ {\n            sum2 += i.length\n        }\n        if (sum1 < sum2) lst1 else\
    \ lst2", "        // Fill Up this function body\n        // `totalMatch` is a\
    \ function that accepts two lists of strings and returns the list that has \n\
    \        // total number of chars in the all strings of the list less than the\
    \ other list.\n        // if the two lists have the same number of chars, return\
    \ the first list.\n        // Examples\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        if (lst1.length\
    \ == 0 && lst2.length == 0) {\n            return lst1\n        }\n        var\
    \ sum1 = 0\n        var sum2 = 0\n        for (i <- 0 until lst1.length) {\n \
    \           sum1 += lst1(i).length\n        }\n        for (i <- 0 until lst2.length)\
    \ {\n            sum2 += lst2(i).length\n        }\n        if (sum1 < sum2) {\n\
    \            return lst1\n        }\n        else if (sum1 > sum2) {\n       \
    \     return lst2\n        }\n        else {\n            return lst1\n      \
    \  }", "        // Fill Up this function body\n        // `totalMatch` should\
    \ return the list that has total number of chars in the all strings of the list\
    \ less than the other list.\n        // if the two lists have the same number\
    \ of chars, return the first list.\n        // For example,\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        var lst1_len = 0\n \
    \       var lst2_len = 0\n        for (i <- lst1) {\n            lst1_len += i.length\n\
    \        }\n        for (i <- lst2) {\n            lst2_len += i.length\n    \
    \    }\n        if (lst1_len < lst2_len) {\n            return lst1\n        }\
    \ else {\n            return lst2\n        }", "        // Fill Up this function\
    \ body\n        // `totalMatch` should return the list that has total number of\
    \ chars in the all strings of the list less than the other list.\n        // if\
    \ the two lists have the same number of chars, return the first list.\n      \
    \  var total1 = 0\n        var total2 = 0\n        for (i <- lst1) {\n       \
    \     total1 += i.length\n        }\n        for (i <- lst2) {\n            total2\
    \ += i.length\n        }\n        if (total1 < total2) {\n            return lst1\n\
    \        } else if (total1 > total2) {\n            return lst2\n        } else\
    \ {\n            return lst1\n        }", "        // Fill Up this function body\n\
    \        // `lst1` and `lst2` are lists of strings\n        // You have to return\
    \ the list that has total number of chars in the all strings of the list less\
    \ than the other list.\n        // if the two lists have the same number of chars,\
    \ return the first list.\n        // For example,\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        if (lst1.length\
    \ == 0 && lst2.length == 0) {\n            return lst1\n        }\n        var\
    \ sum1 = 0\n        var sum2 = 0\n        for (i <- 0 until lst1.length) {\n \
    \           sum1 += lst1(i).length\n        }\n        for (i <- 0 until lst2.length)\
    \ {\n            sum2 += lst2(i).length\n        }\n        if (sum1 < sum2) {\n\
    \            return lst1\n        } else if (sum1 > sum2) {\n            return\
    \ lst2\n        } else {\n            return lst1\n        }", "        // Fill\
    \ Up this function body\n        // `lst1` and `lst2` are lists of strings\n \
    \       // For example,\n        // >>> lst1\n        // List(\"hi\", \"admin\"\
    )\n        // >>> lst2\n        // List(\"hI\", \"Hi\")\n        // You can use\
    \ `lst1.length` to get the length of the list `lst1`\n        // You can use `lst1(0)`\
    \ to get the first element of the list `lst1`\n        // You can use `lst1(1)`\
    \ to get the second element of the list `lst1`\n        // You can use `lst1(2)`\
    \ to get the third element of the list `lst1`\n        // You can use `lst1(3)`\
    \ to get the fourth element of the list `lst1`\n        // You can use `lst1(4)`\
    \ to get the fifth element of the list `lst1`\n        // You can use `lst1(5)`\
    \ to get the sixth element of the list `lst1`\n        // You can use `lst1(6)`\
    \ to get the seventh element of the list `lst1`\n        // You can use `lst1(7)`\
    \ to get the eighth element of the list `lst1`\n        // You can use `lst1(8)`\
    \ to get the ninth element of the list `lst1`\n        // You can use `lst1(9)`\
    \ to get the tenth element of the list `lst1`\n        // You can use `lst1(10)`\
    \ to get the eleventh element of the list `lst1`\n        // You can use `lst1(11)`\
    \ to get the twelfth element of the list `lst1`\n        // You can use `lst1(12)`\
    \ to get the thirteenth element of the list `lst1`\n        // You can use `lst1(13)`\
    \ to get the fourteenth element of the list `lst1`\n        // You can use `lst1(14)`\
    \ to get the fifteenth element of the list `lst1`\n        // You can use `lst",
  "        if (lst1.isEmpty && lst2.isEmpty) lst1\n        else if (lst1.isEmpty)\
    \ lst2\n        else if (lst2.isEmpty) lst1\n        else {\n            val sum1\
    \ = lst1.foldLeft(0)((sum, str) => sum + str.length)\n            val sum2 = lst2.foldLeft(0)((sum,\
    \ str) => sum + str.length)\n            if (sum1 < sum2) lst1\n            else\
    \ if (sum1 > sum2) lst2\n            else lst1\n        }", "        // Fill Up\
    \ this function body\n        // `lst1` and `lst2` are lists of strings\n    \
    \    // You have to return the list that has total number of chars in the all\
    \ strings of the list less than the other list.\n        // if the two lists have\
    \ the same number of chars, return the first list.\n        var sum1 = 0\n   \
    \     var sum2 = 0\n        for (i <- lst1) {\n            sum1 += i.length\n\
    \        }\n        for (i <- lst2) {\n            sum2 += i.length\n        }\n\
    \        if (sum1 < sum2) {\n            return lst1\n        } else if (sum1\
    \ > sum2) {\n            return lst2\n        } else {\n            return lst1\n\
    \        }", "        // Fill Up this function body\n        // `lst1` and `lst2`\
    \ are lists of strings\n        // For example,\n        // >>> lst1\n       \
    \ // List(\"hi\", \"admin\")\n        // >>> lst2\n        // List(\"hI\", \"\
    Hi\")\n        // You can access the length of a string using `.length` method\n\
    \        // For example,\n        // >>> \"hi\".length\n        // 2\n       \
    \ // You can access the length of a list using `.length` method\n        // For\
    \ example,\n        // >>> List(\"hi\", \"admin\").length\n        // 2\n    \
    \    // You can access the elements of a list using `(index)`\n        // For\
    \ example,\n        // >>> List(\"hi\", \"admin\")(0)\n        // \"hi\"\n   \
    \     // >>> List(\"hi\", \"admin\")(1)\n        // \"admin\"\n        // You\
    \ can use `if` expression in Scala.\n        // For example,\n        // >>> if\
    \ (1 > 0) 1 else 0\n        // 1\n        // >>> if (1 < 0) 1 else 0\n       \
    \ // 0\n        // You can use `if` expression as the value of a variable.\n \
    \       // For example,\n        // >>> val x = if (1 > 0) 1 else 0\n        //\
    \ >>> x\n        // 1\n        // You can use `if` expression as the value of\
    \ a function.\n        // For example,\n        // >>> def foo(x : Int) = if (x\
    \ > 0) 1 else 0\n        // >>> foo(1)\n        // 1\n        // >>> foo(0)\n\
    \        // 0\n        // You can use `if` expression as the value of a function\
    \ with multiple arguments.\n        // For example,\n        // >>> def foo(x\
    \ : Int, y : Int) = if (x > y) x else y\n        // >>> foo(1, 2)\n        //\
    \ 2\n        // >>> foo(2, 1)\n        // 2\n        // You can use `if` expression\
    \ as the value of a function with multiple arguments and multiple return values.\n\
    \        // For example,\n        // >>> def foo(x : Int, y : Int) = if (x > y)\
    \ (x, y) else (y", "        if (lst1.length == 0) lst2\n        else if (lst2.length\
    \ == 0) lst1\n        else {\n            var sum1 = 0\n            var sum2 =\
    \ 0\n            for (i <- 0 until lst1.length) {\n                sum1 += lst1(i).length\n\
    \            }\n            for (i <- 0 until lst2.length) {\n               \
    \ sum2 += lst2(i).length\n            }\n            if (sum1 < sum2) lst1\n \
    \           else if (sum1 > sum2) lst2\n            else lst1\n        }", " \
    \       if (lst1.length == 0 && lst2.length == 0) return lst1\n        if (lst1.length\
    \ == 0) return lst2\n        if (lst2.length == 0) return lst1\n        var total1\
    \ = 0\n        var total2 = 0\n        for (i <- 0 until lst1.length) {\n    \
    \        total1 += lst1(i).length\n        }\n        for (i <- 0 until lst2.length)\
    \ {\n            total2 += lst2(i).length\n        }\n        if (total1 < total2)\
    \ return lst1\n        if (total2 < total1) return lst2\n        return lst1",
  "        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2", "        var total1 = 0\n        var total2 = 0\n        for (str <-\
    \ lst1) {\n            total1 += str.length\n        }\n        for (str <- lst2)\
    \ {\n            total2 += str.length\n        }\n        if (total1 < total2)\
    \ {\n            return lst1\n        } else if (total1 > total2) {\n        \
    \    return lst2\n        } else {\n            return lst1\n        }", "   \
    \     // Fill Up this function body\n        // `totalMatch` is a function that\
    \ accepts two lists of strings and returns the list that has \n        // total\
    \ number of chars in the all strings of the list less than the other list.\n \
    \       // if the two lists have the same number of chars, return the first list.\n\
    \        // For example,\n        // >>> totalMatch((List[String](\"hi\", \"admin\"\
    )), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n\
    \        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String", "        // Fill Up this function body\n        // `totalMatch`\
    \ should return the list that has total number of chars in the all strings of\
    \ the list less than the other list.\n        // if the two lists have the same\
    \ number of chars, return the first list.\n        if (lst1.size == 0 && lst2.size\
    \ == 0) {\n            return lst1\n        } else if (lst1.size == 0) {\n   \
    \         return lst2\n        } else if (lst2.size == 0) {\n            return\
    \ lst1\n        }\n        var sum1 = 0\n        var sum2 = 0\n        for (i\
    \ <- 0 until lst1.size) {\n            sum1 += lst1(i).size\n        }\n     \
    \   for (i <- 0 until lst2.size) {\n            sum2 += lst2(i).size\n       \
    \ }\n        if (sum1 < sum2) {\n            return lst1\n        } else if (sum1\
    \ > sum2) {\n            return lst2\n        } else {\n            return lst1\n\
    \        }", "        // Fill Up this function body\n        // `totalMatch` should\
    \ return the list that has total number of chars in the all strings of the list\
    \ less than the other list.\n        // if the two lists have the same number\
    \ of chars, return the first list.\n        // For example,\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n", "        if (lst1.length\
    \ == 0 && lst2.length == 0) return lst1\n        if (lst1.length == 0) return\
    \ lst2\n        if (lst2.length == 0) return lst1\n        var total1 = 0\n  \
    \      var total2 = 0\n        for (i <- 0 until lst1.length) {\n            total1\
    \ += lst1(i).length\n        }\n        for (i <- 0 until lst2.length) {\n   \
    \         total2 += lst2(i).length\n        }\n        if (total1 == total2) return\
    \ lst1\n        if (total1 < total2) return lst1\n        return lst2", "    \
    \    // Fill Up this function body\n        // `lst1` and `lst2` are lists of\
    \ strings\n        // For example,\n        // >>> lst1\n        // List[String](\"\
    hi\", \"admin\")\n        // >>> lst2\n        // List[String](\"hI\", \"Hi\"\
    )\n        // You can use `lst1.length` to get the length of `lst1`\n        //\
    \ You can use `lst1(0)` to get the first element of `lst1`\n        // You can\
    \ use `lst1(1)` to get the second element of `lst1`\n        // You can use `lst1(2)`\
    \ to get the third element of `lst1`\n        // You can use `lst1(3)` to get\
    \ the fourth element of `lst1`\n        // You can use `lst1(4)` to get the fifth\
    \ element of `lst1`\n        // You can use `lst1(5)` to get the sixth element\
    \ of `lst1`\n        // You can use `lst1(6)` to get the seventh element of `lst1`\n\
    \        // You can use `lst1(7)` to get the eighth element of `lst1`\n      \
    \  // You can use `lst1(8)` to get the ninth element of `lst1`\n        // You\
    \ can use `lst1(9)` to get the tenth element of `lst1`\n        // You can use\
    \ `lst1(10)` to get the eleventh element of `lst1`\n        // You can use `lst1(11)`\
    \ to get the twelfth element of `lst1`\n        // You can use `lst1(12)` to get\
    \ the thirteenth element of `lst1`\n        // You can use `lst1(13)` to get the\
    \ fourteenth element of `lst1`\n        // You can use `lst1(14)` to get the fifteenth\
    \ element of `lst1`\n        // You can use `lst1(15)` to get the sixteenth element\
    \ of `lst1`\n        // You can use `lst", "        if (lst1.length == 0 && lst2.length\
    \ == 0) return lst1\n        if (lst1.length == 0) return lst2\n        if (lst2.length\
    \ == 0) return lst1\n        var sum1 = 0\n        var sum2 = 0\n        for (i\
    \ <- 0 until lst1.length) {\n            sum1 += lst1(i).length\n        }\n \
    \       for (i <- 0 until lst2.length) {\n            sum2 += lst2(i).length\n\
    \        }\n        if (sum1 < sum2) return lst1\n        if (sum1 > sum2) return\
    \ lst2\n        return lst1", "        // Fill Up this function body\n       \
    \ // `lst1` and `lst2` are lists of strings\n        // You have to return a list\
    \ of strings\n        if (lst1.length == 0 && lst2.length == 0) return lst1\n\
    \        if (lst1.length == 0) return lst2\n        if (lst2.length == 0) return\
    \ lst1\n        var sum1 = 0\n        var sum2 = 0\n        for (i <- 0 until\
    \ lst1.length) {\n            sum1 += lst1(i).length\n        }\n        for (i\
    \ <- 0 until lst2.length) {\n            sum2 += lst2(i).length\n        }\n \
    \       if (sum1 < sum2) return lst1\n        else if (sum1 > sum2) return lst2\n\
    \        else return lst1", "        // Fill Up this function body\n        //\
    \ `lst1` and `lst2` are lists of strings\n        // For example,\n        //\
    \ >>> lst1\n        // List[String](\"hi\", \"admin\")\n        // >>> lst2\n\
    \        // List[String](\"hi\", \"hi\", \"admin\", \"project\")\n        // >>>\
    \ lst1.length\n        // 2\n        // >>> lst2.length\n        // 4\n      \
    \  // >>> lst1(0)\n        // \"hi\"\n        // >>> lst2(0)\n        // \"hi\"\
    \n        // >>> lst1(0).length\n        // 2\n        // >>> lst2(0).length\n\
    \        // 2\n        // >>> lst1(1)\n        // \"admin\"\n        // >>> lst2(1)\n\
    \        // \"hi\"\n        // >>> lst1(1).length\n        // 5\n        // >>>\
    \ lst2(1).length\n        // 2\n        // >>> lst1(2)\n        // java.lang.IndexOutOfBoundsException:\
    \ 2\n        // >>> lst2(2)\n        // \"admin\"\n        // >>> lst1(2).length\n\
    \        // java.lang.IndexOutOfBoundsException: 2\n        // >>> lst2(2).length\n\
    \        // 5\n        // >>> lst1(3)\n        // java.lang.IndexOutOfBoundsException:\
    \ 3\n        // >>> lst2(3)\n        // \"project\"\n        // >>> lst1(3).length\n\
    \        // java.lang.IndexOutOfBoundsException: 3\n        // >>> lst2(3).length\n\
    \        // 7\n        // >>> lst1(4)\n        // java.lang.IndexOutOfBoundsException:\
    \ 4\n        // >>> lst2(4)\n        // java.lang.IndexOutOfBoundsException: 4\n\
    \        // >>> lst1(4).length\n        // java.lang.IndexOutOfBoundsException:\
    \ 4\n        // >>> lst2(4).length\n        // java.lang.IndexOutOfBoundsException:\
    \ 4\n        // >>> lst1.length\n        // 2\n        // >>> l", "        //\
    \ Fill Up this function body\n        // `totalMatch` is a function that accepts\
    \ two lists of strings and returns the list that has \n        // total number\
    \ of chars in the all strings of the list less than the other list.\n        //\
    \ if the two lists have the same number of chars, return the first list.\n   \
    \     // Examples\n        // >>> totalMatch((List[String]()), (List[String]()))\n\
    \        // (List[String]())\n        // >>> totalMatch((List[String](\"hi\",\
    \ \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"hI\"\
    , \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        if (lst1.isEmpty\
    \ && lst2.isEmpty) {\n            return lst1\n        }\n        if (lst1.isEmpty)\
    \ {\n            return lst2\n        }\n        if (lst2.isEmpty) {\n       \
    \     return lst1\n        }\n        var sum1 = 0\n        var sum2 = 0\n   \
    \     for (i <- lst1) {\n            sum1 += i.length\n        }\n        for\
    \ (i <- lst2) {\n            sum2 += i.length\n        }\n        if (sum1 ==\
    \ sum2) {\n            return lst1\n        }\n        if (sum1 < sum2) {\n  \
    \          return lst1\n        }\n        else {\n            return lst2\n \
    \       }", "        // Fill Up this function body\n        // `totalMatch` must\
    \ be a recursive function\n        if (lst1.isEmpty && lst2.isEmpty) return lst1\n\
    \        else if (lst1.isEmpty) return lst2\n        else if (lst2.isEmpty) return\
    \ lst1\n        else {\n            var lst1_total = 0\n            var lst2_total\
    \ = 0\n            for (i <- lst1) {\n                lst1_total += i.length\n\
    \            }\n            for (i <- lst2) {\n                lst2_total += i.length\n\
    \            }\n            if (lst1_total < lst2_total) return lst1\n       \
    \     else if (lst1_total > lst2_total) return lst2\n            else return lst1\n\
    \        }", "        // Fill Up this function body\n        // `totalMatch` should\
    \ return a list of strings\n        // For example if the function is called with\n\
    \        // totalMatch(List(\"hi\", \"admin\"), List(\"hI\", \"Hi\"))\n      \
    \  // the returned value should be List(\"hI\", \"Hi\")\n        var lst1Total\
    \ = 0\n        var lst2Total = 0\n        for (i <- lst1) {\n            lst1Total\
    \ += i.length\n        }\n        for (i <- lst2) {\n            lst2Total +=\
    \ i.length\n        }\n        if (lst1Total < lst2Total) {\n            return\
    \ lst1\n        } else if (lst1Total > lst2Total) {\n            return lst2\n\
    \        } else {\n            return lst1\n        }", "        // Fill Up this\
    \ function body\n        // `lst1` and `lst2` are lists of strings\n        //\
    \ You have to return the list that has total number of chars in the all strings\
    \ of the list less than the other list.\n        // if the two lists have the\
    \ same number of chars, return the first list.\n        val lst1_len = lst1.foldLeft(0)((a,\
    \ b) => a + b.length)\n        val lst2_len = lst2.foldLeft(0)((a, b) => a + b.length)\n\
    \        if (lst1_len < lst2_len) lst1 else lst2", "        // Fill Up this function\
    \ body\n        // `totalMatch` is a function that accepts two lists of strings\
    \ and returns the list that has \n        // total number of chars in the all\
    \ strings of the list less than the other list.\n        // if the two lists have\
    \ the same number of chars, return the first list.\n        // Examples\n    \
    \    // >>> totalMatch((List[String]()), (List[String]()))\n        // (List[String]())\n\
    \        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\")))\n \
    \       // (List[String](\"hi\", \"admin\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n        // (List[String](\"\
    hI\", \"hi\", \"hi\"))\n        // >>> totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n       \
    \ if (lst1.length == 0 && lst2.length == 0) {\n            return lst1\n     \
    \   }\n        var lst1_len = 0\n        var lst2_len = 0\n        for (i <- 0\
    \ to lst1.length - 1) {\n            lst1_len += lst1(i).length\n        }\n \
    \       for (i <- 0 to lst2.length - 1) {\n            lst2_len += lst2(i).length\n\
    \        }\n        if (lst1_len < lst2_len) {\n            return lst1\n    \
    \    } else if (lst1_len > lst2_len) {\n            return lst2\n        } else\
    \ {\n            return lst1\n        }", "        // Fill Up this function body\n\
    \        // `lst1` and `lst2` are lists of strings\n        // Compute and return\
    \ the list with the total number of chars in the all strings of the list less\
    \ than the other list\n        // If the two lists have the same number of chars,\
    \ return the first list\n        // Constraints: Do not use any inbuilt functions\n\
    \        var lst1_total = 0\n        var lst2_total = 0\n        for (i <- lst1)\
    \ {\n            lst1_total += i.length\n        }\n        for (i <- lst2) {\n\
    \            lst2_total += i.length\n        }\n        if (lst1_total < lst2_total)\
    \ {\n            return lst1\n        } else if (lst1_total > lst2_total) {\n\
    \            return lst2\n        } else {\n            return lst1\n        }",
  "        // Fill Up this function body\n        // `lst1` and `lst2` are lists of\
    \ strings\n        // For example,\n        // >>> lst1\n        // List(\"hi\"\
    , \"admin\")\n        // >>> lst2\n        // List(\"hI\", \"Hi\")\n        //\
    \ >>> lst1(0)\n        // \"hi\"\n        // >>> lst2(1)\n        // \"Hi\"\n\
    \        // >>> lst1(0).length\n        // 2\n        // >>> lst2(1).length\n\
    \        // 2\n        // >>> lst1.length\n        // 2\n        // >>> lst2.length\n\
    \        // 2\n        // >>> lst1.length == lst2.length\n        // true\n  \
    \      // >>> lst1.length > lst2.length\n        // false\n        // >>> lst1.length\
    \ < lst2.length\n        // false\n        // >>> lst1.length >= lst2.length\n\
    \        // true\n        // >>> lst1.length <= lst2.length\n        // true\n\
    \        // >>> lst1.length != lst2.length\n        // false\n        // >>> lst1.length\
    \ + lst2.length\n        // 4\n        // >>> lst1.length - lst2.length\n    \
    \    // 0\n        // >>> lst1.length * lst2.length\n        // 4\n        //\
    \ >>> lst1.length / lst2.length\n        // 1\n        // >>> lst1.length % lst2.length\n\
    \        // 0\n        // >>> lst1.length.toDouble / lst2.length.toDouble\n  \
    \      // 1.0\n        // >>> lst1.length.toDouble / lst2.length\n        // 1.0\n\
    \        // >>> lst1.length / lst2.length.toDouble\n        // 1.0\n        //\
    \ >>> lst1.length.toFloat / lst2.length.toFloat\n        // 1.0\n        // >>>\
    \ lst1.length.toFloat / lst2.length\n        // 1.0\n        // >>> lst1.length\
    \ / lst2.length.toFloat\n        // 1", "        if (lst1.length == 0 && lst2.length\
    \ == 0) return lst1\n        if (lst1.length == 0) return lst2\n        if (lst2.length\
    \ == 0) return lst1\n        var sum1 = 0\n        var sum2 = 0\n        for (i\
    \ <- 0 until lst1.length) sum1 += lst1(i).length\n        for (i <- 0 until lst2.length)\
    \ sum2 += lst2(i).length\n        if (sum1 < sum2) return lst1\n        else return\
    \ lst2", "        // Fill Up this function body\n        // `lst1` and `lst2`\
    \ are lists of strings\n        // For example,\n        // >>> lst1\n       \
    \ // List[String](\"hi\", \"admin\")\n        // >>> lst2\n        // List[String](\"\
    hI\", \"Hi\")\n        // >>> lst1.head\n        // \"hi\"\n        // >>> lst1.tail\n\
    \        // List[String](\"admin\")\n        // >>> lst1.tail.head\n        //\
    \ \"admin\"\n        // >>> lst1.length\n        // 2\n        // >>> lst1.length\
    \ == lst2.length\n        // false\n        // >>> lst1.length > lst2.length\n\
    \        // false\n        // >>> lst1.length < lst2.length\n        // true\n\
    \        // >>> lst1.isEmpty\n        // false\n        // >>> lst1.isEmpty ==\
    \ lst2.isEmpty\n        // false\n        // >>> lst1.isEmpty == lst2.isEmpty\n\
    \        // false\n        // >>> lst1.isEmpty == lst2.isEmpty\n        // false\n\
    \        // >>> lst1.isEmpty == lst2.isEmpty\n        // false\n        // >>>\
    \ lst1.isEmpty == lst2.isEmpty\n        // false\n        // >>> lst1.isEmpty\
    \ == lst2.isEmpty\n        // false\n        // >>> lst1.isEmpty == lst2.isEmpty\n\
    \        // false\n        // >>> lst1.isEmpty == lst2.isEmpty\n        // false\n\
    \        // >>> lst1.isEmpty == lst2.isEmpty\n        // false\n        // >>>\
    \ lst1.isEmpty == lst2.isEmpty\n        // false\n        // >>> lst1.isEmpty\
    \ == lst2.isEmpty\n        // false\n        // >>> lst1.isEmpty == lst2.isEmpty\n\
    \        // false\n        // >>> lst1.isEmpty == lst2.isEmpty\n        // false\n\
    \        // >>> lst1.isEmpty == lst2.isEmpty\n        // false\n        // >>>\
    \ lst1.isEmpty", "        // Fill Up this function body\n        // `totalMatch`\
    \ should return the list that has total number of chars in the all strings of\
    \ the list less than the other list.\n        // if the two lists have the same\
    \ number of chars, return the first list.\n        // For example,\n        //\
    \ >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"Hi\"\
    )))\n        // (List[String](\"hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\")))\n \
    \       // (List[String](\"hi\", \"admin\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n        // (List[String](\"\
    hI\", \"hi\", \"hi\"))\n        // >>> totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n       \
    \ // >>> totalMatch((List[String]()), (List[String]()))\n        // (List[String]())\n\
    \        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\")))\n \
    \       // (List[String](\"hi\", \"admin\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n        // (List[String](\"\
    hI\", \"hi\", \"hi\"))\n        // >>> totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n       \
    \ // >>> totalMatch((List[String]()), (List[String]()))\n        // (List[String]())\n",
  "        // Fill Up this function body\n        // `lst1` and `lst2` are lists of\
    \ strings\n        // Do not change the function signature\n        // You may\
    \ create other functions\n        // You may import scala.collection.mutable._\n\
    \        var lst1_total = 0\n        var lst2_total = 0\n        for (str <- lst1)\
    \ {\n            lst1_total += str.length\n        }\n        for (str <- lst2)\
    \ {\n            lst2_total += str.length\n        }\n        if (lst1_total <\
    \ lst2_total) {\n            return lst1\n        } else {\n            return\
    \ lst2\n        }", "        if (lst1.length == 0 && lst2.length == 0) return\
    \ List[String]()\n        var total1 = 0\n        var total2 = 0\n        for\
    \ (i <- 0 until lst1.length) total1 += lst1(i).length\n        for (i <- 0 until\
    \ lst2.length) total2 += lst2(i).length\n        if (total1 < total2) return lst1\n\
    \        else if (total1 > total2) return lst2\n        else return lst1", " \
    \       // Fill Up this function body\n        // `lst1` and `lst2` are lists\
    \ of strings\n        // You have to return a list of strings\n        var lst1_sum\
    \ = 0\n        var lst2_sum = 0\n        for (i <- lst1) {\n            lst1_sum\
    \ += i.length\n        }\n        for (i <- lst2) {\n            lst2_sum += i.length\n\
    \        }\n        if (lst1_sum < lst2_sum) {\n            return lst1\n    \
    \    } else {\n            return lst2\n        }", "        // Fill Up this function\
    \ body\n        // `lst1` and `lst2` are lists of strings\n        // You have\
    \ to return a list of strings\n        var lst1_len = 0\n        var lst2_len\
    \ = 0\n        for (i <- lst1) {\n            lst1_len += i.length\n        }\n\
    \        for (i <- lst2) {\n            lst2_len += i.length\n        }\n    \
    \    if (lst1_len < lst2_len) {\n            return lst1\n        } else if (lst1_len\
    \ > lst2_len) {\n            return lst2\n        } else {\n            return\
    \ lst1\n        }", "        // Fill Up this function body\n        // `lst1`\
    \ and `lst2` are lists of strings\n        // You have to return the list that\
    \ has total number of chars in the all strings of the list less than the other\
    \ list.\n        // if the two lists have the same number of chars, return the\
    \ first list.\n        if (lst1.length == 0 && lst2.length == 0) return lst1\n\
    \        var sum1 = 0\n        var sum2 = 0\n        for (i <- lst1) sum1 += i.length\n\
    \        for (i <- lst2) sum2 += i.length\n        if (sum1 < sum2) return lst1\n\
    \        else if (sum1 > sum2) return lst2\n        else return lst1", "     \
    \   // Fill Up this function body\n        // `lst1` and `lst2` are lists of strings\n\
    \        // You have to return the list that has total number of chars in the\
    \ all strings of the list less than the other list.\n        // if the two lists\
    \ have the same number of chars, return the first list.\n        if (lst1.map(_.length).sum\
    \ < lst2.map(_.length).sum) lst1 else lst2", "        // Fill Up this function\
    \ body\n        // `lst1` and `lst2` are lists of strings\n        // For example,\n\
    \        // >>> lst1\n        // List(\"hi\", \"admin\")\n        // >>> lst2\n\
    \        // List(\"hI\", \"Hi\")\n        // You can access the length of a string\
    \ by `str.length`\n        // For example,\n        // >>> \"hi\".length\n   \
    \     // 2\n        // You can access the length of a list by `lst.length`\n \
    \       // For example,\n        // >>> List(\"hi\", \"admin\").length\n     \
    \   // 2\n        // You can access the elements of a list by `lst(i)`\n     \
    \   // For example,\n        // >>> List(\"hi\", \"admin\")(0)\n        // \"\
    hi\"\n        // >>> List(\"hi\", \"admin\")(1)\n        // \"admin\"\n      \
    \  // You can use `if` and `else` to control the flow\n        // For example,\n\
    \        // >>> if (true) {\n        // ...     println(\"Hello\")\n        //\
    \ ... } else {\n        // ...     println(\"World\")\n        // ... }\n    \
    \    // Hello\n        // You can use `for` to loop over a list\n        // For\
    \ example,\n        // >>> for (i <- List(1, 2, 3)) {\n        // ...     println(i)\n\
    \        // ... }\n        // 1\n        // 2\n        // 3\n        // You can\
    \ use `for` to loop over a range\n        // For example,\n        // >>> for\
    \ (i <- 1 to 3) {\n        // ...     println(i)\n        // ... }\n        //\
    \ 1\n        // 2\n        // 3\n        // You can use `for` to loop over a range\
    \ with a step\n        // For example,\n        // >>> for (i <- 1 to 10 by 2)\
    \ {\n        // ...     println(i)\n        // ... }\n        // 1\n        //\
    \ 3\n        // 5\n        // 7\n        // 9\n        // You can use `for` to\
    \ loop over a list with an index\n        // For example,\n        // >>> for\
    \ ((e, i) <- List(\"hi\", \"admin\").zipWithIndex)", "        if (lst1.length\
    \ == 0) return lst2\n        if (lst2.length == 0) return lst1\n        if (lst1.map(_.length).sum\
    \ == lst2.map(_.length).sum) return lst1\n        if (lst1.map(_.length).sum <\
    \ lst2.map(_.length).sum) return lst1\n        else return lst2", "        //\
    \ Fill Up this function body\n        // `lst1` and `lst2` are lists of strings\n\
    \        // For example,\n        // >>> lst1\n        // List[String](\"hi\"\
    , \"admin\")\n        // >>> lst2\n        // List[String](\"hI\", \"Hi\")\n \
    \       // You can access the length of a string as follows,\n        // >>> \"\
    hi\".length\n        // 2\n        // You can access the length of a list as follows,\n\
    \        // >>> lst1.length\n        // 2\n        // You can access the nth element\
    \ of a list as follows,\n        // >>> lst1(0)\n        // \"hi\"\n        //\
    \ >>> lst1(1)\n        // \"admin\"\n        // You can use `if` expression in\
    \ Scala.\n        // >>> if (lst1.length > lst2.length) lst1 else lst2\n     \
    \   // List[String](\"hI\", \"Hi\")\n        // >>> if (lst1.length < lst2.length)\
    \ lst1 else lst2\n        // List[String](\"hi\", \"admin\")\n        // >>> if\
    \ (lst1.length == lst2.length) lst1 else lst2\n        // List[String](\"hi\"\
    , \"admin\")\n        // You can use `for` expression in Scala.\n        // >>>\
    \ for (i <- 0 to lst1.length - 1) lst1(i)\n        // \"hi\"\n        // \"admin\"\
    \n        // >>> for (i <- 0 to lst2.length - 1) lst2(i)\n        // \"hI\"\n\
    \        // \"Hi\"\n        // You can use `for` expression to generate a list.\n\
    \        // >>> for (i <- 0 to lst1.length - 1) yield lst1(i)\n        // List[String](\"\
    hi\", \"admin\")\n        // >>> for (i <- 0 to lst2.length - 1) yield lst2(i)\n\
    \        // List[String](\"hI\", \"Hi\")\n        // You can use `map` method\
    \ of a list.\n        // >>> lst1.map(x => x)\n        // List", "        if (lst1.length\
    \ == 0 && lst2.length == 0) return lst1\n        if (lst1.length == 0) return\
    \ lst2\n        if (lst2.length == 0) return lst1\n        var total1 = 0\n  \
    \      var total2 = 0\n        for (i <- 0 until lst1.length) {\n            total1\
    \ += lst1(i).length\n        }\n        for (i <- 0 until lst2.length) {\n   \
    \         total2 += lst2(i).length\n        }\n        if (total1 < total2) return\
    \ lst1\n        else if (total1 > total2) return lst2\n        else return lst1",
  "        // Fill Up this function body\n        // `lst1` and `lst2` are lists of\
    \ strings\n        // You have to return a list of strings\n        var total1\
    \ = 0\n        var total2 = 0\n        for (i <- lst1) {\n            total1 +=\
    \ i.length\n        }\n        for (i <- lst2) {\n            total2 += i.length\n\
    \        }\n        if (total1 < total2) {\n            return lst1\n        }\
    \ else if (total1 > total2) {\n            return lst2\n        } else {\n   \
    \         return lst1\n        }", "        // Fill Up this function body\n  \
    \      // `lst1` and `lst2` are lists of strings\n        // You have to return\
    \ a list of strings\n        var sum1 = 0\n        var sum2 = 0\n        for (i\
    \ <- lst1) {\n            sum1 += i.length\n        }\n        for (i <- lst2)\
    \ {\n            sum2 += i.length\n        }\n        if (sum1 < sum2) {\n   \
    \         return lst1\n        } else if (sum1 > sum2) {\n            return lst2\n\
    \        } else {\n            return lst1\n        }", "        val total1 =\
    \ lst1.foldLeft(0)((a, b) => a + b.length)\n        val total2 = lst2.foldLeft(0)((a,\
    \ b) => a + b.length)\n        if (total1 < total2) lst1 else lst2", "       \
    \ // Fill Up this function body\n        // `lst1` and `lst2` are lists of strings\n\
    \        // You have to return the list that has total number of chars in the\
    \ all strings of the list less than the other list.\n        // if the two lists\
    \ have the same number of chars, return the first list.\n        // For Example\n\
    \        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\")))\n \
    \       // (List[String](\"hi\", \"admin\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n        // (List[String](\"\
    hI\", \"hi\", \"hi\"))\n        // >>> totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n       \
    \ if (lst1.length == 0 && lst2.length == 0) {\n            return lst1\n     \
    \   }\n        var lst1_length = 0\n        var lst2_length = 0\n        for (i\
    \ <- 0 until lst1.length) {\n            lst1_length += lst1(i).length\n     \
    \   }\n        for (i <- 0 until lst2.length) {\n            lst2_length += lst2(i).length\n\
    \        }\n        if (lst1_length < lst2_length) {\n            return lst1\n\
    \        } else if (lst1_length > lst2_length) {\n            return lst2\n  \
    \      } else {\n            return lst1\n        }", "        // Fill Up this\
    \ function body\n        // `lst1` and `lst2` are lists of strings\n        //\
    \ For example,\n        // >>> lst1\n        // List[String](\"hi\", \"admin\"\
    )\n        // >>> lst2\n        // List[String](\"hI\", \"Hi\")\n        // >>>\
    \ lst1(0)\n        // \"hi\"\n        // >>> lst2(1)\n        // \"Hi\"\n    \
    \    // >>> lst1(0).length\n        // 2\n        // >>> lst2(1).length\n    \
    \    // 2\n        // >>> lst1(0)(0)\n        // 'h'\n        // >>> lst2(1)(1)\n\
    \        // 'i'\n        // >>> lst1(0)(0).toUpper\n        // 'H'\n        //\
    \ >>> lst2(1)(1).toUpper\n        // 'I'\n        // >>> lst1(0)(0).toUpper ==\
    \ lst2(1)(1).toUpper\n        // true\n        // >>> lst1(0)(0).toUpper != lst2(1)(1).toUpper\n\
    \        // false\n        // >>> lst1(0)(0).toUpper == lst2(1)(1).toUpper &&\
    \ lst1(0)(1).toUpper == lst2(1)(0).toUpper\n        // true\n        // >>> lst1(0)(0).toUpper\
    \ == lst2(1)(1).toUpper && lst1(0)(1).toUpper == lst2(1)(0).toUpper && lst1(0).length\
    \ == lst2(1).length\n        // true\n        // >>> lst1(0)(0).toUpper == lst2(1)(1).toUpper\
    \ && lst1(0)(1).toUpper == lst2(1)(0).toUpper && lst1(0).length == lst2(1).length\
    \ && lst1(1)(0).toUpper == lst2(0)(0).toUpper && lst1(1)(1).toUpper == lst2(0)(1",
  "        if (lst1.length == 0 && lst2.length == 0) return lst1\n        if (lst1.length\
    \ == 0) return lst2\n        if (lst2.length == 0) return lst1\n        var total1\
    \ = 0\n        var total2 = 0\n        for (i <- 0 until lst1.length) total1 +=\
    \ lst1(i).length\n        for (i <- 0 until lst2.length) total2 += lst2(i).length\n\
    \        if (total1 < total2) return lst1\n        else if (total1 > total2) return\
    \ lst2\n        else return lst1", "        // Fill Up this function body\n  \
    \      // `lst1` and `lst2` are lists of strings\n        // You have to return\
    \ a list of strings\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1 else lst2", "        // Fill Up this function body\n        // `totalMatch`\
    \ should return the list that has total number of chars in the all strings of\
    \ the list less than the other list.\n        // if the two lists have the same\
    \ number of chars, return the first list.\n        // For example,\n        //\
    \ >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"Hi\"\
    )))\n        // (List[String](\"hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\")))\n \
    \       // (List[String](\"hi\", \"admin\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n        // (List[String](\"\
    hI\", \"hi\", \"hi\"))\n        // >>> totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n       \
    \ // >>> totalMatch((List[String]()), (List[String]()))\n        // (List[String]())\n\
    \        var total1 = 0\n        var total2 = 0\n        for (i <- lst1) {\n \
    \           total1 += i.length\n        }\n        for (i <- lst2) {\n       \
    \     total2 += i.length\n        }\n        if (total1 < total2) {\n        \
    \    return lst1\n        } else if (total1 > total2) {\n            return lst2\n\
    \        } else {\n            return lst1\n        }", "        if (lst1.length\
    \ == 0 && lst2.length == 0) return lst1\n        if (lst1.length == 0) return\
    \ lst2\n        if (lst2.length == 0) return lst1\n        var total1 = 0\n  \
    \      var total2 = 0\n        for (i <- 0 until lst1.length) {\n            total1\
    \ += lst1(i).length\n        }\n        for (i <- 0 until lst2.length) {\n   \
    \         total2 += lst2(i).length\n        }\n        if (total1 < total2) return\
    \ lst1\n        if (total2 < total1) return lst2\n        return lst1", "    \
    \    // Fill Up this function body\n        // `totalMatch` is a function that\
    \ accepts two lists of strings and returns the list that has \n        // total\
    \ number of chars in the all strings of the list less than the other list.\n \
    \       // if the two lists have the same number of chars, return the first list.\n\
    \        // Examples\n        // >>> totalMatch((List[String]()), (List[String]()))\n\
    \        // (List[String]())\n        // >>> totalMatch((List[String](\"hi\",\
    \ \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"hI\"\
    , \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        if (lst1.length\
    \ == 0 && lst2.length == 0) {\n            return lst1\n        }\n        var\
    \ lst1_total_chars = 0\n        var lst2_total_chars = 0\n        for (i <- 0\
    \ to lst1.length - 1) {\n            lst1_total_chars += lst1(i).length\n    \
    \    }\n        for (i <- 0 to lst2.length - 1) {\n            lst2_total_chars\
    \ += lst2(i).length\n        }\n        if (lst1_total_chars < lst2_total_chars)\
    \ {\n            return lst1\n        }\n        else if (lst1_total_chars > lst2_total_chars)\
    \ {\n            return lst2\n        }\n        else {\n            return lst1\n\
    \        }", "        if (lst1.length == 0 && lst2.length == 0) return lst1\n\
    \        if (lst1.length == 0) return lst2\n        if (lst2.length == 0) return\
    \ lst1\n        var lst1Total = 0\n        var lst2Total = 0\n        for (i <-\
    \ 0 until lst1.length) {\n            lst1Total += lst1(i).length\n        }\n\
    \        for (i <- 0 until lst2.length) {\n            lst2Total += lst2(i).length\n\
    \        }\n        if (lst1Total == lst2Total) return lst1\n        if (lst1Total\
    \ < lst2Total) return lst1\n        return lst2", "        // Fill Up this function\
    \ body\n        // `lst1` and `lst2` are lists of strings\n        // You have\
    \ to return a list of strings\n        // You have to return a list of strings\n\
    \        var sum1 = 0\n        var sum2 = 0\n        for (i <- lst1) {\n     \
    \       sum1 += i.length\n        }\n        for (i <- lst2) {\n            sum2\
    \ += i.length\n        }\n        if (sum1 < sum2) {\n            return lst1\n\
    \        }\n        else if (sum1 > sum2) {\n            return lst2\n       \
    \ }\n        else {\n            return lst1\n        }", "        // Fill Up\
    \ this function body\n        // `lst1` and `lst2` are lists of strings\n    \
    \    // For example,\n        // >>> lst1\n        // List(\"hi\", \"admin\")\n\
    \        // >>> lst2\n        // List(\"hI\", \"Hi\")\n        // You can access\
    \ the length of a string using `.length` method\n        // For example,\n   \
    \     // >>> \"hi\".length\n        // 2\n        // You can access the length\
    \ of a list using `.length` method\n        // For example,\n        // >>> List(\"\
    hi\", \"admin\").length\n        // 2\n        // You can access the elements\
    \ of a list using `(index)`\n        // For example,\n        // >>> List(\"hi\"\
    , \"admin\")(0)\n        // \"hi\"\n        // >>> List(\"hi\", \"admin\")(1)\n\
    \        // \"admin\"\n        // You can use `if` expression in Scala.\n    \
    \    // For example,\n        // >>> if (true) 1 else 0\n        // 1\n      \
    \  // >>> if (false) 1 else 0\n        // 0\n        // You can use `if` expression\
    \ as a statement.\n        // For example,\n        // >>> var x = 0\n       \
    \ // x: Int = 0\n        // >>> if (true) x = 1 else x = 0\n        // >>> x\n\
    \        // 1\n        // You can change the value of a variable.\n        //\
    \ For example,\n        // >>> var x = 0\n        // x: Int = 0\n        // >>>\
    \ x = 1\n        // >>> x\n        // 1\n        // You can use `return` in Scala.\n\
    \        // For example,\n        // >>> def f(x : Int) = {\n        //      return\
    \ x + 1\n        //    }\n        // f: (x: Int)Int\n        // >>> f(1)\n   \
    \     // 2\n        // You can use `for` expression in Scala.\n        // For\
    \ example,\n        // >>> for (i <- 0 to 10) {\n        //      println(i)\n\
    \        //    }\n        // 0\n        // 1\n        // 2\n        // 3\n   \
    \     // 4\n        // 5\n        // 6\n        // 7\n        // 8\n", "     \
    \   // Fill Up this function body\n        // `totalMatch` should return the list\
    \ that has total number of chars in the all strings of the list less than the\
    \ other list.\n        // if the two lists have the same number of chars, return\
    \ the first list.\n        // For example,\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n", "        // Fill Up this\
    \ function body\n        // `lst1` and `lst2` are lists of strings\n        //\
    \ For example,\n        // >>> lst1\n        // List[String](\"hi\", \"admin\"\
    )\n        // >>> lst2\n        // List[String](\"hI\", \"Hi\")\n        // >>>\
    \ lst1(0)\n        // \"hi\"\n        // >>> lst2(1)\n        // \"Hi\"\n    \
    \    // >>> lst1(0).length\n        // 2\n        // >>> lst2(1).length\n    \
    \    // 2\n        // >>> lst1(0).charAt(0)\n        // 'h'\n        // >>> lst2(1).charAt(1)\n\
    \        // 'i'\n        // >>> lst1(0).charAt(0).toUpper\n        // 'H'\n  \
    \      // >>> lst2(1).charAt(1).toUpper\n        // 'I'\n        // >>> lst1(0).charAt(0).toUpper.equals(lst2(1).charAt(1).toUpper)\n\
    \        // true\n        // >>> lst1(0).charAt(0).toUpper.equals(lst2(1).charAt(0).toUpper)\n\
    \        // false\n        // >>> lst1(0).charAt(0).toUpper.equals(lst2(1).charAt(0).toUpper)\n\
    \        // false\n        // >>> lst1(0).charAt(0).toUpper.equals(lst2(1).charAt(0).toUpper)\n\
    \        // false\n        // >>> lst1(0).charAt(0).toUpper.equals(lst2(1).charAt(0).toUpper)\n\
    \        // false\n        // >>> lst1(0).charAt(0).toUpper.equals(lst2(1).charAt(0).toUpper)\n\
    \        // false\n        // >>> lst1(0).charAt(0).toUpper.equals(lst2(1).charAt(0).toUpper)\n\
    \        // false", "        // Fill Up this function body\n        // `lst1`\
    \ and `lst2` are lists of strings\n        // You have to return a list of strings\n\
    \        if (lst1.length == 0) return lst2\n        if (lst2.length == 0) return\
    \ lst1\n        var sum1 = 0\n        var sum2 = 0\n        for (i <- 0 until\
    \ lst1.length) {\n            sum1 += lst1(i).length\n        }\n        for (i\
    \ <- 0 until lst2.length) {\n            sum2 += lst2(i).length\n        }\n \
    \       if (sum1 < sum2) return lst1\n        else if (sum1 > sum2) return lst2\n\
    \        else return lst1", "        if (lst1.length == 0 && lst2.length == 0)\
    \ return lst1\n        if (lst1.length == 0) return lst2\n        if (lst2.length\
    \ == 0) return lst1\n        var total1 = 0\n        var total2 = 0\n        for\
    \ (i <- 0 until lst1.length) {\n            total1 += lst1(i).length\n       \
    \ }\n        for (i <- 0 until lst2.length) {\n            total2 += lst2(i).length\n\
    \        }\n        if (total1 < total2) return lst1\n        if (total2 < total1)\
    \ return lst2\n        return lst1", "        // Fill Up this function body\n\
    \        // `totalMatch` should return the list that has total number of chars\
    \ in the all strings of the list less than the other list.\n        // if the\
    \ two lists have the same number of chars, return the first list.\n        //\
    \ Do not use any inbuilt functions.\n        if (lst1.length == 0 && lst2.length\
    \ == 0) {\n            return List[String]()\n        }\n        var sum1 = 0\n\
    \        var sum2 = 0\n        for (i <- 0 until lst1.length) {\n            sum1\
    \ += lst1(i).length\n        }\n        for (i <- 0 until lst2.length) {\n   \
    \         sum2 += lst2(i).length\n        }\n        if (sum1 < sum2) {\n    \
    \        return lst1\n        } else if (sum1 > sum2) {\n            return lst2\n\
    \        } else {\n            return lst1\n        }", "        // Fill Up this\
    \ function body\n        // `lst1` and `lst2` are lists of strings\n        //\
    \ For example,\n        // >>> lst1\n        // List[String](\"hi\", \"admin\"\
    )\n        // >>> lst2\n        // List[String](\"hI\", \"Hi\")\n        // You\
    \ can access the length of a string using `.length` method\n        // For example,\n\
    \        // >>> \"hi\".length\n        // 2\n        // You can access the nth\
    \ element of a list using `(n)`\n        // For example,\n        // >>> lst1(0)\n\
    \        // \"hi\"\n        // >>> lst1(1)\n        // \"admin\"\n        // You\
    \ can use `if` expression in Scala.\n        // For example,\n        // >>> if\
    \ (true) 1 else 2\n        // 1\n        // >>> if (false) 1 else 2\n        //\
    \ 2\n        // You can use `for` expression in Scala.\n        // For example,\n\
    \        // >>> for (i <- 1 to 5) yield i\n        // List[Int](1, 2, 3, 4, 5)\n\
    \        // >>> for (i <- 1 to 5) yield i * i\n        // List[Int](1, 4, 9, 16,\
    \ 25)\n        // >>> for (i <- 1 to 5; j <- 6 to 10) yield (i, j)\n        //\
    \ List[(Int, Int)]((1,6), (1,7), (1,8), (1,9), (1,10), (2,6), (2,7), (2,8), (2,9),\
    \ (2,10), (3,6), (3,7), (3,8), (3,9), (3,10), (4,6), (4,7), (4,8), (4,9), (4,10),\
    \ (5,6), (5,7), (5,8), (5,9), (5,10))\n        // You can use `for` expression\
    \ to filter elements.\n        // For example,\n        // >>> for (i <- 1 to\
    \ 10 if i % 2 == 0) yield i\n        // List[Int](2, 4, 6, 8, 10"]
stop_tokens:
- "\n    }\n"
