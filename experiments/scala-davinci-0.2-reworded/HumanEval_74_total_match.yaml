name: HumanEval_74_total_match
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that accepts two lists of strings and returns the list\
  \ that has \n    // total number of chars in the all strings of the list less than\
  \ the other list.\n    // if the two lists have the same number of chars, return\
  \ the first list.\n    // Examples\n    // >>> totalMatch((List[String]()), (List[String]()))\n\
  \    // (List[String]())\n    // >>> totalMatch((List[String](\"hi\", \"admin\"\
  )), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\", \"Hi\"))\n   \
  \ // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\", \"\
  hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"))\n    //\
  \ >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"hi\"\
  , \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    // >>> totalMatch((List[String](\"\
  4\")), (List[String](\"1\", \"2\", \"3\", \"4\", \"5\")))\n    // (List[String](\"\
  4\"))\n    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
  \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
  hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\",\
  \ \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
  hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"))));\n\
  \    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\"\
  , \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
  hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\",\
  \ \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
  hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
  hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hii\"))).equals((List[String](\"\
  hi\", \"admin\"))));\n    assert(totalMatch((List[String]()), (List[String](\"this\"\
  ))).equals((List[String]())));\n    assert(totalMatch((List[String](\"this\")),\
  \ (List[String]())).equals((List[String]())));\n    }\n\n}\n"
completions: ["        // Fill Up this function body\n        // `lst1` and `lst2`\
    \ are lists of strings\n        // For example,\n        // lst1 = List(\"hi\"\
    , \"admin\")\n        // lst2 = List(\"hI\", \"Hi\")\n        // In this case,\n\
    \        // totalMatch(lst1, lst2) = List(\"hI\", \"Hi\")\n        // because\
    \ the total number of chars in lst2 is 5, which is less than 6 in lst1\n     \
    \   var total1 = 0\n        var total2 = 0\n        for (i <- lst1) {\n      \
    \      total1 += i.length\n        }\n        for (i <- lst2) {\n            total2\
    \ += i.length\n        }\n        if (total1 < total2) {\n            return lst1\n\
    \        } else if (total1 > total2) {\n            return lst2\n        } else\
    \ {\n            return lst1\n        }", "        var total1 = 0\n        var\
    \ total2 = 0\n        for (s <- lst1) total1 += s.length\n        for (s <- lst2)\
    \ total2 += s.length\n        if (total1 < total2) lst1 else lst2", "        //\
    \ Fill Up this function body\n        // `lst1` and `lst2` are lists of strings\n\
    \        // For example,\n        //     lst1 = List(\"hi\", \"admin\")\n    \
    \    //     lst2 = List(\"hI\", \"Hi\")\n        // You have to return a list\
    \ of strings\n        // For example,\n        //     return List(\"hI\", \"Hi\"\
    )\n        var sum1 = 0\n        var sum2 = 0\n        for (i <- lst1) {\n   \
    \         sum1 += i.length\n        }\n        for (i <- lst2) {\n           \
    \ sum2 += i.length\n        }\n        if (sum1 < sum2) {\n            return\
    \ lst1\n        } else if (sum1 > sum2) {\n            return lst2\n        }\
    \ else {\n            return lst1\n        }", "        // Fill Up this function\
    \ body\n        // `totalMatch` is a function that accepts two lists of strings\
    \ and returns the list that has \n        // total number of chars in the all\
    \ strings of the list less than the other list.\n        // if the two lists have\
    \ the same number of chars, return the first list.\n        // Examples\n    \
    \    // >>> totalMatch((List[String]()), (List[String]()))\n        // (List[String]())\n\
    \        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\")))\n \
    \       // (List[String](\"hi\", \"admin\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n        // (List[String](\"\
    hI\", \"hi\", \"hi\"))\n        // >>> totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n       \
    \ var count1 = 0\n        var count2 = 0\n        for (i <- lst1) {\n        \
    \    count1 += i.length\n        }\n        for (i <- lst2) {\n            count2\
    \ += i.length\n        }\n        if (count1 < count2) {\n            lst1\n \
    \       } else if (count1 > count2) {\n            lst2\n        } else {\n  \
    \          lst1\n        }", "        // Fill Up this function body\n        //\
    \ `lst1` and `lst2` are lists of strings\n        // For example,\n        //\
    \ >>> lst1\n        // List(\"hi\", \"admin\")\n        // >>> lst2\n        //\
    \ List(\"hI\", \"Hi\")\n        // You can access the length of a string using\
    \ `.length` method\n        // For example,\n        // >>> \"hi\".length\n  \
    \      // 2\n        // You can access the length of a list using `.length` method\n\
    \        // For example,\n        // >>> List(\"hi\", \"admin\").length\n    \
    \    // 2\n        // You can access the elements of a list using `(index)`\n\
    \        // For example,\n        // >>> List(\"hi\", \"admin\")(0)\n        //\
    \ \"hi\"\n        // >>> List(\"hi\", \"admin\")(1)\n        // \"admin\"\n  \
    \      // You can use `if` and `else`\n        // For example,\n        // >>>\
    \ if (true) {\n        // ...     println(\"Hello\")\n        // ... } else {\n\
    \        // ...     println(\"Bye\")\n        // ... }\n        // Hello\n   \
    \     // You can use `for` loop\n        // For example,\n        // >>> for (i\
    \ <- 1 to 10) {\n        // ...     println(i)\n        // ... }\n        // 1\n\
    \        // 2\n        // 3\n        // 4\n        // 5\n        // 6\n      \
    \  // 7\n        // 8\n        // 9\n        // 10\n        // You can use `while`\
    \ loop\n        // For example,\n        // >>> var i = 1\n        // i: Int =\
    \ 1\n        // >>> while (i <= 10) {\n        // ...     println(i)\n       \
    \ // ...     i += 1\n        // ... }\n        // 1\n        // 2\n        //\
    \ 3\n        // 4\n        // 5\n        // 6\n        // 7\n        // 8\n  \
    \      // 9\n        // 10\n        // You can use `ListBuffer` to create a list\n\
    \        // For example,\n        // >>> var lst = ListBuffer[Int]()\n       \
    \ // lst: scala.collection.mutable.ListBuffer[Int] = ListBuffer()", "        var\
    \ total1 = 0\n        var total2 = 0\n        for (i <- lst1) {\n            total1\
    \ += i.length\n        }\n        for (i <- lst2) {\n            total2 += i.length\n\
    \        }\n        if (total1 < total2) {\n            return lst1\n        }\n\
    \        else if (total1 > total2) {\n            return lst2\n        }\n   \
    \     else {\n            return lst1\n        }", "        if (lst1.length ==\
    \ 0 && lst2.length == 0) return lst1\n        if (lst1.length == 0) return lst2\n\
    \        if (lst2.length == 0) return lst1\n        var total1 = 0\n        var\
    \ total2 = 0\n        for (i <- 0 until lst1.length) {\n            total1 +=\
    \ lst1(i).length\n        }\n        for (i <- 0 until lst2.length) {\n      \
    \      total2 += lst2(i).length\n        }\n        if (total1 < total2) return\
    \ lst1\n        if (total2 < total1) return lst2\n        return lst1", "    \
    \    // Fill Up this function body\n        // `lst1` and `lst2` are lists of\
    \ strings\n        // You have to return a list of strings\n        if (lst1.length\
    \ == 0 && lst2.length == 0) return lst1\n        if (lst1.length == 0) return\
    \ lst2\n        if (lst2.length == 0) return lst1\n        var total1 = 0\n  \
    \      var total2 = 0\n        for (i <- 0 until lst1.length) {\n            total1\
    \ += lst1(i).length\n        }\n        for (i <- 0 until lst2.length) {\n   \
    \         total2 += lst2(i).length\n        }\n        if (total1 < total2) return\
    \ lst1\n        if (total1 > total2) return lst2\n        return lst1", "    \
    \    // Fill Up this function body\n        // `lst1` and `lst2` are lists of\
    \ strings\n        // For example,\n        // >>> lst1\n        // List[String](\"\
    hi\", \"admin\")\n        // >>> lst2\n        // List[String](\"hI\", \"Hi\"\
    )\n        // You can use `lst1.length` to get the number of strings in `lst1`\n\
    \        // You can use `lst1(i).length` to get the number of chars in the ith\
    \ string of `lst1`\n        // You can use `lst1(i).charAt(j)` to get the jth\
    \ char of the ith string of `lst1`\n        // You can use `lst1(i).substring(j,\
    \ k)` to get the substring of the ith string of `lst1` from j to k\n        //\
    \ You can use `lst1(i).indexOf(c)` to get the index of the first occurrence of\
    \ char c in the ith string of `lst1`\n        // You can use `lst1(i).lastIndexOf(c)`\
    \ to get the index of the last occurrence of char c in the ith string of `lst1`\n\
    \        // You can use `lst1(i).startsWith(s)` to check if the ith string of\
    \ `lst1` starts with string s\n        // You can use `lst1(i).endsWith(s)` to\
    \ check if the ith string of `lst1` ends with string s\n        // You can use\
    \ `lst1(i).contains(s)` to check if the ith string of `lst1` contains string s\n\
    \        // You can use `lst1(i).replace(c1, c2)` to replace all occurrences of\
    \ char c1 with char c2 in the ith string of `lst1`\n        // You can use `lst1(i).toUpperCase`\
    \ to convert the ith string of `lst1` to upper case\n        // You can use `lst1(i).toLowerCase`\
    \ to convert the ith string of `lst1` to lower case\n        // You", "      \
    \  // Fill Up this function body\n        // `totalMatch` should return the list\
    \ that has total number of chars in the all strings of the list less than the\
    \ other list.\n        // if the two lists have the same number of chars, return\
    \ the first list.\n        // For example,\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        if (lst1.length\
    \ == 0 && lst2.length == 0) {\n            return lst1\n        }\n        var\
    \ lst1_total = 0\n        var lst2_total = 0\n        for (i <- 0 until lst1.length)\
    \ {\n            lst1_total += lst1(i).length\n        }\n        for (i <- 0\
    \ until lst2.length) {\n            lst2_total += lst2(i).length\n        }\n\
    \        if (lst1_total < lst2_total) {\n            return lst1\n        } else\
    \ if (lst1_total > lst2_total) {\n            return lst2\n        } else {\n\
    \            return lst1\n        }", "        // Fill Up this function body\n\
    \        // `total` is a method on list that calculates the total number of elements\
    \ in the list\n        // `length` is a method on string that calculates the length\
    \ of the string\n        if (lst1.total(x => x.length) < lst2.total(x => x.length))\
    \ lst1 else lst2", "        if (lst1.length == 0 && lst2.length == 0) return lst1\n\
    \        if (lst1.length == 0) return lst2\n        if (lst2.length == 0) return\
    \ lst1\n        var total1 = 0\n        var total2 = 0\n        for (i <- 0 until\
    \ lst1.length) {\n            total1 += lst1(i).length\n        }\n        for\
    \ (i <- 0 until lst2.length) {\n            total2 += lst2(i).length\n       \
    \ }\n        if (total1 < total2) return lst1\n        else if (total1 > total2)\
    \ return lst2\n        else return lst1", "        // Fill Up this function body\n\
    \        // `lst1` and `lst2` are lists of strings\n        // You have to return\
    \ a list of strings\n        var lst1_len = 0\n        var lst2_len = 0\n    \
    \    for (i <- lst1) {\n            lst1_len += i.length\n        }\n        for\
    \ (i <- lst2) {\n            lst2_len += i.length\n        }\n        if (lst1_len\
    \ < lst2_len) lst1\n        else if (lst1_len > lst2_len) lst2\n        else lst1",
  "        if (lst1.length == 0 && lst2.length == 0) return lst1\n        if (lst1.length\
    \ == 0) return lst2\n        if (lst2.length == 0) return lst1\n        var total1\
    \ = 0\n        var total2 = 0\n        for (i <- 0 until lst1.length) {\n    \
    \        total1 += lst1(i).length\n        }\n        for (i <- 0 until lst2.length)\
    \ {\n            total2 += lst2(i).length\n        }\n        if (total1 < total2)\
    \ return lst1\n        else if (total1 > total2) return lst2\n        else return\
    \ lst1", "        // Fill Up this function body\n        // `lst1` and `lst2`\
    \ are lists of strings\n        // For example,\n        // >>> lst1\n       \
    \ // List[String](\"hi\", \"admin\")\n        // >>> lst2\n        // List[String](\"\
    hI\", \"Hi\")\n        // You can access the strings in the list as\n        //\
    \ >>> lst1(0)\n        // \"hi\"\n        // >>> lst1(1)\n        // \"admin\"\
    \n        // You can access the length of the string as\n        // >>> lst1(0).length\n\
    \        // 2\n        // >>> lst1(1).length\n        // 5\n        // You can\
    \ access the chars in the string as\n        // >>> lst1(0)(0)\n        // 'h'\n\
    \        // >>> lst1(0)(1)\n        // 'i'\n        // >>> lst1(1)(0)\n      \
    \  // 'a'\n        // >>> lst1(1)(1)\n        // 'd'\n        // >>> lst1(1)(2)\n\
    \        // 'm'\n        // >>> lst1(1)(3)\n        // 'i'\n        // >>> lst1(1)(4)\n\
    \        // 'n'\n        // You can use `if` and `else` to make decisions\n  \
    \      // >>> if (lst1(0).length == lst2(0).length) {\n        //     lst1(0)\n\
    \        // } else {\n        //     lst2(0)\n        // }\n        // \"hI\"\n\
    \        // You can use `for` loop to iterate over lists\n        // >>> for (i\
    \ <- 0 until lst1.length) {\n        //     lst1(i)\n        // }\n        //\
    \ \"hi\"\n        // \"admin\"\n        // You can use `for` loop to iterate over\
    \ strings\n        // >>> for (i <- 0 until lst1(0).length) {\n        //    \
    \ lst1(0)(i)\n        // }\n        // 'h'\n        // 'i'\n        // You can\
    \ use `for` loop to iterate over ranges\n        // >>>", "        // Fill Up\
    \ this function body\n        // `lst1` and `lst2` are lists of strings\n    \
    \    // You have to return a list of strings\n        if (lst1.length == 0 &&\
    \ lst2.length == 0) return List[String]()\n        if (lst1.length == 0) return\
    \ lst2\n        if (lst2.length == 0) return lst1\n        var total1 = 0\n  \
    \      var total2 = 0\n        for (i <- 0 until lst1.length) total1 += lst1(i).length\n\
    \        for (i <- 0 until lst2.length) total2 += lst2(i).length\n        if (total1\
    \ < total2) return lst1\n        else if (total1 > total2) return lst2\n     \
    \   else return lst1", "        // Fill Up this function body\n        // `lst1`\
    \ and `lst2` are lists of strings\n        // You have to return a list of strings\n\
    \        if (lst1.length == 0 && lst2.length == 0) return lst1\n        if (lst1.length\
    \ == 0) return lst2\n        if (lst2.length == 0) return lst1\n        var total1\
    \ = 0\n        var total2 = 0\n        for (i <- 0 until lst1.length) {\n    \
    \        total1 += lst1(i).length\n        }\n        for (i <- 0 until lst2.length)\
    \ {\n            total2 += lst2(i).length\n        }\n        if (total1 < total2)\
    \ return lst1\n        else if (total1 > total2) return lst2\n        else return\
    \ lst1", "        // Fill Up this function body\n        // `totalMatch` should\
    \ return the list that has total number of chars in the all strings of the list\
    \ less than the other list.\n        // if the two lists have the same number\
    \ of chars, return the first list.\n        // For example,\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        val lst1_total = lst1.foldLeft(0)((acc,\
    \ x) => acc + x.length)\n        val lst2_total = lst2.foldLeft(0)((acc, x) =>\
    \ acc + x.length)\n        if (lst1_total == lst2_total) lst1\n        else if\
    \ (lst1_total < lst2_total) lst1\n        else lst2", "        var total1 = 0\n\
    \        for (i <- lst1) {\n            total1 += i.length\n        }\n      \
    \  var total2 = 0\n        for (i <- lst2) {\n            total2 += i.length\n\
    \        }\n        if (total1 < total2) lst1 else lst2", "        // Fill Up\
    \ this function body\n        // `lst1` and `lst2` are lists of strings\n    \
    \    // For example,\n        // >>> lst1\n        // List(\"hi\", \"admin\")\n\
    \        // >>> lst2\n        // List(\"hI\", \"Hi\")\n        // You can access\
    \ the length of a string using `.length` method\n        // For example,\n   \
    \     // >>> \"hi\".length\n        // 2\n        // You can access the length\
    \ of a list using `.length` method\n        // For example,\n        // >>> List(\"\
    hi\", \"admin\").length\n        // 2\n        // You can access the elements\
    \ of a list using `(index)`\n        // For example,\n        // >>> List(\"hi\"\
    , \"admin\")(0)\n        // \"hi\"\n        // >>> List(\"hi\", \"admin\")(1)\n\
    \        // \"admin\"\n        // You can use `if` and `else`\n        // For\
    \ example,\n        // >>> if (true) {\n        // ...     println(\"hello\")\n\
    \        // ... } else {\n        // ...     println(\"world\")\n        // ...\
    \ }\n        // hello\n        // You can use `for` loop\n        // For example,\n\
    \        // >>> for (i <- 1 to 10) {\n        // ...     println(i)\n        //\
    \ ... }\n        // 1\n        // 2\n        // 3\n        // 4\n        // 5\n\
    \        // 6\n        // 7\n        // 8\n        // 9\n        // 10\n     \
    \   // You can use `while` loop\n        // For example,\n        // >>> var i\
    \ = 0\n        // i: Int = 0\n        // >>> while (i < 10) {\n        // ...\
    \     println(i)\n        // ...     i += 1\n        // ... }\n        // 0\n\
    \        // 1\n        // 2\n        // 3\n        // 4\n        // 5\n      \
    \  // 6\n        // 7\n        // 8\n        // 9\n        // You can use `List()`\
    \ to create a list\n        // For example,\n        // >>> List()\n        //\
    \ List()\n        // You can use `:::` to concatenate two lists\n        // For\
    \ example,\n        // >>> List"]
stop_tokens:
- "\n    }\n"
