name: HumanEval_120_maximum
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list arr of integers and a positive integer k, return a sorted list\
  \ \n    // of length k with the maximum k numbers in arr.\n    // Example 1:\n \
  \   // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l))\n    //\
  \ (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example 2:\n    // >>>\
  \ maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n    // (List[Long](4l.toLong,\
  \ 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong, 2l.toLong,\
  \ 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n    // (List[Long](2l.toLong))\n\
  \    // Note:\n    // 1. The length of the list will be in the range of [1, 1000].\n\
  \    // 2. The elements in the list will be in the range of [-1000, 1000].\n   \
  \ // 3. 0 <= k <= len(arr)\n    def maximum(arr : List[Long], k : Long) : List[Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(maximum((List[Long](-3l.toLong,\
  \ -4l.toLong, 5l.toLong)), (3l)).equals((List[Long](-4l.toLong, -3l.toLong, 5l.toLong))));\n\
  \    assert(maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l)).equals((List[Long](4l.toLong,\
  \ 4l.toLong))));\n    assert(maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong,\
  \ 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l)).equals((List[Long](2l.toLong))));\n\
  \    assert(maximum((List[Long](123l.toLong, -123l.toLong, 20l.toLong, 0l.toLong,\
  \ 1l.toLong, 2l.toLong, -3l.toLong)), (3l)).equals((List[Long](2l.toLong, 20l.toLong,\
  \ 123l.toLong))));\n    assert(maximum((List[Long](-123l.toLong, 20l.toLong, 0l.toLong,\
  \ 1l.toLong, 2l.toLong, -3l.toLong)), (4l)).equals((List[Long](0l.toLong, 1l.toLong,\
  \ 2l.toLong, 20l.toLong))));\n    assert(maximum((List[Long](5l.toLong, 15l.toLong,\
  \ 0l.toLong, 3l.toLong, -13l.toLong, -8l.toLong, 0l.toLong)), (7l)).equals((List[Long](-13l.toLong,\
  \ -8l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 5l.toLong, 15l.toLong))));\n    assert(maximum((List[Long](-1l.toLong,\
  \ 0l.toLong, 2l.toLong, 5l.toLong, 3l.toLong, -10l.toLong)), (2l)).equals((List[Long](3l.toLong,\
  \ 5l.toLong))));\n    assert(maximum((List[Long](1l.toLong, 0l.toLong, 5l.toLong,\
  \ -7l.toLong)), (1l)).equals((List[Long](5l.toLong))));\n    assert(maximum((List[Long](4l.toLong,\
  \ -4l.toLong)), (2l)).equals((List[Long](-4l.toLong, 4l.toLong))));\n    assert(maximum((List[Long](-10l.toLong,\
  \ 10l.toLong)), (2l)).equals((List[Long](-10l.toLong, 10l.toLong))));\n    assert(maximum((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, -23l.toLong, 243l.toLong, -400l.toLong, 0l.toLong)), (0l)).equals((List[Long]())));\n\
  \    }\n\n}\n"
completions: ["        // Fill up this function body\n        // `arr` is a list of\
    \ integers\n        // `k` is a positive integer\n        // You have to return\
    \ a sorted list of length `k` with the maximum k numbers in `arr`\n        //\
    \ You can assume that `k` is less than or equal to the length of `arr`\n     \
    \   // You can assume that `k` is greater than 0\n        arr.sorted.takeRight(k.toInt)",
  "        // Fill up this function body\n        // `arr` is a list of integers\n\
    \        // `k` is a positive integer\n        // You have to return a sorted\
    \ list of length `k` with the maximum k numbers in `arr`\n        // You can assume\
    \ that `k` is less than or equal to the length of `arr`\n        // You can assume\
    \ that `k` is greater than 0\n        // You can assume that `arr` is not empty\n\
    \        // You can assume that `arr` is not null\n        // You can assume that\
    \ `arr` does not contain null\n        // You can assume that `arr` does not contain\
    \ duplicates\n        // You can assume that `arr` contains only integers\n  \
    \      // You can assume that `arr` contains only positive integers\n        //\
    \ You can assume that `arr` contains only negative integers\n        // You can\
    \ assume that `arr` contains only non-zero integers\n        // You can assume\
    \ that `arr` contains only zero\n        // You can assume that `arr` contains\
    \ only non-positive integers\n        // You can assume that `arr` contains only\
    \ non-negative integers\n        // You can assume that `arr` is sorted in ascending\
    \ order\n        // You can assume that `arr` is sorted in descending order\n\
    \        // You can assume that `arr` is not sorted\n        // You can assume\
    \ that `arr` is sorted in ascending order when `k` is equal to 1\n        // You\
    \ can assume that `arr` is sorted in descending order when `k` is equal to 1\n\
    \        // You can assume that `arr` is sorted in ascending order when `k` is\
    \ equal to the length of `arr`\n        // You can assume that `arr` is sorted\
    \ in descending order when `k` is equal to the length of `arr`\n        // You\
    \ can assume that `arr` is sorted in ascending order when `k` is equal to the\
    \ length of `arr` minus 1\n        // You can assume that `arr` is sorted in descending\
    \ order when `k` is equal to the length of `arr` minus 1\n        // You can assume\
    \ that `arr` is sorted in ascending order when `k` is equal to the length of `arr`\
    \ plus 1\n        // You can assume that `arr` is sorted in descending order when\
    \ `k` is equal to the length of `arr` plus 1\n", "        val heap = new PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        for (i <- arr) {\n            heap.enqueue(i)\n            if (heap.size\
    \ > k) heap.dequeue\n        }\n        heap.toList.sorted", "        // Fill\
    \ up this function body\n        // `arr` is a list of integers\n        // `k`\
    \ is a positive integer\n        // You have to return a sorted list of length\
    \ `k` with the maximum k numbers in `arr`\n        // You can use the function\
    \ `sort` to sort a list\n        // You can use the function `take` to take the\
    \ first `k` elements of a list\n        // You can use the function `reverse`\
    \ to reverse a list\n        // You can use the function `max` to find the maximum\
    \ of a list\n        // You can use the function `min` to find the minimum of\
    \ a list\n        // You can use the function `abs` to find the absolute value\
    \ of a number\n        // You can use the function `sum` to find the sum of a\
    \ list\n        // You can use the function `product` to find the product of a\
    \ list\n        // You can use the function `contains` to check if a list contains\
    \ a number\n        // You can use the function `mkString` to convert a list to\
    \ a string\n        // You can use the function `toString` to convert a number\
    \ to a string\n        // You can use the function `toLong` to convert a string\
    \ to a long\n        // You can use the function `toInt` to convert a string to\
    \ an integer\n        // You can use the function `toDouble` to convert a string\
    \ to a double\n        // You can use the function `toFloat` to convert a string\
    \ to a float\n        // You can use the function `toChar` to convert a string\
    \ to a character\n        // You can use the function `toByte` to convert a string\
    \ to a byte\n        // You can use the function `toShort` to convert a string\
    \ to a short\n        // You can use the function `toBoolean` to convert a string\
    \ to a boolean\n        // You can use the function `toList` to convert a string\
    \ to a list\n        // You can use the function `toArray` to convert a string\
    \ to an array\n        // You can use the function `toMap` to convert a string\
    \ to a map\n        // You can use the function `toSet` to convert a string to\
    \ a set\n        // You can use the function `toBuffer` to convert a string to\
    \ a buffer\n        // You can use the function `to", "        // Fill up this\
    \ function body\n        // `arr` is a list of integers\n        // `k` is a positive\
    \ integer\n        // You have to return a sorted list of length `k` with the\
    \ maximum k numbers in `arr`\n        // You can assume that `k` is less than\
    \ or equal to the length of `arr`\n        // You can assume that `k` is greater\
    \ than 0\n        arr.sortWith(_ > _).take(k.toInt)", "        // We can use a\
    \ max heap to solve this problem.\n        // We can use a max heap to solve this\
    \ problem.\n        // We can use a max heap to solve this problem.\n        //\
    \ We can use a max heap to solve this problem.\n        // We can use a max heap\
    \ to solve this problem.\n        // We can use a max heap to solve this problem.\n\
    \        // We can use a max heap to solve this problem.\n        // We can use\
    \ a max heap to solve this problem.\n        // We can use a max heap to solve\
    \ this problem.\n        // We can use a max heap to solve this problem.\n   \
    \     // We can use a max heap to solve this problem.\n        // We can use a\
    \ max heap to solve this problem.\n        // We can use a max heap to solve this\
    \ problem.\n        // We can use a max heap to solve this problem.\n        //\
    \ We can use a max heap to solve this problem.\n        // We can use a max heap\
    \ to solve this problem.\n        // We can use a max heap to solve this problem.\n\
    \        // We can use a max heap to solve this problem.\n        // We can use\
    \ a max heap to solve this problem.\n        // We can use a max heap to solve\
    \ this problem.\n        // We can use a max heap to solve this problem.\n   \
    \     // We can use a max heap to solve this problem.\n        // We can use a\
    \ max heap to solve this problem.\n        // We can use a max heap to solve this\
    \ problem.\n        // We can use a max heap to solve this problem.\n        //\
    \ We can use a max heap to solve this problem.\n        // We can use a max heap\
    \ to solve this problem.\n        // We can use a max heap to solve this problem.\n\
    \        // We can use a max heap to solve this problem.\n        // We can use\
    \ a max heap to solve this problem.\n        // We can use a max heap to solve\
    \ this problem.\n        // We can use a max heap to solve this problem.\n   \
    \     // We can use a max heap to solve this problem.\n        // We can use a\
    \ max heap to solve this problem.\n        // We can use a max heap to solve this\
    \ problem.\n        // We can use a max heap to solve this problem.\n        //\
    \ We can use a max", "        // Fill up this function body\n        // `arr`\
    \ is a list of integers\n        // `k` is a positive integer\n        // You\
    \ have to return a sorted list of length `k` with the maximum k numbers in `arr`\n\
    \        // You can assume that `k` is less than or equal to the length of `arr`\n\
    \        // You can assume that `k` is greater than 0\n        arr.sortWith(_\
    \ > _).take(k.toInt)", "        // Fill up this function body\n        // `arr`\
    \ is a list of integers\n        // `k` is a positive integer\n        // Return\
    \ a sorted list of length `k` with the maximum `k` numbers in `arr`\n        arr.sorted.takeRight(k.toInt)",
  "        // Fill up this function body\n        // `arr` is a list of integers\n\
    \        // `k` is a positive integer\n        // return a sorted list of length\
    \ `k` with the maximum `k` numbers in `arr`\n        arr.sortWith(_ > _).take(k.toInt)",
  "        // Fill up this function body\n        // 'arr' is a list of integers\n\
    \        // 'k' is a positive integer\n        // Return a sorted list of length\
    \ 'k' with the maximum 'k' numbers in 'arr'\n        arr.sorted.takeRight(k.toInt)",
  "        // Define a function to get the maximum number in the list.\n        def\
    \ maximum(arr : List[Long]) : Long = {\n            arr.max\n        }\n     \
    \   // Define a function to get the index of the maximum number in the list.\n\
    \        def maximumIndex(arr : List[Long]) : Int = {\n            arr.indexOf(arr.max)\n\
    \        }\n        // Define a function to remove the maximum number in the list.\n\
    \        def removeMaximum(arr : List[Long]) : List[Long] = {\n            arr.patch(maximumIndex(arr),\
    \ Nil, 1)\n        }\n        // Define a function to get the maximum k numbers\
    \ in the list.\n        def maximum(arr : List[Long], k : Long) : List[Long] =\
    \ {\n            if (k == 0) {\n                Nil\n            } else {\n  \
    \              maximum(arr) :: maximum(removeMaximum(arr), k - 1)\n          \
    \  }\n        }\n        // Return the result.\n        maximum(arr, k).sorted",
  "        // Fill up this function body\n        // `arr` is a list of integers\n\
    \        // `k` is a positive integer\n        // You have to return a sorted\
    \ list of length `k` with the maximum k numbers in `arr`\n        // You can assume\
    \ that `k` is less than or equal to the length of `arr`\n        // You can assume\
    \ that `k` is greater than 0\n        arr.sorted.takeRight(k.toInt)", "      \
    \  // We can use a heap to solve this problem.\n        // We can use a min heap\
    \ to store the k largest elements.\n        // We can use a max heap to store\
    \ the k smallest elements.\n        // We can use a min heap to store the k largest\
    \ elements.\n        // We can use a max heap to store the k smallest elements.\n\
    \        // We can use a min heap to store the k largest elements.\n        //\
    \ We can use a max heap to store the k smallest elements.\n        // We can use\
    \ a min heap to store the k largest elements.\n        // We can use a max heap\
    \ to store the k smallest elements.\n        // We can use a min heap to store\
    \ the k largest elements.\n        // We can use a max heap to store the k smallest\
    \ elements.\n        // We can use a min heap to store the k largest elements.\n\
    \        // We can use a max heap to store the k smallest elements.\n        //\
    \ We can use a min heap to store the k largest elements.\n        // We can use\
    \ a max heap to store the k smallest elements.\n        // We can use a min heap\
    \ to store the k largest elements.\n        // We can use a max heap to store\
    \ the k smallest elements.\n        // We can use a min heap to store the k largest\
    \ elements.\n        // We can use a max heap to store the k smallest elements.\n\
    \        // We can use a min heap to store the k largest elements.\n        //\
    \ We can use a max heap to store the k smallest elements.\n        // We can use\
    \ a min heap to store the k largest elements.\n        // We can use a max heap\
    \ to store the k smallest elements.\n        // We can use a min heap to store\
    \ the k largest elements.\n        // We can use a max heap to store the k smallest\
    \ elements.\n        // We can use a min heap to store the k largest elements.\n\
    \        // We can use a max heap to store the k smallest elements.\n        //\
    \ We can use a min heap to store the k largest elements.\n        // We can use\
    \ a max heap to store the k smallest elements.\n        // We can use a min heap\
    \ to store the k largest elements.\n        // We can use a max heap to store\
    \ the k smallest elements.\n        // We can use a min heap to store the k largest\
    \ elements.\n        //", "        // Fill up this function body\n        // 'return\
    \ List[Long]()' in case of timeout or other internal errors\n        return List[Long]()",
  "        // Fill up this function body\n        // `arr` is a list of integers\n\
    \        // `k` is a positive integer\n        // return a sorted list of length\
    \ `k` with the maximum `k` numbers in `arr`\n        arr.sorted.takeRight(k.toInt)",
  "        // Define a function that returns the maximum element in a list.\n    \
    \    def maximum(arr : List[Long]) : Long = {\n            // If the list is empty,\
    \ return 0.\n            if (arr.isEmpty) {\n                return 0l\n     \
    \       }\n            // Otherwise, return the maximum element in the list.\n\
    \            else {\n                return arr.max\n            }\n        }\n\
    \        // Define a function that removes the maximum element in a list.\n  \
    \      def removeMaximum(arr : List[Long]) : List[Long] = {\n            // If\
    \ the list is empty, return an empty list.\n            if (arr.isEmpty) {\n \
    \               return List[Long]()\n            }\n            // Otherwise,\
    \ remove the maximum element in the list.\n            else {\n              \
    \  return arr.filter((x : Long) => x != arr.max)\n            }\n        }\n \
    \       // Define a function that returns the maximum k elements in a list.\n\
    \        def maximum(arr : List[Long], k : Long) : List[Long] = {\n          \
    \  // If k is 0, return an empty list.\n            if (k == 0l) {\n         \
    \       return List[Long]()\n            }\n            // Otherwise, return the\
    \ maximum element in the list, followed by the maximum k - 1 elements in the list.\n\
    \            else {\n                return maximum(arr) :: maximum(removeMaximum(arr),\
    \ k - 1l)\n            }\n        }\n        // Return the maximum k elements\
    \ in the list.\n        return maximum(arr, k)", "        // Fill up this function\
    \ body\n        // 'return List[Long]()' for Scala and 'return {}' for Java\n\
    \        return List[Long]()", "        // Fill up this function body\n      \
    \  // 'arr' is a list of integers\n        // 'k' is a positive integer\n    \
    \    // Return a sorted list of length 'k' with the maximum 'k' numbers in 'arr'\n\
    \        arr.sorted.takeRight(k.toInt)", "        def maximum0(arr : List[Long],\
    \ k : Long, acc : List[Long]) : List[Long] = {\n            if (k == 0) acc\n\
    \            else {\n                val max = arr.max\n                val index\
    \ = arr.indexOf(max)\n                maximum0(arr.take(index) ++ arr.drop(index\
    \ + 1), k - 1, acc :+ max)\n            }\n        }\n        maximum0(arr, k,\
    \ List[Long]())", "        // Fill up this function body\n        // `arr` is\
    \ a list of integers\n        // `k` is a positive integer\n        // return\
    \ a sorted list of length `k` with the maximum `k` numbers in `arr`\n        arr.sorted.takeRight(k.toInt)"]
stop_tokens:
- "\n    }\n"
