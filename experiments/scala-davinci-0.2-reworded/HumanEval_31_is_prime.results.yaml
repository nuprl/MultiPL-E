language: scala
name: HumanEval_31_is_prime
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n <= 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n)\n  \
    \      for (i <- 3l to sqrtN.toLong by 2) {\n            if (n % i == 0) return\
    \ false\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n <= 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val limit = sqrt(n).toLong\n\
    \        for (i <- 3l to limit by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtn = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtn by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = math.sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        for (i <- 3l to sqrt(n).toLong\
    \ by 2) {\n            if (n % i == 0) return false\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        for (i <- 3l to sqrt(n).toLong\
    \ by 2) {\n            if (n % i == 0) return false\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        for (i <- 3l to sqrt(n).toLong\
    \ by 2) {\n            if (n % i == 0) return false\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = math.sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n < 2) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val limit = sqrt(n).toLong\n\
    \        for (i <- 3l to limit by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) false\n        else if (n < 4) true\n\
    \        else if (n % 2 == 0) false\n        else if (n < 9) true\n        else\
    \ if (n % 3 == 0) false\n        else {\n            val r = floor(sqrt(n)).toLong\n\
    \            var f = 5l\n            while (f <= r) {\n                if (n %\
    \ f == 0) return false\n                if (n % (f + 2) == 0) return false\n \
    \               f += 6\n            }\n            true\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtn = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtn by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val limit = sqrt(n).toLong\n\
    \        for (i <- 3l to limit by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val limit = sqrt(n).toLong\n\
    \        for (i <- 3l to limit by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        for (i <- 3l to sqrt(n).toLong\
    \ by 2) {\n            if (n % i == 0) return false\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 2) return true\n        if (n % 2 == 0)\
    \ return false\n        for (i <- 3l to sqrt(n).toLong by 2) {\n            if\
    \ (n % i == 0) return false\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqs970odl.scala:34)\n\tat Problem.main(tmpqs970odl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 2) return true\n        if (n % 2 == 0)\
    \ return false\n        for (i <- 3l to sqrt(n).toLong by 2) {\n            if\
    \ (n % i == 0) return false\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqs970odl.scala:34)\n\tat Problem.main(tmpqs970odl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        for (i <- 3l to sqrt(n).toLong\
    \ by 2) {\n            if (n % i == 0) return false\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        val sqrtn = sqrt(n).toLong\n        for (i <- 2l to sqrtn) {\n\
    \            if (n % i == 0) return false\n        }\n        return true\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n)\n  \
    \      for (i <- 3l to sqrtN.toLong by 2) {\n            if (n % i == 0) return\
    \ false\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        for (i <- 3l to sqrt(n).toLong\
    \ by 2) {\n            if (n % i == 0) return false\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtn = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtn by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 2) return true\n        if (n % 2 == 0)\
    \ return false\n        val sqrtn = sqrt(n).toLong\n        for (i <- 3l to sqrtn\
    \ by 2) {\n            if (n % i == 0) return false\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp14lgwuig.scala:35)\n\tat Problem.main(tmp14lgwuig.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        var i = 3\n        while\
    \ (i <= sqrt(n)) {\n            if (n % i == 0) return false\n            i +=\
    \ 2\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792820
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n <= 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 2) return true\n        if (n % 2 == 0)\
    \ return false\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3l to sqrtN\
    \ by 2) {\n            if (n % i == 0) return false\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbcpm9dqs.scala:35)\n\tat Problem.main(tmpbcpm9dqs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n < 2) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) {\n            return false\n     \
    \   }\n        if (n == 2) {\n            return true\n        }\n        if (n\
    \ % 2 == 0) {\n            return false\n        }\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) {\n      \
    \          return false\n            }\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n <= 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        var i = 3\n        while\
    \ (i <= sqrt(n)) {\n            if (n % i == 0) return false\n            i +=\
    \ 2\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792820
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n <= 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        for (i <- 3l to sqrt(n).toLong\
    \ by 2) {\n            if (n % i == 0) return false\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n <= 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val limit = sqrt(n).toLong\n\
    \        for (i <- 3l to limit by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n < 2) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val limit = sqrt(n).toLong\n\
    \        for (i <- 3l to limit by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        for (i <- 3 to sqrt(n).toInt\
    \ by 2) {\n            if (n % i == 0) return false\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val limit = sqrt(n).toLong\n\
    \        for (i <- 3l to limit by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        for (i <- 3l to sqrt(n).toLong\
    \ by 2) {\n            if (n % i == 0) return false\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n < 2) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) false\n        else if (n < 4) true\n\
    \        else if (n % 2 == 0) false\n        else if (n < 9) true\n        else\
    \ if (n % 3 == 0) false\n        else {\n            val r = floor(sqrt(n)).toLong\n\
    \            var f = 5l\n            while (f <= r) {\n                if (n %\
    \ f == 0) return false\n                if (n % (f + 2) == 0) return false\n \
    \               f += 6\n            }\n            true\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n <= 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = math.sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n <= 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val limit = sqrt(n).toLong\n\
    \        for (i <- 3l to limit by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) {\n            return false\n     \
    \   }\n        if (n == 2) {\n            return true\n        }\n        if (n\
    \ % 2 == 0) {\n            return false\n        }\n        val sqrtn = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtn by 2) {\n            if (n % i == 0) {\n      \
    \          return false\n            }\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val limit = sqrt(n).toLong\n\
    \        for (i <- 3l to limit by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = math.sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtn = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtn by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        for (i <- 2l to sqrt(n).toLong) {\n            if (n % i == 0)\
    \ return false\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n <= 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val limit = sqrt(n).toLong\n\
    \        for (i <- 3l to limit by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n <= 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) false\n        else if (n < 4) true\n\
    \        else if (n % 2 == 0) false\n        else if (n < 9) true\n        else\
    \ if (n % 3 == 0) false\n        else {\n            val r = floor(sqrt(n)).toLong\n\
    \            var f = 5l\n            while (f <= r) {\n                if (n %\
    \ f == 0) return false\n                if (n % (f + 2) == 0) return false\n \
    \               f += 6\n            }\n            true\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtn = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtn by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n <= 1) return false\n        if (n <= 3) return\
    \ true\n        if (n % 2 == 0 || n % 3 == 0) return false\n        var i = 5\n\
    \        while (i * i <= n) {\n            if (n % i == 0 || n % (i + 2) == 0)\
    \ return false\n            i += 6\n        }\n        return true\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) {\n            return false\n     \
    \   }\n        if (n == 2) {\n            return true\n        }\n        if (n\
    \ % 2 == 0) {\n            return false\n        }\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) {\n      \
    \          return false\n            }\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val limit = sqrt(n).toLong\n\
    \        for (i <- 3l to limit by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val limit = sqrt(n).toLong\n\
    \        for (i <- 3l to limit by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 2) return true\n        if (n % 2 == 0)\
    \ return false\n        val sqrtn = sqrt(n).toLong\n        for (i <- 3l to sqrtn\
    \ by 2) {\n            if (n % i == 0) return false\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp14lgwuig.scala:35)\n\tat Problem.main(tmp14lgwuig.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val max = sqrt(n).toLong\n\
    \        for (i <- 3l to max by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) false\n        else if (n < 4) true\n\
    \        else if (n % 2 == 0) false\n        else if (n < 9) true\n        else\
    \ if (n % 3 == 0) false\n        else {\n            val r = floor(sqrt(n)).toLong\n\
    \            var f = 5l\n            while (f <= r) {\n                if (n %\
    \ f == 0) return false\n                if (n % (f + 2) == 0) return false\n \
    \               f += 6\n            }\n            true\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = math.sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n)\n   \
    \     for (i <- 3 to sqrt.toInt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpur28xrg0.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n)\n\e\
    [31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                \
    \   Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659792824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n <= 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n <= 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt_n = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt_n by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792826
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        for (i <- 3l to sqrt(n).toLong\
    \ by 2) {\n            if (n % i == 0) return false\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) {\n            return false\n     \
    \   }\n        if (n == 2) {\n            return true\n        }\n        val\
    \ sqrtN = sqrt(n).toLong\n        for (i <- 2l to sqrtN) {\n            if (n\
    \ % i == 0) {\n                return false\n            }\n        }\n      \
    \  return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792826
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val limit = sqrt(n).toLong\n\
    \        for (i <- 3l to limit by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtn = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtn by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt_n = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt_n by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792826
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        val sqrt = sqrt(n).toLong\n        for (i <- 2l to sqrt) {\n \
    \           if (n % i == 0) return false\n        }\n        return true\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpc3k8mls_.scala:22:19 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 2) return true\n        if (n % 2 == 0)\
    \ return false\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3l to sqrtN\
    \ by 2) {\n            if (n % i == 0) return false\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbcpm9dqs.scala:35)\n\tat Problem.main(tmpbcpm9dqs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val limit = sqrt(n).toLong\n\
    \        for (i <- 3l to limit by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) false\n        else if (n < 4) true\n\
    \        else if (n % 2 == 0) false\n        else if (n < 9) true\n        else\
    \ if (n % 3 == 0) false\n        else {\n            val r = floor(sqrt(n)).toLong\n\
    \            var f = 5l\n            while (f <= r) {\n                if (n %\
    \ f == 0) return false\n                if (n % (f + 2) == 0) return false\n \
    \               f += 6\n            }\n            true\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 2) return true\n        if (n < 2 || n\
    \ % 2 == 0) return false\n        val sqrt = math.sqrt(n).toLong\n        for\
    \ (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n       \
    \ }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792826
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        var i = 3\n        while\
    \ (i <= sqrt(n).toInt) {\n            if (n % i == 0) return false\n         \
    \   i += 2\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792826
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val limit = sqrt(n).toLong\n\
    \        for (i <- 3l to limit by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) {\n            return false\n     \
    \   }\n        if (n == 2) {\n            return true\n        }\n        if (n\
    \ % 2 == 0) {\n            return false\n        }\n        val limit = sqrt(n).toLong\n\
    \        for (i <- 3l to limit by 2) {\n            if (n % i == 0) {\n      \
    \          return false\n            }\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792826
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) {\n            return false\n     \
    \   }\n        if (n == 2) {\n            return true\n        }\n        if (n\
    \ % 2 == 0) {\n            return false\n        }\n        val sqrtN = sqrt(n).toLong\n\
    \        var i = 3l\n        while (i <= sqrtN) {\n            if (n % i == 0)\
    \ {\n                return false\n            }\n            i += 2\n       \
    \ }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) false\n        else if (n < 4) true\n\
    \        else if (n % 2 == 0) false\n        else if (n < 9) true\n        else\
    \ if (n % 3 == 0) false\n        else {\n            val r = floor(sqrt(n)).toLong\n\
    \            var f = 5l\n            while (f <= r) {\n                if (n %\
    \ f == 0) return false\n                if (n % (f + 2) == 0) return false\n \
    \               f += 6\n            }\n            true\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n <= 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val upper = sqrt(n).toLong\n\
    \        for (i <- 3l to upper by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792826
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        for (i <- 3l to sqrt(n).toLong\
    \ by 2) {\n            if (n % i == 0) return false\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n < 2) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n < 2) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n <= 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val max = sqrt(n).toLong\n\
    \        for (i <- 3l to max by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 2) return true\n        if (n < 2 || n\
    \ % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n        for (i <-\
    \ 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n        }\n \
    \       return true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792826
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        var i = 3\n        while\
    \ (i <= sqrt(n).toInt) {\n            if (n % i == 0) return false\n         \
    \   i += 2\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792826
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = math.sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n < 2) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        var i = 3\n        while\
    \ (i <= sqrt(n)) {\n            if (n % i == 0) return false\n            i +=\
    \ 2\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792826
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n <= 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtn = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtn by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792826
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n)\n  \
    \      for (i <- 3l to sqrtN.toLong by 2) {\n            if (n % i == 0) return\
    \ false\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        var i = 3l\n        while\
    \ (i <= sqrt(n)) {\n            if (n % i == 0) return false\n            i +=\
    \ 2\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792826
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n < 2) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n)\n  \
    \      for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3w54roh2.scala:24:24\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m3l\e[0m to sqrtN by \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m           \
    \             ^^^^^\e[0m\n\e[31m   |\e[0m                        Found:    (sqrtN\
    \ : Double)\n\e[31m   |\e[0m                        Required: Long\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n <= 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n <= 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = math.sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792826
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        for (i <- 3l to sqrt(n).toLong\
    \ by 2) {\n            if (n % i == 0) return false\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val limit = sqrt(n).toLong\n\
    \        for (i <- 3l to limit by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val max = sqrt(n).toLong\n\
    \        for (i <- 3l to max by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        val sqrt = math.sqrt(n).toLong\n        for (i <- 2l to sqrt)\
    \ {\n            if (n % i == 0) return false\n        }\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792826
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtn = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtn by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) false\n        else if (n < 4) true\n\
    \        else if (n % 2 == 0) false\n        else if (n < 9) true\n        else\
    \ if (n % 3 == 0) false\n        else {\n            val r = floor(sqrt(n)).toLong\n\
    \            var f = 5l\n            while (f <= r) {\n                if (n %\
    \ f == 0) return false\n                if (n % (f + 2) == 0) return false\n \
    \               f += 6\n            }\n            true\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        var i = 3\n        while\
    \ (i <= sqrt(n).toInt) {\n            if (n % i == 0) return false\n         \
    \   i += 2\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792826
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        for (i <- 3l to sqrt(n).toLong\
    \ by 2) {\n            if (n % i == 0) return false\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = math.sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        for (i <- 3l to sqrt(n).toLong\
    \ by 2) {\n            if (n % i == 0) return false\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtn = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtn by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val limit = sqrt(n).toLong\n\
    \        for (i <- 3l to limit by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = math.sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n <= 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val limit = sqrt(n).toLong\n\
    \        for (i <- 3l to limit by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtn = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtn by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 2l to sqrtN) {\n\
    \            if (n % i == 0) return false\n        }\n        return true\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792826
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n <= 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrt = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrt by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_bylfgpp.scala:23:19 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(n).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659792819
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        for (i <- 3l to sqrt(n).toLong\
    \ by 2) {\n            if (n % i == 0) return false\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        val sqrtN = sqrt(n).toLong\n\
    \        for (i <- 3l to sqrtN by 2) {\n            if (n % i == 0) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true if a given number is prime, and false otherwise.\n   \
    \ // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n\
    \    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    //\
    \ (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n :\
    \ Long) : Boolean = {\n        if (n == 1) return false\n        if (n == 2) return\
    \ true\n        if (n % 2 == 0) return false\n        for (i <- 3l to sqrt(n).toLong\
    \ by 2) {\n            if (n % i == 0) return false\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792821
