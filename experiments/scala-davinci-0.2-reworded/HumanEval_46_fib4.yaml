name: HumanEval_46_fib4
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    // fib4(2)\
  \ -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
  \ + fib4(n-4).\n    // Please write a function to efficiently compute the n-th element\
  \ of the fib4 number sequence.  Do not use recursion.\n    // >>> fib4((5l))\n \
  \   // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>> fib4((7l))\n    // (14l)\n\
  \    def fib4(n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
  \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
  \ == (386l));\n    }\n\n}\n"
completions: ["        // Fill up this function body\n        // You may also define\
    \ any auxiliary functions you may need\n        var a = 0l\n        var b = 0l\n\
    \        var c = 2l\n        var d = 0l\n        for (i <- 3l to n) {\n      \
    \      d = a + b + c\n            a = b\n            b = c\n            c = d\n\
    \        }\n        d", "        var a = 0l\n        var b = 0l\n        var c\
    \ = 2l\n        var d = 0l\n        var i = 3l\n        while (i <= n) {\n   \
    \         d = a + b + c + d\n            a = b\n            b = c\n          \
    \  c = d\n            i += 1\n        }\n        return d", "        // Fill up\
    \ this function body\n        // You can add another function as well, if required\n\
    \        0", "        // Fill up this function body\n        // You can add another\
    \ function as well, if required\n        var a = 0l\n        var b = 0l\n    \
    \    var c = 2l\n        var d = 0l\n        var e = 0l\n        var f = 0l\n\
    \        var g = 0l\n        var h = 0l\n        var i = 0l\n        var j = 0l\n\
    \        var k = 0l\n        var l = 0l\n        var m = 0l\n        var o = 0l\n\
    \        var p = 0l\n        var q = 0l\n        var r = 0l\n        var s = 0l\n\
    \        var t = 0l\n        var u = 0l\n        var v = 0l\n        var w = 0l\n\
    \        var x = 0l\n        var y = 0l\n        var z = 0l\n        var aa =\
    \ 0l\n        var ab = 0l\n        var ac = 0l\n        var ad = 0l\n        var\
    \ ae = 0l\n        var af = 0l\n        var ag = 0l\n        var ah = 0l\n   \
    \     var ai = 0l\n        var aj = 0l\n        var ak = 0l\n        var al =\
    \ 0l\n        var am = 0l\n        var an = 0l\n        var ao = 0l\n        var\
    \ ap = 0l\n        var aq = 0l\n        var ar = 0l\n        var as = 0l\n   \
    \     var at = 0l\n        var au = 0l\n        var av = 0l\n        var aw =\
    \ 0l\n        var ax = 0l\n        var ay = 0l\n        var az = 0l\n        var\
    \ ba = 0l\n        var bb = 0l\n        var bc = 0l\n        var bd = 0l\n   \
    \     var be = 0l\n        var bf = 0l\n        var bg = 0l\n        var bh =\
    \ 0l\n        var bi = 0l\n        var bj = 0l\n        var bk = 0l\n        var\
    \ bl = 0l\n        var bm = 0l\n        var bn = 0l\n        var bo = 0l\n   \
    \     var bp = 0l\n        var bq =", "        var a = 0l\n        var b = 0l\n\
    \        var c = 2l\n        var d = 0l\n        var i = 3l\n        while (i\
    \ <= n) {\n            d = a + b + c + d\n            a = b\n            b = c\n\
    \            c = d\n            i += 1\n        }\n        return d", "      \
    \  // Fill up this function body\n        // You may also define any auxiliary\
    \ functions you may need\n        0", "        // Fill up this function body\n\
    \        // You can add another function as well, if required\n        0", " \
    \       // Fill up this function body\n        // You may also define any auxiliary\
    \ functions you may need\n        var a = 0l\n        var b = 0l\n        var\
    \ c = 2l\n        var d = 0l\n        var i = 3l\n        while (i <= n) {\n \
    \           d = a + b + c\n            a = b\n            b = c\n            c\
    \ = d\n            i += 1\n        }\n        d", "        // Fill up this function\
    \ body\n        // You may also define new functions as and where required\n \
    \       // Do not use recursion\n        // Your code must be efficient\n    \
    \    var a = 0l\n        var b = 0l\n        var c = 2l\n        var d = 0l\n\
    \        var i = 4l\n        while (i <= n) {\n            d = a + b + c\n   \
    \         a = b\n            b = c\n            c = d\n            i += 1\n  \
    \      }\n        d", "        // Fill up this function body\n        // You can\
    \ add another function as well, if required\n        0", "        // Fill up this\
    \ function body\n        // You may also define other functions as you wish\n\
    \        0", "        // Fill up this function body\n        // You may also define\
    \ new functions as you wish\n        var a = 0l\n        var b = 0l\n        var\
    \ c = 2l\n        var d = 0l\n        var e = 0l\n        for (i <- 4l to n) {\n\
    \            e = a + b + c + d\n            a = b\n            b = c\n       \
    \     c = d\n            d = e\n        }\n        return e", "        // Fill\
    \ up this function body\n        // You may also define any auxiliary functions\
    \ you may need\n        0", "        // Fill up this function body\n        //\
    \ You can add another function as well, if required\n        var a = 0l\n    \
    \    var b = 0l\n        var c = 2l\n        var d = 0l\n        var e = 0l\n\
    \        for (i <- 4l to n) {\n            e = a + b + c + d\n            a =\
    \ b\n            b = c\n            c = d\n            d = e\n        }\n    \
    \    return e", "        // Fill up this function body\n        // You can add\
    \ another function as well, if required\n        0", "        var a = 0l\n   \
    \     var b = 0l\n        var c = 2l\n        var d = 0l\n        for (i <- 4l\
    \ to n) {\n            d = a + b + c + d\n            a = b\n            b = c\n\
    \            c = d\n        }\n        return d", "        // Fill up this function\
    \ body\n        // You may also define new functions as and where required\n \
    \       // Do not use recursion\n        // Compute the n-th element of the fib4\
    \ number sequence\n        var a = 0l\n        var b = 0l\n        var c = 2l\n\
    \        var d = 0l\n        if (n == 0) {\n            return a\n        }\n\
    \        if (n == 1) {\n            return b\n        }\n        if (n == 2) {\n\
    \            return c\n        }\n        if (n == 3) {\n            return d\n\
    \        }\n        for (i <- 3 to n.toInt) {\n            val temp = a + b +\
    \ c + d\n            a = b\n            b = c\n            c = d\n           \
    \ d = temp\n        }\n        return d", "        var a = 0l\n        var b =\
    \ 0l\n        var c = 2l\n        var d = 0l\n        for (i <- 4l to n) {\n \
    \           d = a + b + c + d\n            a = b\n            b = c\n        \
    \    c = d\n        }\n        return d", "        // Fill up this function body\n\
    \        // You may also define new functions as you wish\n        // You may\
    \ import scala.math._\n        // You may import scala.collection.mutable._\n\
    \        0", "        var a = 0l\n        var b = 0l\n        var c = 2l\n   \
    \     var d = 0l\n        var i = 3l\n        while (i <= n) {\n            d\
    \ = a + b + c + d\n            a = b\n            b = c\n            c = d\n \
    \           i += 1\n        }\n        return d"]
stop_tokens:
- "\n    }\n"
