name: HumanEval_99_closest_integer
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Create a function that takes a value (string) representing a number\n  \
  \  // and returns the closest integer to it. If the number is equidistant\n    //\
  \ from two integers, round it away from zero.\n    // Examples\n    // >>> closestInteger((\"\
  10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"))\n    // (15l)\n    //\
  \ Note:\n    // Rounding away from zero means that if the given number is equidistant\n\
  \    // from two integers, the one you should return is the one that is the\n  \
  \  // farthest from zero. For example closest_integer(\"14.5\") should\n    // return\
  \ 15 and closest_integer(\"-14.5\") should return -15.\n    def closestInteger(value\
  \ : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
  10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
  -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
  0\")) == (0l));\n    }\n\n}\n"
completions: ["        val num = value.toDouble\n        val floor = floor(num)\n\
    \        val ceil = ceil(num)\n        if (abs(num - floor) < abs(num - ceil))\
    \ floor.toLong else ceil.toLong", "        val num = value.toDouble\n        val\
    \ floor = num.floor\n        val ceil = num.ceil\n        if (num - floor > ceil\
    \ - num) ceil else floor", "        val number = value.toDouble\n        val floor\
    \ = floor(number)\n        val ceil = ceil(number)\n        if (abs(number - floor)\
    \ < abs(number - ceil)) floor.toLong else ceil.toLong", "        val n = value.toDouble\n\
    \        if (n < 0) -closestInteger(-n)\n        else {\n            val d = n\
    \ - floor(n)\n            if (d < 0.5) floor(n).toLong\n            else ceil(n).toLong\n\
    \        }", "        val d = value.toDouble\n        val f = floor(d)\n     \
    \   val c = ceil(d)\n        if (abs(d - f) == abs(d - c)) {\n            if (d\
    \ > 0) c else f\n        } else if (abs(d - f) < abs(d - c)) f else c", "    \
    \    val num = value.toDouble\n        val floor = num.floor\n        val ceil\
    \ = num.ceil\n        if (abs(num - floor) == abs(num - ceil)) {\n           \
    \ if (num > 0) ceil else floor\n        } else if (abs(num - floor) < abs(num\
    \ - ceil)) floor else ceil", "        val d = value.toDouble\n        if (d >\
    \ 0) {\n            ceil(d).toLong\n        } else {\n            floor(d).toLong\n\
    \        }", "        val n = value.toDouble\n        val m = round(n)\n     \
    \   if (abs(n - m) == 0.5) {\n            if (n > 0) m + 1 else m - 1\n      \
    \  } else m", "        val num = value.toDouble\n        val floor = math.floor(num)\n\
    \        val ceil = math.ceil(num)\n        if (num - floor > ceil - num) ceil.toLong\
    \ else floor.toLong", "        val num = value.toDouble\n        if (num < 0)\
    \ -round(-num) else round(num)", "        val d = value.toDouble\n        if (d\
    \ < 0) {\n            val n = ceil(d)\n            if (n - d == 0.5) {\n     \
    \           n.toLong + 1\n            } else {\n                n.toLong\n   \
    \         }\n        } else {\n            val n = floor(d)\n            if (d\
    \ - n == 0.5) {\n                n.toLong - 1\n            } else {\n        \
    \        n.toLong\n            }\n        }", "        val d = value.toDouble\n\
    \        val floor = floor(d)\n        val ceil = ceil(d)\n        if (abs(floor\
    \ - d) == abs(ceil - d)) {\n            if (floor < 0) floor.toLong else ceil.toLong\n\
    \        } else if (abs(floor - d) < abs(ceil - d)) {\n            floor.toLong\n\
    \        } else {\n            ceil.toLong\n        }", "        val num = value.toDouble\n\
    \        if (num > 0) {\n            ceil(num).toLong\n        } else {\n    \
    \        floor(num).toLong\n        }", "        val d = value.toDouble\n    \
    \    val i = d.toLong\n        if (abs(d - i) < 0.5) i else i + signum(d)", " \
    \       val d = value.toDouble\n        val i = d.toLong\n        if (abs(d -\
    \ i) < 0.5) i else i + signum(d)", "        val d = value.toDouble\n        val\
    \ i = d.toLong\n        if (abs(d - i) < 0.5) i else i + signum(d)", "       \
    \ val d = value.toDouble\n        val i = d.toLong\n        if (abs(d - i) < 0.5)\
    \ i else i + 1", "        val num = value.toDouble\n        if (num > 0) {\n \
    \           val floor = num.floor\n            val ceil = num.ceil\n         \
    \   if (num - floor < ceil - num) floor else ceil\n        } else {\n        \
    \    val floor = num.floor\n            val ceil = num.ceil\n            if (num\
    \ - floor > ceil - num) floor else ceil\n        }", "        val d = value.toDouble\n\
    \        if (d > 0) ceil(d).toLong else floor(d).toLong", "        val num = value.toDouble\n\
    \        val floor = num.floor\n        val ceil = num.ceil\n        if (abs(num\
    \ - floor) == abs(num - ceil)) {\n            if (num >= 0) ceil else floor\n\
    \        } else if (abs(num - floor) < abs(num - ceil)) floor else ceil", "  \
    \      val d = value.toDouble\n        val i = d.toLong\n        if (d - i < 0.5)\
    \ i else i + 1", "        val num = value.toDouble\n        val floor = floor(num)\n\
    \        val ceil = ceil(num)\n        if (abs(num - floor) < abs(num - ceil))\
    \ floor.toLong else ceil.toLong", "        val d = value.toDouble\n        if\
    \ (d < 0) -closestInteger(-d)\n        else {\n            val i = d.toLong\n\
    \            if (d - i < 0.5) i\n            else i + 1\n        }", "       \
    \ val d = value.toDouble\n        val x = round(d)\n        val y = floor(d)\n\
    \        val z = ceil(d)\n        if (abs(x - d) < abs(y - d)) x.toLong\n    \
    \    else if (abs(x - d) > abs(z - d)) z.toLong\n        else if (d > 0) z.toLong\n\
    \        else y.toLong", "        val d = value.toDouble\n        if (d > 0) ceil(d).toLong\
    \ else floor(d).toLong", "        val num = value.toDouble\n        val floor\
    \ = math.floor(num)\n        val ceil = math.ceil(num)\n        if (num - floor\
    \ < ceil - num) floor.toLong else ceil.toLong", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num\
    \ - floor) == abs(num - ceil)) {\n            if (num > 0) ceil.toLong else floor.toLong\n\
    \        } else if (abs(num - floor) < abs(num - ceil)) {\n            floor.toLong\n\
    \        } else {\n            ceil.toLong\n        }", "        val d = value.toDouble\n\
    \        if (d < 0) -closestInteger(value.tail)\n        else {\n            val\
    \ i = d.toLong\n            if (d - i < 0.5) i\n            else i + 1\n     \
    \   }", "        val x = value.toDouble\n        val y = round(x)\n        if\
    \ (abs(x - y) == 0.5) {\n            if (x > 0) y + 1 else y - 1\n        } else\
    \ {\n            y\n        }", "        val num = value.toDouble\n        val\
    \ floor = math.floor(num)\n        val ceil = math.ceil(num)\n        if (abs(num\
    \ - floor) == abs(num - ceil)) {\n            if (num > 0) ceil.toLong else floor.toLong\n\
    \        } else if (abs(num - floor) < abs(num - ceil)) {\n            floor.toLong\n\
    \        } else {\n            ceil.toLong\n        }", "        val d = value.toDouble\n\
    \        val l = d.toLong\n        if (d - l > 0.5) l + 1\n        else l", " \
    \       val n = value.toDouble\n        val m = round(n)\n        if (n - m >=\
    \ 0.5) m + 1 else m", "        val d = value.toDouble\n        val l = d.toLong\n\
    \        if (d - l < 0.5) l else l + 1", "        val n = value.toDouble\n   \
    \     if (n < 0) {\n            val n1 = ceil(n)\n            val n2 = floor(n)\n\
    \            if (abs(n1) - abs(n) < abs(n) - abs(n2)) n1.toLong else n2.toLong\n\
    \        } else {\n            val n1 = floor(n)\n            val n2 = ceil(n)\n\
    \            if (n1 - n < n - n2) n1.toLong else n2.toLong\n        }", "    \
    \    val d = value.toDouble\n        val floor = d.floor\n        val ceil = d.ceil\n\
    \        if (abs(d - floor) < abs(d - ceil)) floor else ceil", "        val num\
    \ = value.toDouble\n        val floor = floor(num)\n        val ceil = ceil(num)\n\
    \        if (abs(num - floor) == abs(num - ceil)) {\n            if (num > 0)\
    \ ceil.toLong else floor.toLong\n        } else if (abs(num - floor) < abs(num\
    \ - ceil)) {\n            floor.toLong\n        } else {\n            ceil.toLong\n\
    \        }", "        val d = value.toDouble\n        if (d > 0) ceil(d).toLong\
    \ else floor(d).toLong", "        val d = value.toDouble\n        val i = d.toLong\n\
    \        if (abs(d - i) < 0.5) i else i + signum(d)", "        val d = value.toDouble\n\
    \        val i = d.toLong\n        if (abs(d - i) < 0.5) i else i + signum(d)",
  "        val d = value.toDouble\n        val f = floor(d)\n        val c = ceil(d)\n\
    \        if (abs(d - f) < abs(d - c)) f.toLong else c.toLong", "        val num\
    \ = value.toDouble\n        val floor = floor(num)\n        val ceil = ceil(num)\n\
    \        if (abs(num - floor) < abs(num - ceil)) floor.toLong else ceil.toLong",
  "        val d = value.toDouble\n        val i = d.toLong\n        if (abs(d - i)\
    \ >= 0.5) i + signum(d) else i", "        val d = value.toDouble\n        val\
    \ i = d.toLong\n        if (abs(d - i) < 0.5) i else i + signum(d)", "       \
    \ val number = value.toDouble\n        val floor = floor(number)\n        val\
    \ ceil = ceil(number)\n        if (abs(floor - number) == abs(ceil - number))\
    \ {\n            if (floor < 0) {\n                ceil.toLong\n            }\
    \ else {\n                floor.toLong\n            }\n        } else if (abs(floor\
    \ - number) < abs(ceil - number)) {\n            floor.toLong\n        } else\
    \ {\n            ceil.toLong\n        }", "        val d = value.toDouble\n  \
    \      if (d > 0) {\n            ceil(d).toLong\n        } else {\n          \
    \  floor(d).toLong\n        }", "        val d = value.toDouble\n        val l\
    \ = d.toLong\n        if (d - l < 0.5) l else l + 1", "        val d = value.toDouble\n\
    \        val i = d.toLong\n        if (abs(d - i) < 0.5) i else i + signum(d)",
  "        val d = value.toDouble\n        val i = d.toLong\n        if (abs(d - i)\
    \ < 0.5) i else i + signum(d).toLong", "        val n = value.toDouble\n     \
    \   if (n < 0) -closestInteger(-n)\n        else {\n            val d = n - floor(n)\n\
    \            if (d < 0.5) floor(n).toLong\n            else ceil(n).toLong\n \
    \       }", "        val x = value.toDouble\n        val y = round(x)\n      \
    \  val z = floor(x)\n        val w = ceil(x)\n        if (abs(x - y) < abs(x -\
    \ z)) y.toLong\n        else if (abs(x - y) < abs(x - w)) y.toLong\n        else\
    \ if (abs(x - z) < abs(x - w)) z.toLong\n        else w.toLong", "        val\
    \ x = value.toDouble\n        val y = round(x)\n        val z = floor(x)\n   \
    \     val w = ceil(x)\n        if (abs(x - y) == abs(x - z)) {\n            if\
    \ (abs(x - y) == abs(x - w)) {\n                if (x > 0) y else z\n        \
    \    } else {\n                if (abs(x - y) < abs(x - w)) y else w\n       \
    \     }\n        } else {\n            if (abs(x - y) < abs(x - z)) y else z\n\
    \        }", "        val d = value.toDouble\n        if (d < 0) {\n         \
    \   val d2 = ceil(d)\n            if (d2 - d == 0.5) {\n                d2.toLong\
    \ - 1\n            } else {\n                d2.toLong\n            }\n      \
    \  } else {\n            val d2 = floor(d)\n            if (d - d2 == 0.5) {\n\
    \                d2.toLong + 1\n            } else {\n                d2.toLong\n\
    \            }\n        }", "        val num = value.toDouble\n        val floor\
    \ = floor(num)\n        val ceil = ceil(num)\n        if (abs(num - floor) < abs(num\
    \ - ceil)) floor.toLong else ceil.toLong", "        val d = value.toDouble\n \
    \       val i = value.toLong\n        if (abs(d - i) < 0.5) i else i + signum(d\
    \ - i)", "        val d = value.toDouble\n        val i = d.toLong\n        if\
    \ (abs(d - i) < 0.5) i else i + 1", "        val num = value.toDouble\n      \
    \  if (num > 0) {\n            if (num - num.toLong > 0.5) num.toLong + 1\n  \
    \          else num.toLong\n        } else {\n            if (num - num.toLong\
    \ < -0.5) num.toLong - 1\n            else num.toLong\n        }", "        val\
    \ d = value.toDouble\n        val i = d.toLong\n        if (abs(d - i) < 0.5)\
    \ i else i + signum(d)", "        val d = value.toDouble\n        val i = d.toLong\n\
    \        val f = d - i\n        if (f < 0.5) i else i + 1", "        val d = value.toDouble\n\
    \        if (d > 0) {\n            ceil(d).toLong\n        } else {\n        \
    \    floor(d).toLong\n        }", "        val d = value.toDouble\n        val\
    \ i = d.toLong\n        if (d - i >= 0.5) i + 1 else i", "        val n = value.toDouble\n\
    \        val floor = floor(n)\n        val ceil = ceil(n)\n        if (abs(floor\
    \ - n) == abs(ceil - n)) {\n            if (floor < 0) {\n                ceil.toLong\n\
    \            } else {\n                floor.toLong\n            }\n        }\
    \ else if (abs(floor - n) < abs(ceil - n)) {\n            floor.toLong\n     \
    \   } else {\n            ceil.toLong\n        }", "        val d = value.toDouble\n\
    \        val i = d.toLong\n        if (abs(d - i) < 0.5) i else i + 1", "    \
    \    val d = value.toDouble\n        val i = d.toLong\n        if (abs(d - i)\
    \ > 0.5) i + signum(d) else i", "        val number = value.toDouble\n       \
    \ val floor = floor(number)\n        val ceil = ceil(number)\n        if (abs(number\
    \ - floor) < abs(number - ceil)) floor.toLong else ceil.toLong", "        val\
    \ d = value.toDouble\n        if (d > 0) ceil(d).toLong else floor(d).toLong",
  "        val num = value.toDouble\n        val floor = num.floor\n        val ceil\
    \ = num.ceil\n        if (abs(floor - num) == abs(ceil - num)) {\n           \
    \ if (floor < 0) floor else ceil\n        } else if (abs(floor - num) < abs(ceil\
    \ - num)) floor else ceil", "        val d = value.toDouble\n        if (d > 0)\
    \ {\n            ceil(d).toLong\n        } else {\n            floor(d).toLong\n\
    \        }", "        val num = value.toDouble\n        if (num > 0) {\n     \
    \       ceil(num).toLong\n        } else {\n            floor(num).toLong\n  \
    \      }", "        val d = value.toDouble\n        val i = d.toLong\n       \
    \ if (abs(d - i) < 0.5) i else i + (if (d > 0) 1 else -1)", "        val d = value.toDouble\n\
    \        if (d > 0) ceil(d).toLong else floor(d).toLong", "        val number\
    \ = value.toDouble\n        val floor = floor(number)\n        val ceil = ceil(number)\n\
    \        if (abs(floor - number) < abs(ceil - number)) floor.toLong\n        else\
    \ ceil.toLong", "        val d = value.toDouble\n        val i = d.toLong\n  \
    \      if (abs(d - i) < 0.5) i else i + signum(d)", "        val d = value.toDouble\n\
    \        if (d < 0) -closestInteger(-d)\n        else {\n            val i = d.toLong\n\
    \            if (d - i < 0.5) i\n            else i + 1\n        }", "       \
    \ val x = value.toDouble\n        if (x > 0) {\n            if (x - x.toLong <\
    \ 0.5) x.toLong else x.toLong + 1\n        } else {\n            if (x - x.toLong\
    \ > -0.5) x.toLong else x.toLong - 1\n        }", "        val d = value.toDouble\n\
    \        val i = d.toLong\n        if (abs(d - i) < 0.5) i else i + signum(d)",
  "        val v = value.toDouble\n        if (v < 0) -closestInteger(-v)\n      \
    \  else {\n            val c = ceil(v)\n            val f = floor(v)\n       \
    \     if (c - v < v - f) c.toLong\n            else f.toLong\n        }", "  \
    \      val n = value.toDouble\n        val x = floor(n)\n        val y = ceil(n)\n\
    \        if (n - x < y - n) x.toLong else y.toLong", "        val d = value.toDouble\n\
    \        val i = d.toLong\n        if (abs(d - i) < 0.5) i else i + (if (d > 0)\
    \ 1 else -1)", "        val d = value.toDouble\n        if (d > 0) ceil(d).toLong\
    \ else floor(d).toLong", "        val num = value.toDouble\n        val floor\
    \ = floor(num)\n        val ceil = ceil(num)\n        if (abs(num - floor) ==\
    \ abs(num - ceil)) {\n            if (num >= 0) ceil.toLong else floor.toLong\n\
    \        } else if (abs(num - floor) < abs(num - ceil)) {\n            floor.toLong\n\
    \        } else {\n            ceil.toLong\n        }", "        val d = value.toDouble\n\
    \        val i = d.toLong\n        if (abs(d - i) < 0.5) i else i + signum(d)",
  "        val d = value.toDouble\n        if (d > 0) {\n            ceil(d).toLong\n\
    \        } else {\n            floor(d).toLong\n        }", "        val x = value.toDouble\n\
    \        val y = round(x)\n        val z = floor(x)\n        val w = ceil(x)\n\
    \        if (abs(x - y) < abs(x - z)) y.toLong\n        else if (abs(x - y) <\
    \ abs(x - w)) y.toLong\n        else if (abs(x - z) < abs(x - w)) z.toLong\n \
    \       else w.toLong", "        val d = value.toDouble\n        val i = d.toLong\n\
    \        if (abs(d - i) < 0.5) i else i + signum(d)", "        val num = value.toDouble\n\
    \        if (num > 0) {\n            ceil(num).toLong\n        } else {\n    \
    \        floor(num).toLong\n        }", "        val d = value.toDouble\n    \
    \    val i = d.toLong\n        if (d - i > 0.5) i + 1 else i", "        val d\
    \ = value.toDouble\n        val d1 = floor(d)\n        val d2 = ceil(d)\n    \
    \    if (abs(d - d1) < abs(d - d2)) d1.toLong else d2.toLong", "        val d\
    \ = value.toDouble\n        val i = d.toLong\n        if (d - i < 0.5) i else\
    \ i + 1", "        val d = value.toDouble\n        val i = d.toLong\n        if\
    \ (d - i < 0.5) i else i + 1", "        val n = value.toDouble\n        val m\
    \ = round(n)\n        if (abs(n - m) == 0.5) {\n            if (n > 0) m + 1 else\
    \ m - 1\n        } else {\n            m.toLong\n        }", "        val v =\
    \ value.toDouble\n        val v1 = floor(v)\n        val v2 = ceil(v)\n      \
    \  if (abs(v - v1) < abs(v - v2)) v1.toLong else v2.toLong", "        val n =\
    \ value.toDouble\n        val r = round(n)\n        val f = floor(n)\n       \
    \ val c = ceil(n)\n        if (abs(r - n) < abs(f - n)) r.toLong\n        else\
    \ if (abs(r - n) > abs(c - n)) c.toLong\n        else if (r > 0) r.toLong\n  \
    \      else c.toLong", "        val v = value.toDouble\n        val c = round(v)\n\
    \        if (abs(v - c) == 0.5) {\n            if (v > 0) c + 1 else c - 1\n \
    \       } else {\n            c\n        }", "        val d = value.toDouble\n\
    \        val i = d.toLong\n        if (abs(d - i) < 0.5) i else i + 1", "    \
    \    val d = value.toDouble\n        if (d > 0) ceil(d).toLong else floor(d).toLong",
  "        val d = value.toDouble\n        val i = value.toLong\n        if (d - i\
    \ >= 0.5) i + 1 else i", "        var d = value.toDouble\n        if (d < 0) {\n\
    \            return ceil(d).toLong\n        }\n        return floor(d).toLong",
  "        val d = value.toDouble\n        val i = d.toLong\n        if (abs(d - i)\
    \ < 0.5) i else i + 1", "        val d = value.toDouble\n        val i = value.toLong\n\
    \        if (d - i >= 0.5) i + 1 else i", "        val d = value.toDouble\n  \
    \      val i = d.toLong\n        if (abs(d - i) < 0.5) i else i + signum(d)",
  "        val num = value.toDouble\n        if (num > 0) {\n            ceil(num).toLong\n\
    \        } else {\n            floor(num).toLong\n        }", "        val d =\
    \ value.toDouble\n        if (d > 0) ceil(d).toLong else floor(d).toLong", " \
    \       val d = value.toDouble\n        val floor = d.floor\n        val ceil\
    \ = d.ceil\n        if (abs(floor - d) < abs(ceil - d)) floor.toLong else ceil.toLong",
  "        val d = value.toDouble\n        val f = floor(d)\n        val c = ceil(d)\n\
    \        if (abs(d - f) < abs(d - c)) f.toLong else c.toLong", "        val d\
    \ = value.toDouble\n        val i = d.toLong\n        if (d - i >= 0.5) i + 1\
    \ else i", "        val x = value.toDouble\n        val y = round(x)\n       \
    \ if (abs(x - y) == 0.5) {\n            if (x > 0) y + 1 else y - 1\n        }\
    \ else y", "        val n = value.toDouble\n        val r = round(n)\n       \
    \ if (abs(n - r) == 0.5) {\n            if (n > 0) r + 1 else r - 1\n        }\
    \ else {\n            r\n        }", "        val d = value.toDouble\n       \
    \ val i = d.toLong\n        if (d - i >= 0.5) i + 1 else i", "        val d =\
    \ value.toDouble\n        if (d > 0) ceil(d).toLong else floor(d).toLong", " \
    \       val d = value.toDouble\n        if (d > 0) {\n            ceil(d).toLong\n\
    \        } else {\n            floor(d).toLong\n        }", "        val d = value.toDouble\n\
    \        val i = d.toLong\n        if (d - i < 0.5) i else i + 1", "        val\
    \ num = value.toDouble\n        if (num > 0) {\n            ceil(num).toLong\n\
    \        } else {\n            floor(num).toLong\n        }", "        val d =\
    \ value.toDouble\n        val i = d.toLong\n        if (d - i >= 0.5) i + 1 else\
    \ i", "        val d = value.toDouble\n        if (d > 0) {\n            ceil(d).toLong\n\
    \        } else {\n            floor(d).toLong\n        }", "        val d = value.toDouble\n\
    \        val floor = d.floor\n        val ceil = d.ceil\n        if (abs(floor\
    \ - d) == abs(ceil - d)) {\n            if (floor < 0) ceil else floor\n     \
    \   } else if (abs(floor - d) < abs(ceil - d)) {\n            floor\n        }\
    \ else {\n            ceil\n        }", "        val d = value.toDouble\n    \
    \    val i = d.toLong\n        if (abs(d - i) < 0.5) i else i + (if (d > 0) 1\
    \ else -1)", "        val d = value.toDouble\n        val l = d.toLong\n     \
    \   if (d - l >= 0.5) l + 1\n        else l", "        val n = value.toDouble\n\
    \        if (n > 0) {\n            if (n - n.toLong < 0.5) n.toLong else n.toLong\
    \ + 1\n        } else {\n            if (n - n.toLong > -0.5) n.toLong else n.toLong\
    \ - 1\n        }", "        val x = value.toDouble\n        if (x < 0) {\n   \
    \         val y = ceil(x)\n            if (y - x == 0.5) y.toLong - 1 else y.toLong\n\
    \        } else {\n            val y = floor(x)\n            if (x - y == 0.5)\
    \ y.toLong + 1 else y.toLong\n        }", "        val num = value.toDouble\n\
    \        val ceil = ceil(num)\n        val floor = floor(num)\n        if (ceil\
    \ - num == num - floor) {\n            if (ceil > 0) ceil.toLong else floor.toLong\n\
    \        } else if (ceil - num < num - floor) ceil.toLong else floor.toLong",
  "        val d = value.toDouble\n        if (d > 0) ceil(d).toLong else floor(d).toLong",
  "        val d = value.toDouble\n        val i = d.toLong\n        if (d - i < 0.5)\
    \ i else i + 1", "        val d = value.toDouble\n        if (d > 0) {\n     \
    \       ceil(d).toLong\n        } else {\n            floor(d).toLong\n      \
    \  }", "        val d = value.toDouble\n        val f = floor(d)\n        val\
    \ c = ceil(d)\n        if (abs(d - f) == abs(d - c)) {\n            if (d > 0)\
    \ c else f\n        } else if (abs(d - f) < abs(d - c)) f else c", "        val\
    \ d = value.toDouble\n        val i = value.toLong\n        if (abs(d - i) < 0.5)\
    \ i else i + (if (d > 0) 1 else -1)", "        val n = value.toDouble\n      \
    \  val d = n - n.floor\n        if (d < 0.5) n.floor.toLong else n.ceil.toLong",
  "        val number = value.toDouble\n        val floor = floor(number)\n      \
    \  val ceil = ceil(number)\n        if (abs(number - floor) < abs(number - ceil))\
    \ floor.toLong else ceil.toLong", "        val d = value.toDouble\n        if\
    \ (d > 0) {\n            ceil(d).toLong\n        } else {\n            floor(d).toLong\n\
    \        }", "        val d = value.toDouble\n        val l = d.toLong\n     \
    \   if (d - l >= 0.5) l + 1 else l", "        val d = value.toDouble\n       \
    \ if (d < 0) {\n            val d1 = ceil(d)\n            val d2 = floor(d)\n\
    \            if (d1 - d < d - d2) d1.toLong else d2.toLong\n        } else {\n\
    \            val d1 = floor(d)\n            val d2 = ceil(d)\n            if (d2\
    \ - d < d - d1) d2.toLong else d1.toLong\n        }", "        val d = value.toDouble\n\
    \        if (d > 0) {\n            ceil(d).toLong\n        } else {\n        \
    \    floor(d).toLong\n        }", "        val d = value.toDouble\n        val\
    \ i = d.toLong\n        if (abs(d - i) > 0.5) i + signum(d) else i", "       \
    \ val d = value.toDouble\n        val i = d.toLong\n        if (abs(d - i) > 0.5)\
    \ {\n            if (d > 0) i + 1 else i - 1\n        } else i", "        val\
    \ d = value.toDouble\n        val i = d.toLong\n        if (abs(d - i) < 0.5)\
    \ i else i + signum(d)", "        val d = value.toDouble\n        if (d < 0) {\n\
    \            ceil(d).toLong\n        } else {\n            floor(d).toLong\n \
    \       }", "        val d = value.toDouble\n        val floor = floor(d)\n  \
    \      val ceil = ceil(d)\n        if (d - floor < ceil - d) floor.toLong else\
    \ ceil.toLong", "        val d = value.toDouble\n        val i = d.toLong\n  \
    \      if (abs(d - i) >= 0.5) i + (if (d > 0) 1 else -1) else i", "        val\
    \ d = value.toDouble\n        val i = d.toLong\n        if (abs(d - i) < 0.5)\
    \ i else i + 1", "        val n = value.toDouble\n        val c = round(n)\n \
    \       val f = floor(n)\n        val c_d = abs(c - n)\n        val f_d = abs(f\
    \ - n)\n        if (c_d < f_d) c.toLong else f.toLong", "        val n = value.toDouble\n\
    \        val l = floor(n).toLong\n        val r = ceil(n).toLong\n        if (abs(n\
    \ - l) < abs(n - r)) l else r", "        val d = value.toDouble\n        val i\
    \ = d.toLong\n        if (d - i >= 0.5) i + 1 else i", "        val d = value.toDouble\n\
    \        if (d > 0) {\n            ceil(d).toLong\n        } else {\n        \
    \    floor(d).toLong\n        }", "        val d = value.toDouble\n        val\
    \ i = d.toLong\n        if (abs(d - i) < 0.5) i else i + 1", "        val d =\
    \ value.toDouble\n        val d1 = floor(d)\n        val d2 = ceil(d)\n      \
    \  if (abs(d - d1) < abs(d - d2)) d1.toLong else d2.toLong", "        val d =\
    \ value.toDouble\n        val i = d.toLong\n        if (abs(d - i) < 0.5) i else\
    \ i + 1", "        val d = value.toDouble\n        val i = d.toLong\n        if\
    \ (abs(d - i) < 0.5) i else i + 1", "        val x = value.toDouble\n        val\
    \ y = round(x)\n        if (abs(x - y) == 0.5) {\n            if (x > 0) y + 1\
    \ else y - 1\n        } else y", "        val num = value.toDouble\n        val\
    \ floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num - floor)\
    \ < abs(num - ceil)) floor.toLong else ceil.toLong", "        val d = value.toDouble\n\
    \        val i = d.toLong\n        if (abs(d - i) < 0.5) i else i + signum(d)",
  "        val v = value.toDouble\n        if (v < 0) {\n            val v1 = ceil(v)\n\
    \            val v2 = floor(v)\n            if (abs(v1) - abs(v2) < 0.5) v1.toLong\
    \ else v2.toLong\n        } else {\n            val v1 = floor(v)\n          \
    \  val v2 = ceil(v)\n            if (v2 - v1 < 0.5) v1.toLong else v2.toLong\n\
    \        }", "        val d = value.toDouble\n        if (d > 0) ceil(d).toLong\
    \ else floor(d).toLong", "        val d = value.toDouble\n        val i = d.toLong\n\
    \        if (abs(d - i) < 0.5) i else i + signum(d)", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (num\
    \ - floor < ceil - num) floor.toLong else ceil.toLong", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(floor\
    \ - num) == abs(ceil - num)) {\n            if (floor < 0) floor.toLong else ceil.toLong\n\
    \        } else if (abs(floor - num) < abs(ceil - num)) {\n            floor.toLong\n\
    \        } else {\n            ceil.toLong\n        }", "        val d = value.toDouble\n\
    \        if (d < 0) {\n            val n = ceil(d)\n            if (n - d == 0.5)\
    \ {\n                n.toLong - 1\n            } else {\n                n.toLong\n\
    \            }\n        } else {\n            val n = floor(d)\n            if\
    \ (d - n == 0.5) {\n                n.toLong + 1\n            } else {\n     \
    \           n.toLong\n            }\n        }", "        val d = value.toDouble\n\
    \        val floor = floor(d)\n        val ceil = ceil(d)\n        if (abs(d -\
    \ floor) < abs(d - ceil)) floor.toLong else ceil.toLong", "        val d = value.toDouble\n\
    \        if (d > 0) ceil(d).toLong else floor(d).toLong", "        val d = value.toDouble\n\
    \        val f = floor(d)\n        val c = ceil(d)\n        if (d - f < c - d)\
    \ f.toLong else c.toLong", "        val num = value.toDouble\n        val floor\
    \ = floor(num)\n        val ceil = ceil(num)\n        if (abs(num - floor) ==\
    \ abs(num - ceil)) {\n            if (num > 0) ceil.toLong else floor.toLong\n\
    \        } else if (abs(num - floor) < abs(num - ceil)) {\n            floor.toLong\n\
    \        } else {\n            ceil.toLong\n        }", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(floor\
    \ - num) == abs(ceil - num)) {\n            if (floor < 0) {\n               \
    \ floor.toLong\n            } else {\n                ceil.toLong\n          \
    \  }\n        } else if (abs(floor - num) < abs(ceil - num)) {\n            floor.toLong\n\
    \        } else {\n            ceil.toLong\n        }", "        val d = value.toDouble\n\
    \        val l = d.toLong\n        if (abs(d - l) < 0.5) l else l + 1", "    \
    \    val d = value.toDouble\n        if (d < 0) -closestInteger(-d)\n        else\
    \ {\n            val l = d.toLong\n            if (d - l < 0.5) l\n          \
    \  else l + 1\n        }", "        val d = value.toDouble\n        if (d > 0)\
    \ {\n            ceil(d).toLong\n        } else {\n            floor(d).toLong\n\
    \        }", "        val d = value.toDouble\n        val i = d.toLong\n     \
    \   if (abs(d - i) < 0.5) i else i + 1", "        val number = value.toDouble\n\
    \        val floor = floor(number)\n        val ceil = ceil(number)\n        if\
    \ (abs(floor - number) < abs(ceil - number)) floor.toLong\n        else ceil.toLong",
  "        val d = value.toDouble\n        if (d > 0) ceil(d).toLong else floor(d).toLong",
  "        val d = value.toDouble\n        val i = d.toLong\n        if (abs(d - i)\
    \ < 0.5) i else i + 1", "        val d = value.toDouble\n        val i = d.toLong\n\
    \        if (abs(d - i) < 0.5) i else i + 1", "        val d = value.toDouble\n\
    \        val l = d.toLong\n        if (abs(d - l) < 0.5) l else l + 1", "    \
    \    val d = value.toDouble\n        val i = d.toLong\n        if (abs(d - i)\
    \ < 0.5) i else i + signum(d)", "        val d = value.toDouble\n        val i\
    \ = d.toLong\n        if (abs(d - i) >= 0.5) {\n            if (d > 0) i + 1 else\
    \ i - 1\n        } else i", "        val num = value.toDouble\n        val floor\
    \ = floor(num)\n        val ceil = ceil(num)\n        if (num - floor < ceil -\
    \ num) floor.toLong else ceil.toLong", "        val d = value.toDouble\n     \
    \   if (d < 0) {\n            val d1 = ceil(d)\n            val d2 = floor(d)\n\
    \            if (d1 - d < d - d2) d1.toLong else d2.toLong\n        } else {\n\
    \            val d1 = floor(d)\n            val d2 = ceil(d)\n            if (d2\
    \ - d < d - d1) d2.toLong else d1.toLong\n        }", "        val n = value.toDouble\n\
    \        val i = round(n)\n        if (abs(n - i) == 0.5) {\n            if (n\
    \ > 0) i + 1 else i - 1\n        } else i", "        val n = value.toDouble\n\
    \        val d = n - n.toLong\n        if (d < 0.5) n.toLong else n.toLong + 1",
  "        val d = value.toDouble\n        if (d > 0) {\n            ceil(d).toLong\n\
    \        } else {\n            floor(d).toLong\n        }", "        val d = value.toDouble\n\
    \        if (d > 0) ceil(d).toLong else floor(d).toLong", "        val d = value.toDouble\n\
    \        val floor = d.floor\n        val ceil = d.ceil\n        if (abs(floor\
    \ - d) == abs(ceil - d)) {\n            if (floor < 0) ceil else floor\n     \
    \   } else if (abs(floor - d) < abs(ceil - d)) {\n            floor\n        }\
    \ else {\n            ceil\n        }", "        val d = value.toDouble\n    \
    \    val i = d.toLong\n        if (abs(d - i) < 0.5) i else i + 1", "        val\
    \ d = value.toDouble\n        val i = d.toLong\n        if (abs(d - i) < 0.5)\
    \ i else i + signum(d)", "        val d = value.toDouble\n        val i = d.toLong\n\
    \        if (abs(d - i) < 0.5) i else i + (if (d > 0) 1 else -1)", "        val\
    \ n = value.toDouble\n        if (n > 0) {\n            if (n - n.toLong < 0.5)\
    \ n.toLong else n.toLong + 1\n        } else {\n            if (n - n.toLong >\
    \ -0.5) n.toLong else n.toLong - 1\n        }", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num\
    \ - floor) == abs(num - ceil)) {\n            if (num > 0) ceil.toLong else floor.toLong\n\
    \        } else if (abs(num - floor) < abs(num - ceil)) {\n            floor.toLong\n\
    \        } else {\n            ceil.toLong\n        }", "        val number =\
    \ value.toDouble\n        val floor = floor(number)\n        val ceil = ceil(number)\n\
    \        if (abs(floor - number) < abs(ceil - number)) floor.toLong\n        else\
    \ ceil.toLong", "        val d = value.toDouble\n        if (d > 0) {\n      \
    \      ceil(d).toLong\n        } else {\n            floor(d).toLong\n       \
    \ }", "        val d = value.toDouble\n        if (d > 0) {\n            if (d\
    \ - d.toLong < 0.5) d.toLong else d.toLong + 1\n        } else {\n           \
    \ if (d - d.toLong > -0.5) d.toLong else d.toLong - 1\n        }", "        val\
    \ d = value.toDouble\n        if (d < 0) {\n            -closestInteger(-d)\n\
    \        } else {\n            val i = d.toLong\n            if (d - i < 0.5)\
    \ i else i + 1\n        }", "        val d = value.toDouble\n        val x = floor(d)\n\
    \        val y = ceil(d)\n        if (abs(d - x) < abs(d - y)) x.toLong else y.toLong",
  "        val d = value.toDouble\n        val i = d.toLong\n        if (abs(d - i)\
    \ < 0.5) i else i + 1", "        val d = value.toDouble\n        if (d > 0) ceil(d).toLong\
    \ else floor(d).toLong", "        val num = value.toDouble\n        if (num >\
    \ 0) {\n            if (num - num.toLong < 0.5) num.toLong else num.toLong + 1\n\
    \        } else {\n            if (num - num.toLong > -0.5) num.toLong else num.toLong\
    \ - 1\n        }", "        val d = value.toDouble\n        val i = d.toLong\n\
    \        if (d - i < 0.5) i else i + 1", "        val d = value.toDouble\n   \
    \     if (d > 0) ceil(d).toLong else floor(d).toLong", "        val d = value.toDouble\n\
    \        if (d < 0) {\n            val d2 = ceil(d)\n            if (d2 - d ==\
    \ 0.5) {\n                return d2.toLong\n            } else {\n           \
    \     return floor(d).toLong\n            }\n        } else {\n            val\
    \ d2 = floor(d)\n            if (d - d2 == 0.5) {\n                return d2.toLong\n\
    \            } else {\n                return ceil(d).toLong\n            }\n\
    \        }", "        val d = value.toDouble\n        val i = d.toLong\n     \
    \   if (abs(d - i) < 0.5) i else i + 1", "        val d = value.toDouble\n   \
    \     val i = value.toLong\n        if (d - i < 0.5) i else i + 1", "        val\
    \ d = value.toDouble\n        if (d > 0) ceil(d).toLong else floor(d).toLong",
  "        val d = value.toDouble\n        val i = d.toLong\n        if (abs(d - i)\
    \ < 0.5) i else i + signum(d)", "        val d = value.toDouble\n        if (d\
    \ > 0) {\n            ceil(d).toLong\n        } else {\n            floor(d).toLong\n\
    \        }", "        val d = value.toDouble\n        val i = d.toLong\n     \
    \   if (abs(d - i) < 0.5) i else i + signum(d)"]
stop_tokens:
- "\n    }\n"
