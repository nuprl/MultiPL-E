name: HumanEval_99_closest_integer
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Create a function that takes a value (string) representing a number\n  \
  \  // and returns the closest integer to it. If the number is equidistant\n    //\
  \ from two integers, round it away from zero.\n    // Examples\n    // >>> closestInteger((\"\
  10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"))\n    // (15l)\n    //\
  \ Note:\n    // Rounding away from zero means that if the given number is equidistant\n\
  \    // from two integers, the one you should return is the one that is the\n  \
  \  // farthest from zero. For example closest_integer(\"14.5\") should\n    // return\
  \ 15 and closest_integer(\"-14.5\") should return -15.\n    def closestInteger(value\
  \ : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
  10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
  -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
  0\")) == (0l));\n    }\n\n}\n"
completions: ["        val num = value.toDouble\n        val floor = floor(num)\n\
    \        val ceil = ceil(num)\n        if (abs(num - floor) < abs(num - ceil))\
    \ floor.toLong else ceil.toLong", "        val num = value.toDouble\n        val\
    \ floor = num.floor\n        val ceil = num.ceil\n        if (num - floor > ceil\
    \ - num) ceil else floor", "        val number = value.toDouble\n        val floor\
    \ = floor(number)\n        val ceil = ceil(number)\n        if (abs(number - floor)\
    \ < abs(number - ceil)) floor.toLong else ceil.toLong", "        val n = value.toDouble\n\
    \        if (n < 0) -closestInteger(-n)\n        else {\n            val d = n\
    \ - floor(n)\n            if (d < 0.5) floor(n).toLong\n            else ceil(n).toLong\n\
    \        }", "        val d = value.toDouble\n        val f = floor(d)\n     \
    \   val c = ceil(d)\n        if (abs(d - f) == abs(d - c)) {\n            if (d\
    \ > 0) c else f\n        } else if (abs(d - f) < abs(d - c)) f else c", "    \
    \    val num = value.toDouble\n        val floor = num.floor\n        val ceil\
    \ = num.ceil\n        if (abs(num - floor) == abs(num - ceil)) {\n           \
    \ if (num > 0) ceil else floor\n        } else if (abs(num - floor) < abs(num\
    \ - ceil)) floor else ceil", "        val d = value.toDouble\n        if (d >\
    \ 0) {\n            ceil(d).toLong\n        } else {\n            floor(d).toLong\n\
    \        }", "        val n = value.toDouble\n        val m = round(n)\n     \
    \   if (abs(n - m) == 0.5) {\n            if (n > 0) m + 1 else m - 1\n      \
    \  } else m", "        val num = value.toDouble\n        val floor = math.floor(num)\n\
    \        val ceil = math.ceil(num)\n        if (num - floor > ceil - num) ceil.toLong\
    \ else floor.toLong", "        val num = value.toDouble\n        if (num < 0)\
    \ -round(-num) else round(num)", "        val d = value.toDouble\n        if (d\
    \ < 0) {\n            val n = ceil(d)\n            if (n - d == 0.5) {\n     \
    \           n.toLong + 1\n            } else {\n                n.toLong\n   \
    \         }\n        } else {\n            val n = floor(d)\n            if (d\
    \ - n == 0.5) {\n                n.toLong - 1\n            } else {\n        \
    \        n.toLong\n            }\n        }", "        val d = value.toDouble\n\
    \        val floor = floor(d)\n        val ceil = ceil(d)\n        if (abs(floor\
    \ - d) == abs(ceil - d)) {\n            if (floor < 0) floor.toLong else ceil.toLong\n\
    \        } else if (abs(floor - d) < abs(ceil - d)) {\n            floor.toLong\n\
    \        } else {\n            ceil.toLong\n        }", "        val num = value.toDouble\n\
    \        if (num > 0) {\n            ceil(num).toLong\n        } else {\n    \
    \        floor(num).toLong\n        }", "        val d = value.toDouble\n    \
    \    val i = d.toLong\n        if (abs(d - i) < 0.5) i else i + signum(d)", " \
    \       val d = value.toDouble\n        val i = d.toLong\n        if (abs(d -\
    \ i) < 0.5) i else i + signum(d)", "        val d = value.toDouble\n        val\
    \ i = d.toLong\n        if (abs(d - i) < 0.5) i else i + signum(d)", "       \
    \ val d = value.toDouble\n        val i = d.toLong\n        if (abs(d - i) < 0.5)\
    \ i else i + 1", "        val num = value.toDouble\n        if (num > 0) {\n \
    \           val floor = num.floor\n            val ceil = num.ceil\n         \
    \   if (num - floor < ceil - num) floor else ceil\n        } else {\n        \
    \    val floor = num.floor\n            val ceil = num.ceil\n            if (num\
    \ - floor > ceil - num) floor else ceil\n        }", "        val d = value.toDouble\n\
    \        if (d > 0) ceil(d).toLong else floor(d).toLong", "        val num = value.toDouble\n\
    \        val floor = num.floor\n        val ceil = num.ceil\n        if (abs(num\
    \ - floor) == abs(num - ceil)) {\n            if (num >= 0) ceil else floor\n\
    \        } else if (abs(num - floor) < abs(num - ceil)) floor else ceil"]
stop_tokens:
- "\n    }\n"
