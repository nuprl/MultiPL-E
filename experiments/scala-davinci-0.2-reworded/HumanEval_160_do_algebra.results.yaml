language: scala
name: HumanEval_160_do_algebra
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       stack.push(op(i) match {\n                case \"+\" => a + b\n      \
    \          case \"-\" => a - b\n                case \"*\" => a * b\n        \
    \        case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            })\n        }\n        stack.pop\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpvp9ja0ik.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpvp9ja0ik.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpvp9ja0ik.scala:34)\n\tat Problem$.main(tmpvp9ja0ik.scala:38)\n\
    \tat Problem.main(tmpvp9ja0ik.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val c = op(i) match {\n                case \"+\" => a + b\n         \
    \       case \"-\" => a - b\n                case \"*\" => a * b\n           \
    \     case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpe85o_zr_.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpe85o_zr_.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpe85o_zr_.scala:35)\n\tat Problem$.main(tmpe85o_zr_.scala:39)\n\
    \tat Problem.main(tmpe85o_zr_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            op(i - 1) match {\n                case \"+\" => result += operand(i)\n\
    \                case \"-\" => result -= operand(i)\n                case \"*\"\
    \ => result *= operand(i)\n                case \"//\" => result /= operand(i)\n\
    \                case \"**\" => result = pow(result, operand(i)).toLong\n    \
    \        }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp19bafjxw.scala:37)\n\tat Problem.main(tmp19bafjxw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        if (op.isEmpty) return operand.head\n        val opHead\
    \ = op.head\n        val opTail = op.tail\n        val operandHead = operand.head\n\
    \        val operandTail = operand.tail\n        val operandTailHead = operandTail.head\n\
    \        val operandTailTail = operandTail.tail\n        val result = opHead match\
    \ {\n            case \"+\" => operandHead + operandTailHead\n            case\
    \ \"-\" => operandHead - operandTailHead\n            case \"*\" => operandHead\
    \ * operandTailHead\n            case \"//\" => operandHead / operandTailHead\n\
    \            case \"**\" => pow(operandHead, operandTailHead).toLong\n       \
    \ }\n        doAlgebra(opTail, result :: operandTailTail)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp91ewwedt.scala:41)\n\tat Problem.main(tmp91ewwedt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpe0pbra6s.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpe0pbra6s.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpe0pbra6s.scala:34)\n\tat Problem$.main(tmpe0pbra6s.scala:38)\n\
    \tat Problem.main(tmpe0pbra6s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        if (op.length != operand.length - 1) throw new Exception(\"\
    Invalid input\")\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n                case _ => throw new Exception(\"Invalid operator\"\
    )\n            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp95kok33t.scala:39)\n\tat Problem.main(tmp95kok33t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb6knqde3.scala:37)\n\tat Problem.main(tmpb6knqde3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpe0pbra6s.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpe0pbra6s.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpe0pbra6s.scala:34)\n\tat Problem$.main(tmpe0pbra6s.scala:38)\n\
    \tat Problem.main(tmpe0pbra6s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            op(i - 1) match {\n                case \"+\" => result += operand(i)\n\
    \                case \"-\" => result -= operand(i)\n                case \"*\"\
    \ => result *= operand(i)\n                case \"//\" => result /= operand(i)\n\
    \                case \"**\" => result = pow(result, operand(i)).toLong\n    \
    \        }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp19bafjxw.scala:37)\n\tat Problem.main(tmp19bafjxw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            if (op(i) == \"+\") result += operand(i + 1)\n            else\
    \ if (op(i) == \"-\") result -= operand(i + 1)\n            else if (op(i) ==\
    \ \"*\") result *= operand(i + 1)\n            else if (op(i) == \"//\") result\
    \ /= operand(i + 1)\n            else if (op(i) == \"**\") result = pow(result,\
    \ operand(i + 1)).toLong\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv0h4wakf.scala:35)\n\tat Problem.main(tmpv0h4wakf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val o1 = stack.pop\n            val o2 = operand(i + 1)\n   \
    \         val result = op(i) match {\n                case \"+\" => o1 + o2\n\
    \                case \"-\" => o1 - o2\n                case \"*\" => o1 * o2\n\
    \                case \"//\" => o1 / o2\n                case \"**\" => pow(o1,\
    \ o2).toLong\n            }\n            stack.push(result)\n        }\n     \
    \   stack.pop\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpao3ugn4e.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpao3ugn4e.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpao3ugn4e.scala:35)\n\tat Problem$.main(tmpao3ugn4e.scala:39)\n\
    \tat Problem.main(tmpao3ugn4e.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792455
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val o = op(i)\n            val a = operand(i)\n            val\
    \ b = operand(i + 1)\n            if (o == \"+\") stack.push(a + b)\n        \
    \    else if (o == \"-\") stack.push(a - b)\n            else if (o == \"*\")\
    \ stack.push(a * b)\n            else if (o == \"//\") stack.push(a / b)\n   \
    \         else if (o == \"**\") stack.push(pow(a, b).toLong)\n        }\n    \
    \    stack.pop\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5edg_eid.scala:37)\n\tat Problem.main(tmp5edg_eid.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val o = op(i)\n            val a = operand(i)\n            val\
    \ b = operand(i + 1)\n            if (o == \"+\") stack.push(a + b)\n        \
    \    else if (o == \"-\") stack.push(a - b)\n            else if (o == \"*\")\
    \ stack.push(a * b)\n            else if (o == \"//\") stack.push(a / b)\n   \
    \         else if (o == \"**\") stack.push(pow(a, b).toLong)\n        }\n    \
    \    stack.pop\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp79tm0c2g.scala:37)\n\tat Problem.main(tmp79tm0c2g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        stack.push(operand(0))\n\
    \        for (i <- 1 until operand.length) {\n            val o = op(i - 1)\n\
    \            val n = operand(i)\n            if (o == \"+\") stack.push(stack.pop\
    \ + n)\n            else if (o == \"-\") stack.push(stack.pop - n)\n         \
    \   else if (o == \"*\") stack.push(stack.pop * n)\n            else if (o ==\
    \ \"//\") stack.push(stack.pop / n)\n            else if (o == \"**\") stack.push(pow(stack.pop,\
    \ n).toLong)\n        }\n        stack.pop\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphiu36r_h.scala:38)\n\tat Problem.main(tmphiu36r_h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            if (op(i - 1) == \"+\") result += operand(i)\n            else\
    \ if (op(i - 1) == \"-\") result -= operand(i)\n            else if (op(i - 1)\
    \ == \"*\") result *= operand(i)\n            else if (op(i - 1) == \"//\") result\
    \ /= operand(i)\n            else if (op(i - 1) == \"**\") result = pow(result,\
    \ operand(i)).toLong\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpapsf_qgy.scala:35)\n\tat Problem.main(tmpapsf_qgy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            op(i - 1) match {\n                case \"+\" => result += operand(i)\n\
    \                case \"-\" => result -= operand(i)\n                case \"*\"\
    \ => result *= operand(i)\n                case \"//\" => result /= operand(i)\n\
    \                case \"**\" => result = pow(result, operand(i)).toLong\n    \
    \        }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp19bafjxw.scala:37)\n\tat Problem.main(tmp19bafjxw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb6knqde3.scala:37)\n\tat Problem.main(tmpb6knqde3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            op(i - 1) match {\n                case \"+\" => result += operand(i)\n\
    \                case \"-\" => result -= operand(i)\n                case \"*\"\
    \ => result *= operand(i)\n                case \"//\" => result /= operand(i)\n\
    \                case \"**\" => result = pow(result, operand(i)).toLong\n    \
    \        }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp19bafjxw.scala:37)\n\tat Problem.main(tmp19bafjxw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb6knqde3.scala:37)\n\tat Problem.main(tmpb6knqde3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpe0pbra6s.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpe0pbra6s.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpe0pbra6s.scala:34)\n\tat Problem$.main(tmpe0pbra6s.scala:38)\n\
    \tat Problem.main(tmpe0pbra6s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val c = op(i) match {\n                case \"+\" => a + b\n         \
    \       case \"-\" => a - b\n                case \"*\" => a * b\n           \
    \     case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpl61aph54.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpl61aph54.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpl61aph54.scala:35)\n\tat Problem$.main(tmpl61aph54.scala:39)\n\
    \tat Problem.main(tmpl61aph54.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val num1 = stack.pop\n            val num2 = operand(i + 1)\n\
    \            val result = op(i) match {\n                case \"+\" => num1 +\
    \ num2\n                case \"-\" => num1 - num2\n                case \"*\"\
    \ => num1 * num2\n                case \"//\" => num1 / num2\n               \
    \ case \"**\" => pow(num1, num2).toLong\n            }\n            stack.push(result)\n\
    \        }\n        stack.pop\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp_h56a9lq.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp_h56a9lq.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp_h56a9lq.scala:35)\n\tat Problem$.main(tmp_h56a9lq.scala:39)\n\
    \tat Problem.main(tmp_h56a9lq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val c = op(i) match {\n                case \"+\" => a + b\n         \
    \       case \"-\" => a - b\n                case \"*\" => a * b\n           \
    \     case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpe85o_zr_.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpe85o_zr_.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpe85o_zr_.scala:35)\n\tat Problem$.main(tmpe85o_zr_.scala:39)\n\
    \tat Problem.main(tmpe85o_zr_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val x = operand(i)\n            val y = operand(i + 1)\n    \
    \        op(i) match {\n                case \"+\" => stack.push(x + y)\n    \
    \            case \"-\" => stack.push(x - y)\n                case \"*\" => stack.push(x\
    \ * y)\n                case \"//\" => stack.push(x / y)\n                case\
    \ \"**\" => stack.push(pow(x, y).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa7k2_au5.scala:38)\n\tat Problem.main(tmpa7k2_au5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val c = op(i) match {\n                case \"+\" => a + b\n         \
    \       case \"-\" => a - b\n                case \"*\" => a * b\n           \
    \     case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpe85o_zr_.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpe85o_zr_.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpe85o_zr_.scala:35)\n\tat Problem$.main(tmpe85o_zr_.scala:39)\n\
    \tat Problem.main(tmpe85o_zr_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp5f5ybwgu.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp5f5ybwgu.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp5f5ybwgu.scala:34)\n\tat Problem$.main(tmp5f5ybwgu.scala:38)\n\
    \tat Problem.main(tmp5f5ybwgu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        // Fill up this function body\n        // `op` is a list\
    \ of operators\n        // `operand` is a list of operands\n        // You have\
    \ to return the result of the algebraic expression\n        // You can use the\
    \ following functions:\n        // `+` `-` `*` `/` `%` `**`\n        // Example:\n\
    \        // `2 + 3 * 4 - 5`\n        // `op = ['+', '*', '-']`\n        // `operand\
    \ = [2, 3, 4, 5]`\n        // `return 9`\n        var result = operand(0)\n  \
    \      for (i <- 0 until op.length) {\n            if (op(i) == \"+\") {\n   \
    \             result += operand(i + 1)\n            } else if (op(i) == \"-\"\
    ) {\n                result -= operand(i + 1)\n            } else if (op(i) ==\
    \ \"*\") {\n                result *= operand(i + 1)\n            } else if (op(i)\
    \ == \"/\") {\n                result /= operand(i + 1)\n            } else if\
    \ (op(i) == \"%\") {\n                result %= operand(i + 1)\n            }\
    \ else if (op(i) == \"**\") {\n                result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy5dk9znx.scala:54)\n\tat Problem.main(tmpy5dk9znx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val opStack = new Stack[String]\n        val operandStack\
    \ = new Stack[Long]\n        for (i <- 0 until op.length) {\n            if (op(i)\
    \ == \"*\") {\n                operandStack.push(operandStack.pop * operand(i\
    \ + 1))\n            } else if (op(i) == \"//\") {\n                operandStack.push(operandStack.pop\
    \ / operand(i + 1))\n            } else if (op(i) == \"**\") {\n             \
    \   operandStack.push(pow(operandStack.pop, operand(i + 1)).toLong)\n        \
    \    } else {\n                opStack.push(op(i))\n                operandStack.push(operand(i\
    \ + 1))\n            }\n        }\n        var result = operandStack.pop\n   \
    \     while (!opStack.isEmpty) {\n            if (opStack.pop == \"+\") result\
    \ += operandStack.pop\n            else result -= operandStack.pop\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp3_11g4me.scala:31)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp3_11g4me.scala:36)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp3_11g4me.scala:36)\n\tat Problem$.main(tmp3_11g4me.scala:45)\n\
    \tat Problem.main(tmp3_11g4me.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val c = op(i) match {\n                case \"+\" => a + b\n         \
    \       case \"-\" => a - b\n                case \"*\" => a * b\n           \
    \     case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpe85o_zr_.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpe85o_zr_.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpe85o_zr_.scala:35)\n\tat Problem$.main(tmpe85o_zr_.scala:39)\n\
    \tat Problem.main(tmpe85o_zr_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpe0pbra6s.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpe0pbra6s.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpe0pbra6s.scala:34)\n\tat Problem$.main(tmpe0pbra6s.scala:38)\n\
    \tat Problem.main(tmpe0pbra6s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val b = stack.pop\n            val a = stack.pop\n          \
    \  val c = op(i) match {\n                case \"+\" => a + b\n              \
    \  case \"-\" => a - b\n                case \"*\" => a * b\n                case\
    \ \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n         \
    \   }\n            stack.push(c)\n        }\n        stack.pop\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"\
    *\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n\
    \    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpvooq19h1.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpvooq19h1.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpvooq19h1.scala:35)\n\tat Problem$.main(tmpvooq19h1.scala:39)\n\
    \tat Problem.main(tmpvooq19h1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val o1 = stack.pop\n            val o2 = operand(i + 1)\n   \
    \         val r = op(i) match {\n                case \"+\" => o1 + o2\n     \
    \           case \"-\" => o1 - o2\n                case \"*\" => o1 * o2\n   \
    \             case \"//\" => o1 / o2\n                case \"**\" => pow(o1, o2).toLong\n\
    \            }\n            stack.push(r)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpa_jwff0l.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpa_jwff0l.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpa_jwff0l.scala:35)\n\tat Problem$.main(tmpa_jwff0l.scala:39)\n\
    \tat Problem.main(tmpa_jwff0l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val c = op(i) match {\n                case \"+\" => a + b\n         \
    \       case \"-\" => a - b\n                case \"*\" => a * b\n           \
    \     case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpe85o_zr_.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpe85o_zr_.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpe85o_zr_.scala:35)\n\tat Problem$.main(tmpe85o_zr_.scala:39)\n\
    \tat Problem.main(tmpe85o_zr_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpe0pbra6s.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpe0pbra6s.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpe0pbra6s.scala:34)\n\tat Problem$.main(tmpe0pbra6s.scala:38)\n\
    \tat Problem.main(tmpe0pbra6s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb6knqde3.scala:37)\n\tat Problem.main(tmpb6knqde3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val x = operand(i)\n            val y = operand(i + 1)\n    \
    \        op(i) match {\n                case \"+\" => stack.push(x + y)\n    \
    \            case \"-\" => stack.push(x - y)\n                case \"*\" => stack.push(x\
    \ * y)\n                case \"//\" => stack.push(x / y)\n                case\
    \ \"**\" => stack.push(pow(x, y).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4m1sv6fa.scala:38)\n\tat Problem.main(tmp4m1sv6fa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            op(i - 1) match {\n                case \"+\" => result += operand(i)\n\
    \                case \"-\" => result -= operand(i)\n                case \"*\"\
    \ => result *= operand(i)\n                case \"//\" => result /= operand(i)\n\
    \                case \"**\" => result = pow(result, operand(i)).toLong\n    \
    \        }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp19bafjxw.scala:37)\n\tat Problem.main(tmp19bafjxw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb6knqde3.scala:37)\n\tat Problem.main(tmpb6knqde3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp5f5ybwgu.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp5f5ybwgu.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp5f5ybwgu.scala:34)\n\tat Problem$.main(tmp5f5ybwgu.scala:38)\n\
    \tat Problem.main(tmp5f5ybwgu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        def doAlgebra(op : List[String], operand : List[Long], result\
    \ : Long) : Long = {\n            if (op.isEmpty) result\n            else {\n\
    \                val newResult = op.head match {\n                    case \"\
    +\" => result + operand.head\n                    case \"-\" => result - operand.head\n\
    \                    case \"*\" => result * operand.head\n                   \
    \ case \"//\" => result / operand.head\n                    case \"**\" => pow(result,\
    \ operand.head).toLong\n                }\n                doAlgebra(op.tail,\
    \ operand.tail, newResult)\n            }\n        }\n        doAlgebra(op, operand.tail,\
    \ operand.head)\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe16v_t6q.scala:40)\n\tat Problem.main(tmpe16v_t6q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792457
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpe0pbra6s.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpe0pbra6s.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpe0pbra6s.scala:34)\n\tat Problem$.main(tmpe0pbra6s.scala:38)\n\
    \tat Problem.main(tmpe0pbra6s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb6knqde3.scala:37)\n\tat Problem.main(tmpb6knqde3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            op(i - 1) match {\n                case \"+\" => result += operand(i)\n\
    \                case \"-\" => result -= operand(i)\n                case \"*\"\
    \ => result *= operand(i)\n                case \"//\" => result /= operand(i)\n\
    \                case \"**\" => result = pow(result, operand(i)).toLong\n    \
    \        }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp19bafjxw.scala:37)\n\tat Problem.main(tmp19bafjxw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpe0pbra6s.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpe0pbra6s.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpe0pbra6s.scala:34)\n\tat Problem$.main(tmpe0pbra6s.scala:38)\n\
    \tat Problem.main(tmpe0pbra6s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb6knqde3.scala:37)\n\tat Problem.main(tmpb6knqde3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val c = op(i) match {\n                case \"+\" => a + b\n         \
    \       case \"-\" => a - b\n                case \"*\" => a * b\n           \
    \     case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpe85o_zr_.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpe85o_zr_.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpe85o_zr_.scala:35)\n\tat Problem$.main(tmpe85o_zr_.scala:39)\n\
    \tat Problem.main(tmpe85o_zr_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val c = op(i) match {\n                case \"+\" => a + b\n         \
    \       case \"-\" => a - b\n                case \"*\" => a * b\n           \
    \     case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpe85o_zr_.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpe85o_zr_.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpe85o_zr_.scala:35)\n\tat Problem$.main(tmpe85o_zr_.scala:39)\n\
    \tat Problem.main(tmpe85o_zr_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        stack.push(operand(0))\n\
    \        for (i <- 1 until operand.length) {\n            val num = operand(i)\n\
    \            val opr = op(i - 1)\n            if (opr == \"+\") stack.push(stack.pop\
    \ + num)\n            else if (opr == \"-\") stack.push(stack.pop - num)\n   \
    \         else if (opr == \"*\") stack.push(stack.pop * num)\n            else\
    \ if (opr == \"//\") stack.push(stack.pop / num)\n            else if (opr ==\
    \ \"**\") stack.push(pow(stack.pop, num).toLong)\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe1fr66n7.scala:38)\n\tat Problem.main(tmpe1fr66n7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792457
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp5f5ybwgu.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp5f5ybwgu.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp5f5ybwgu.scala:34)\n\tat Problem$.main(tmp5f5ybwgu.scala:38)\n\
    \tat Problem.main(tmp5f5ybwgu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       stack.push(op(i) match {\n                case \"+\" => a + b\n      \
    \          case \"-\" => a - b\n                case \"*\" => a * b\n        \
    \        case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            })\n        }\n        stack.pop\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpvp9ja0ik.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpvp9ja0ik.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpvp9ja0ik.scala:34)\n\tat Problem$.main(tmpvp9ja0ik.scala:38)\n\
    \tat Problem.main(tmpvp9ja0ik.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val o1 = stack.pop\n            val o2 = operand(i + 1)\n   \
    \         op(i) match {\n                case \"+\" => stack.push(o1 + o2)\n \
    \               case \"-\" => stack.push(o1 - o2)\n                case \"*\"\
    \ => stack.push(o1 * o2)\n                case \"//\" => stack.push(o1 / o2)\n\
    \                case \"**\" => stack.push(pow(o1, o2).toLong)\n            }\n\
    \        }\n        stack.pop\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpgx7bakkd.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpgx7bakkd.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpgx7bakkd.scala:34)\n\tat Problem$.main(tmpgx7bakkd.scala:38)\n\
    \tat Problem.main(tmpgx7bakkd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792458
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val num1 = stack.pop\n            val num2 = operand(i + 1)\n\
    \            val result = op(i) match {\n                case \"+\" => num1 +\
    \ num2\n                case \"-\" => num1 - num2\n                case \"*\"\
    \ => num1 * num2\n                case \"//\" => num1 / num2\n               \
    \ case \"**\" => pow(num1, num2).toLong\n            }\n            stack.push(result)\n\
    \        }\n        stack.pop\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp684xp4sk.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp684xp4sk.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp684xp4sk.scala:35)\n\tat Problem$.main(tmp684xp4sk.scala:39)\n\
    \tat Problem.main(tmp684xp4sk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792458
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            if (op(i - 1) == \"+\") result += operand(i)\n            else\
    \ if (op(i - 1) == \"-\") result -= operand(i)\n            else if (op(i - 1)\
    \ == \"*\") result *= operand(i)\n            else if (op(i - 1) == \"//\") result\
    \ /= operand(i)\n            else if (op(i - 1) == \"**\") result = pow(result,\
    \ operand(i)).toLong\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpapsf_qgy.scala:35)\n\tat Problem.main(tmpapsf_qgy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpe0pbra6s.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpe0pbra6s.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpe0pbra6s.scala:34)\n\tat Problem$.main(tmpe0pbra6s.scala:38)\n\
    \tat Problem.main(tmpe0pbra6s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb6knqde3.scala:37)\n\tat Problem.main(tmpb6knqde3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val o = op(i)\n            val a = operand(i)\n            val\
    \ b = operand(i + 1)\n            o match {\n                case \"+\" => stack.push(a\
    \ + b)\n                case \"-\" => stack.push(a - b)\n                case\
    \ \"*\" => stack.push(a * b)\n                case \"//\" => stack.push(a / b)\n\
    \                case \"**\" => stack.push(pow(a, b).toLong)\n            }\n\
    \        }\n        stack.pop\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgyi1eyw2.scala:39)\n\tat Problem.main(tmpgyi1eyw2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792457
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            op(i - 1) match {\n                case \"+\" => result += operand(i)\n\
    \                case \"-\" => result -= operand(i)\n                case \"*\"\
    \ => result *= operand(i)\n                case \"//\" => result /= operand(i)\n\
    \                case \"**\" => result = pow(result, operand(i)).toLong\n    \
    \        }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp19bafjxw.scala:37)\n\tat Problem.main(tmp19bafjxw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb6knqde3.scala:37)\n\tat Problem.main(tmpb6knqde3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpe0pbra6s.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpe0pbra6s.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpe0pbra6s.scala:34)\n\tat Problem$.main(tmpe0pbra6s.scala:38)\n\
    \tat Problem.main(tmpe0pbra6s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpe0pbra6s.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpe0pbra6s.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpe0pbra6s.scala:34)\n\tat Problem$.main(tmpe0pbra6s.scala:38)\n\
    \tat Problem.main(tmpe0pbra6s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb6knqde3.scala:37)\n\tat Problem.main(tmpb6knqde3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb6knqde3.scala:37)\n\tat Problem.main(tmpb6knqde3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       stack.push(op(i) match {\n                case \"+\" => a + b\n      \
    \          case \"-\" => a - b\n                case \"*\" => a * b\n        \
    \        case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            })\n        }\n        stack.pop\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp5sopcjdh.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp5sopcjdh.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp5sopcjdh.scala:34)\n\tat Problem$.main(tmp5sopcjdh.scala:38)\n\
    \tat Problem.main(tmp5sopcjdh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792458
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp5f5ybwgu.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp5f5ybwgu.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp5f5ybwgu.scala:34)\n\tat Problem$.main(tmp5f5ybwgu.scala:38)\n\
    \tat Problem.main(tmp5f5ybwgu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpe0pbra6s.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpe0pbra6s.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpe0pbra6s.scala:34)\n\tat Problem$.main(tmpe0pbra6s.scala:38)\n\
    \tat Problem.main(tmpe0pbra6s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            op(i - 1) match {\n                case \"+\" => result += operand(i)\n\
    \                case \"-\" => result -= operand(i)\n                case \"*\"\
    \ => result *= operand(i)\n                case \"//\" => result /= operand(i)\n\
    \                case \"**\" => result = pow(result, operand(i)).toLong\n    \
    \        }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp19bafjxw.scala:37)\n\tat Problem.main(tmp19bafjxw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpe0pbra6s.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpe0pbra6s.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpe0pbra6s.scala:34)\n\tat Problem$.main(tmpe0pbra6s.scala:38)\n\
    \tat Problem.main(tmpe0pbra6s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb6knqde3.scala:37)\n\tat Problem.main(tmpb6knqde3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb6knqde3.scala:37)\n\tat Problem.main(tmpb6knqde3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb6knqde3.scala:37)\n\tat Problem.main(tmpb6knqde3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            op(i - 1) match {\n                case \"+\" => result += operand(i)\n\
    \                case \"-\" => result -= operand(i)\n                case \"*\"\
    \ => result *= operand(i)\n                case \"//\" => result /= operand(i)\n\
    \                case \"**\" => result = pow(result, operand(i)).toLong\n    \
    \        }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp19bafjxw.scala:37)\n\tat Problem.main(tmp19bafjxw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val o = op(i)\n            val a = operand(i)\n            val\
    \ b = operand(i + 1)\n            val result = o match {\n                case\
    \ \"+\" => a + b\n                case \"-\" => a - b\n                case \"\
    *\" => a * b\n                case \"//\" => a / b\n                case \"**\"\
    \ => pow(a, b).toLong\n            }\n            stack.push(result)\n       \
    \ }\n        stack.pop\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp972q7evk.scala:40)\n\tat Problem.main(tmp972q7evk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792457
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val c = op(i) match {\n                case \"+\" => a + b\n         \
    \       case \"-\" => a - b\n                case \"*\" => a * b\n           \
    \     case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpe85o_zr_.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpe85o_zr_.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpe85o_zr_.scala:35)\n\tat Problem$.main(tmpe85o_zr_.scala:39)\n\
    \tat Problem.main(tmpe85o_zr_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val o1 = stack.pop\n            val o2 = operand(i + 1)\n   \
    \         val result = op(i) match {\n                case \"+\" => o1 + o2\n\
    \                case \"-\" => o1 - o2\n                case \"*\" => o1 * o2\n\
    \                case \"//\" => o1 / o2\n                case \"**\" => pow(o1,\
    \ o2).toLong\n            }\n            stack.push(result)\n        }\n     \
    \   stack.pop\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpao3ugn4e.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpao3ugn4e.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpao3ugn4e.scala:35)\n\tat Problem$.main(tmpao3ugn4e.scala:39)\n\
    \tat Problem.main(tmpao3ugn4e.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792455
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        if (op.length != operand.length - 1) throw new IllegalArgumentException(\"\
    Operator list length must be equal to operand list length minus one\")\n     \
    \   if (op.length == 0) throw new IllegalArgumentException(\"Operator list must\
    \ have at least one operator\")\n        if (operand.length < 2) throw new IllegalArgumentException(\"\
    Operand list must have at least two operands\")\n        var result = operand(0)\n\
    \        for (i <- 0 until op.length) {\n            op(i) match {\n         \
    \       case \"+\" => result += operand(i + 1)\n                case \"-\" =>\
    \ result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            \
    \    case _ => throw new IllegalArgumentException(\"Invalid operator\")\n    \
    \        }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwapfer1m.scala:41)\n\tat Problem.main(tmpwapfer1m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792458
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            stack.push(operand(i))\n            stack.push(operand(i + 1))\n\
    \            val b = stack.pop\n            val a = stack.pop\n            op(i)\
    \ match {\n                case \"+\" => stack.push(a + b)\n                case\
    \ \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a * b)\n\
    \                case \"//\" => stack.push(a / b)\n                case \"**\"\
    \ => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb1zz3yyr.scala:40)\n\tat Problem.main(tmpb1zz3yyr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792458
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb6knqde3.scala:37)\n\tat Problem.main(tmpb6knqde3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpe0pbra6s.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpe0pbra6s.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpe0pbra6s.scala:34)\n\tat Problem$.main(tmpe0pbra6s.scala:38)\n\
    \tat Problem.main(tmpe0pbra6s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpe0pbra6s.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpe0pbra6s.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpe0pbra6s.scala:34)\n\tat Problem$.main(tmpe0pbra6s.scala:38)\n\
    \tat Problem.main(tmpe0pbra6s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val o = op(i)\n            val a = operand(i)\n            val\
    \ b = operand(i + 1)\n            if (o == \"+\") stack.push(a + b)\n        \
    \    else if (o == \"-\") stack.push(a - b)\n            else if (o == \"*\")\
    \ stack.push(a * b)\n            else if (o == \"//\") stack.push(a / b)\n   \
    \         else if (o == \"**\") stack.push(pow(a, b).toLong)\n        }\n    \
    \    stack.pop\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp79tm0c2g.scala:37)\n\tat Problem.main(tmp79tm0c2g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            op(i - 1) match {\n                case \"+\" => result += operand(i)\n\
    \                case \"-\" => result -= operand(i)\n                case \"*\"\
    \ => result *= operand(i)\n                case \"//\" => result /= operand(i)\n\
    \                case \"**\" => result = pow(result, operand(i)).toLong\n    \
    \        }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp19bafjxw.scala:37)\n\tat Problem.main(tmp19bafjxw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val c = op(i) match {\n                case \"+\" => a + b\n         \
    \       case \"-\" => a - b\n                case \"*\" => a * b\n           \
    \     case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpe85o_zr_.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpe85o_zr_.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpe85o_zr_.scala:35)\n\tat Problem$.main(tmpe85o_zr_.scala:39)\n\
    \tat Problem.main(tmpe85o_zr_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       stack.push(op(i) match {\n                case \"+\" => a + b\n      \
    \          case \"-\" => a - b\n                case \"*\" => a * b\n        \
    \        case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            })\n        }\n        stack.pop\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpvp9ja0ik.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpvp9ja0ik.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpvp9ja0ik.scala:34)\n\tat Problem$.main(tmpvp9ja0ik.scala:38)\n\
    \tat Problem.main(tmpvp9ja0ik.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp5f5ybwgu.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp5f5ybwgu.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp5f5ybwgu.scala:34)\n\tat Problem$.main(tmp5f5ybwgu.scala:38)\n\
    \tat Problem.main(tmp5f5ybwgu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb6knqde3.scala:37)\n\tat Problem.main(tmpb6knqde3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb6knqde3.scala:37)\n\tat Problem.main(tmpb6knqde3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val b = stack.pop\n            val a = stack.pop\n          \
    \  stack.push(op(i) match {\n                case \"+\" => a + b\n           \
    \     case \"-\" => a - b\n                case \"*\" => a * b\n             \
    \   case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n  \
    \          })\n        }\n        stack.pop\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmprqcr0ojl.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmprqcr0ojl.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmprqcr0ojl.scala:34)\n\tat Problem$.main(tmprqcr0ojl.scala:38)\n\
    \tat Problem.main(tmprqcr0ojl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792458
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        if (op.length != operand.length - 1) throw new IllegalArgumentException(\"\
    Operator list length must be equal to operand list length minus one.\")\n    \
    \    if (op.length == 0) throw new IllegalArgumentException(\"Operator list must\
    \ have at least one operator.\")\n        if (operand.length < 2) throw new IllegalArgumentException(\"\
    Operand list must have at least two operands.\")\n        var result = operand(0)\n\
    \        for (i <- 0 until op.length) {\n            op(i) match {\n         \
    \       case \"+\" => result += operand(i + 1)\n                case \"-\" =>\
    \ result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            \
    \    case _ => throw new IllegalArgumentException(\"Invalid operator.\")\n   \
    \         }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg5zc4_38.scala:41)\n\tat Problem.main(tmpg5zc4_38.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792458
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb6knqde3.scala:37)\n\tat Problem.main(tmpb6knqde3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpe0pbra6s.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpe0pbra6s.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpe0pbra6s.scala:34)\n\tat Problem$.main(tmpe0pbra6s.scala:38)\n\
    \tat Problem.main(tmpe0pbra6s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val c = op(i) match {\n                case \"+\" => a + b\n         \
    \       case \"-\" => a - b\n                case \"*\" => a * b\n           \
    \     case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpl61aph54.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpl61aph54.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpl61aph54.scala:35)\n\tat Problem$.main(tmpl61aph54.scala:39)\n\
    \tat Problem.main(tmpl61aph54.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            op(i - 1) match {\n                case \"+\" => result += operand(i)\n\
    \                case \"-\" => result -= operand(i)\n                case \"*\"\
    \ => result *= operand(i)\n                case \"//\" => result /= operand(i)\n\
    \                case \"**\" => result = pow(result, operand(i)).toLong\n    \
    \        }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp19bafjxw.scala:37)\n\tat Problem.main(tmp19bafjxw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp5f5ybwgu.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp5f5ybwgu.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp5f5ybwgu.scala:34)\n\tat Problem$.main(tmp5f5ybwgu.scala:38)\n\
    \tat Problem.main(tmp5f5ybwgu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val c = op(i) match {\n                case \"+\" => a + b\n         \
    \       case \"-\" => a - b\n                case \"*\" => a * b\n           \
    \     case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpe85o_zr_.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpe85o_zr_.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpe85o_zr_.scala:35)\n\tat Problem$.main(tmpe85o_zr_.scala:39)\n\
    \tat Problem.main(tmpe85o_zr_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val op1 = stack.pop\n            val op2 = operand(i + 1)\n \
    \           val res = op(i) match {\n                case \"+\" => op1 + op2\n\
    \                case \"-\" => op1 - op2\n                case \"*\" => op1 *\
    \ op2\n                case \"//\" => op1 / op2\n                case \"**\" =>\
    \ pow(op1, op2).toLong\n            }\n            stack.push(res)\n        }\n\
    \        stack.pop\n    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp55815hgp.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp55815hgp.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp55815hgp.scala:35)\n\tat Problem$.main(tmp55815hgp.scala:39)\n\
    \tat Problem.main(tmp55815hgp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792458
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val c = op(i) match {\n                case \"+\" => a + b\n         \
    \       case \"-\" => a - b\n                case \"*\" => a * b\n           \
    \     case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpl61aph54.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpl61aph54.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpl61aph54.scala:35)\n\tat Problem$.main(tmpl61aph54.scala:39)\n\
    \tat Problem.main(tmpl61aph54.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val c = op(i) match {\n                case \"+\" => a + b\n         \
    \       case \"-\" => a - b\n                case \"*\" => a * b\n           \
    \     case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpe85o_zr_.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpe85o_zr_.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpe85o_zr_.scala:35)\n\tat Problem$.main(tmpe85o_zr_.scala:39)\n\
    \tat Problem.main(tmpe85o_zr_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val c = op(i) match {\n                case \"+\" => a + b\n         \
    \       case \"-\" => a - b\n                case \"*\" => a * b\n           \
    \     case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpe85o_zr_.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpe85o_zr_.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpe85o_zr_.scala:35)\n\tat Problem$.main(tmpe85o_zr_.scala:39)\n\
    \tat Problem.main(tmpe85o_zr_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val c = op(i) match {\n                case \"+\" => a + b\n         \
    \       case \"-\" => a - b\n                case \"*\" => a * b\n           \
    \     case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpe85o_zr_.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpe85o_zr_.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpe85o_zr_.scala:35)\n\tat Problem$.main(tmpe85o_zr_.scala:39)\n\
    \tat Problem.main(tmpe85o_zr_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val o = op(i)\n            val a = operand(i)\n            val\
    \ b = operand(i + 1)\n            o match {\n                case \"+\" => stack.push(a\
    \ + b)\n                case \"-\" => stack.push(a - b)\n                case\
    \ \"*\" => stack.push(a * b)\n                case \"//\" => stack.push(a / b)\n\
    \                case \"**\" => stack.push(pow(a, b).toLong)\n            }\n\
    \        }\n        stack.pop\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc2z31zwa.scala:39)\n\tat Problem.main(tmpc2z31zwa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792458
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       val c = op(i) match {\n                case \"+\" => a + b\n         \
    \       case \"-\" => a - b\n                case \"*\" => a * b\n           \
    \     case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpe85o_zr_.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpe85o_zr_.scala:35)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpe85o_zr_.scala:35)\n\tat Problem$.main(tmpe85o_zr_.scala:39)\n\
    \tat Problem.main(tmpe85o_zr_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            if (op(i - 1) == \"+\") result += operand(i)\n            else\
    \ if (op(i - 1) == \"-\") result -= operand(i)\n            else if (op(i - 1)\
    \ == \"*\") result *= operand(i)\n            else if (op(i - 1) == \"//\") result\
    \ /= operand(i)\n            else if (op(i - 1) == \"**\") result = pow(result,\
    \ operand(i)).toLong\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpapsf_qgy.scala:35)\n\tat Problem.main(tmpapsf_qgy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb6knqde3.scala:37)\n\tat Problem.main(tmpb6knqde3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val x = stack.pop\n            val y = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(x + y)\n     \
    \           case \"-\" => stack.push(x - y)\n                case \"*\" => stack.push(x\
    \ * y)\n                case \"//\" => stack.push(x / y)\n                case\
    \ \"**\" => stack.push(pow(x, y).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpzyu3grfl.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpzyu3grfl.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpzyu3grfl.scala:34)\n\tat Problem$.main(tmpzyu3grfl.scala:38)\n\
    \tat Problem.main(tmpzyu3grfl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792458
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb6knqde3.scala:37)\n\tat Problem.main(tmpb6knqde3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            if (op(i) == \"+\") result += operand(i + 1)\n            else\
    \ if (op(i) == \"-\") result -= operand(i + 1)\n            else if (op(i) ==\
    \ \"*\") result *= operand(i + 1)\n            else if (op(i) == \"//\") result\
    \ /= operand(i + 1)\n            else if (op(i) == \"**\") result = pow(result,\
    \ operand(i + 1)).toLong\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv0h4wakf.scala:35)\n\tat Problem.main(tmpv0h4wakf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 1 until operand.length)\
    \ {\n            op(i - 1) match {\n                case \"+\" => result += operand(i)\n\
    \                case \"-\" => result -= operand(i)\n                case \"*\"\
    \ => result *= operand(i)\n                case \"//\" => result /= operand(i)\n\
    \                case \"**\" => result = pow(result, operand(i)).toLong\n    \
    \        }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n    assert(doAlgebra((List[String](\"\
    +\", \"*\", \"-\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (9l));\n    assert(doAlgebra((List[String](\"//\", \"*\")), (List[Long](7l.toLong,\
    \ 3l.toLong, 4l.toLong))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp19bafjxw.scala:37)\n\tat Problem.main(tmp19bafjxw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val x = stack.pop\n            val y = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(x + y)\n     \
    \           case \"-\" => stack.push(x - y)\n                case \"*\" => stack.push(x\
    \ * y)\n                case \"//\" => stack.push(x / y)\n                case\
    \ \"**\" => stack.push(pow(x, y).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmpzyu3grfl.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmpzyu3grfl.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmpzyu3grfl.scala:34)\n\tat Problem$.main(tmpzyu3grfl.scala:38)\n\
    \tat Problem.main(tmpzyu3grfl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792458
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        val stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
    **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
    \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.doAlgebra$$anonfun$1(tmp5f5ybwgu.scala:25)\n\
    \tat Problem$.doAlgebra$$anonfun$adapted$1(tmp5f5ybwgu.scala:34)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\
    \tat Problem$.doAlgebra(tmp5f5ybwgu.scala:34)\n\tat Problem$.main(tmp5f5ybwgu.scala:38)\n\
    \tat Problem.main(tmp5f5ybwgu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n    // the second list is a list of integers. Use the two\
    \ given lists to build the algebric \n    // expression and return the evaluation\
    \ of this expression.\n    // The basic algebra operations:\n    // Addition (\
    \ + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor\
    \ division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
    \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
    \ => result = 9\n    // Note:\n    // The length of operator list is equal to\
    \ the length of operand list minus one.\n    // Operand is a list of of non-negative\
    \ integers.\n    // Operator list has at least one operator, and operand list\
    \ has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long])\
    \ : Long = {\n        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doAlgebra((List[String](\"**\", \"*\", \"+\"\
    )), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (37l));\n   \
    \ assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
    //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcpkmhpbe.scala:37)\n\tat Problem.main(tmpcpkmhpbe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792454
