language: scala
name: HumanEval_121_solution
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0l\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 2 == 0 && lst(i) % 2 == 1) {\n                sum +=\
    \ lst(i)\n            }\n        }\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        val lst2 = lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1)\n        lst2.map(x => x._1).sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Write your solution here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(x => x._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        return 0\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptcp252j4.scala:17)\n\tat Problem.main(tmptcp252j4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        var sum = 0l\n  \
    \      for (i <- 0 until lst.length) {\n            if (i % 2 == 0 && lst(i) %\
    \ 2 == 1) {\n                sum += lst(i)\n            }\n        }\n       \
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        val lst2 = lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1)\n        val lst3 = lst2.filter(x => x % 2\
    \ == 1)\n        lst3.sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your solution goes here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(x => x._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 &&\
    \ x._1 % 2 == 1).map(x => x._1).sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your solution goes here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(x => x._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your solution goes here\n        val lst2\
    \ = lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1)\n        lst2.map(x\
    \ => x._1).sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0l\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 2 == 0 && lst(i) % 2 == 1) sum += lst(i)\n        }\n\
    \        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your solution goes here.\n        var sum\
    \ = 0l\n        for (i <- 0 until lst.length) {\n            if (i % 2 == 0 &&\
    \ lst(i) % 2 == 1) {\n                sum += lst(i)\n            }\n        }\n\
    \        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797934
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your solution goes here\n        var sum\
    \ = 0l\n        for (i <- 0 until lst.length) {\n            if (i % 2 == 0 &&\
    \ lst(i) % 2 == 1) {\n                sum += lst(i)\n            }\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        val lst2 = lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).filter(x => x._1 % 2 == 1)\n        lst2.map(x => x._1).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797934
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0l\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 2 == 0 && lst(i) % 2 == 1) sum += lst(i)\n        }\n\
    \        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        0\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong,\
    \ 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg0yg9jvq.scala:17)\n\tat Problem.main(tmpg0yg9jvq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your solution goes here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(x => x._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        return 0l.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdd5cv4bv.scala:17)\n\tat Problem.main(tmpdd5cv4bv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your solution goes here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(x => x._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your solution here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(x => x._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        val lst2 = lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 0 && x._1 % 2 == 1)\n        lst2.map(x => x._1).sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong,\
    \ 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        return 0\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptcp252j4.scala:17)\n\tat Problem.main(tmptcp252j4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Write your solution here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(x => x._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        val lst2 = lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).filter(x => x._1 % 2 == 1)\n        lst2.map(x => x._1).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797934
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your solution goes here.\n        // Return\
    \ the sum of all of the odd elements that are in even positions.\n        var\
    \ sum = 0l\n        for (i <- 0 until lst.length) {\n            if (i % 2 ==\
    \ 0 && lst(i) % 2 == 1) {\n                sum += lst(i)\n            }\n    \
    \    }\n        return sum\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong))) ==\
    \ (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797934
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(e\
    \ => e._2 % 2 == 0 && e._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Write your solution here\n        var sum\
    \ = 0l\n        for (i <- 0 until lst.length) {\n            if (i % 2 == 0 &&\
    \ lst(i) % 2 == 1) {\n                sum += lst(i)\n            }\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your solution goes here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(x => x._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        var sum = 0l\n  \
    \      for (i <- 0 until lst.length) {\n            if (i % 2 == 0 && lst(i) %\
    \ 2 == 1) sum += lst(i)\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\
    \ == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        val lst2 = lst.zipWithIndex.filter(_._2\
    \ % 2 == 0).filter(_._1 % 2 == 1).map(_._1)\n        lst2.sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong,\
    \ 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        return 0l\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpewshlm0v.scala:17)\n\tat Problem.main(tmpewshlm0v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797940
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your solution goes here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(x => x._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Write your solution here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(x => x._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your solution goes here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(x => x._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        var sum = 0l\n  \
    \      for (i <- 0 until lst.length) {\n            if (i % 2 == 0 && lst(i) %\
    \ 2 == 1) {\n                sum += lst(i)\n            }\n        }\n       \
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        0\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong,\
    \ 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg0yg9jvq.scala:17)\n\tat Problem.main(tmpg0yg9jvq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0l\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 2 == 0 && lst(i) % 2 == 1) {\n                sum +=\
    \ lst(i)\n            }\n        }\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your solution goes here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(x => x._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your Code Here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(x => x._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797941
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your solution goes here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(x => x._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        var sum = 0l\n  \
    \      for (i <- 0 until lst.length) {\n            if (i % 2 == 0 && lst(i) %\
    \ 2 == 1) {\n                sum += lst(i)\n            }\n        }\n       \
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        var sum = 0l\n  \
    \      for (i <- 0 until lst.length) {\n            if (i % 2 == 0 && lst(i) %\
    \ 2 == 1) {\n                sum += lst(i)\n            }\n        }\n       \
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Write your solution here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(x => x._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        return 0\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptcp252j4.scala:17)\n\tat Problem.main(tmptcp252j4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        var sum = 0l\n  \
    \      for (i <- 0 until lst.length) {\n            if (i % 2 == 0 && lst(i) %\
    \ 2 == 1) {\n                sum += lst(i)\n            }\n        }\n       \
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0l\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 2 == 0 && lst(i) % 2 == 1) {\n                sum +=\
    \ lst(i)\n            }\n        }\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0l\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 2 == 0 && lst(i) % 2 == 1) {\n                sum +=\
    \ lst(i)\n            }\n        }\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your solution goes here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(x => x._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Write your solution here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(x => x._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0l\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 2 == 0 && lst(i) % 2 == 1) {\n                sum +=\
    \ lst(i)\n            }\n        }\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        0\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong,\
    \ 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg0yg9jvq.scala:17)\n\tat Problem.main(tmpg0yg9jvq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        return 0\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptcp252j4.scala:17)\n\tat Problem.main(tmptcp252j4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        0l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong,\
    \ 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpypqfc1if.scala:17)\n\tat Problem.main(tmpypqfc1if.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797940
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your solution goes here\n        var sum\
    \ = 0l\n        for (i <- 0 until lst.length) {\n            if (i % 2 == 0 &&\
    \ lst(i) % 2 == 1) {\n                sum += lst(i)\n            }\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your solution goes here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(x => x._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your Code Here\n        return 0l.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb_7ftkgr.scala:17)\n\tat Problem.main(tmpb_7ftkgr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797940
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0l\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 2 == 0 && lst(i) % 2 == 1) {\n                sum +=\
    \ lst(i)\n            }\n        }\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Write your solution here\n        return\
    \ 0\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw0v9cufh.scala:17)\n\tat Problem.main(tmpw0v9cufh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797941
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        var sum = 0l\n  \
    \      for (i <- 0 until lst.length) {\n            if (i % 2 == 0 && lst(i) %\
    \ 2 == 1) {\n                sum += lst(i)\n            }\n        }\n       \
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        var sum = 0l\n  \
    \      for (i <- 0 until lst.length) {\n            if (i % 2 == 0 && lst(i) %\
    \ 2 == 1) {\n                sum += lst(i)\n            }\n        }\n       \
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0l\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 2 == 0 && lst(i) % 2 == 1) {\n                sum +=\
    \ lst(i)\n            }\n        }\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0l\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 2 == 0 && lst(i) % 2 == 1) {\n                sum +=\
    \ lst(i)\n            }\n        }\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        var sum = 0l\n  \
    \      for (i <- 0 until lst.length) {\n            if (i % 2 == 0 && lst(i) %\
    \ 2 == 1) {\n                sum += lst(i)\n            }\n        }\n       \
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        return 0l\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpewshlm0v.scala:17)\n\tat Problem.main(tmpewshlm0v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797940
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0l\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 2 == 0 && lst(i) % 2 == 1) {\n                sum +=\
    \ lst(i)\n            }\n        }\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        var sum = 0l\n  \
    \      for (i <- 0 until lst.length) {\n            if (i % 2 == 0 && lst(i) %\
    \ 2 == 1) {\n                sum += lst(i)\n            }\n        }\n       \
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your solution goes here\n        var sum\
    \ = 0l\n        for (i <- 0 until lst.length) {\n            if (i % 2 == 0 &&\
    \ lst(i) % 2 == 1) {\n                sum += lst(i)\n            }\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your solution goes here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(x => x._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        var sum = 0l\n        for (i <- 0 until lst.length)\
    \ {\n            if (i % 2 == 0 && lst(i) % 2 == 1) {\n                sum +=\
    \ lst(i)\n            }\n        }\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your Code Here\n        var sum = 0l\n  \
    \      for (i <- 0 until lst.length) {\n            if (i % 2 == 0 && lst(i) %\
    \ 2 == 1) {\n                sum += lst(i)\n            }\n        }\n       \
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797941
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Type your solution here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(x => x._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797941
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Type your solution here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(x => x._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797941
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.foldLeft(0l)((acc,\
    \ x) => if (x._2 % 2 == 0 && x._1 % 2 == 1) acc + x._1 else acc)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong,\
    \ 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797941
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your solution goes here\n        var sum\
    \ = 0l\n        for (i <- 0 until lst.length) {\n            if (i % 2 == 0 &&\
    \ lst(i) % 2 == 1) {\n                sum += lst(i)\n            }\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong,\
    \ 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong, 3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
    \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst :\
    \ List[Long]) : Long = {\n        // Your code here\n        0l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong, 8l.toLong,\
    \ 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
    \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
    \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
    \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
    \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
    \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
    \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpypqfc1if.scala:17)\n\tat Problem.main(tmpypqfc1if.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797940
