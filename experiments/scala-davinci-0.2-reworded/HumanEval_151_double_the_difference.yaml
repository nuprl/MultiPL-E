name: HumanEval_151_double_the_difference
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of numbers, return the sum of squares of the numbers\n    //\
  \ in the list that are odd. Ignore numbers that are negative or not integers.\n\
  \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong, 0l.toLong)))\n\
  \    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong, -2l.toLong,\
  \ 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
  \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
  \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
  \ : List[Float]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
  \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
  \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
  \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
  \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
  \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
  \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
  \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
  \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
completions: ["        var sum : Long = 0l\n        for (i <- lst) {\n           \
    \ if (i > 0 && i % 1 == 0) {\n                sum += i * i\n            }\n  \
    \      }\n        return sum * 2", "        var sum = 0l\n        for (i <- lst)\
    \ {\n            if (i % 2 == 1) {\n                sum += pow(i, 2).toLong\n\
    \            }\n        }\n        sum * 2", "        if (lst.isEmpty) {\n   \
    \         return 0l\n        }\n        var sum : Long = 0l\n        for (i <-\
    \ lst) {\n            if (i > 0 && i % 1 == 0) {\n                sum += i * i\n\
    \            }\n        }\n        return sum * 2", "        var sum = 0l\n  \
    \      for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n            \
    \    sum += pow(i, 2).toLong\n            }\n        }\n        return sum * 2",
  "        var sum = 0l\n        for (i <- lst) {\n            if (i % 2 == 1) {\n\
    \                sum += i * i\n            }\n        }\n        sum * 2", " \
    \       var sum : Long = 0l\n        for (i <- lst) {\n            if (i > 0 &&\
    \ i % 1 == 0) {\n                sum += pow(i, 2).toLong\n            }\n    \
    \    }\n        sum * 2", "        var sum : Long = 0l\n        for (i <- lst)\
    \ {\n            if (i > 0) {\n                sum += (i * i).toLong\n       \
    \     }\n        }\n        return sum", "        var sum : Long = 0l\n      \
    \  for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n                sum\
    \ += pow(i, 2).toLong\n            }\n        }\n        return sum * 2", "  \
    \      // your code here\n        return 0l", "        var sum : Long = 0l\n \
    \       for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n           \
    \     sum += i * i\n            }\n        }\n        return 2 * sum", "     \
    \   var sum : Long = 0l\n        for (i <- lst) {\n            if (i.isValidInt\
    \ && i > 0) {\n                sum += pow(i, 2).toLong\n            }\n      \
    \  }\n        return sum * 2", "        var sum = 0l\n        for (i <- lst) {\n\
    \            if (i > 0 && i % 1 == 0) {\n                sum += pow(i, 2).toLong\n\
    \            }\n        }\n        sum * 2", "        var sum : Long = 0l\n  \
    \      for (i <- lst) {\n            if (i % 2 == 1) {\n                sum +=\
    \ i * i\n            }\n        }\n        return sum * 2", "        val lst2\
    \ = lst.filter(x => x > 0 && x % 1 == 0)\n        val lst3 = lst2.filter(x =>\
    \ x % 2 == 1)\n        val lst4 = lst3.map(x => x * x)\n        val lst5 = lst4.sum\n\
    \        val lst6 = lst5 * 2\n        return lst6.toLong", "        var sum :\
    \ Long = 0l\n        for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n\
    \                sum += (i * i)\n            }\n        }\n        return sum\
    \ * 2", "        // your code here\n        return 0l", "        var sum : Long\
    \ = 0l\n        for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n   \
    \             sum += pow(i, 2).toLong\n            }\n        }\n        return\
    \ sum * 2", "        var sum : Long = 0l\n        for (i <- lst) {\n         \
    \   if (i > 0 && i % 1 == 0) {\n                sum += pow(i, 2).toLong\n    \
    \        }\n        }\n        sum * 2", "        var sum = 0l\n        var sumOfSquares\
    \ = 0l\n        for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n   \
    \             sum += i\n                sumOfSquares += i * i\n            }\n\
    \        }\n        sum * sum - sumOfSquares", "        var sum : Long = 0l\n\
    \        for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n          \
    \      sum += pow(i, 2).toLong\n            }\n        }\n        return sum *\
    \ 2", "        var sum : Long = 0l\n        for (i <- lst) {\n            if (i\
    \ > 0 && i % 1 == 0) {\n                sum += pow(i, 2).toLong\n            }\n\
    \        }\n        return sum * 2", "        var sum : Long = 0l\n        for\
    \ (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n                sum +=\
    \ pow(i, 2).toLong\n            }\n        }\n        return sum * 2", "     \
    \   // your code here\n        return 0l", "        var sum : Long = 0l\n    \
    \    for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n              \
    \  sum += pow(i, 2).toLong\n            }\n        }\n        return sum * 2",
  "        // your code here\n        return 0l", "        var sum = 0l\n        for\
    \ (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n                sum +=\
    \ pow(i, 2).toLong\n            }\n        }\n        sum * 2", "        // Your\
    \ code here\n        return 0l", "        var sum : Long = 0l\n        var sumOfSquares\
    \ : Long = 0l\n        for (i <- lst) {\n            if (i > 0 && i % 1 == 0)\
    \ {\n                sum += i\n                sumOfSquares += pow(i, 2).toLong\n\
    \            }\n        }\n        return 2 * (sumOfSquares - sum)", "       \
    \ var sum : Long = 0l\n        for (i <- lst) {\n            if (i.isValidInt)\
    \ {\n                val i2 : Int = i.toInt\n                if (i2 > 0) {\n \
    \                   sum += i2 * i2\n                }\n            }\n       \
    \ }\n        sum * 2", "        var sum : Long = 0l\n        for (i <- lst) {\n\
    \            if (i > 0 && i % 1 == 0) {\n                sum += pow(i, 2).toLong\n\
    \            }\n        }\n        return sum * 2", "        var sum : Long =\
    \ 0l\n        for (i <- lst) {\n            if (i > 0) {\n                sum\
    \ += pow(i, 2).toLong\n            }\n        }\n        return sum * 2", "  \
    \      var sum = 0l\n        for (i <- lst) {\n            if (i > 0 && i % 1\
    \ == 0) {\n                sum += i * i\n            }\n        }\n        return\
    \ sum * 2", "        var sum : Long = 0l\n        for (i <- lst) {\n         \
    \   if (i > 0 && i % 1 == 0) {\n                sum += pow(i, 2).toLong\n    \
    \        }\n        }\n        return 2 * sum", "        var sum : Long = 0l\n\
    \        for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n          \
    \      sum += pow(i, 2).toLong\n            }\n        }\n        return sum *\
    \ 2", "        val lst2 = lst.filter(x => x > 0 && x % 1 == 0)\n        if (lst2.length\
    \ == 0) return 0\n        val lst3 = lst2.map(x => x * x)\n        val lst4 =\
    \ lst3.filter(x => x % 2 == 1)\n        val lst5 = lst4.sum\n        return lst5\
    \ * 2", "        var sum = 0l\n        for (i <- lst) {\n            if (i > 0\
    \ && i % 1 == 0) {\n                sum += pow(i, 2).toLong\n            }\n \
    \       }\n        return sum * 2", "        var sum : Long = 0l\n        for\
    \ (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n                sum +=\
    \ i * i\n            }\n        }\n        return sum * 2", "        var sum :\
    \ Long = 0l\n        for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n\
    \                sum += i * i\n            }\n        }\n        return sum *\
    \ 2", "        var sum : Long = 0l\n        for (i <- lst) {\n            if (i\
    \ > 0 && i % 1 == 0) {\n                sum += pow(i, 2).toLong\n            }\n\
    \        }\n        return sum * 2", "        // your code here\n        0l",
  "        var sum = 0l\n        for (i <- lst) {\n            if (i % 2 == 1) {\n\
    \                sum += pow(i, 2).toLong\n            }\n        }\n        return\
    \ sum * 2", "        // your code here\n        return 0l", "        var sum =\
    \ 0l\n        for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n     \
    \           sum += pow(i, 2).toLong\n            }\n        }\n        return\
    \ sum * 2", "        var sum : Long = 0\n        for (i <- lst) {\n          \
    \  if (i % 2 == 1) {\n                sum += i * i\n            }\n        }\n\
    \        sum * 2", "        var sum : Long = 0l\n        for (i <- lst) {\n  \
    \          if (i.isValidInt) {\n                if (i % 2 == 1) {\n          \
    \          sum += pow(i, 2).toLong\n                }\n            }\n       \
    \ }\n        return sum * 2", "        var sum : Long = 0l\n        for (i <-\
    \ lst) {\n            if (i > 0 && i % 1 == 0) {\n                sum += i * i\n\
    \            }\n        }\n        return sum * 2", "        var sum : Long =\
    \ 0l\n        for (i <- lst) {\n            if (i.isValidInt) {\n            \
    \    val j : Int = i.toInt\n                if (j > 0) {\n                   \
    \ sum += j * j\n                }\n            }\n        }\n        return sum\
    \ * 2", "        var sum : Long = 0l\n        for (i <- lst) {\n            if\
    \ (i > 0) {\n                sum += (i * i).toLong\n            }\n        }\n\
    \        return sum", "        var sum : Long = 0l\n        for (i <- lst) {\n\
    \            if (i > 0 && i % 1 == 0) {\n                sum += pow(i, 2).toLong\n\
    \            }\n        }\n        return 2 * sum", "        var sum : Long =\
    \ 0l\n        for (i <- lst) {\n            if (i.isValidInt) {\n            \
    \    if (i % 2 == 1) {\n                    sum += pow(i, 2).toLong\n        \
    \        }\n            }\n        }\n        return sum * 2", "        var sum\
    \ : Long = 0l\n        var sumOfSquares : Long = 0l\n        for (i <- lst) {\n\
    \            if (i >= 0 && i % 1 == 0) {\n                sum += i\n         \
    \       sumOfSquares += i * i\n            }\n        }\n        return 2 * (sumOfSquares\
    \ - sum)", "        var sum = 0l\n        for (i <- lst) {\n            if (i.isValidInt)\
    \ {\n                val x = i.toInt\n                if (x > 0) {\n         \
    \           sum += pow(x, 2).toLong\n                }\n            }\n      \
    \  }\n        return 2 * sum", "        var sum = 0l\n        for (i <- lst) {\n\
    \            if (i > 0 && i % 1 == 0) {\n                sum += pow(i, 2).toLong\n\
    \            }\n        }\n        sum * 2", "        var sum : Long = 0l\n  \
    \      var sumOfSquares : Long = 0l\n        for (i <- lst) {\n            if\
    \ (i > 0 && i % 1 == 0) {\n                sum += i\n                sumOfSquares\
    \ += pow(i, 2).toLong\n            }\n        }\n        return 2 * (sumOfSquares\
    \ - sum)", "        var sum : Long = 0l\n        for (x <- lst) {\n          \
    \  if (x.isValidInt) {\n                val xInt : Int = x.toInt\n           \
    \     if (xInt > 0) {\n                    sum += xInt * xInt\n              \
    \  }\n            }\n        }\n        return sum * 2", "        var sum : Long\
    \ = 0l\n        for (i <- lst) {\n            if (i % 2 == 1) {\n            \
    \    sum += i * i\n            }\n        }\n        return sum * 2", "      \
    \  val lst2 = lst.filter(x => x > 0 && x % 1 == 0)\n        if (lst2.length ==\
    \ 0) 0\n        else lst2.map(x => x * x).sum.toLong * 2", "        val lst2 =\
    \ lst.filter(x => x > 0 && x % 1 == 0)\n        val lst3 = lst2.map(x => x * x)\n\
    \        val lst4 = lst3.sum\n        val lst5 = lst4 * 2\n        return lst5.toLong",
  "        var sum = 0l\n        for (i <- lst) {\n            if (i > 0 && i % 1\
    \ == 0) {\n                sum += pow(i, 2).toLong\n            }\n        }\n\
    \        return sum * 2", "        var sum = 0l\n        for (i <- lst) {\n  \
    \          if (i > 0 && i % 1 == 0) {\n                sum += i * i\n        \
    \    }\n        }\n        sum * 2", "        // your code here\n        return\
    \ 0l", "        // your code here\n        return 0l", "        var sum = 0l\n\
    \        for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n          \
    \      sum += pow(i, 2).toLong\n            }\n        }\n        return sum *\
    \ 2", '        return 0l', '        lst.filter(x => x > 0 && x % 1 == 0).map(x
    => x * x).sum.toLong * 2', "        var sum : Long = 0l\n        for (i <- lst)\
    \ {\n            if (i > 0 && i % 1 == 0) {\n                sum += pow(i, 2).toLong\n\
    \            }\n        }\n        return sum * 2", "        var sum = 0l\n  \
    \      for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n            \
    \    sum += (i * i)\n            }\n        }\n        return sum * 2", "    \
    \    var sum : Long = 0l\n        for (i <- lst) {\n            if (i.isValidInt)\
    \ {\n                val x : Int = i.toInt\n                if (x > 0) {\n   \
    \                 sum += pow(x, 2).toLong\n                }\n            }\n\
    \        }\n        return sum", "        // your code here\n        var sum =\
    \ 0l\n        for (i <- lst) {\n            if (i > 0 && i % 2 == 1) {\n     \
    \           sum += pow(i, 2).toLong\n            }\n        }\n        sum * 2",
  "        val lst2 = lst.filter(x => x > 0 && x % 1 == 0)\n        val lst3 = lst2.map(x\
    \ => x * x)\n        val lst4 = lst3.filter(x => x % 2 == 1)\n        val lst5\
    \ = lst4.sum\n        val lst6 = lst5 * 2\n        return lst6.toLong", '        lst.filter(x
    => x % 2 == 1).map(x => x * x).sum.toLong', "        var sum = 0l\n        for\
    \ (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n                sum +=\
    \ pow(i, 2).toLong\n            }\n        }\n        return sum", "        //\
    \ your code here\n        return 0l", "        var sum = 0l.toLong\n        for\
    \ (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n                sum +=\
    \ pow(i, 2).toLong\n            }\n        }\n        return sum * 2", "     \
    \   var sum : Long = 0l\n        for (i <- lst) {\n            if (i > 0 && i\
    \ % 1 == 0) {\n                sum += pow(i, 2).toLong\n            }\n      \
    \  }\n        return sum * 2", "        var sum = 0l\n        for (i <- lst) {\n\
    \            if (i % 2 == 1) {\n                sum += pow(i, 2).toLong\n    \
    \        }\n        }\n        sum * 2", "        var sum = 0l.toLong\n      \
    \  for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n                sum\
    \ += pow(i, 2).toLong\n            }\n        }\n        return sum * 2", "  \
    \      var sum : Long = 0l\n        for (i <- lst) {\n            if (i.isValidInt)\
    \ {\n                val i2 : Int = i.toInt\n                if (i2 > 0) {\n \
    \                   sum += i2 * i2\n                }\n            }\n       \
    \ }\n        sum * 2", "        var sum : Long = 0l\n        for (i <- lst) {\n\
    \            if (i > 0 && i % 1 == 0) {\n                sum += pow(i, 2).toLong\n\
    \            }\n        }\n        return sum * 2", "        // Your code here\n\
    \        return 0l", "        // your code here\n        return 0l", "       \
    \ var sum : Long = 0l\n        for (i <- lst) {\n            if (i.isValidInt)\
    \ {\n                if (i % 2 == 1) {\n                    sum += pow(i, 2).toLong\n\
    \                }\n            }\n        }\n        return sum * 2", "     \
    \   // your code here\n        return 0l", "        var sum = 0l\n        for\
    \ (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n                sum +=\
    \ pow(i, 2).toLong\n            }\n        }\n        sum * 2", "        // your\
    \ code here\n        return 0l", "        var sum : Long = 0l\n        for (i\
    \ <- lst) {\n            if (i > 0 && i % 1 == 0) {\n                sum += pow(i,\
    \ 2).toLong\n            }\n        }\n        sum * 2", "        val lst2 = lst.filter(x\
    \ => x > 0 && x % 1 == 0)\n        if (lst2.isEmpty) 0\n        else {\n     \
    \       val lst3 = lst2.map(x => pow(x, 2).toLong)\n            val max = lst3.max\n\
    \            val min = lst3.min\n            2 * (max - min)\n        }", "  \
    \      var sum : Long = 0l\n        var sumOfSquares : Long = 0l\n        for\
    \ (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n                sum +=\
    \ i\n                sumOfSquares += i * i\n            }\n        }\n       \
    \ sum * sum - sumOfSquares", "        var sum : Long = 0l\n        for (i <- lst)\
    \ {\n            if (i > 0 && i % 1 == 0) {\n                sum += pow(i, 2).toLong\n\
    \            }\n        }\n        return sum * 2", "        var sum = 0l\n  \
    \      for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n            \
    \    sum += i * i\n            }\n        }\n        return sum * 2", "      \
    \  var sum : Long = 0l\n        for (i <- lst) {\n            if (i > 0 && i %\
    \ 1 == 0) {\n                sum += (i * i).toLong\n            }\n        }\n\
    \        return sum * 2", "        var sum : Long = 0l\n        for (i <- lst)\
    \ {\n            if (i > 0 && i % 1 == 0) {\n                sum += i * i\n  \
    \          }\n        }\n        return sum * 2", "        var sum : Long = 0\n\
    \        for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n          \
    \      sum += pow(i, 2).toLong\n            }\n        }\n        return sum *\
    \ 2", "        var sum = 0l\n        for (i <- lst) {\n            if (i % 2 ==\
    \ 1) {\n                sum += i * i\n            }\n        }\n        return\
    \ sum * 2", "        // Your code here\n        return 0l", "        var sum :\
    \ Long = 0\n        for (i <- lst) {\n            if (i.isValidInt) {\n      \
    \          if (i % 2 == 1) {\n                    sum += pow(i, 2).toLong\n  \
    \              }\n            }\n        }\n        return sum * 2", "       \
    \ var sum = 0l\n        for (i <- lst) {\n            if (i > 0 && i % 1 == 0)\
    \ {\n                sum += pow(i, 2).toLong\n            }\n        }\n     \
    \   sum * 2", "        var sum : Long = 0l\n        for (i <- lst) {\n       \
    \     if (i > 0 && i % 1 == 0) {\n                sum += pow(i, 2).toLong\n  \
    \          }\n        }\n        return sum * 2", "        var sum : Long = 0l\n\
    \        for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n          \
    \      sum += i * i\n            }\n        }\n        return sum * 2", "    \
    \    var sum = 0l.toLong\n        for (i <- lst) {\n            if (i > 0 && i\
    \ % 1 == 0) {\n                sum += pow(i, 2).toLong\n            }\n      \
    \  }\n        return sum", '        lst.filter(x => x % 2 == 1).map(x => x * x).sum.toLong',
  "        var sum : Long = 0l\n        for (i <- lst) {\n            if (i > 0 &&\
    \ i % 1 == 0) {\n                sum += pow(i, 2).toLong\n            }\n    \
    \    }\n        return sum * 2", "        var sum : Long = 0\n        for (i <-\
    \ lst) {\n            if (i > 0 && i % 1 == 0) {\n                sum += pow(i,\
    \ 2).toLong\n            }\n        }\n        return 2 * sum", "        var sum\
    \ : Long = 0l\n        for (i <- lst) {\n            if (i > 0 && i % 1 == 0)\
    \ {\n                sum += pow(i, 2).toLong\n            }\n        }\n     \
    \   return 2 * sum", "        // your code here\n        return 0l", "       \
    \ var sum : Long = 0l\n        for (i <- lst) {\n            if (i > 0 && i %\
    \ 1 == 0) {\n                sum += pow(i, 2).toLong\n            }\n        }\n\
    \        return sum * 2", "        var sum = 0l.toLong\n        for (x <- lst)\
    \ {\n            if (x > 0 && x % 1 == 0) {\n                sum += pow(x, 2).toLong\n\
    \            }\n        }\n        return sum * 2", "        val lst2 = lst.filter(x\
    \ => x > 0 && x % 1 == 0)\n        val lst3 = lst2.map(x => x * x)\n        val\
    \ lst4 = lst3.sum\n        val lst5 = lst4 * 2\n        return lst5.toLong", " \
    \       var sum : Long = 0l\n        for (i <- lst) {\n            if (i.isValidInt)\
    \ {\n                val j : Int = i.toInt\n                if (j > 0) {\n   \
    \                 sum += j * j\n                }\n            }\n        }\n\
    \        return sum * 2", "        var sum = 0l\n        for (i <- lst) {\n  \
    \          if (i > 0 && i % 1 == 0) {\n                sum += pow(i, 2).toLong\n\
    \            }\n        }\n        sum * 2", "        val lst2 = lst.filter(x\
    \ => x > 0 && x % 1 == 0).map(x => x.toLong)\n        if (lst2.length == 0) 0\n\
    \        else {\n            val max = lst2.max\n            val min = lst2.min\n\
    \            (max - min) * 2\n        }", "        // your code here\n       \
    \ 0l", "        var sum : Long = 0l\n        for (i <- lst) {\n            if\
    \ (i % 2 == 1) {\n                sum += pow(i, 2).toLong\n            }\n   \
    \     }\n        return sum * 2", "        var sum : Long = 0l\n        for (i\
    \ <- lst) {\n            if (i > 0 && i % 1 == 0) {\n                sum += pow(i,\
    \ 2).toLong\n            }\n        }\n        return sum * 2", "        var sum\
    \ : Long = 0l\n        for (i <- lst) {\n            if (i > 0 && i % 1 == 0)\
    \ {\n                sum += pow(i, 2).toLong\n            }\n        }\n     \
    \   return sum * 2", "        var sum : Long = 0l\n        for (i <- lst) {\n\
    \            if (i > 0 && i % 1 == 0) {\n                sum += pow(i, 2).toLong\n\
    \            }\n        }\n        return sum * 2", "        var sum : Long =\
    \ 0l\n        for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n     \
    \           sum += pow(i, 2).toLong\n            }\n        }\n        return\
    \ sum * 2", "        var sum : Long = 0l\n        for (i <- lst) {\n         \
    \   if (i > 0 && i % 1 == 0) {\n                sum += pow(i, 2).toLong\n    \
    \        }\n        }\n        return sum * 2", "        var sum : Long = 0l\n\
    \        for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n          \
    \      sum += i * i\n            }\n        }\n        return sum * 2", "    \
    \    // your code here\n        return 0l", "        // your code goes here\n\
    \        return 0l", "        var sum : Long = 0l\n        var sumOfSquares :\
    \ Long = 0l\n        for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n\
    \                sum += i\n                sumOfSquares += pow(i, 2).toLong\n\
    \            }\n        }\n        return 2 * (sumOfSquares - sum)", "       \
    \ var sum : Long = 0l\n        for (i <- lst) {\n            if (i > 0 && i %\
    \ 1 == 0) {\n                sum += i * i\n            }\n        }\n        return\
    \ sum * 2", "        // your code goes here\n        return 0l", "        var\
    \ sum : Long = 0l\n        for (i <- lst) {\n            if (i >= 0) {\n     \
    \           sum += (i * i).toLong\n            }\n        }\n        return sum",
  "        var sum : Long = 0l\n        for (i <- lst) {\n            if (i % 2 ==\
    \ 1) {\n                sum += pow(i, 2).toLong\n            }\n        }\n  \
    \      return sum * 2", '        return 0l', "        // Your code here\n    \
    \    var sum : Long = 0l\n        for (i <- lst) {\n            if (i % 2 == 1)\
    \ {\n                sum += i * i\n            }\n        }\n        sum * 2",
  "        // your code here\n        return 0l", "        var sum : Long = 0l\n \
    \       for (i <- lst) {\n            if (i.isValidInt) {\n                if\
    \ (i % 2 == 1) {\n                    sum += pow(i, 2).toLong\n              \
    \  }\n            }\n        }\n        return sum * 2", "        var sum : Long\
    \ = 0l\n        for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n   \
    \             sum += pow(i, 2).toLong\n            }\n        }\n        sum *\
    \ 2", "        var sum : Long = 0\n        for (i <- lst) {\n            if (i\
    \ > 0 && i % 1 == 0) {\n                sum += pow(i, 2).toLong\n            }\n\
    \        }\n        return sum * 2", "        var sum : Long = 0l;\n        for\
    \ (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n                sum +=\
    \ pow(i, 2).toLong;\n            }\n        }\n        return sum * 2;", "   \
    \     var sum : Long = 0l\n        for (i <- lst) {\n            if (i > 0 &&\
    \ i % 1 == 0) {\n                sum += pow(i, 2).toLong\n            }\n    \
    \    }\n        return sum * 2", "        var sum = 0l\n        for (i <- lst)\
    \ {\n            if (i > 0 && i % 1 == 0) {\n                sum += pow(i, 2).toLong\n\
    \            }\n        }\n        return sum * 2", '        lst.filter(x => x
    % 2 == 1).map(x => x * x).sum.toLong', '        return 0l', "        var sum =\
    \ 0l\n        for (i <- lst) {\n            if (i % 2 == 1) {\n              \
    \  sum += i * i\n            }\n        }\n        return sum * 2", "        var\
    \ sum : Long = 0l\n        for (i <- lst) {\n            if (i % 2 == 1) {\n \
    \               sum += i * i\n            }\n        }\n        return sum * 2",
  "        var sum = 0l\n        for (i <- lst) {\n            if (i % 2 == 1) {\n\
    \                sum += i * i\n            }\n        }\n        return sum *\
    \ 2", "        var sum = 0l\n        var sumOfSquares = 0l\n        for (i <-\
    \ lst) {\n            if (i > 0 && i % 1 == 0) {\n                sum += i\n \
    \               sumOfSquares += i * i\n            }\n        }\n        return\
    \ 2 * (sumOfSquares - sum * sum)", "        var sum : Long = 0l\n        var sumOfSquares\
    \ : Long = 0l\n        for (i <- lst) {\n            if (i > 0 && i % 1 == 0)\
    \ {\n                sum += i\n                sumOfSquares += i * i\n       \
    \     }\n        }\n        return 2 * (sumOfSquares - sum)", "        // your\
    \ code here\n        return 0l", "        var sum : Long = 0l\n        for (i\
    \ <- lst) {\n            if (i > 0 && i % 1 == 0) {\n                sum += pow(i,\
    \ 2).toLong\n            }\n        }\n        return 2 * sum", '        lst.filter(x
    => x > 0 && x % 1 == 0).map(x => x * x).sum.toLong * 2', "        var sum : Long\
    \ = 0l\n        for (i <- lst) {\n            if (i % 2 == 1) {\n            \
    \    sum += (i * i)\n            }\n        }\n        return sum * 2", '        lst.filter(x
    => x > 0 && x % 1 == 0).map(x => x * x).sum.toLong * 2', "        val lst2 = lst.filter(x\
    \ => x % 1 == 0 && x >= 0)\n        val lst3 = lst2.map(x => x.toLong)\n     \
    \   val lst4 = lst3.map(x => x * x)\n        val lst5 = lst4.filter(x => x % 2\
    \ == 1)\n        val lst6 = lst5.map(x => x * 2)\n        val lst7 = lst6.sum\n\
    \        return lst7", "        var sum = 0l\n        for (x <- lst) {\n     \
    \       if (x % 2 == 1) {\n                sum += x * x\n            }\n     \
    \   }\n        return sum * 2", "        // your code here\n        return 0l",
  "        var sum : Long = 0\n        for (i <- lst) {\n            if (i % 2 ==\
    \ 1) {\n                sum += i * i\n            }\n        }\n        return\
    \ sum * 2", "        // your code here\n        return 0l", "        val lst2\
    \ = lst.filter(x => x > 0 && x % 1 == 0)\n        if (lst2.length == 0) return\
    \ 0\n        val max = lst2.max\n        val min = lst2.min\n        (max - min)\
    \ * 2", "        var sum = 0l.toLong\n        for (i <- lst) {\n            if\
    \ (i > 0 && i % 1 == 0) {\n                sum += pow(i, 2).toLong\n         \
    \   }\n        }\n        return sum * 2", "        // your code goes here\n \
    \       return 0l", "        val lst2 = lst.filter(x => x.isValidInt && x > 0)\n\
    \        val lst3 = lst2.map(x => x.toInt)\n        val lst4 = lst3.filter(x =>\
    \ x % 2 == 1)\n        val lst5 = lst4.map(x => x * x)\n        val lst6 = lst5.sum\n\
    \        val lst7 = lst6 * 2\n        return lst7", "        var sum : Long =\
    \ 0l\n        for (i <- lst) {\n            if (i % 2 == 1) {\n              \
    \  sum += pow(i, 2).toLong\n            }\n        }\n        return sum * 2",
  "        var sum = 0l\n        for (i <- lst) {\n            if (i % 2 == 1) {\n\
    \                sum += i * i\n            }\n        }\n        return sum *\
    \ 2", "        // your code here\n        return 0l", "        var sum : Long\
    \ = 0l\n        var sumOfSquares : Long = 0l\n        for (i <- lst) {\n     \
    \       if (i > 0 && i % 1 == 0) {\n                sum += i\n               \
    \ sumOfSquares += i * i\n            }\n        }\n        2 * (sumOfSquares -\
    \ sum)", "        // your code here\n        return 0l", "        var sum : Long\
    \ = 0l\n        for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n   \
    \             sum += pow(i, 2).toLong\n            }\n        }\n        return\
    \ sum * 2", "        var sum : Long = 0l\n        for (i <- lst) {\n         \
    \   if (i > 0 && i % 1 == 0) {\n                sum += pow(i, 2).toLong\n    \
    \        }\n        }\n        return sum * 2", "        var sum = 0l\n      \
    \  var sumOfSquares = 0l\n        for (i <- lst) {\n            if (i > 0 && i\
    \ % 1 == 0) {\n                sum += i\n                sumOfSquares += i * i\n\
    \            }\n        }\n        return 2 * (sumOfSquares - sum)", "       \
    \ var sum : Long = 0l\n        for (i <- lst) {\n            if (i > 0 && i %\
    \ 1 == 0) {\n                sum += i * i\n            }\n        }\n        return\
    \ sum * 2", "        // your code here\n        return 0l", "        var sum :\
    \ Long = 0l\n        for (i <- lst) {\n            if (i % 2 == 1) {\n       \
    \         sum += i * i\n            }\n        }\n        return sum * 2", " \
    \       // your code here\n        return 0l", "        var sum : Long = 0l\n\
    \        for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n          \
    \      sum += pow(i, 2).toLong\n            }\n        }\n        return 2 * sum",
  "        val lst2 = lst.filter(x => x % 1 == 0 && x >= 0)\n        val lst3 = lst2.map(x\
    \ => x * x)\n        val lst4 = lst3.filter(x => x % 2 == 1)\n        val lst5\
    \ = lst4.sum\n        val lst6 = lst5 * 2\n        return lst6.toLong", "    \
    \    // your code here\n        return 0l", "        var sum = 0l.toLong\n   \
    \     var sumOfSquares = 0l.toLong\n        for (i <- lst) {\n            if (i\
    \ > 0 && i % 1 == 0) {\n                sum += i\n                sumOfSquares\
    \ += pow(i, 2).toLong\n            }\n        }\n        return 2 * (sumOfSquares\
    \ - pow(sum, 2).toLong)", "        // your code here\n        return 0l", "  \
    \      var sum = 0l\n        for (i <- lst) {\n            if (i > 0 && i % 1\
    \ == 0) {\n                sum += pow(i, 2).toLong\n            }\n        }\n\
    \        return sum * 2", "        var sum : Long = 0l\n        for (i <- lst)\
    \ {\n            if (i >= 0 && i % 1 == 0) {\n                sum += i * i\n \
    \           }\n        }\n        return sum * 2", "        var sum : Long = 0l\n\
    \        for (i <- lst) {\n            if (i.isValidInt) {\n                val\
    \ x : Int = i.toInt\n                if (x > 0) {\n                    sum +=\
    \ x * x\n                }\n            }\n        }\n        return sum * 2",
  "        val lst2 = lst.filter(x => x > 0 && x % 1 == 0).map(x => x * x)\n     \
    \   if (lst2.length == 0) return 0\n        val max = lst2.max\n        val min\
    \ = lst2.min\n        return 2 * (max - min)", "        // Your code here\n  \
    \      return 0l", "        // your code here\n        return 0l", "        val\
    \ lst2 = lst.filter(x => x > 0 && x % 1 == 0)\n        if (lst2.length == 0) return\
    \ 0\n        val max = lst2.max\n        val min = lst2.min\n        (max - min)\
    \ * 2", "        val lst2 = lst.filter(x => x > 0 && x % 1 == 0)\n        val\
    \ lst3 = lst2.map(x => x * x)\n        val lst4 = lst3.filter(x => x % 2 == 1)\n\
    \        val lst5 = lst4.sum\n        val lst6 = lst5 * 2\n        return lst6.toLong",
  "        var sum : Long = 0l\n        var sumOfSquares : Long = 0l\n        for\
    \ (i <- lst) {\n            if (i.isValidInt) {\n                val iInt : Int\
    \ = i.toInt\n                if (iInt > 0) {\n                    sum += iInt\n\
    \                    sumOfSquares += iInt * iInt\n                }\n        \
    \    }\n        }\n        2 * (sumOfSquares - sum * sum)", "        var sum =\
    \ 0l\n        var sumOfSquares = 0l\n        for (i <- lst) {\n            if\
    \ (i > 0 && i % 1 == 0) {\n                sum += i\n                sumOfSquares\
    \ += i * i\n            }\n        }\n        return 2 * (sumOfSquares - sum *\
    \ sum)", "        var sum = 0l\n        for (i <- lst) {\n            if (i.isValidInt)\
    \ {\n                sum += pow(i.toInt, 2).toLong\n            }\n        }\n\
    \        return sum", "        var sum = 0l\n        for (i <- lst) {\n      \
    \      if (i > 0 && i % 1 == 0) {\n                sum += pow(i, 2).toLong\n \
    \           }\n        }\n        return sum * 2", "        // your code here\n\
    \        return 0l", "        var sum : Long = 0l\n        var sumOfSquares :\
    \ Long = 0l\n        for (i <- lst) {\n            if (i % 2 == 1 && i > 0) {\n\
    \                sum += i\n                sumOfSquares += i * i\n           \
    \ }\n        }\n        return 2 * (sumOfSquares - sum)", '        lst.filter(x
    => x > 0 && x % 1 == 0).map(x => pow(x, 2).toLong).sum', "        // your code\
    \ here\n        return 0l", "        var sum : Long = 0l\n        for (i <- lst)\
    \ {\n            if (i > 0 && i % 1 == 0) {\n                sum += pow(i, 2).toLong\n\
    \            }\n        }\n        return sum * 2", "        var sum : Long =\
    \ 0l\n        for (i <- lst) {\n            if (i % 2 == 1) {\n              \
    \  sum += i * i\n            }\n        }\n        sum * 2", "        var sum\
    \ = 0l\n        for (i <- lst) {\n            if (i.isValidInt) {\n          \
    \      val j = i.toInt\n                if (j > 0) {\n                    sum\
    \ += j * j\n                }\n            }\n        }\n        sum * 2", " \
    \       var sum : Long = 0l\n        for (i <- lst) {\n            if (i > 0 &&\
    \ i % 1 == 0) {\n                sum += pow(i, 2).toLong\n            }\n    \
    \    }\n        return sum * 2", "        var sum : Long = 0l\n        for (i\
    \ <- lst) {\n            if (i > 0 && i % 1 == 0) {\n                sum += pow(i,\
    \ 2).toLong\n            }\n        }\n        return sum * 2", "        var sum\
    \ : Long = 0l\n        for (i <- lst) {\n            if (i > 0 && i % 1 == 0)\
    \ {\n                sum += pow(i, 2).toLong\n            }\n        }\n     \
    \   return sum * 2", "        var sum : Long = 0l\n        for (i <- lst) {\n\
    \            if (i > 0 && i % 1 == 0) {\n                sum += i * i\n      \
    \      }\n        }\n        return sum * 2", "        // your code here\n   \
    \     return 0l", "        var sum : Long = 0l\n        for (i <- lst) {\n   \
    \         if (i > 0 && i % 1 == 0) {\n                sum += pow(i, 2).toLong\n\
    \            }\n        }\n        return 2 * sum", "        var sum = 0l.toLong\n\
    \        var sumOfSquares = 0l.toLong\n        for (i <- lst) {\n            if\
    \ (i % 2 == 1) {\n                sum += i\n                sumOfSquares += i\
    \ * i\n            }\n        }\n        return 2 * (sumOfSquares - sum * sum)",
  "        var sum : Long = 0l\n        for (i <- lst) {\n            if (i > 0 &&\
    \ i % 1 == 0) {\n                sum += pow(i, 2).toLong\n            }\n    \
    \    }\n        return sum * 2"]
stop_tokens:
- "\n    }\n"
