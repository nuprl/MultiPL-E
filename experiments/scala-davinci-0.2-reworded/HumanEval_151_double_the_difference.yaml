name: HumanEval_151_double_the_difference
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of numbers, return the sum of squares of the numbers\n    //\
  \ in the list that are odd. Ignore numbers that are negative or not integers.\n\
  \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong, 0l.toLong)))\n\
  \    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong, -2l.toLong,\
  \ 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
  \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
  \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
  \ : List[Float]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
  \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
  \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
  \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
  \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
  \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
  \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
  \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
  \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
completions: ["        var sum : Long = 0l\n        for (i <- lst) {\n           \
    \ if (i > 0 && i % 1 == 0) {\n                sum += i * i\n            }\n  \
    \      }\n        return sum * 2", "        var sum = 0l\n        for (i <- lst)\
    \ {\n            if (i % 2 == 1) {\n                sum += pow(i, 2).toLong\n\
    \            }\n        }\n        sum * 2", "        if (lst.isEmpty) {\n   \
    \         return 0l\n        }\n        var sum : Long = 0l\n        for (i <-\
    \ lst) {\n            if (i > 0 && i % 1 == 0) {\n                sum += i * i\n\
    \            }\n        }\n        return sum * 2", "        var sum = 0l\n  \
    \      for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n            \
    \    sum += pow(i, 2).toLong\n            }\n        }\n        return sum * 2",
  "        var sum = 0l\n        for (i <- lst) {\n            if (i % 2 == 1) {\n\
    \                sum += i * i\n            }\n        }\n        sum * 2", " \
    \       var sum : Long = 0l\n        for (i <- lst) {\n            if (i > 0 &&\
    \ i % 1 == 0) {\n                sum += pow(i, 2).toLong\n            }\n    \
    \    }\n        sum * 2", "        var sum : Long = 0l\n        for (i <- lst)\
    \ {\n            if (i > 0) {\n                sum += (i * i).toLong\n       \
    \     }\n        }\n        return sum", "        var sum : Long = 0l\n      \
    \  for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n                sum\
    \ += pow(i, 2).toLong\n            }\n        }\n        return sum * 2", "  \
    \      // your code here\n        return 0l", "        var sum : Long = 0l\n \
    \       for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n           \
    \     sum += i * i\n            }\n        }\n        return 2 * sum", "     \
    \   var sum : Long = 0l\n        for (i <- lst) {\n            if (i.isValidInt\
    \ && i > 0) {\n                sum += pow(i, 2).toLong\n            }\n      \
    \  }\n        return sum * 2", "        var sum = 0l\n        for (i <- lst) {\n\
    \            if (i > 0 && i % 1 == 0) {\n                sum += pow(i, 2).toLong\n\
    \            }\n        }\n        sum * 2", "        var sum : Long = 0l\n  \
    \      for (i <- lst) {\n            if (i % 2 == 1) {\n                sum +=\
    \ i * i\n            }\n        }\n        return sum * 2", "        val lst2\
    \ = lst.filter(x => x > 0 && x % 1 == 0)\n        val lst3 = lst2.filter(x =>\
    \ x % 2 == 1)\n        val lst4 = lst3.map(x => x * x)\n        val lst5 = lst4.sum\n\
    \        val lst6 = lst5 * 2\n        return lst6.toLong", "        var sum :\
    \ Long = 0l\n        for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n\
    \                sum += (i * i)\n            }\n        }\n        return sum\
    \ * 2", "        // your code here\n        return 0l", "        var sum : Long\
    \ = 0l\n        for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n   \
    \             sum += pow(i, 2).toLong\n            }\n        }\n        return\
    \ sum * 2", "        var sum : Long = 0l\n        for (i <- lst) {\n         \
    \   if (i > 0 && i % 1 == 0) {\n                sum += pow(i, 2).toLong\n    \
    \        }\n        }\n        sum * 2", "        var sum = 0l\n        var sumOfSquares\
    \ = 0l\n        for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n   \
    \             sum += i\n                sumOfSquares += i * i\n            }\n\
    \        }\n        sum * sum - sumOfSquares", "        var sum : Long = 0l\n\
    \        for (i <- lst) {\n            if (i > 0 && i % 1 == 0) {\n          \
    \      sum += pow(i, 2).toLong\n            }\n        }\n        return sum *\
    \ 2"]
stop_tokens:
- "\n    }\n"
