language: scala
name: HumanEval_57_monotonic
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length == 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val n = l.length\n        var increasing = true\n   \
    \     var decreasing = true\n        for (i <- 1 until n) {\n            if (l(i)\
    \ < l(i - 1)) increasing = false\n            if (l(i) > l(i - 1)) decreasing\
    \ = false\n        }\n        return increasing || decreasing\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length == 1) return true\n        val inc = (l(0)\
    \ < l(1))\n        for (i <- 1 until l.length - 1) {\n            if (inc && l(i)\
    \ > l(i + 1)) return false\n            if (!inc && l(i) < l(i + 1)) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.size == 1) return true\n        val diff = l(1)\
    \ - l(0)\n        for (i <- 1 until l.size) {\n            if (diff * (l(i) -\
    \ l(i - 1)) < 0) return false\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        val diffs = l.sliding(2).map(x\
    \ => x(1) - x(0)).toList\n        val first = diffs(0)\n        for (i <- 1 until\
    \ diffs.length) {\n            if (diffs(i) * first < 0) return false\n      \
    \  }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 0 until l.length - 1) {\n            if (l(i) > l(i + 1)) increasing\
    \ = false\n            if (l(i) < l(i + 1)) decreasing = false\n        }\n  \
    \      return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        val diff = l(1)\
    \ - l(0)\n        for (i <- 1 until l.length) {\n            if (diff * (l(i)\
    \ - l(i - 1)) < 0) return false\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n            if (l(i) < l(i\
    \ - 1)) increasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length == 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        val d = l(1) -\
    \ l(0)\n        for (i <- 1 until l.length) {\n            if (d * (l(i) - l(i\
    \ - 1)) < 0) return false\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n  \
    \      increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        val diff = l(1)\
    \ - l(0)\n        for (i <- 1 until l.length) {\n            if (diff * (l(i)\
    \ - l(i - 1)) < 0) return false\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 0 until l.length - 1) {\n            if (l(i) > l(i + 1)) increasing\
    \ = false\n            if (l(i) < l(i + 1)) decreasing = false\n        }\n  \
    \      increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) > l(i - 1)) decreasing\
    \ = false\n            if (l(i) < l(i - 1)) increasing = false\n        }\n  \
    \      increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) true\n        else {\n           \
    \ val diffs = l.sliding(2).map(x => x(1) - x(0)).toList\n            val first\
    \ = diffs(0)\n            diffs.forall(x => x == first)\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwzyha6op.scala:20)\n\tat Problem.main(tmpwzyha6op.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) > l(i - 1)) decreasing\
    \ = false\n            if (l(i) < l(i - 1)) increasing = false\n        }\n  \
    \      return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 0 until l.length -\
    \ 1) {\n            if (l(i) > l(i + 1)) increasing = false\n            if (l(i)\
    \ < l(i + 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        val sign = l(1)\
    \ - l(0)\n        for (i <- 1 until l.length) {\n            if (sign * (l(i)\
    \ - l(i - 1)) < 0) return false\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val n = l.length\n        if (n <= 1) return true\n \
    \       var i = 1\n        var increasing = true\n        while (i < n) {\n  \
    \          if (l(i) < l(i - 1)) increasing = false\n            if (increasing\
    \ && l(i) < l(i - 1)) return false\n            if (!increasing && l(i) > l(i\
    \ - 1)) return false\n            i += 1\n        }\n        return true\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        val d = l(1) -\
    \ l(0)\n        for (i <- 1 until l.length - 1) {\n            if (d * (l(i +\
    \ 1) - l(i)) < 0) return false\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.size <= 1) return true\n        val diffs = l.sliding(2).map(x\
    \ => x(1) - x(0)).toList\n        val first = diffs(0)\n        diffs.forall(x\
    \ => x == first)\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2sej3jts.scala:18)\n\tat Problem.main(tmp2sej3jts.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 0 until l.length - 1) {\n            if (l(i) > l(i + 1)) increasing\
    \ = false\n            if (l(i) < l(i + 1)) decreasing = false\n        }\n  \
    \      increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length == 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        val d = l(1) -\
    \ l(0)\n        for (i <- 1 until l.length) {\n            if (d * (l(i) - l(i\
    \ - 1)) < 0) return false\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length == 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 0 until l.length -\
    \ 1) {\n            if (l(i) > l(i + 1)) increasing = false\n            if (l(i)\
    \ < l(i + 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799508
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val n = l.length\n        if (n == 1) return true\n \
    \       val d = l(1) - l(0)\n        for (i <- 1 until n) {\n            if (d\
    \ * (l(i) - l(i - 1)) < 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799507
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        var increasing\
    \ = l(0) < l(1)\n        for (i <- 1 until l.length - 1) {\n            if (increasing)\
    \ {\n                if (l(i) > l(i + 1)) return false\n            } else {\n\
    \                if (l(i) < l(i + 1)) return false\n            }\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799507
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.size == 1) return true\n        val diffs = l.sliding(2).map(x\
    \ => x(1) - x(0)).toList\n        val first = diffs(0)\n        diffs.forall(x\
    \ => x == first)\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo2r_8_f0.scala:18)\n\tat Problem.main(tmpo2r_8_f0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799507
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val n = l.length\n        if (n <= 1) return true\n \
    \       var increasing = true\n        var decreasing = true\n        for (i <-\
    \ 1 until n) {\n            if (l(i) > l(i - 1)) decreasing = false\n        \
    \    if (l(i) < l(i - 1)) increasing = false\n        }\n        increasing ||\
    \ decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799507
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n  \
    \      return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799507
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        val d = l(1) -\
    \ l(0)\n        for (i <- 1 until l.length) {\n            if (d * (l(i) - l(i\
    \ - 1)) < 0) return false\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.size == 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.size) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799507
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n  \
    \      return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799507
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 0 until l.length - 1) {\n            if (l(i) > l(i + 1)) increasing\
    \ = false\n            if (l(i) < l(i + 1)) decreasing = false\n        }\n  \
    \      increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.size == 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.size) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799507
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.size < 2) return true\n        var increasing =\
    \ true\n        var decreasing = true\n        for (i <- 1 until l.size) {\n \
    \           if (l(i) > l(i - 1)) decreasing = false\n            if (l(i) < l(i\
    \ - 1)) increasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799507
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 0 until l.length -\
    \ 1) {\n            if (l(i) > l(i + 1)) increasing = false\n            if (l(i)\
    \ < l(i + 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799508
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 0 until l.length -\
    \ 1) {\n            if (l(i) > l(i + 1)) increasing = false\n            if (l(i)\
    \ < l(i + 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799508
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length == 1) true\n        else if (l.length ==\
    \ 2) true\n        else {\n            val diffs = l.sliding(2).map(x => x(1)\
    \ - x(0)).toList\n            val first = diffs(0)\n            val rest = diffs.tail\n\
    \            if (rest.forall(x => x == first)) true\n            else if (rest.forall(x\
    \ => x == -first)) true\n            else false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnzdfl6cp.scala:24)\n\tat Problem.main(tmpnzdfl6cp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799507
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val n = l.length\n        if (n == 1) return true\n \
    \       val d = l(1) - l(0)\n        for (i <- 1 until n) {\n            if (d\
    \ * (l(i) - l(i - 1)) < 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799507
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length == 1) return true\n        val d = l(1)\
    \ - l(0)\n        for (i <- 1 until l.length) {\n            if (d * (l(i) - l(i\
    \ - 1)) < 0) return false\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799508
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 0 until l.length - 1) {\n            if (l(i) > l(i + 1)) increasing\
    \ = false\n            if (l(i) < l(i + 1)) decreasing = false\n        }\n  \
    \      increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length == 1) return true\n        val sign = l(1)\
    \ - l(0)\n        for (i <- 1 until l.length) {\n            if (sign * (l(i)\
    \ - l(i - 1)) < 0) return false\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799507
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n  \
    \      increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n  \
    \      return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799507
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length == 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i - 1) > l(i)) increasing = false\n            if (l(i - 1)\
    \ < l(i)) decreasing = false\n        }\n        increasing || decreasing\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799507
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length == 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799507
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val n = l.length\n        if (n <= 1) return true\n \
    \       val d = l(1) - l(0)\n        for (i <- 2 until n) {\n            if (d\
    \ * (l(i) - l(i - 1)) < 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799508
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n  \
    \      increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        var i = 1\n \
    \       var increasing = true\n        var decreasing = true\n        while (i\
    \ < l.length) {\n            if (l(i) > l(i - 1)) decreasing = false\n       \
    \     if (l(i) < l(i - 1)) increasing = false\n            i += 1\n        }\n\
    \        return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799507
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.size == 1) return true\n        var inc = true\n\
    \        var dec = true\n        for (i <- 1 until l.size) {\n            if (l(i)\
    \ < l(i - 1)) inc = false\n            if (l(i) > l(i - 1)) dec = false\n    \
    \    }\n        return inc || dec\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799508
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n  \
    \      increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        val diffs = l.sliding(2).map(x\
    \ => x(1) - x(0)).toList\n        val diff = diffs(0)\n        diffs.forall(x\
    \ => x == diff)\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpczvhe9hf.scala:18)\n\tat Problem.main(tmpczvhe9hf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799508
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.size == 1) true\n        else if (l.size == 2)\
    \ true\n        else {\n            val d = l(1) - l(0)\n            for (i <-\
    \ 2 until l.size) {\n                if (d * (l(i) - l(i - 1)) < 0) return false\n\
    \            }\n            true\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799508
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.size <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.size) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799508
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val n = l.length\n        if (n <= 1) return true\n \
    \       var increasing = l(0) <= l(1)\n        for (i <- 1 until n - 1) {\n  \
    \          if (increasing && l(i) > l(i + 1)) return false\n            if (!increasing\
    \ && l(i) < l(i + 1)) return false\n        }\n        return true\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799508
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        var direction\
    \ = 0\n        for (i <- 1 until l.length) {\n            if (direction == 0)\
    \ {\n                if (l(i) > l(i - 1)) direction = 1\n                else\
    \ if (l(i) < l(i - 1)) direction = -1\n            }\n            else if (direction\
    \ == 1) {\n                if (l(i) < l(i - 1)) return false\n            }\n\
    \            else if (direction == -1) {\n                if (l(i) > l(i - 1))\
    \ return false\n            }\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799508
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n  \
    \      return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799507
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length == 1) return true\n        val s = l.sliding(2).toList\n\
    \        val d = s.map(x => x(1) - x(0))\n        val ds = d.distinct\n      \
    \  if (ds.length == 1) return true\n        if (ds.length == 2) {\n          \
    \  if (ds.contains(0l)) return true\n            if (ds.contains(1l) && ds.contains(-1l))\
    \ return true\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpotgba9dm.scala:24)\n\tat Problem.main(tmpotgba9dm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799508
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n  \
    \      return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799507
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n            if (l(i) < l(i\
    \ - 1)) increasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length == 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 0 until l.length -\
    \ 1) {\n            if (l(i) > l(i + 1)) increasing = false\n            if (l(i)\
    \ < l(i + 1)) decreasing = false\n        }\n        increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.size == 1) return true\n        val inc = l(0)\
    \ < l(1)\n        for (i <- 1 until l.size - 1) if (inc && l(i) > l(i + 1) ||\
    \ !inc && l(i) < l(i + 1)) return false\n        true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length == 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n  \
    \      return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799507
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val n = l.length\n        var i = 0\n        var increasing\
    \ = true\n        var decreasing = true\n        while (i < n - 1) {\n       \
    \     if (l(i) > l(i + 1)) increasing = false\n            if (l(i) < l(i + 1))\
    \ decreasing = false\n            i += 1\n        }\n        increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        val diffs = l.sliding(2).map(x\
    \ => x(1) - x(0)).toList\n        val diff = diffs(0)\n        diffs.forall(x\
    \ => x == diff)\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpczvhe9hf.scala:18)\n\tat Problem.main(tmpczvhe9hf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799508
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val n = l.length\n        if (n == 1) return true\n \
    \       var i = 1\n        var increasing = true\n        var decreasing = true\n\
    \        while (i < n) {\n            if (l(i) < l(i - 1)) increasing = false\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n            i += 1\n   \
    \     }\n        return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.size == 1) true\n        else {\n            val\
    \ diff = l.tail.zip(l).map(x => x._1 - x._2)\n            diff.forall(x => x ==\
    \ 0) || diff.forall(x => x > 0) || diff.forall(x => x < 0)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp164zm35q.scala:23)\n\tat Problem.main(tmp164zm35q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length == 1) return true\n        var increasing\
    \ = l(0) < l(1)\n        for (i <- 1 until l.length - 1) {\n            if (increasing)\
    \ {\n                if (l(i) > l(i + 1)) return false\n            } else {\n\
    \                if (l(i) < l(i + 1)) return false\n            }\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n  \
    \      increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length == 1) true\n        else if (l.length ==\
    \ 2) true\n        else {\n            val diffs = l.sliding(2).map(x => x(1)\
    \ - x(0)).toList\n            if (diffs.forall(x => x > 0)) true\n           \
    \ else if (diffs.forall(x => x < 0)) true\n            else false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfcxicolm.scala:26)\n\tat Problem.main(tmpfcxicolm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799519
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length == 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val n = l.length\n        if (n == 1) return true\n \
    \       var i = 1\n        var increasing = true\n        var decreasing = true\n\
    \        while (i < n) {\n            if (l(i) < l(i - 1)) increasing = false\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n            i += 1\n   \
    \     }\n        return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length == 1) return true\n        var increasing\
    \ = l(0) < l(1)\n        for (i <- 1 until l.length - 1) {\n            if (increasing\
    \ && l(i) > l(i + 1)) return false\n            if (!increasing && l(i) < l(i\
    \ + 1)) return false\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        val d = l(1)\
    \ - l(0)\n        for (i <- 1 until l.length) {\n            if (d * (l(i) - l(i\
    \ - 1)) < 0) return false\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val n = l.length\n        if (n <= 1) return true\n \
    \       var increasing = true\n        var decreasing = true\n        for (i <-\
    \ 1 until n) {\n            if (l(i) < l(i - 1)) increasing = false\n        \
    \    if (l(i) > l(i - 1)) decreasing = false\n        }\n        increasing ||\
    \ decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        val diffs = l.sliding(2).map(x\
    \ => x(1) - x(0)).toList\n        val first = diffs(0)\n        diffs.forall(x\
    \ => x == first)\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2nbhsqzm.scala:18)\n\tat Problem.main(tmp2nbhsqzm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799519
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        var prev = l(0)\n        var increasing = true\n    \
    \    var decreasing = true\n        for (i <- 1 until l.length) {\n          \
    \  if (l(i) > prev) decreasing = false\n            if (l(i) < prev) increasing\
    \ = false\n            prev = l(i)\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799519
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val diffs = l.sliding(2).map(x => x(1) - x(0)).toList\n\
    \        diffs.forall(x => x == 0) || diffs.forall(x => x > 0) || diffs.forall(x\
    \ => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcc35ohzz.scala:20)\n\tat Problem.main(tmpcc35ohzz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        var i = 0\n  \
    \      var increasing = true\n        while (i < l.length - 1) {\n           \
    \ if (l(i) > l(i + 1)) increasing = false\n            i += 1\n        }\n   \
    \     i = 0\n        var decreasing = true\n        while (i < l.length - 1) {\n\
    \            if (l(i) < l(i + 1)) decreasing = false\n            i += 1\n   \
    \     }\n        return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n  \
    \      increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val n = l.length\n        if (n <= 1) return true\n \
    \       var i = 1\n        var increasing = true\n        var decreasing = true\n\
    \        while (i < n) {\n            if (l(i) > l(i - 1)) decreasing = false\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            i += 1\n   \
    \     }\n        return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val n = l.length\n        if (n == 1) return true\n \
    \       val d = l(1) - l(0)\n        for (i <- 1 until n) {\n            if (d\
    \ * (l(i) - l(i - 1)) < 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799507
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n            if (l(i) < l(i\
    \ - 1)) increasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.size == 1) return true\n        val diff = l(1)\
    \ - l(0)\n        for (i <- 1 until l.size) {\n            if (diff * (l(i) -\
    \ l(i - 1)) < 0) return false\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        val d = l(1) -\
    \ l(0)\n        for (i <- 2 until l.length) {\n            if (d * (l(i) - l(i\
    \ - 1)) < 0) return false\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n            if (l(i) < l(i\
    \ - 1)) increasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n            if (l(i) < l(i\
    \ - 1)) increasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) true\n        else {\n            val\
    \ diffs = l.sliding(2).map(x => x(1) - x(0)).toList\n            val sign = diffs.head\n\
    \            diffs.forall(x => x == sign || x == 0)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyvt6i92r.scala:20)\n\tat Problem.main(tmpyvt6i92r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799519
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        var increasing\
    \ = l(0) < l(1)\n        for (i <- 1 until l.length - 1) {\n            if (increasing\
    \ && l(i) > l(i + 1)) return false\n            if (!increasing && l(i) < l(i\
    \ + 1)) return false\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) true\n        else {\n           \
    \ val d = l(1) - l(0)\n            l.sliding(2).forall(x => (x(1) - x(0)) * d\
    \ >= 0)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799519
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val n = l.length\n        if (n <= 1) return true\n \
    \       var increasing = true\n        var decreasing = true\n        for (i <-\
    \ 0 until n - 1) {\n            if (l(i) > l(i + 1)) increasing = false\n    \
    \        if (l(i) < l(i + 1)) decreasing = false\n        }\n        increasing\
    \ || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799519
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length == 1) return true\n        var increasing\
    \ = l(0) < l(1)\n        for (i <- 1 until l.length - 1) {\n            if (increasing\
    \ && l(i) > l(i + 1)) return false\n            if (!increasing && l(i) < l(i\
    \ + 1)) return false\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.size == 1) return true\n        var increasing\
    \ = l(0) < l(1)\n        for (i <- 1 until l.size - 1) {\n            if (increasing)\
    \ {\n                if (l(i) > l(i + 1)) return false\n            } else {\n\
    \                if (l(i) < l(i + 1)) return false\n            }\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799519
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length == 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length == 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n            if (l(i) < l(i\
    \ - 1)) increasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799519
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 0 until l.length -\
    \ 1) {\n            if (l(i) > l(i + 1)) increasing = false\n            if (l(i)\
    \ < l(i + 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        val diff = l(1)\
    \ - l(0)\n        for (i <- 1 until l.length) {\n            if (diff * (l(i)\
    \ - l(i - 1)) < 0) return false\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799529
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        val diffs = l.sliding(2).map(x\
    \ => x(1) - x(0)).toList\n        val first = diffs(0)\n        diffs.forall(x\
    \ => x == first)\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmr7zmbyn.scala:18)\n\tat Problem.main(tmpmr7zmbyn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799529
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        val diffs = l.sliding(2).map(x\
    \ => x(1) - x(0)).toList\n        if (diffs.forall(x => x >= 0)) return true\n\
    \        if (diffs.forall(x => x <= 0)) return true\n        return false\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799529
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val sign = l.head - l.tail.head\n        l.tail.tail.forall(x\
    \ => sign * (x - l.tail.head) >= 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3j1di4ob.scala:16)\n\tat Problem.main(tmp3j1di4ob.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799529
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 0 until l.length -\
    \ 1) {\n            if (l(i) > l(i + 1)) increasing = false\n            if (l(i)\
    \ < l(i + 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799508
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length == 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length == 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length == 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        val d = l(1)\
    \ - l(0)\n        for (i <- 1 until l.length) {\n            if (d * (l(i) - l(i\
    \ - 1)) < 0) return false\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        val inc = l(0)\
    \ < l(1)\n        for (i <- 1 until l.length - 1) {\n            if (inc && l(i)\
    \ > l(i + 1)) return false\n            if (!inc && l(i) < l(i + 1)) return false\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799529
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n            if (l(i) < l(i\
    \ - 1)) increasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val n = l.length\n        var increasing = true\n   \
    \     var decreasing = true\n        for (i <- 1 until n) {\n            if (l(i)\
    \ < l(i - 1)) increasing = false\n            if (l(i) > l(i - 1)) decreasing\
    \ = false\n        }\n        return increasing || decreasing\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 0 until l.length - 1) {\n            if (l(i) > l(i + 1)) increasing\
    \ = false\n            if (l(i) < l(i + 1)) decreasing = false\n        }\n  \
    \      increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length == 1) return true\n        val diff = l(1)\
    \ - l(0)\n        for (i <- 1 until l.length) {\n            if (diff * (l(i)\
    \ - l(i - 1)) < 0) return false\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799529
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length == 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        val diffs = l.sliding(2).map(x\
    \ => x(1) - x(0)).toList\n        val first = diffs(0)\n        diffs.forall(x\
    \ => x == first)\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2nbhsqzm.scala:18)\n\tat Problem.main(tmp2nbhsqzm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799519
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val n = l.length\n        var i = 0\n        while (i\
    \ < n - 1) {\n            if (l(i) == l(i + 1)) {\n                i += 1\n  \
    \          } else {\n                return l.slice(i, n).sorted == l.slice(i,\
    \ n) || l.slice(i, n).sorted.reverse == l.slice(i, n)\n            }\n       \
    \ }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799529
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        val diff = l(1)\
    \ - l(0)\n        for (i <- 1 until l.length - 1) {\n            if (diff * (l(i\
    \ + 1) - l(i)) < 0) return false\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799529
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.size == 1) return true\n        val diff = l(1)\
    \ - l(0)\n        for (i <- 1 until l.size) {\n            if (diff * (l(i) -\
    \ l(i - 1)) < 0) return false\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val n = l.length\n        if (n <= 1) return true\n \
    \       val d = l(1) - l(0)\n        for (i <- 1 until n) {\n            if (d\
    \ * (l(i) - l(i - 1)) < 0) return false\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799529
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.size <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 0 until l.size - 1)\
    \ {\n            if (l(i) > l(i + 1)) increasing = false\n            if (l(i)\
    \ < l(i + 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799529
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n  \
    \      increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.size == 1) true\n        else if (l.size == 2)\
    \ true\n        else {\n            val diffs = l.sliding(2).map(x => x(1) - x(0)).toList\n\
    \            if (diffs.forall(x => x > 0)) true\n            else if (diffs.forall(x\
    \ => x < 0)) true\n            else false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp51vwotbq.scala:26)\n\tat Problem.main(tmp51vwotbq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799529
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        val diff = l(1)\
    \ - l(0)\n        for (i <- 1 until l.length) {\n            if (diff * (l(i)\
    \ - l(i - 1)) < 0) return false\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.size <= 1) return true\n        var increasing\
    \ = l(0) < l(1)\n        for (i <- 1 until l.size - 1) {\n            if (increasing)\
    \ {\n                if (l(i) > l(i + 1)) return false\n            } else {\n\
    \                if (l(i) < l(i + 1)) return false\n            }\n        }\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799529
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val diffs = l.sliding(2).map(x => x(1) - x(0)).toList\n\
    \        diffs.forall(x => x == 0) || diffs.forall(x => x > 0) || diffs.forall(x\
    \ => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcc35ohzz.scala:20)\n\tat Problem.main(tmpcc35ohzz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        val sign = l(1)\
    \ - l(0)\n        for (i <- 1 until l.length) {\n            if (sign * (l(i)\
    \ - l(i - 1)) < 0) return false\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n  \
    \      increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n  \
    \      return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799507
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val n = l.length\n        var increasing = true\n   \
    \     var decreasing = true\n        for (i <- 1 until n) {\n            if (l(i)\
    \ < l(i - 1)) increasing = false\n            if (l(i) > l(i - 1)) decreasing\
    \ = false\n        }\n        increasing || decreasing\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799530
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length == 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length == 1) return true\n        val diff = l(1)\
    \ - l(0)\n        for (i <- 1 until l.length) {\n            if (diff * (l(i)\
    \ - l(i - 1)) < 0) return false\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799529
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val n = l.length\n        if (n <= 1) return true\n \
    \       var increasing = true\n        var decreasing = true\n        for (i <-\
    \ 1 until n) {\n            if (l(i) < l(i - 1)) increasing = false\n        \
    \    if (l(i) > l(i - 1)) decreasing = false\n        }\n        increasing ||\
    \ decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length == 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        val diff = l(1)\
    \ - l(0)\n        for (i <- 1 until l.length) {\n            if (diff * (l(i)\
    \ - l(i - 1)) < 0) return false\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799529
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n  \
    \      return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799507
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1)\n            return true\n       \
    \ var increasing = true\n        var decreasing = true\n        for (i <- 0 until\
    \ l.length - 1) {\n            if (l(i) > l(i + 1))\n                increasing\
    \ = false\n            if (l(i) < l(i + 1))\n                decreasing = false\n\
    \        }\n        return increasing || decreasing\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799530
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n  \
    \      increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n            if (l(i) < l(i\
    \ - 1)) increasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.size < 2) return true\n        val diff = l(1)\
    \ - l(0)\n        for (i <- 1 until l.size) {\n            if (diff * (l(i) -\
    \ l(i - 1)) < 0) return false\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799529
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length == 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length == 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length == 1) true\n        else {\n           \
    \ val diffs = l.sliding(2).map(x => x(1) - x(0)).toList\n            val first\
    \ = diffs(0)\n            val same = diffs.forall(x => x == first)\n         \
    \   val increasing = diffs.forall(x => x >= 0)\n            val decreasing = diffs.forall(x\
    \ => x <= 0)\n            same && (increasing || decreasing)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps9tgeblr.scala:23)\n\tat Problem.main(tmps9tgeblr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799529
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.size < 2) return true\n        var increasing =\
    \ true\n        var decreasing = true\n        for (i <- 1 until l.size) {\n \
    \           if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799529
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.size <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.size) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799508
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n            if (l(i) < l(i\
    \ - 1)) increasing = false\n        }\n        increasing || decreasing\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799529
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length == 1) return true\n        var inc = true\n\
    \        var dec = true\n        for (i <- 1 until l.length) {\n            if\
    \ (l(i) < l(i - 1)) inc = false\n            if (l(i) > l(i - 1)) dec = false\n\
    \        }\n        return inc || dec\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799529
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        val diffs = l.sliding(2).map(x\
    \ => x(1) - x(0)).toList\n        val first = diffs(0)\n        diffs.forall(x\
    \ => x == first)\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmr7zmbyn.scala:18)\n\tat Problem.main(tmpmr7zmbyn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799529
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n  \
    \      return increasing || decreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799507
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n  \
    \      increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) > l(i - 1)) decreasing = false\n            if (l(i) < l(i\
    \ - 1)) increasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val n = l.length\n        if (n == 1) return true\n \
    \       var i = 1\n        var increasing = l(i) > l(i - 1)\n        while (i\
    \ < n) {\n            if (increasing && l(i) < l(i - 1)) return false\n      \
    \      if (!increasing && l(i) > l(i - 1)) return false\n            i += 1\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799530
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 0 until l.length - 1) {\n            if (l(i) > l(i + 1)) increasing\
    \ = false\n            if (l(i) < l(i + 1)) decreasing = false\n        }\n  \
    \      increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) > l(i - 1)) decreasing\
    \ = false\n            if (l(i) < l(i - 1)) increasing = false\n        }\n  \
    \      increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n  \
    \      increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) increasing\
    \ = false\n            if (l(i) > l(i - 1)) decreasing = false\n        }\n  \
    \      increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        var increasing = true\n        var decreasing = true\n\
    \        for (i <- 1 until l.length) {\n            if (l(i) < l(i - 1)) {\n \
    \               increasing = false\n            }\n            if (l(i) > l(i\
    \ - 1)) {\n                decreasing = false\n            }\n        }\n    \
    \    increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799530
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length == 1) true\n        else {\n           \
    \ val diffs = l.sliding(2).map(x => x(1) - x(0)).toList\n            val diff\
    \ = diffs(0)\n            diffs.forall(x => x == diff)\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxf9u35r9.scala:20)\n\tat Problem.main(tmpxf9u35r9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799529
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        val diffs = l.zip(l.tail).map(x\
    \ => x._2 - x._1)\n        val diff = diffs(0)\n        diffs.forall(x => x ==\
    \ diff)\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4xourpd9.scala:18)\n\tat Problem.main(tmp4xourpd9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799530
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.size == 1) return true\n        val diffs = l.sliding(2).map(x\
    \ => x(1) - x(0)).toList\n        if (diffs.forall(x => x > 0)) return true\n\
    \        if (diffs.forall(x => x < 0)) return true\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvcq4tsmp.scala:23)\n\tat Problem.main(tmpvcq4tsmp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799496
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length <= 1) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length < 2) return true\n        var increasing\
    \ = true\n        var decreasing = true\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) < l(i - 1)) increasing = false\n            if (l(i) > l(i\
    \ - 1)) decreasing = false\n        }\n        return increasing || decreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799497
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return true is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        if (l.length == 1) return true\n        var increasing\
    \ = l(0) < l(1)\n        for (i <- 1 until l.length - 1) {\n            if (increasing\
    \ && l(i) > l(i + 1)) return false\n            if (!increasing && l(i) < l(i\
    \ + 1)) return false\n        }\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799518
