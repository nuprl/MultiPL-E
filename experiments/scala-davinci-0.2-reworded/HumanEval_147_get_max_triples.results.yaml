language: scala
name: HumanEval_147_get_max_triples
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // We can use the fact that\
    \ a[i] = i * i - i + 1 is a multiple of 3 if and only if i is a multiple of 3.\n\
    \        // So we can count the number of multiples of 3 in the list.\n      \
    \  // There are n / 3 multiples of 3 in the list.\n        // For each multiple\
    \ of 3, we can choose 2 other multiples of 3.\n        // So the number of triples\
    \ is (n / 3) * (n / 3 - 1) / 2.\n        (n / 3) * (n / 3 - 1) / 2\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpduqy1t06.scala:23)\n\tat Problem.main(tmpduqy1t06.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797923
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Good luck!\n        0\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpam3il854.scala:19)\n\tat Problem.main(tmpam3il854.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // We can use a greedy algorithm\
    \ to find the maximum number of triples.\n        // We will iterate through the\
    \ list, and for each element, we will add it to the triple if it is valid.\n \
    \       // If it is not valid, we will add it to the next triple.\n        //\
    \ We will keep track of the number of valid triples.\n        // We will also\
    \ keep track of the number of elements that are not valid for the current triple.\n\
    \        // If the number of elements that are not valid for the current triple\
    \ is greater than 2,\n        // then we will start a new triple.\n        //\
    \ We will also keep track of the sum of the elements in the current triple.\n\
    \        // If the sum is greater than 3, then we will start a new triple.\n \
    \       // We will also keep track of the number of elements that are not valid\
    \ for the current triple.\n        // If the number of elements that are not valid\
    \ for the current triple is greater than 2,\n        // then we will start a new\
    \ triple.\n        // We will also keep track of the sum of the elements in the\
    \ current triple.\n        // If the sum is greater than 3, then we will start\
    \ a new triple.\n        // We will also keep track of the number of elements\
    \ that are not valid for the current triple.\n        // If the number of elements\
    \ that are not valid for the current triple is greater than 2,\n        // then\
    \ we will start a new triple.\n        // We will also keep track of the sum of\
    \ the elements in the current triple.\n        // If the sum is greater than 3,\
    \ then we will start a new triple.\n        // We will also keep track of the\
    \ number of elements that are not valid for the current triple.\n        // If\
    \ the number of elements that are not valid for the current triple is greater\
    \ than 2,\n        // then we will start a new triple.\n        // We will also\
    \ keep track of the sum of the elements in the current triple.\n        // If\
    \ the sum is greater than 3, then we will start a new triple.\n        // We will\
    \ also keep track of the number of elements that are not valid for the current\
    \ triple.\n        // If the number of elements that are not valid for the current\
    \ triple is greater than 2,\n        // then we will start a new triple.\n   \
    \     // We will also keep track of the sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp84pzx61e.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// We\
    \ can use a greedy algorithm to find the maximum number of triples.\e[0m\n\e[31m16\
    \ |\e[0m        \e[34m// We will iterate through the list, and for each element,\
    \ we will add it to the triple if it is valid.\e[0m\n\e[31m17 |\e[0m        \e\
    [34m// If it is not valid, we will add it to the next triple.\e[0m\n\e[31m18 |\e\
    [0m        \e[34m// We will keep track of the number of valid triples.\e[0m\n\e\
    [31m19 |\e[0m        \e[34m// We will also keep track of the number of elements\
    \ that are not valid for the current triple.\e[0m\n\e[31m20 |\e[0m        \e[34m//\
    \ If the number of elements that are not valid for the current triple is greater\
    \ than 2,\e[0m\n\e[31m21 |\e[0m        \e[34m// then we will start a new triple.\e\
    [0m\n\e[31m22 |\e[0m        \e[34m// We will also keep track of the sum of the\
    \ elements in the current triple.\e[0m\n\e[31m23 |\e[0m        \e[34m// If the\
    \ sum is greater than 3, then we will start a new triple.\e[0m\n\e[31m24 |\e[0m\
    \        \e[34m// We will also keep track of the number of elements that are not\
    \ valid for the current triple.\e[0m\n\e[31m25 |\e[0m        \e[34m// If the number\
    \ of elements that are not valid for the current triple is greater than 2,\e[0m\n\
    \e[31m26 |\e[0m        \e[34m// then we will start a new triple.\e[0m\n\e[31m27\
    \ |\e[0m        \e[34m// We will also keep track of the sum of the elements in\
    \ the current triple.\e[0m\n\e[31m28 |\e[0m        \e[34m// If the sum is greater\
    \ than 3, then we will start a new triple.\e[0m\n\e[31m29 |\e[0m        \e[34m//\
    \ We will also keep track of the number of elements that are not valid for the\
    \ current triple.\e[0m\n\e[31m30 |\e[0m        \e[34m// If the number of elements\
    \ that are not valid for the"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // We can see that the sequence\
    \ is increasing.\n        // We can also see that the sequence is periodic.\n\
    \        // We can also see that the sequence is a multiple of 3.\n        //\
    \ We can also see that the sequence is a multiple of 2.\n        // We can also\
    \ see that the sequence is a multiple of 4.\n        // We can also see that the\
    \ sequence is a multiple of 6.\n        // We can also see that the sequence is\
    \ a multiple of 12.\n        // We can also see that the sequence is a multiple\
    \ of 24.\n        // We can also see that the sequence is a multiple of 48.\n\
    \        // We can also see that the sequence is a multiple of 96.\n        //\
    \ We can also see that the sequence is a multiple of 192.\n        // We can also\
    \ see that the sequence is a multiple of 384.\n        // We can also see that\
    \ the sequence is a multiple of 768.\n        // We can also see that the sequence\
    \ is a multiple of 1536.\n        // We can also see that the sequence is a multiple\
    \ of 3072.\n        // We can also see that the sequence is a multiple of 6144.\n\
    \        // We can also see that the sequence is a multiple of 12288.\n      \
    \  // We can also see that the sequence is a multiple of 24576.\n        // We\
    \ can also see that the sequence is a multiple of 49152.\n        // We can also\
    \ see that the sequence is a multiple of 98304.\n        // We can also see that\
    \ the sequence is a multiple of 196608.\n        // We can also see that the sequence\
    \ is a multiple of 393216.\n        // We can also see that the sequence is a\
    \ multiple of 786432.\n        // We can also see that the sequence is a multiple\
    \ of 1572864.\n        // We can also see that the sequence is a multiple of 3145728.\n\
    \        // We can also see that the sequence is a multiple of 6291456.\n    \
    \    // We can also see that the sequence is a multiple of 12582912.\n       \
    \ // We can also see that the sequence is a multiple of 25165824.\n        //\
    \ We can also see that the sequence is a multiple of 50331648.\n        // We\
    \ can also see that the sequence is a multiple of 100663296.\n        // We can\
    \ also see that the\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmped1po356.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// We\
    \ can see that the sequence is increasing.\e[0m\n\e[31m16 |\e[0m        \e[34m//\
    \ We can also see that the sequence is periodic.\e[0m\n\e[31m17 |\e[0m       \
    \ \e[34m// We can also see that the sequence is a multiple of 3.\e[0m\n\e[31m18\
    \ |\e[0m        \e[34m// We can also see that the sequence is a multiple of 2.\e\
    [0m\n\e[31m19 |\e[0m        \e[34m// We can also see that the sequence is a multiple\
    \ of 4.\e[0m\n\e[31m20 |\e[0m        \e[34m// We can also see that the sequence\
    \ is a multiple of 6.\e[0m\n\e[31m21 |\e[0m        \e[34m// We can also see that\
    \ the sequence is a multiple of 12.\e[0m\n\e[31m22 |\e[0m        \e[34m// We can\
    \ also see that the sequence is a multiple of 24.\e[0m\n\e[31m23 |\e[0m      \
    \  \e[34m// We can also see that the sequence is a multiple of 48.\e[0m\n\e[31m24\
    \ |\e[0m        \e[34m// We can also see that the sequence is a multiple of 96.\e\
    [0m\n\e[31m25 |\e[0m        \e[34m// We can also see that the sequence is a multiple\
    \ of 192.\e[0m\n\e[31m26 |\e[0m        \e[34m// We can also see that the sequence\
    \ is a multiple of 384.\e[0m\n\e[31m27 |\e[0m        \e[34m// We can also see\
    \ that the sequence is a multiple of 768.\e[0m\n\e[31m28 |\e[0m        \e[34m//\
    \ We can also see that the sequence is a multiple of 1536.\e[0m\n\e[31m29 |\e\
    [0m        \e[34m// We can also see that the sequence is a multiple of 3072.\e\
    [0m\n\e[31m30 |\e[0m        \e[34m// We can also see that the sequence is a multiple\
    \ of 6144.\e[0m\n\e[31m31 |\e[0m        \e[34m// We can also see that the sequence\
    \ is a multiple of 12288.\e[0m\n\e[31m32 |\e[0m        \e[34m// We can also see\
    \ that the sequence is a multiple of 24576.\e[0m\n\e[31m33 |\e[0m        \e[34m//\
    \ We can also see that the sequence is a m"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0l\n        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797923
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt1vxoa1w.scala:19)\n\tat Problem.main(tmpt1vxoa1w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0l\n        for (i <- 0 until n.toInt) {\n            for (j <- i + 1 until\
    \ n.toInt) {\n                for (k <- j + 1 until n.toInt) {\n             \
    \       if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n   \
    \         }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpba0j0pr6.scala:28)\n\tat Problem.main(tmpba0j0pr6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // We can use the fact that\
    \ a[i] = i * i - i + 1 is a multiple of 3 iff i is a multiple of 3.\n        //\
    \ So we can count the number of triples (a[i], a[j], a[k]) of a where i < j <\
    \ k, \n        // and a[i] + a[j] + a[k] is a multiple of 3.\n        // We can\
    \ count the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    \
    \    // and a[i] + a[j] + a[k] is a multiple of 3.\n        // We can count the\
    \ number of triples (a[i], a[j], a[k]) of a where i < j < k, \n        // and\
    \ a[i] + a[j] + a[k] is a multiple of 3.\n        // We can count the number of\
    \ triples (a[i], a[j], a[k]) of a where i < j < k, \n        // and a[i] + a[j]\
    \ + a[k] is a multiple of 3.\n        // We can count the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \n        // and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\n        // We can count the number of triples (a[i], a[j], a[k]) of a\
    \ where i < j < k, \n        // and a[i] + a[j] + a[k] is a multiple of 3.\n \
    \       // We can count the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n        // and a[i] + a[j] + a[k] is a multiple of 3.\n        //\
    \ We can count the number of triples (a[i], a[j], a[k]) of a where i < j < k,\
    \ \n        // and a[i] + a[j] + a[k] is a multiple of 3.\n        // We can count\
    \ the number of triples (\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1j0we79z.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// We\
    \ can use the fact that a[i] = i * i - i + 1 is a multiple of 3 iff i is a multiple\
    \ of 3.\e[0m\n\e[31m16 |\e[0m        \e[34m// So we can count the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \e[0m\n\e[31m17 |\e[0m        \e[34m//\
    \ and a[i] + a[j] + a[k] is a multiple of 3.\e[0m\n\e[31m18 |\e[0m        \e[34m//\
    \ We can count the number of triples (a[i], a[j], a[k]) of a where i < j < k,\
    \ \e[0m\n\e[31m19 |\e[0m        \e[34m// and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\e[0m\n\e[31m20 |\e[0m        \e[34m// We can count the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \e[0m\n\e[31m21 |\e[0m        \e[34m//\
    \ and a[i] + a[j] + a[k] is a multiple of 3.\e[0m\n\e[31m22 |\e[0m        \e[34m//\
    \ We can count the number of triples (a[i], a[j], a[k]) of a where i < j < k,\
    \ \e[0m\n\e[31m23 |\e[0m        \e[34m// and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\e[0m\n\e[31m24 |\e[0m        \e[34m// We can count the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \e[0m\n\e[31m25 |\e[0m        \e[34m//\
    \ and a[i] + a[j] + a[k] is a multiple of 3.\e[0m\n\e[31m26 |\e[0m        \e[34m//\
    \ We can count the number of triples (a[i], a[j], a[k]) of a where i < j < k,\
    \ \e[0m\n\e[31m27 |\e[0m        \e[34m// and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\e[0m\n\e[31m28 |\e[0m        \e[34m// We can count the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \e[0m\n\e[31m29 |\e[0m        \e[34m//\
    \ and a[i] + a[j] + a[k] is a multiple of 3.\e[0m\n\e[31m30 |\e[0m        \e[34m//\
    \ We can count the number of triples (a[i], a[j], a[k]) of a where i < j < k,\
    \ \e[0m\n\e[31m31 |\e[0m        \e[34m// and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\e[0m\n\e[31m32 |\e[0m        \e[34m// W"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0l\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6tktpwy_.scala:28)\n\tat Problem.main(tmp6tktpwy_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // We can use the fact that\
    \ a[i] = i * i - i + 1 is always odd.\n        // So, we can only have a[i] +\
    \ a[j] + a[k] = 3 * x for some integer x.\n        // So, we can only have a[i]\
    \ + a[j] = 3 * x - a[k].\n        // We can use a hashmap to store the number\
    \ of times a[i] + a[j] = 3 * x - a[k] for each x.\n        // Then, we can iterate\
    \ through the hashmap to find the number of times a[i] + a[j] + a[k] = 3 * x.\n\
    \        // This is because we can have a[i] + a[j] + a[k] = 3 * x if and only\
    \ if a[i] + a[j] = 3 * x - a[k]\n        // and a[j] + a[k] = 3 * x - a[i].\n\
    \        // We can use the fact that a[i] + a[j] = 3 * x - a[k] if and only if\
    \ a[j] + a[k] = 3 * x - a[i].\n        // This is because a[i] + a[j] = 3 * x\
    \ - a[k] if and only if a[j] + a[k] = 3 * x - a[i].\n        // This is because\
    \ a[i] + a[j] = 3 * x - a[k] if and only if a[j] + a[k] = 3 * x - a[i].\n    \
    \    // This is because a[i] + a[j] = 3 * x - a[k] if and only if a[j] + a[k]\
    \ = 3 * x - a[i].\n        // This is because a[i] + a[j] = 3 * x - a[k] if and\
    \ only if a[j] + a[k] = 3 * x - a[i].\n        // This is because a[i] + a[j]\
    \ = 3 * x - a[k] if and only if a[j] + a[k] = 3 * x - a[i].\n        //\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2da8e1wf.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// We\
    \ can use the fact that a[i] = i * i - i + 1 is always odd.\e[0m\n\e[31m16 |\e\
    [0m        \e[34m// So, we can only have a[i] + a[j] + a[k] = 3 * x for some integer\
    \ x.\e[0m\n\e[31m17 |\e[0m        \e[34m// So, we can only have a[i] + a[j] =\
    \ 3 * x - a[k].\e[0m\n\e[31m18 |\e[0m        \e[34m// We can use a hashmap to\
    \ store the number of times a[i] + a[j] = 3 * x - a[k] for each x.\e[0m\n\e[31m19\
    \ |\e[0m        \e[34m// Then, we can iterate through the hashmap to find the\
    \ number of times a[i] + a[j] + a[k] = 3 * x.\e[0m\n\e[31m20 |\e[0m        \e\
    [34m// This is because we can have a[i] + a[j] + a[k] = 3 * x if and only if a[i]\
    \ + a[j] = 3 * x - a[k]\e[0m\n\e[31m21 |\e[0m        \e[34m// and a[j] + a[k]\
    \ = 3 * x - a[i].\e[0m\n\e[31m22 |\e[0m        \e[34m// We can use the fact that\
    \ a[i] + a[j] = 3 * x - a[k] if and only if a[j] + a[k] = 3 * x - a[i].\e[0m\n\
    \e[31m23 |\e[0m        \e[34m// This is because a[i] + a[j] = 3 * x - a[k] if\
    \ and only if a[j] + a[k] = 3 * x - a[i].\e[0m\n\e[31m24 |\e[0m        \e[34m//\
    \ This is because a[i] + a[j] = 3 * x - a[k] if and only if a[j] + a[k] = 3 *\
    \ x - a[i].\e[0m\n\e[31m25 |\e[0m        \e[34m// This is because a[i] + a[j]\
    \ = 3 * x - a[k] if and only if a[j] + a[k] = 3 * x - a[i].\e[0m\n\e[31m26 |\e\
    [0m        \e[34m// This is because a[i] + a[j] = 3 * x - a[k] if and only if\
    \ a[j] + a[k] = 3 * x - a[i].\e[0m\n\e[31m27 |\e[0m        \e[34m// This is because\
    \ a[i] + a[j] = 3 * x - a[k] if and only if a[j] + a[k] = 3 * x - a[i].\e[0m\n\
    \e[31m28 |\e[0m        \e[34m//\e[0m\n\e[31m29 |\e[0m    }\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797923
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt1vxoa1w.scala:19)\n\tat Problem.main(tmpt1vxoa1w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797924
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0l\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6tktpwy_.scala:28)\n\tat Problem.main(tmp6tktpwy_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797923
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0l\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6tktpwy_.scala:28)\n\tat Problem.main(tmp6tktpwy_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797923
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0l\n        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797923
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var count = 0l\n        for\
    \ (i <- 1l to n) {\n            for (j <- i + 1l to n) {\n                for\
    \ (k <- j + 1l to n) {\n                    if ((i * i - i + 1 + j * j - j + 1\
    \ + k * k - k + 1) % 3 == 0) count += 1\n                }\n            }\n  \
    \      }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797923
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // We can use the fact that\
    \ a[i] = i * i - i + 1 is a multiple of 3 if and only if i is a multiple of 3.\n\
    \        // So we can count the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n        // and a[i] + a[j] + a[k] is a multiple of 3.\n       \
    \ // We can use the fact that a[i] + a[j] + a[k] is a multiple of 3 if and only\
    \ if i + j + k is a multiple of 3.\n        // So we can count the number of triples\
    \ (i, j, k) of a where i < j < k, and i + j + k is a multiple of 3.\n        //\
    \ We can use the fact that i + j + k is a multiple of 3 if and only if i + j is\
    \ a multiple of 3.\n        // So we can count the number of triples (i, j, k)\
    \ of a where i < j < k, and i + j is a multiple of 3.\n        // We can use the\
    \ fact that i + j is a multiple of 3 if and only if i is a multiple of 3.\n  \
    \      // So we can count the number of triples (i, j, k) of a where i < j < k,\
    \ and i is a multiple of 3.\n        // We can use the fact that i < j < k if\
    \ and only if i < j.\n        // So we can count the number of triples (i, j,\
    \ k) of a where i < j, and i is a multiple of 3.\n        // We can use the fact\
    \ that i < j if and only if i < j - 1.\n        // So we can count the number\
    \ of triples (i, j, k) of a where i < j - 1, and i is a multiple of 3.\n     \
    \   // We can use the fact that i < j - 1 if and only if i < j - 2.\n        //\
    \ So we can count the number of triples (i, j, k) of a where i < j - 2, and i\
    \ is a multiple of 3.\n        // We can use the fact that i < j - 2 if and only\
    \ if i < j - 3.\n\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqytg6lme.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// We\
    \ can use the fact that a[i] = i * i - i + 1 is a multiple of 3 if and only if\
    \ i is a multiple of 3.\e[0m\n\e[31m16 |\e[0m        \e[34m// So we can count\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \e[0m\n\e[31m17\
    \ |\e[0m        \e[34m// and a[i] + a[j] + a[k] is a multiple of 3.\e[0m\n\e[31m18\
    \ |\e[0m        \e[34m// We can use the fact that a[i] + a[j] + a[k] is a multiple\
    \ of 3 if and only if i + j + k is a multiple of 3.\e[0m\n\e[31m19 |\e[0m    \
    \    \e[34m// So we can count the number of triples (i, j, k) of a where i < j\
    \ < k, and i + j + k is a multiple of 3.\e[0m\n\e[31m20 |\e[0m        \e[34m//\
    \ We can use the fact that i + j + k is a multiple of 3 if and only if i + j is\
    \ a multiple of 3.\e[0m\n\e[31m21 |\e[0m        \e[34m// So we can count the number\
    \ of triples (i, j, k) of a where i < j < k, and i + j is a multiple of 3.\e[0m\n\
    \e[31m22 |\e[0m        \e[34m// We can use the fact that i + j is a multiple of\
    \ 3 if and only if i is a multiple of 3.\e[0m\n\e[31m23 |\e[0m        \e[34m//\
    \ So we can count the number of triples (i, j, k) of a where i < j < k, and i\
    \ is a multiple of 3.\e[0m\n\e[31m24 |\e[0m        \e[34m// We can use the fact\
    \ that i < j < k if and only if i < j.\e[0m\n\e[31m25 |\e[0m        \e[34m// So\
    \ we can count the number of triples (i, j, k) of a where i < j, and i is a multiple\
    \ of 3.\e[0m\n\e[31m26 |\e[0m        \e[34m// We can use the fact that i < j if\
    \ and only if i < j - 1.\e[0m\n\e[31m27 |\e[0m        \e[34m// So we can count\
    \ the number of triples (i, j, k) of a where i < j - 1, and i is a multiple of\
    \ 3.\e[0m\n\e[31m28 |\e[0m        \e[34m// We can use the fact that i < j - 1\
    \ if and only if i < j - 2.\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // We will use the fact that\
    \ a[i] = i * i - i + 1 is a multiple of 3 iff i is a multiple of 3.\n        //\
    \ So we will count the number of triples (a[i], a[j], a[k]) where i, j, k are\
    \ all multiples of 3.\n        // We will count the number of triples (a[i], a[j],\
    \ a[k]) where i, j, k are all multiples of 3.\n        // We will count the number\
    \ of triples (a[i], a[j], a[k]) where i, j, k are all multiples of 3.\n      \
    \  // We will count the number of triples (a[i], a[j], a[k]) where i, j, k are\
    \ all multiples of 3.\n        // We will count the number of triples (a[i], a[j],\
    \ a[k]) where i, j, k are all multiples of 3.\n        // We will count the number\
    \ of triples (a[i], a[j], a[k]) where i, j, k are all multiples of 3.\n      \
    \  // We will count the number of triples (a[i], a[j], a[k]) where i, j, k are\
    \ all multiples of 3.\n        // We will count the number of triples (a[i], a[j],\
    \ a[k]) where i, j, k are all multiples of 3.\n        // We will count the number\
    \ of triples (a[i], a[j], a[k]) where i, j, k are all multiples of 3.\n      \
    \  // We will count the number of triples (a[i], a[j], a[k]) where i, j, k are\
    \ all multiples of 3.\n        // We will count the number of triples (a[i], a[j],\
    \ a[k]) where i, j, k are all multiples of 3.\n        // We will count the number\
    \ of triples (a[i], a[j], a[k]) where i, j, k are all multiples of 3.\n      \
    \  // We will count the number of triples (a[i], a[j], a[k]) where i, j, k are\
    \ all\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzo9e359y.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// We\
    \ will use the fact that a[i] = i * i - i + 1 is a multiple of 3 iff i is a multiple\
    \ of 3.\e[0m\n\e[31m16 |\e[0m        \e[34m// So we will count the number of triples\
    \ (a[i], a[j], a[k]) where i, j, k are all multiples of 3.\e[0m\n\e[31m17 |\e\
    [0m        \e[34m// We will count the number of triples (a[i], a[j], a[k]) where\
    \ i, j, k are all multiples of 3.\e[0m\n\e[31m18 |\e[0m        \e[34m// We will\
    \ count the number of triples (a[i], a[j], a[k]) where i, j, k are all multiples\
    \ of 3.\e[0m\n\e[31m19 |\e[0m        \e[34m// We will count the number of triples\
    \ (a[i], a[j], a[k]) where i, j, k are all multiples of 3.\e[0m\n\e[31m20 |\e\
    [0m        \e[34m// We will count the number of triples (a[i], a[j], a[k]) where\
    \ i, j, k are all multiples of 3.\e[0m\n\e[31m21 |\e[0m        \e[34m// We will\
    \ count the number of triples (a[i], a[j], a[k]) where i, j, k are all multiples\
    \ of 3.\e[0m\n\e[31m22 |\e[0m        \e[34m// We will count the number of triples\
    \ (a[i], a[j], a[k]) where i, j, k are all multiples of 3.\e[0m\n\e[31m23 |\e\
    [0m        \e[34m// We will count the number of triples (a[i], a[j], a[k]) where\
    \ i, j, k are all multiples of 3.\e[0m\n\e[31m24 |\e[0m        \e[34m// We will\
    \ count the number of triples (a[i], a[j], a[k]) where i, j, k are all multiples\
    \ of 3.\e[0m\n\e[31m25 |\e[0m        \e[34m// We will count the number of triples\
    \ (a[i], a[j], a[k]) where i, j, k are all multiples of 3.\e[0m\n\e[31m26 |\e\
    [0m        \e[34m// We will count the number of triples (a[i], a[j], a[k]) where\
    \ i, j, k are all multiples of 3.\e[0m\n\e[31m27 |\e[0m        \e[34m// We will\
    \ count the number of triples (a[i], a[j], a[k]) where i, j, k are all multiples\
    \ of 3.\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0l)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0l\n        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Given a[i] = i * i - i\
    \ + 1, we have a[i] % 3 = (i * i - i + 1) % 3 = (i * i - i) % 3 = (i * i) % 3\
    \ - (i % 3)\n        // Since (i * i) % 3 = (i % 3) * (i % 3), we have a[i] %\
    \ 3 = (i % 3) * (i % 3) - (i % 3) = (i % 3) * ((i % 3) - 1)\n        // Since\
    \ (i % 3) * ((i % 3) - 1) = 0 iff i % 3 = 0 or i % 3 = 1, we have a[i] % 3 = 0\
    \ iff i % 3 = 0 or i % 3 = 1\n        // So, we have a[i] + a[j] + a[k] = 0 iff\
    \ (i % 3) + (j % 3) + (k % 3) = 0\n        // Since (i % 3) + (j % 3) + (k % 3)\
    \ = 0 iff (i % 3) + (j % 3) = 1, we have a[i] + a[j] + a[k] = 0 iff (i % 3) +\
    \ (j % 3) = 1\n        // So, we have a[i] + a[j] + a[k] = 0 iff (i % 3) + (j\
    \ % 3) = 1\n        // So, we have a[i] + a[j] + a[k] = 0 iff (i % 3) + (j % 3)\
    \ = 1\n        // So, we have a[i] + a[j] + a[k] = 0 iff (i % 3) + (j % 3) = 1\n\
    \        // So, we have a[i] + a[j] + a[k] = 0 iff (i % 3) + (j % 3) = 1\n   \
    \     // So, we have a[i] + a[j] + a[k] = 0 iff (i % 3) + (j % 3) = 1\n      \
    \  // So, we have a[i] + a[j] + a[k] = 0 if\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5mg5y6ki.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// Given\
    \ a[i] = i * i - i + 1, we have a[i] % 3 = (i * i - i + 1) % 3 = (i * i - i) %\
    \ 3 = (i * i) % 3 - (i % 3)\e[0m\n\e[31m16 |\e[0m        \e[34m// Since (i * i)\
    \ % 3 = (i % 3) * (i % 3), we have a[i] % 3 = (i % 3) * (i % 3) - (i % 3) = (i\
    \ % 3) * ((i % 3) - 1)\e[0m\n\e[31m17 |\e[0m        \e[34m// Since (i % 3) * ((i\
    \ % 3) - 1) = 0 iff i % 3 = 0 or i % 3 = 1, we have a[i] % 3 = 0 iff i % 3 = 0\
    \ or i % 3 = 1\e[0m\n\e[31m18 |\e[0m        \e[34m// So, we have a[i] + a[j] +\
    \ a[k] = 0 iff (i % 3) + (j % 3) + (k % 3) = 0\e[0m\n\e[31m19 |\e[0m        \e\
    [34m// Since (i % 3) + (j % 3) + (k % 3) = 0 iff (i % 3) + (j % 3) = 1, we have\
    \ a[i] + a[j] + a[k] = 0 iff (i % 3) + (j % 3) = 1\e[0m\n\e[31m20 |\e[0m     \
    \   \e[34m// So, we have a[i] + a[j] + a[k] = 0 iff (i % 3) + (j % 3) = 1\e[0m\n\
    \e[31m21 |\e[0m        \e[34m// So, we have a[i] + a[j] + a[k] = 0 iff (i % 3)\
    \ + (j % 3) = 1\e[0m\n\e[31m22 |\e[0m        \e[34m// So, we have a[i] + a[j]\
    \ + a[k] = 0 iff (i % 3) + (j % 3) = 1\e[0m\n\e[31m23 |\e[0m        \e[34m// So,\
    \ we have a[i] + a[j] + a[k] = 0 iff (i % 3) + (j % 3) = 1\e[0m\n\e[31m24 |\e\
    [0m        \e[34m// So, we have a[i] + a[j] + a[k] = 0 iff (i % 3) + (j % 3) =\
    \ 1\e[0m\n\e[31m25 |\e[0m        \e[34m// So, we have a[i] + a[j] + a[k] = 0 if\e\
    [0m\n\e[31m26 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.ofDim[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0l\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx__8p966.scala:28)\n\tat Problem.main(tmpx__8p966.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797923
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt1vxoa1w.scala:19)\n\tat Problem.main(tmpt1vxoa1w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = (1l to n).map(i =>\
    \ i * i - i + 1).toList\n        val b = a.combinations(3).filter(x => (x(0) +\
    \ x(1) + x(2)) % 3 == 0).toList\n        b.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797924
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0l\n        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797923
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = (1l to n).map(i =>\
    \ i * i - i + 1).toArray\n        var count = 0l\n        for (i <- 0 until a.length\
    \ - 2) {\n            for (j <- i + 1 until a.length - 1) {\n                for\
    \ (k <- j + 1 until a.length) {\n                    if ((a(i) + a(j) + a(k))\
    \ % 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // We can see that a[i] =\
    \ i * i - i + 1 is a quadratic function.\n        // We can also see that a[i]\
    \ is always odd.\n        // We can also see that a[i] is always greater than\
    \ i.\n        // We can also see that a[i] is always greater than i * i.\n   \
    \     // We can also see that a[i] is always greater than (i - 1) * (i - 1).\n\
    \        // We can also see that a[i] is always greater than (i - 2) * (i - 2).\n\
    \        // We can also see that a[i] is always greater than (i - 3) * (i - 3).\n\
    \        // We can also see that a[i] is always greater than (i - 4) * (i - 4).\n\
    \        // We can also see that a[i] is always greater than (i - 5) * (i - 5).\n\
    \        // We can also see that a[i] is always greater than (i - 6) * (i - 6).\n\
    \        // We can also see that a[i] is always greater than (i - 7) * (i - 7).\n\
    \        // We can also see that a[i] is always greater than (i - 8) * (i - 8).\n\
    \        // We can also see that a[i] is always greater than (i - 9) * (i - 9).\n\
    \        // We can also see that a[i] is always greater than (i - 10) * (i - 10).\n\
    \        // We can also see that a[i] is always greater than (i - 11) * (i - 11).\n\
    \        // We can also see that a[i] is always greater than (i - 12) * (i - 12).\n\
    \        // We can also see that a[i] is always greater than (i - 13) * (i - 13).\n\
    \        // We can also see that a[i] is always greater than (i - 14) * (i - 14).\n\
    \        // We can also see that a[i] is always greater than (i - 15) * (i - 15).\n\
    \        // We can also see that a[i] is always greater than (i - 16) * (i - 16).\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsp6duw7b.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// We\
    \ can see that a[i] = i * i - i + 1 is a quadratic function.\e[0m\n\e[31m16 |\e\
    [0m        \e[34m// We can also see that a[i] is always odd.\e[0m\n\e[31m17 |\e\
    [0m        \e[34m// We can also see that a[i] is always greater than i.\e[0m\n\
    \e[31m18 |\e[0m        \e[34m// We can also see that a[i] is always greater than\
    \ i * i.\e[0m\n\e[31m19 |\e[0m        \e[34m// We can also see that a[i] is always\
    \ greater than (i - 1) * (i - 1).\e[0m\n\e[31m20 |\e[0m        \e[34m// We can\
    \ also see that a[i] is always greater than (i - 2) * (i - 2).\e[0m\n\e[31m21\
    \ |\e[0m        \e[34m// We can also see that a[i] is always greater than (i -\
    \ 3) * (i - 3).\e[0m\n\e[31m22 |\e[0m        \e[34m// We can also see that a[i]\
    \ is always greater than (i - 4) * (i - 4).\e[0m\n\e[31m23 |\e[0m        \e[34m//\
    \ We can also see that a[i] is always greater than (i - 5) * (i - 5).\e[0m\n\e\
    [31m24 |\e[0m        \e[34m// We can also see that a[i] is always greater than\
    \ (i - 6) * (i - 6).\e[0m\n\e[31m25 |\e[0m        \e[34m// We can also see that\
    \ a[i] is always greater than (i - 7) * (i - 7).\e[0m\n\e[31m26 |\e[0m       \
    \ \e[34m// We can also see that a[i] is always greater than (i - 8) * (i - 8).\e\
    [0m\n\e[31m27 |\e[0m        \e[34m// We can also see that a[i] is always greater\
    \ than (i - 9) * (i - 9).\e[0m\n\e[31m28 |\e[0m        \e[34m// We can also see\
    \ that a[i] is always greater than (i - 10) * (i - 10).\e[0m\n\e[31m29 |\e[0m\
    \        \e[34m// We can also see that a[i] is always greater than (i - 11) *\
    \ (i - 11).\e[0m\n\e[31m30 |\e[0m        \e[34m// We can also see that a[i] is\
    \ always greater than (i - 12) * (i - 12).\e[0m\n\e[31m31 |\e[0m        \e[34m//\
    \ We can also see that a[i] is always greater than (i - 1"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0l\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6tktpwy_.scala:28)\n\tat Problem.main(tmp6tktpwy_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // We can see that a[i] +\
    \ a[j] + a[k] is a multiple of 3 if and only if a[i] + a[j] is a multiple of 3.\n\
    \        // We can also see that a[i] + a[j] is a multiple of 3 if and only if\
    \ a[i] is a multiple of 3 or a[j] is a multiple of 3.\n        // So we can count\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n        //\
    \ and a[i] + a[j] + a[k] is a multiple of 3 by counting the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n        // and a[i] is a multiple\
    \ of 3 or a[j] is a multiple of 3.\n        // We can count the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n        // and a[i] is a multiple\
    \ of 3 by counting the number of triples (a[i], a[j], a[k]) of a where i < j <\
    \ k, \n        // and a[i] is a multiple of 3 and a[j] is not a multiple of 3.\n\
    \        // We can count the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n        // and a[i] is a multiple of 3 and a[j] is not a multiple\
    \ of 3 by counting the number of triples (a[i], a[j], a[k]) of a where i < j <\
    \ k, \n        // and a[i] is a multiple of 3 and a[j] is not a multiple of 3\
    \ and a[k] is not a multiple of 3.\n        // We can count the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n        // and a[i] is a multiple\
    \ of 3 and a[j] is not a multiple of 3 and a[k] is not a multiple of 3 by counting\
    \ the number of triples (a[i], a[\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp50nbw_df.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// We\
    \ can see that a[i] + a[j] + a[k] is a multiple of 3 if and only if a[i] + a[j]\
    \ is a multiple of 3.\e[0m\n\e[31m16 |\e[0m        \e[34m// We can also see that\
    \ a[i] + a[j] is a multiple of 3 if and only if a[i] is a multiple of 3 or a[j]\
    \ is a multiple of 3.\e[0m\n\e[31m17 |\e[0m        \e[34m// So we can count the\
    \ number of triples (a[i], a[j], a[k]) of a where i < j < k, \e[0m\n\e[31m18 |\e\
    [0m        \e[34m// and a[i] + a[j] + a[k] is a multiple of 3 by counting the\
    \ number of triples (a[i], a[j], a[k]) of a where i < j < k, \e[0m\n\e[31m19 |\e\
    [0m        \e[34m// and a[i] is a multiple of 3 or a[j] is a multiple of 3.\e\
    [0m\n\e[31m20 |\e[0m        \e[34m// We can count the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, \e[0m\n\e[31m21 |\e[0m        \e[34m// and\
    \ a[i] is a multiple of 3 by counting the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \e[0m\n\e[31m22 |\e[0m        \e[34m// and a[i] is a multiple\
    \ of 3 and a[j] is not a multiple of 3.\e[0m\n\e[31m23 |\e[0m        \e[34m//\
    \ We can count the number of triples (a[i], a[j], a[k]) of a where i < j < k,\
    \ \e[0m\n\e[31m24 |\e[0m        \e[34m// and a[i] is a multiple of 3 and a[j]\
    \ is not a multiple of 3 by counting the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \e[0m\n\e[31m25 |\e[0m        \e[34m// and a[i] is a multiple\
    \ of 3 and a[j] is not a multiple of 3 and a[k] is not a multiple of 3.\e[0m\n\
    \e[31m26 |\e[0m        \e[34m// We can count the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \e[0m\n\e[31m27 |\e[0m        \e[34m// and a[i]\
    \ is a multiple of 3 and a[j] is not a multiple of 3 and a[k] is not a multiple\
    \ of 3 by counting the number of tri"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0l)\n\
    \        for (i <- 1 to n.toInt) {\n            a(i - 1) = i * i - i + 1\n   \
    \     }\n        var count = 0l\n        for (i <- 0 to n.toInt - 3) {\n     \
    \       for (j <- i + 1 to n.toInt - 2) {\n                for (k <- j + 1 to\
    \ n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) count\
    \ += 1\n                }\n            }\n        }\n        count\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0l)\n\
    \        for (i <- 1 to n.toInt) {\n            a(i - 1) = i * i - i + 1\n   \
    \     }\n        var cnt = 0l\n        for (i <- 0 to n.toInt - 3) {\n       \
    \     for (j <- i + 1 to n.toInt - 2) {\n                for (k <- j + 1 to n.toInt\
    \ - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) cnt += 1\n  \
    \              }\n            }\n        }\n        cnt\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797934
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0l)\n\
    \        for (i <- 1 to n.toInt) {\n            a(i - 1) = i * i - i + 1\n   \
    \     }\n        var count = 0l\n        for (i <- 0 to n.toInt - 3) {\n     \
    \       for (j <- i + 1 to n.toInt - 2) {\n                for (k <- j + 1 to\
    \ n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) count\
    \ += 1\n                }\n            }\n        }\n        count\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // The number of triples\
    \ is equal to the number of triples of the form (i, j, k)\n        // where i\
    \ < j < k, and i + j + k is a multiple of 3.\n        // We can use inclusion-exclusion\
    \ to count the number of triples of the form (i, j, k)\n        // where i + j\
    \ + k is a multiple of 3.\n        // Let A[i] be the number of triples of the\
    \ form (i, j, k) where i + j + k is a multiple of 3.\n        // A[i] = (n - i)\
    \ * (n - i - 1) / 2\n        // Let B[i] be the number of triples of the form\
    \ (i, j, k) where i + j + k is a multiple of 3 and i = j.\n        // B[i] = (n\
    \ - i) * (n - i - 1) / 2\n        // Let C[i] be the number of triples of the\
    \ form (i, j, k) where i + j + k is a multiple of 3 and i = j = k.\n        //\
    \ C[i] = (n - i) * (n - i - 1) / 2\n        // The number of triples of the form\
    \ (i, j, k) where i + j + k is a multiple of 3 is\n        // A[0] + A[1] + ...\
    \ + A[n - 1] - B[0] - B[1] - ... - B[n - 1] + C[0] + C[1] + ... + C[n - 1]\n \
    \       // = (n * (n - 1) * (n - 2) / 6) - (n * (n - 1) * (n - 2) / 6) + (n *\
    \ (n - 1) * (n - 2) / 6)\n        // = n * (n - 1) * (n - 2) / 6\n        // Now\
    \ we need to subtract the number of triples of the form (i, j, k) where i < j\
    \ < k and i + j + k is a multiple of 3.\n        // Let D[i] be the number of\
    \ triples of the form (i, j, k) where i < j <\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpulch8pe6.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// The\
    \ number of triples is equal to the number of triples of the form (i, j, k)\e\
    [0m\n\e[31m16 |\e[0m        \e[34m// where i < j < k, and i + j + k is a multiple\
    \ of 3.\e[0m\n\e[31m17 |\e[0m        \e[34m// We can use inclusion-exclusion to\
    \ count the number of triples of the form (i, j, k)\e[0m\n\e[31m18 |\e[0m    \
    \    \e[34m// where i + j + k is a multiple of 3.\e[0m\n\e[31m19 |\e[0m      \
    \  \e[34m// Let A[i] be the number of triples of the form (i, j, k) where i +\
    \ j + k is a multiple of 3.\e[0m\n\e[31m20 |\e[0m        \e[34m// A[i] = (n -\
    \ i) * (n - i - 1) / 2\e[0m\n\e[31m21 |\e[0m        \e[34m// Let B[i] be the number\
    \ of triples of the form (i, j, k) where i + j + k is a multiple of 3 and i =\
    \ j.\e[0m\n\e[31m22 |\e[0m        \e[34m// B[i] = (n - i) * (n - i - 1) / 2\e\
    [0m\n\e[31m23 |\e[0m        \e[34m// Let C[i] be the number of triples of the\
    \ form (i, j, k) where i + j + k is a multiple of 3 and i = j = k.\e[0m\n\e[31m24\
    \ |\e[0m        \e[34m// C[i] = (n - i) * (n - i - 1) / 2\e[0m\n\e[31m25 |\e[0m\
    \        \e[34m// The number of triples of the form (i, j, k) where i + j + k\
    \ is a multiple of 3 is\e[0m\n\e[31m26 |\e[0m        \e[34m// A[0] + A[1] + ...\
    \ + A[n - 1] - B[0] - B[1] - ... - B[n - 1] + C[0] + C[1] + ... + C[n - 1]\e[0m\n\
    \e[31m27 |\e[0m        \e[34m// = (n * (n - 1) * (n - 2) / 6) - (n * (n - 1) *\
    \ (n - 2) / 6) + (n * (n - 1) * (n - 2) / 6)\e[0m\n\e[31m28 |\e[0m        \e[34m//\
    \ = n * (n - 1) * (n - 2) / 6\e[0m\n\e[31m29 |\e[0m        \e[34m// Now we need\
    \ to subtract the number of triples of the form (i, j, k) where i < j < k and\
    \ i + j + k is a multiple of 3.\e[0m\n\e[31m30 |\e[0m        \e[34m// Let D[i]\
    \ be the number of triples of the form (i, j, k) where i "
  stdout: ''
  timestamp: 1659797932
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var count = 0l\n        for\
    \ (i <- 1l to n) {\n            for (j <- i + 1l to n) {\n                for\
    \ (k <- j + 1l to n) {\n                    if ((i * i - i + 1 + j * j - j + 1\
    \ + k * k - k + 1) % 3 == 0) {\n                        count += 1\n         \
    \           }\n                }\n            }\n        }\n        count\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) ==\
    \ (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // We have to find the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n        // and a[i] +\
    \ a[j] + a[k] is a multiple of 3.\n        // We can see that a[i] + a[j] + a[k]\
    \ is a multiple of 3 if and only if a[i] + a[j] is a multiple of 3.\n        //\
    \ So we have to find the number of pairs (a[i], a[j]) of a where i < j, and a[i]\
    \ + a[j] is a multiple of 3.\n        // We can see that a[i] + a[j] is a multiple\
    \ of 3 if and only if a[i] is a multiple of 3.\n        // So we have to find\
    \ the number of pairs (a[i], a[j]) of a where i < j, and a[i] is a multiple of\
    \ 3.\n        // We can see that a[i] is a multiple of 3 if and only if i is a\
    \ multiple of 3.\n        // So we have to find the number of pairs (a[i], a[j])\
    \ of a where i < j, and i is a multiple of 3.\n        // We can see that i is\
    \ a multiple of 3 if and only if i is 3, 6, 9, ..., 3 * k for some k.\n      \
    \  // So we have to find the number of pairs (a[i], a[j]) of a where i < j, and\
    \ i is 3, 6, 9, ..., 3 * k for some k.\n        // We can see that i is 3, 6,\
    \ 9, ..., 3 * k for some k if and only if i is 3, 6, 9, ..., 3 * (n / 3).\n  \
    \      // So we have to find the number of pairs (a[i], a[j]) of a where i < j,\
    \ and i is 3, 6, 9, ..., 3 * (n / 3).\n        // We can see that i is 3, 6, 9,\
    \ ..., 3 * (n / 3) if and only if i is 3, 6, 9, ..., 3 * (n / 3) - 3.\n      \
    \  // So we have to find the\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpywu04hnl.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// We\
    \ have to find the number of triples (a[i], a[j], a[k]) of a where i < j < k,\
    \ \e[0m\n\e[31m16 |\e[0m        \e[34m// and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\e[0m\n\e[31m17 |\e[0m        \e[34m// We can see that a[i] + a[j] + a[k]\
    \ is a multiple of 3 if and only if a[i] + a[j] is a multiple of 3.\e[0m\n\e[31m18\
    \ |\e[0m        \e[34m// So we have to find the number of pairs (a[i], a[j]) of\
    \ a where i < j, and a[i] + a[j] is a multiple of 3.\e[0m\n\e[31m19 |\e[0m   \
    \     \e[34m// We can see that a[i] + a[j] is a multiple of 3 if and only if a[i]\
    \ is a multiple of 3.\e[0m\n\e[31m20 |\e[0m        \e[34m// So we have to find\
    \ the number of pairs (a[i], a[j]) of a where i < j, and a[i] is a multiple of\
    \ 3.\e[0m\n\e[31m21 |\e[0m        \e[34m// We can see that a[i] is a multiple\
    \ of 3 if and only if i is a multiple of 3.\e[0m\n\e[31m22 |\e[0m        \e[34m//\
    \ So we have to find the number of pairs (a[i], a[j]) of a where i < j, and i\
    \ is a multiple of 3.\e[0m\n\e[31m23 |\e[0m        \e[34m// We can see that i\
    \ is a multiple of 3 if and only if i is 3, 6, 9, ..., 3 * k for some k.\e[0m\n\
    \e[31m24 |\e[0m        \e[34m// So we have to find the number of pairs (a[i],\
    \ a[j]) of a where i < j, and i is 3, 6, 9, ..., 3 * k for some k.\e[0m\n\e[31m25\
    \ |\e[0m        \e[34m// We can see that i is 3, 6, 9, ..., 3 * k for some k if\
    \ and only if i is 3, 6, 9, ..., 3 * (n / 3).\e[0m\n\e[31m26 |\e[0m        \e\
    [34m// So we have to find the number of pairs (a[i], a[j]) of a where i < j, and\
    \ i is 3, 6, 9, ..., 3 * (n / 3).\e[0m\n\e[31m27 |\e[0m        \e[34m// We can\
    \ see that i is 3, 6, 9, ..., 3 * (n / 3) if and only if i is 3, 6, 9, ..., 3\
    \ * (n / 3) - 3.\e[0m\n\e[31m28 |\e[0m        \e[3"
  stdout: ''
  timestamp: 1659797931
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0\n        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   0\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpelsl2_79.scala:19)\n\tat Problem.main(tmpelsl2_79.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt1vxoa1w.scala:19)\n\tat Problem.main(tmpt1vxoa1w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var cnt = 0l\n\
    \        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until n.toInt\
    \ - 1) {\n                for (k <- j + 1 until n.toInt) {\n                 \
    \   if ((a(i) + a(j) + a(k)) % 3 == 0) cnt += 1\n                }\n         \
    \   }\n        }\n        cnt\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpomu2b2wq.scala:28)\n\tat Problem.main(tmpomu2b2wq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797934
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // We can see that a[i] is\
    \ always odd.\n        // So, a[i] + a[j] + a[k] is odd iff a[i] + a[j] is even.\n\
    \        // a[i] + a[j] is even iff a[i] is even and a[j] is odd, or vice versa.\n\
    \        // So, we can count the number of pairs (a[i], a[j]) where a[i] is even\
    \ and a[j] is odd.\n        // We can count the number of pairs (a[i], a[j]) where\
    \ a[i] is odd and a[j] is even.\n        // We can count the number of pairs (a[i],\
    \ a[j]) where a[i] and a[j] are both even.\n        // We can count the number\
    \ of pairs (a[i], a[j]) where a[i] and a[j] are both odd.\n        // We can count\
    \ the number of pairs (a[i], a[j]) where a[i] and a[j] are both odd.\n       \
    \ // We can count the number of pairs (a[i], a[j]) where a[i] and a[j] are both\
    \ odd.\n        // We can count the number of pairs (a[i], a[j]) where a[i] and\
    \ a[j] are both odd.\n        // We can count the number of pairs (a[i], a[j])\
    \ where a[i] and a[j] are both odd.\n        // We can count the number of pairs\
    \ (a[i], a[j]) where a[i] and a[j] are both odd.\n        // We can count the\
    \ number of pairs (a[i], a[j]) where a[i] and a[j] are both odd.\n        // We\
    \ can count the number of pairs (a[i], a[j]) where a[i] and a[j] are both odd.\n\
    \        // We can count the number of pairs (a[i], a[j]) where a[i] and a[j]\
    \ are both odd.\n        // We can count the number of pairs (a[i], a[j]) where\
    \ a[i] and a[j\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn7jh6rca.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// We\
    \ can see that a[i] is always odd.\e[0m\n\e[31m16 |\e[0m        \e[34m// So, a[i]\
    \ + a[j] + a[k] is odd iff a[i] + a[j] is even.\e[0m\n\e[31m17 |\e[0m        \e\
    [34m// a[i] + a[j] is even iff a[i] is even and a[j] is odd, or vice versa.\e\
    [0m\n\e[31m18 |\e[0m        \e[34m// So, we can count the number of pairs (a[i],\
    \ a[j]) where a[i] is even and a[j] is odd.\e[0m\n\e[31m19 |\e[0m        \e[34m//\
    \ We can count the number of pairs (a[i], a[j]) where a[i] is odd and a[j] is\
    \ even.\e[0m\n\e[31m20 |\e[0m        \e[34m// We can count the number of pairs\
    \ (a[i], a[j]) where a[i] and a[j] are both even.\e[0m\n\e[31m21 |\e[0m      \
    \  \e[34m// We can count the number of pairs (a[i], a[j]) where a[i] and a[j]\
    \ are both odd.\e[0m\n\e[31m22 |\e[0m        \e[34m// We can count the number\
    \ of pairs (a[i], a[j]) where a[i] and a[j] are both odd.\e[0m\n\e[31m23 |\e[0m\
    \        \e[34m// We can count the number of pairs (a[i], a[j]) where a[i] and\
    \ a[j] are both odd.\e[0m\n\e[31m24 |\e[0m        \e[34m// We can count the number\
    \ of pairs (a[i], a[j]) where a[i] and a[j] are both odd.\e[0m\n\e[31m25 |\e[0m\
    \        \e[34m// We can count the number of pairs (a[i], a[j]) where a[i] and\
    \ a[j] are both odd.\e[0m\n\e[31m26 |\e[0m        \e[34m// We can count the number\
    \ of pairs (a[i], a[j]) where a[i] and a[j] are both odd.\e[0m\n\e[31m27 |\e[0m\
    \        \e[34m// We can count the number of pairs (a[i], a[j]) where a[i] and\
    \ a[j] are both odd.\e[0m\n\e[31m28 |\e[0m        \e[34m// We can count the number\
    \ of pairs (a[i], a[j]) where a[i] and a[j] are both odd.\e[0m\n\e[31m29 |\e[0m\
    \        \e[34m// We can count the number of pairs (a[i], a[j]) where a[i] and\
    \ a[j] are both odd.\e[0m\n\e[31m30 |\e[0m        "
  stdout: ''
  timestamp: 1659797932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // We can use the fact that\
    \ a[i] = i * i - i + 1 is a multiple of 3 if and only if i is a multiple of 3.\n\
    \        // So, we can count the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n        // and a[i] + a[j] + a[k] is a multiple of 3, by counting\
    \ the number of triples (i, j, k) of integers\n        // where i < j < k, and\
    \ i, j, k are all multiples of 3.\n        // We can count the number of triples\
    \ (i, j, k) of integers where i < j < k, and i, j, k are all multiples of 3\n\
    \        // by counting the number of triples (i, j, k) of integers where i <\
    \ j < k, and i, j, k are all multiples of 3,\n        // and i, j, k are all less\
    \ than n.\n        // We can count the number of triples (i, j, k) of integers\
    \ where i < j < k, and i, j, k are all multiples of 3,\n        // and i, j, k\
    \ are all less than n by counting the number of triples (i, j, k) of integers\
    \ where i < j < k,\n        // and i, j, k are all multiples of 3, and i, j, k\
    \ are all less than or equal to n / 3.\n        // We can count the number of\
    \ triples (i, j, k) of integers where i < j < k, and i, j, k are all multiples\
    \ of 3,\n        // and i, j, k are all less than or equal to n / 3 by counting\
    \ the number of triples (i, j, k) of integers\n        // where i < j < k, and\
    \ i, j, k are all multiples of 3, and i, j, k are all less than or equal to n\
    \ / 3,\n        // and i, j, k are all greater than or equal to 1.\n        //\
    \ We can count the number of triples (i, j, k) of integers where i < j < k, and\
    \ i, j, k are all multiples of 3,\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7czzf4tz.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// We\
    \ can use the fact that a[i] = i * i - i + 1 is a multiple of 3 if and only if\
    \ i is a multiple of 3.\e[0m\n\e[31m16 |\e[0m        \e[34m// So, we can count\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \e[0m\n\e[31m17\
    \ |\e[0m        \e[34m// and a[i] + a[j] + a[k] is a multiple of 3, by counting\
    \ the number of triples (i, j, k) of integers\e[0m\n\e[31m18 |\e[0m        \e\
    [34m// where i < j < k, and i, j, k are all multiples of 3.\e[0m\n\e[31m19 |\e\
    [0m        \e[34m// We can count the number of triples (i, j, k) of integers where\
    \ i < j < k, and i, j, k are all multiples of 3\e[0m\n\e[31m20 |\e[0m        \e\
    [34m// by counting the number of triples (i, j, k) of integers where i < j < k,\
    \ and i, j, k are all multiples of 3,\e[0m\n\e[31m21 |\e[0m        \e[34m// and\
    \ i, j, k are all less than n.\e[0m\n\e[31m22 |\e[0m        \e[34m// We can count\
    \ the number of triples (i, j, k) of integers where i < j < k, and i, j, k are\
    \ all multiples of 3,\e[0m\n\e[31m23 |\e[0m        \e[34m// and i, j, k are all\
    \ less than n by counting the number of triples (i, j, k) of integers where i\
    \ < j < k,\e[0m\n\e[31m24 |\e[0m        \e[34m// and i, j, k are all multiples\
    \ of 3, and i, j, k are all less than or equal to n / 3.\e[0m\n\e[31m25 |\e[0m\
    \        \e[34m// We can count the number of triples (i, j, k) of integers where\
    \ i < j < k, and i, j, k are all multiples of 3,\e[0m\n\e[31m26 |\e[0m       \
    \ \e[34m// and i, j, k are all less than or equal to n / 3 by counting the number\
    \ of triples (i, j, k) of integers\e[0m\n\e[31m27 |\e[0m        \e[34m// where\
    \ i < j < k, and i, j, k are all multiples of 3, and i, j, k are all less than\
    \ or equal to n / 3,\e[0m\n\e[31m28 |\e[0m "
  stdout: ''
  timestamp: 1659797932
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt1vxoa1w.scala:19)\n\tat Problem.main(tmpt1vxoa1w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = (1 to n.toInt).map(x\
    \ => x * x - x + 1).toList\n        var count = 0\n        for (i <- 0 until a.length\
    \ - 2) {\n            for (j <- i + 1 until a.length - 1) {\n                for\
    \ (k <- j + 1 until a.length) {\n                    if ((a(i) + a(j) + a(k))\
    \ % 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // We can see that a[i] +\
    \ a[j] + a[k] is a multiple of 3 if and only if a[i] + a[j] is a multiple of 3.\n\
    \        // So we can use a hashmap to store the number of pairs of a[i] and a[j]\
    \ that sum to a multiple of 3.\n        // Then we can use this hashmap to find\
    \ the number of triples that sum to a multiple of 3.\n        // We can also see\
    \ that a[i] + a[j] is a multiple of 3 if and only if a[i] is a multiple of 3.\n\
    \        // So we can use a hashmap to store the number of a[i] that is a multiple\
    \ of 3.\n        // Then we can use this hashmap to find the number of pairs of\
    \ a[i] and a[j] that sum to a multiple of 3.\n        // We can also see that\
    \ a[i] is a multiple of 3 if and only if i is a multiple of 3.\n        // So\
    \ we can use a hashmap to store the number of i that is a multiple of 3.\n   \
    \     // Then we can use this hashmap to find the number of a[i] that is a multiple\
    \ of 3.\n        // We can also see that a[i] + a[j] is a multiple of 3 if and\
    \ only if a[i] + a[j] is a multiple of 3.\n        // So we can use a hashmap\
    \ to store the number of a[i] + a[j] that is a multiple of 3.\n        // Then\
    \ we can use this hashmap to find the number of triples that sum to a multiple\
    \ of 3.\n        // We can also see that a[i] + a[j] is a multiple of 3 if and\
    \ only if a[i] + a[j] is a multiple of 3.\n        // So we can use a hashmap\
    \ to store the number of a[i] + a[j] that is a multiple of 3.\n        // Then\
    \ we can use this hashmap to find the number of triples that sum to a multiple\
    \ of 3.\n        // We can also see that a[i] + a[j] is a multiple of 3 if and\
    \ only if a[i] + a[j] is a multiple of 3.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqn24ajpl.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// We\
    \ can see that a[i] + a[j] + a[k] is a multiple of 3 if and only if a[i] + a[j]\
    \ is a multiple of 3.\e[0m\n\e[31m16 |\e[0m        \e[34m// So we can use a hashmap\
    \ to store the number of pairs of a[i] and a[j] that sum to a multiple of 3.\e\
    [0m\n\e[31m17 |\e[0m        \e[34m// Then we can use this hashmap to find the\
    \ number of triples that sum to a multiple of 3.\e[0m\n\e[31m18 |\e[0m       \
    \ \e[34m// We can also see that a[i] + a[j] is a multiple of 3 if and only if\
    \ a[i] is a multiple of 3.\e[0m\n\e[31m19 |\e[0m        \e[34m// So we can use\
    \ a hashmap to store the number of a[i] that is a multiple of 3.\e[0m\n\e[31m20\
    \ |\e[0m        \e[34m// Then we can use this hashmap to find the number of pairs\
    \ of a[i] and a[j] that sum to a multiple of 3.\e[0m\n\e[31m21 |\e[0m        \e\
    [34m// We can also see that a[i] is a multiple of 3 if and only if i is a multiple\
    \ of 3.\e[0m\n\e[31m22 |\e[0m        \e[34m// So we can use a hashmap to store\
    \ the number of i that is a multiple of 3.\e[0m\n\e[31m23 |\e[0m        \e[34m//\
    \ Then we can use this hashmap to find the number of a[i] that is a multiple of\
    \ 3.\e[0m\n\e[31m24 |\e[0m        \e[34m// We can also see that a[i] + a[j] is\
    \ a multiple of 3 if and only if a[i] + a[j] is a multiple of 3.\e[0m\n\e[31m25\
    \ |\e[0m        \e[34m// So we can use a hashmap to store the number of a[i] +\
    \ a[j] that is a multiple of 3.\e[0m\n\e[31m26 |\e[0m        \e[34m// Then we\
    \ can use this hashmap to find the number of triples that sum to a multiple of\
    \ 3.\e[0m\n\e[31m27 |\e[0m        \e[34m// We can also see that a[i] + a[j] is\
    \ a multiple of 3 if and only if a[i] + a[j] is a multiple of 3.\e[0m\n\e[31m28\
    \ |\e[0m        \e[34m// So we can use a hash"
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // We can use a hashmap to\
    \ store the number of times a number appears in the list.\n        // Then we\
    \ can iterate through the list and check if the sum of any two numbers is a multiple\
    \ of 3.\n        // If so, we can add the number of times the third number appears\
    \ to the total.\n        // We can use a hashmap to store the number of times\
    \ a number appears in the list.\n        // Then we can iterate through the list\
    \ and check if the sum of any two numbers is a multiple of 3.\n        // If so,\
    \ we can add the number of times the third number appears to the total.\n    \
    \    val map = new HashMap[Long, Long]()\n        var total = 0l\n        for\
    \ (i <- 1l to n) {\n            val num = i * i - i + 1\n            if (map.contains(num))\
    \ map(num) += 1\n            else map(num) = 1\n            for (j <- 1l to i\
    \ - 1) {\n                val num2 = j * j - j + 1\n                if ((num +\
    \ num2) % 3 == 0) {\n                    val num3 = (num + num2) / 3\n       \
    \             if (map.contains(num3)) total += map(num3)\n                }\n\
    \            }\n        }\n        total\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7r3x_owy.scala:38)\n\tat Problem.main(tmp7r3x_owy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797934
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // We have to find the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n        // and a[i] +\
    \ a[j] + a[k] is a multiple of 3.\n        // a[i] = i * i - i + 1\n        //\
    \ a[j] = j * j - j + 1\n        // a[k] = k * k - k + 1\n        // a[i] + a[j]\
    \ + a[k] = i * i - i + 1 + j * j - j + 1 + k * k - k + 1\n        // a[i] + a[j]\
    \ + a[k] = i * i + j * j + k * k - i - j - k + 3\n        // a[i] + a[j] + a[k]\
    \ = (i + j + k) * (i + j + k) - (i + j + k) + 3\n        // a[i] + a[j] + a[k]\
    \ = (i + j + k) * (i + j + k - 1) + 3\n        // a[i] + a[j] + a[k] = (i + j\
    \ + k) * (i + j + k - 1) + 3\n        // a[i] + a[j] + a[k] % 3 = 0\n        //\
    \ (i + j + k) * (i + j + k - 1) % 3 = 0\n        // (i + j + k) % 3 = 0 or (i\
    \ + j + k - 1) % 3 = 0\n        // i + j + k % 3 = 0 or i + j + k - 1 % 3 = 0\n\
    \        // i + j + k % 3 = 0 or i + j + k % 3 = 2\n        // i + j + k % 3 =\
    \ 0 or i + j + k % 3 = 1\n        // i + j + k % 3 = 0 or i + j + k % 3 = 2\n\
    \        // i + j + k % 3 = 0 or i + j + k % 3 = 1\n        // i + j + k % 3 =\
    \ 0 or i + j + k % 3 = 2\n        // i + j\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpofcu59gq.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// We\
    \ have to find the number of triples (a[i], a[j], a[k]) of a where i < j < k,\
    \ \e[0m\n\e[31m16 |\e[0m        \e[34m// and a[i] + a[j] + a[k] is a multiple\
    \ of 3.\e[0m\n\e[31m17 |\e[0m        \e[34m// a[i] = i * i - i + 1\e[0m\n\e[31m18\
    \ |\e[0m        \e[34m// a[j] = j * j - j + 1\e[0m\n\e[31m19 |\e[0m        \e\
    [34m// a[k] = k * k - k + 1\e[0m\n\e[31m20 |\e[0m        \e[34m// a[i] + a[j]\
    \ + a[k] = i * i - i + 1 + j * j - j + 1 + k * k - k + 1\e[0m\n\e[31m21 |\e[0m\
    \        \e[34m// a[i] + a[j] + a[k] = i * i + j * j + k * k - i - j - k + 3\e\
    [0m\n\e[31m22 |\e[0m        \e[34m// a[i] + a[j] + a[k] = (i + j + k) * (i + j\
    \ + k) - (i + j + k) + 3\e[0m\n\e[31m23 |\e[0m        \e[34m// a[i] + a[j] + a[k]\
    \ = (i + j + k) * (i + j + k - 1) + 3\e[0m\n\e[31m24 |\e[0m        \e[34m// a[i]\
    \ + a[j] + a[k] = (i + j + k) * (i + j + k - 1) + 3\e[0m\n\e[31m25 |\e[0m    \
    \    \e[34m// a[i] + a[j] + a[k] % 3 = 0\e[0m\n\e[31m26 |\e[0m        \e[34m//\
    \ (i + j + k) * (i + j + k - 1) % 3 = 0\e[0m\n\e[31m27 |\e[0m        \e[34m//\
    \ (i + j + k) % 3 = 0 or (i + j + k - 1) % 3 = 0\e[0m\n\e[31m28 |\e[0m       \
    \ \e[34m// i + j + k % 3 = 0 or i + j + k - 1 % 3 = 0\e[0m\n\e[31m29 |\e[0m  \
    \      \e[34m// i + j + k % 3 = 0 or i + j + k % 3 = 2\e[0m\n\e[31m30 |\e[0m \
    \       \e[34m// i + j + k % 3 = 0 or i + j + k % 3 = 1\e[0m\n\e[31m31 |\e[0m\
    \        \e[34m// i + j + k % 3 = 0 or i + j + k % 3 = 2\e[0m\n\e[31m32 |\e[0m\
    \        \e[34m// i + j + k % 3 = 0 or i + j + k % 3 = 1\e[0m\n\e[31m33 |\e[0m\
    \        \e[34m// i + j + k % 3 = 0 or i + j + k % 3 = 2\e[0m\n\e[31m34 |\e[0m\
    \        \e[34m// i + j\e[0m\n\e[31m35 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code goes here.\n\
    \        // Return the number of triples.\n        return 0l;\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsqovk4se.scala:20)\n\tat Problem.main(tmpsqovk4se.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // We can see that a[i] is\
    \ always odd.\n        // Therefore, a[i] + a[j] + a[k] is always odd.\n     \
    \   // Therefore, a[i] + a[j] + a[k] is never a multiple of 3.\n        // Therefore,\
    \ there are no valid triples.\n        0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_5tjv2cx.scala:22)\n\tat Problem.main(tmp_5tjv2cx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // We can use the fact that\
    \ a[i] = i * i - i + 1 is a multiple of 3 if and only if i is a multiple of 3.\n\
    \        // Therefore, we can count the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n        // and a[i] + a[j] + a[k] is a multiple of 3 by\
    \ counting the number of triples (i, j, k) where i < j < k, \n        // and i,\
    \ j, k are multiples of 3.\n        // We can count the number of triples (i,\
    \ j, k) where i < j < k, and i, j, k are multiples of 3 by\n        // counting\
    \ the number of triples (i, j, k) where i < j < k, and i, j, k are multiples of\
    \ 3, and i <= n / 3, j <= n / 3, k <= n / 3.\n        // We can count the number\
    \ of triples (i, j, k) where i < j < k, and i, j, k are multiples of 3, and i\
    \ <= n / 3, j <= n / 3, k <= n / 3 by\n        // counting the number of triples\
    \ (i, j, k) where i < j < k, and i, j, k are multiples of 3, and i <= n / 3, j\
    \ <= n / 3, k <= n / 3, and i <= j <= k.\n        // We can count the number of\
    \ triples (i, j, k) where i < j < k, and i, j, k are multiples of 3, and i <=\
    \ n / 3, j <= n / 3, k <= n / 3, and i <= j <= k by\n        // counting the number\
    \ of triples (i, j, k) where i < j < k, and i, j, k are multiples of 3, and i\
    \ <= n / 3, j <= n / 3, k <= n / 3, and i <= j <= k, and i <= k.\n        // We\
    \ can count the number of triples (i, j, k) where i < j < k, and i, j, k are multiples\
    \ of 3, and i <= n /\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps9bj37a5.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// We\
    \ can use the fact that a[i] = i * i - i + 1 is a multiple of 3 if and only if\
    \ i is a multiple of 3.\e[0m\n\e[31m16 |\e[0m        \e[34m// Therefore, we can\
    \ count the number of triples (a[i], a[j], a[k]) of a where i < j < k, \e[0m\n\
    \e[31m17 |\e[0m        \e[34m// and a[i] + a[j] + a[k] is a multiple of 3 by counting\
    \ the number of triples (i, j, k) where i < j < k, \e[0m\n\e[31m18 |\e[0m    \
    \    \e[34m// and i, j, k are multiples of 3.\e[0m\n\e[31m19 |\e[0m        \e\
    [34m// We can count the number of triples (i, j, k) where i < j < k, and i, j,\
    \ k are multiples of 3 by\e[0m\n\e[31m20 |\e[0m        \e[34m// counting the number\
    \ of triples (i, j, k) where i < j < k, and i, j, k are multiples of 3, and i\
    \ <= n / 3, j <= n / 3, k <= n / 3.\e[0m\n\e[31m21 |\e[0m        \e[34m// We can\
    \ count the number of triples (i, j, k) where i < j < k, and i, j, k are multiples\
    \ of 3, and i <= n / 3, j <= n / 3, k <= n / 3 by\e[0m\n\e[31m22 |\e[0m      \
    \  \e[34m// counting the number of triples (i, j, k) where i < j < k, and i, j,\
    \ k are multiples of 3, and i <= n / 3, j <= n / 3, k <= n / 3, and i <= j <=\
    \ k.\e[0m\n\e[31m23 |\e[0m        \e[34m// We can count the number of triples\
    \ (i, j, k) where i < j < k, and i, j, k are multiples of 3, and i <= n / 3, j\
    \ <= n / 3, k <= n / 3, and i <= j <= k by\e[0m\n\e[31m24 |\e[0m        \e[34m//\
    \ counting the number of triples (i, j, k) where i < j < k, and i, j, k are multiples\
    \ of 3, and i <= n / 3, j <= n / 3, k <= n / 3, and i <= j <= k, and i <= k.\e\
    [0m\n\e[31m25 |\e[0m        \e[34m// We can count the number of triples (i, j,\
    \ k) where i < j < k, and i, j, k are multiples of 3, and i <= n /\e[0m\n\e[31m26\
    \ |\e[0m    }\n\e[31m   |"
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0l\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6tktpwy_.scala:28)\n\tat Problem.main(tmp6tktpwy_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797923
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   var count = 0l\n        for (i <- 1l to n) {\n            for (j <- i + 1l\
    \ to n) {\n                for (k <- j + 1l to n) {\n                    if ((i\
    \ * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) count += 1\n        \
    \        }\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797935
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) {\n            a(i - 1) = i * i - i + 1\n   \
    \     }\n        var count = 0\n        for (i <- 0 to n.toInt - 3) {\n      \
    \      for (j <- i + 1 to n.toInt - 2) {\n                for (k <- j + 1 to n.toInt\
    \ - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n\
    \                }\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797935
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0l)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0l\n        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797923
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var count = 0l\n        for\
    \ (i <- 1l to n - 2) {\n            for (j <- i + 1l to n - 1) {\n           \
    \     for (k <- j + 1l to n) {\n                    if ((i * i - i + 1 + j * j\
    \ - j + 1 + k * k - k + 1) % 3 == 0) count += 1\n                }\n         \
    \   }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797935
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = (1 to n.toInt).map(i\
    \ => i * i - i + 1).toArray\n        var count = 0\n        for (i <- 0 until\
    \ n.toInt - 2) {\n            for (j <- i + 1 until n.toInt - 1) {\n         \
    \       for (k <- j + 1 until n.toInt) {\n                    if ((a(i) + a(j)\
    \ + a(k)) % 3 == 0) {\n                        count += 1\n                  \
    \  }\n                }\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797935
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) {\n            a(i - 1) = i * i - i + 1\n   \
    \     }\n        var count = 0\n        for (i <- 0 to n.toInt - 3) {\n      \
    \      for (j <- i + 1 to n.toInt - 2) {\n                for (k <- j + 1 to n.toInt\
    \ - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) {\n         \
    \               count += 1\n                    }\n                }\n       \
    \     }\n        }\n        count\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797934
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var count = 0l\n        for\
    \ (i <- 1l to n) {\n            for (j <- i + 1l to n) {\n                for\
    \ (k <- j + 1l to n) {\n                    if ((i * i - i + 1 + j * j - j + 1\
    \ + k * k - k + 1) % 3 == 0) count += 1\n                }\n            }\n  \
    \      }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797923
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   0\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpelsl2_79.scala:19)\n\tat Problem.main(tmpelsl2_79.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0l)\n\
    \        for (i <- 1 to n.toInt) {\n            a(i - 1) = i * i - i + 1\n   \
    \     }\n        var count = 0l\n        for (i <- 0 to n.toInt - 3) {\n     \
    \       for (j <- i + 1 to n.toInt - 2) {\n                for (k <- j + 1 to\
    \ n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) count\
    \ += 1\n                }\n            }\n        }\n        count\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // We can use the fact that\
    \ a[i] = i * i - i + 1 is a multiple of 3 iff i is a multiple of 3.\n        //\
    \ So we can just count the number of multiples of 3 in [1, n].\n        // This\
    \ is n / 3.\n        // Then we can use the fact that the number of triples is\
    \ the number of ways to choose 3 elements from n elements.\n        // This is\
    \ n * (n - 1) * (n - 2) / 6.\n        // So the answer is n * (n - 1) * (n - 2)\
    \ / 6 / 3.\n        // This is n * (n - 1) * (n - 2) / 18.\n        n * (n - 1)\
    \ * (n - 2) / 18\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdfcwuc70.scala:25)\n\tat Problem.main(tmpdfcwuc70.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797934
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) {\n            a(i - 1) = i * i - i + 1\n   \
    \     }\n        var count = 0l\n        for (i <- 0 to n.toInt - 3) {\n     \
    \       for (j <- i + 1 to n.toInt - 2) {\n                for (k <- j + 1 to\
    \ n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) {\n \
    \                       count += 1\n                    }\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797943
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0l\n        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797923
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // We can see that a[i] +\
    \ a[j] + a[k] is a multiple of 3 if and only if a[i] + a[j] is a multiple of 3.\n\
    \        // We can also see that a[i] + a[j] is a multiple of 3 if and only if\
    \ a[i] is a multiple of 3.\n        // Therefore, we can count the number of triples\
    \ by counting the number of pairs of a[i] and a[j]\n        // where a[i] is a\
    \ multiple of 3.\n        // We can count the number of pairs of a[i] and a[j]\
    \ where a[i] is a multiple of 3 by counting the number\n        // of a[i] that\
    \ are multiples of 3 and multiplying it by the number of a[j] that are not multiples\
    \ of 3.\n        // The number of a[i] that are multiples of 3 is floor(n / 3).\n\
    \        // The number of a[j] that are not multiples of 3 is n - floor(n / 3).\n\
    \        // Therefore, the number of triples is floor(n / 3) * (n - floor(n /\
    \ 3)).\n        floor(n / 3).toLong * (n - floor(n / 3)).toLong\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n  \
    \  assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n\
    \    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_jwrfj2k.scala:27)\n\tat Problem.main(tmp_jwrfj2k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797942
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0l)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0l\n        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797923
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0l\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6tktpwy_.scala:28)\n\tat Problem.main(tmp6tktpwy_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797923
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0l)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0l\n        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797923
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = (1l to n).map(x =>\
    \ x * x - x + 1).toArray\n        var count = 0l\n        for (i <- 0 until a.length\
    \ - 2) {\n            for (j <- i + 1 until a.length - 1) {\n                for\
    \ (k <- j + 1 until a.length) {\n                    if ((a(i) + a(j) + a(k))\
    \ % 3 == 0) count += 1\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797943
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // We can see that a[i] =\
    \ i * i - i + 1 is a quadratic function.\n        // We can also see that a[i]\
    \ is always odd.\n        // We can also see that a[i] is always positive.\n \
    \       // We can also see that a[i] is always increasing.\n        // We can\
    \ also see that a[i] is always less than n.\n        // We can also see that a[i]\
    \ is always less than 3 * n.\n        // We can also see that a[i] is always less\
    \ than 3 * i.\n        // We can also see that a[i] is always less than 3 * i\
    \ * i.\n        // We can also see that a[i] is always less than 3 * i * i - 3\
    \ * i + 3.\n        // We can also see that a[i] is always less than 3 * i * i\
    \ - 3 * i + 3.\n        // We can also see that a[i] is always less than 3 * i\
    \ * i - 3 * i + 3.\n        // We can also see that a[i] is always less than 3\
    \ * i * i - 3 * i + 3.\n        // We can also see that a[i] is always less than\
    \ 3 * i * i - 3 * i + 3.\n        // We can also see that a[i] is always less\
    \ than 3 * i * i - 3 * i + 3.\n        // We can also see that a[i] is always\
    \ less than 3 * i * i - 3 * i + 3.\n        // We can also see that a[i] is always\
    \ less than 3 * i * i - 3 * i + 3.\n        // We can also see that a[i] is always\
    \ less than 3 * i * i - 3 * i + 3.\n        // We can also see that a[i] is always\
    \ less than 3 * i * i - 3 * i + 3.\n        // We can also see that a[i] is always\
    \ less than 3 * i * i - 3 * i + 3.\n        // We can also see that a[i] is always\
    \ less than 3 * i * i - 3 * i + 3.\n        // We can also see that a[i] is always\
    \ less than 3 * i * i -\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoibyzbtr.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// We\
    \ can see that a[i] = i * i - i + 1 is a quadratic function.\e[0m\n\e[31m16 |\e\
    [0m        \e[34m// We can also see that a[i] is always odd.\e[0m\n\e[31m17 |\e\
    [0m        \e[34m// We can also see that a[i] is always positive.\e[0m\n\e[31m18\
    \ |\e[0m        \e[34m// We can also see that a[i] is always increasing.\e[0m\n\
    \e[31m19 |\e[0m        \e[34m// We can also see that a[i] is always less than\
    \ n.\e[0m\n\e[31m20 |\e[0m        \e[34m// We can also see that a[i] is always\
    \ less than 3 * n.\e[0m\n\e[31m21 |\e[0m        \e[34m// We can also see that\
    \ a[i] is always less than 3 * i.\e[0m\n\e[31m22 |\e[0m        \e[34m// We can\
    \ also see that a[i] is always less than 3 * i * i.\e[0m\n\e[31m23 |\e[0m    \
    \    \e[34m// We can also see that a[i] is always less than 3 * i * i - 3 * i\
    \ + 3.\e[0m\n\e[31m24 |\e[0m        \e[34m// We can also see that a[i] is always\
    \ less than 3 * i * i - 3 * i + 3.\e[0m\n\e[31m25 |\e[0m        \e[34m// We can\
    \ also see that a[i] is always less than 3 * i * i - 3 * i + 3.\e[0m\n\e[31m26\
    \ |\e[0m        \e[34m// We can also see that a[i] is always less than 3 * i *\
    \ i - 3 * i + 3.\e[0m\n\e[31m27 |\e[0m        \e[34m// We can also see that a[i]\
    \ is always less than 3 * i * i - 3 * i + 3.\e[0m\n\e[31m28 |\e[0m        \e[34m//\
    \ We can also see that a[i] is always less than 3 * i * i - 3 * i + 3.\e[0m\n\e\
    [31m29 |\e[0m        \e[34m// We can also see that a[i] is always less than 3\
    \ * i * i - 3 * i + 3.\e[0m\n\e[31m30 |\e[0m        \e[34m// We can also see that\
    \ a[i] is always less than 3 * i * i - 3 * i + 3.\e[0m\n\e[31m31 |\e[0m      \
    \  \e[34m// We can also see that a[i] is always less than 3 * i * i - 3 * i +\
    \ 3.\e[0m\n\e[31m32 |\e[0m        \e[34m// We can also see that a[i]"
  stdout: ''
  timestamp: 1659797942
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // We can use a formula to\
    \ find the number of triples.\n        // Let's say we have a list of length n.\n\
    \        // We can find the number of triples by the following formula:\n    \
    \    // (n * (n - 1) * (n - 2)) / 6\n        // This is the number of triples\
    \ where the sum of the elements is a multiple of 3.\n        // We can find the\
    \ number of triples where the sum of the elements is not a multiple of 3\n   \
    \     // by the following formula:\n        // (n * (n - 1) * (n - 2)) / 2 - (n\
    \ * (n - 1) * (n - 2)) / 6\n        // This is the number of triples where the\
    \ sum of the elements is not a multiple of 3.\n        // We can find the number\
    \ of triples where the sum of the elements is a multiple of 3\n        // by the\
    \ following formula:\n        // (n * (n - 1) * (n - 2)) / 2 - (n * (n - 1) *\
    \ (n - 2)) / 2 - (n * (n - 1) * (n - 2)) / 6\n        // This is the number of\
    \ triples where the sum of the elements is a multiple of 3.\n        // We can\
    \ find the number of triples where the sum of the elements is a multiple of 3\n\
    \        // by the following formula:\n        // (n * (n - 1) * (n - 2)) / 2\
    \ - (n * (n - 1) * (n - 2)) / 2 - (n * (n - 1) * (n - 2)) / 6\n        // This\
    \ is the number of triples where the sum of the elements is a multiple of 3.\n\
    \        // We can find the number of triples where the sum of the elements is\
    \ a multiple of 3\n        // by the following formula:\n        // (n * (n -\
    \ 1) * (n - 2)) / 2 - (n * (n - 1) * (n - 2)) / 2 - (n * (n - 1) * (n - 2)) /\
    \ 6\n        // This is the number of triples where the sum of the elements is\
    \ a multiple of 3.\n        // We can find the number of triples where the sum\
    \ of the elements is a multiple\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmbl0ra45.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// We\
    \ can use a formula to find the number of triples.\e[0m\n\e[31m16 |\e[0m     \
    \   \e[34m// Let's say we have a list of length n.\e[0m\n\e[31m17 |\e[0m     \
    \   \e[34m// We can find the number of triples by the following formula:\e[0m\n\
    \e[31m18 |\e[0m        \e[34m// (n * (n - 1) * (n - 2)) / 6\e[0m\n\e[31m19 |\e\
    [0m        \e[34m// This is the number of triples where the sum of the elements\
    \ is a multiple of 3.\e[0m\n\e[31m20 |\e[0m        \e[34m// We can find the number\
    \ of triples where the sum of the elements is not a multiple of 3\e[0m\n\e[31m21\
    \ |\e[0m        \e[34m// by the following formula:\e[0m\n\e[31m22 |\e[0m     \
    \   \e[34m// (n * (n - 1) * (n - 2)) / 2 - (n * (n - 1) * (n - 2)) / 6\e[0m\n\e\
    [31m23 |\e[0m        \e[34m// This is the number of triples where the sum of the\
    \ elements is not a multiple of 3.\e[0m\n\e[31m24 |\e[0m        \e[34m// We can\
    \ find the number of triples where the sum of the elements is a multiple of 3\e\
    [0m\n\e[31m25 |\e[0m        \e[34m// by the following formula:\e[0m\n\e[31m26\
    \ |\e[0m        \e[34m// (n * (n - 1) * (n - 2)) / 2 - (n * (n - 1) * (n - 2))\
    \ / 2 - (n * (n - 1) * (n - 2)) / 6\e[0m\n\e[31m27 |\e[0m        \e[34m// This\
    \ is the number of triples where the sum of the elements is a multiple of 3.\e\
    [0m\n\e[31m28 |\e[0m        \e[34m// We can find the number of triples where the\
    \ sum of the elements is a multiple of 3\e[0m\n\e[31m29 |\e[0m        \e[34m//\
    \ by the following formula:\e[0m\n\e[31m30 |\e[0m        \e[34m// (n * (n - 1)\
    \ * (n - 2)) / 2 - (n * (n - 1) * (n - 2)) / 2 - (n * (n - 1) * (n - 2)) / 6\e\
    [0m\n\e[31m31 |\e[0m        \e[34m// This is the number of triples where the sum\
    \ of the elements is a multiple of 3.\e[0m\n\e[31m32 |\e[0m    "
  stdout: ''
  timestamp: 1659797943
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // We can solve this problem\
    \ by using the fact that the sum of the first n odd numbers is n^2.\n        //\
    \ We can also use the fact that the sum of the first n even numbers is n(n+1).\n\
    \        // Thus, the sum of the first n odd numbers is n^2, and the sum of the\
    \ first n even numbers is n(n+1).\n        // We can also use the fact that the\
    \ sum of the first n numbers is n(n+1)/2.\n        // We can also use the fact\
    \ that the sum of the first n squares is n(n+1)(2n+1)/6.\n        // We can also\
    \ use the fact that the sum of the first n cubes is n^2(n+1)^2/4.\n        //\
    \ We can also use the fact that the sum of the first n numbers is n(n+1)/2.\n\
    \        // We can also use the fact that the sum of the first n numbers is n(n+1)/2.\n\
    \        // We can also use the fact that the sum of the first n numbers is n(n+1)/2.\n\
    \        // We can also use the fact that the sum of the first n numbers is n(n+1)/2.\n\
    \        // We can also use the fact that the sum of the first n numbers is n(n+1)/2.\n\
    \        // We can also use the fact that the sum of the first n numbers is n(n+1)/2.\n\
    \        // We can also use the fact that the sum of the first n numbers is n(n+1)/2.\n\
    \        // We can also use the fact that the sum of the first n numbers is n(n+1)/2.\n\
    \        // We can also use the fact that the sum of the first n numbers is n(n+1)/2.\n\
    \        // We can also use the fact that the sum of the first n numbers is n(n+1)/2.\n\
    \        // We can also use the fact that the sum of the first n numbers is n(n+1)/2.\n\
    \        // We can also use the fact that the sum of the first n numbers is n(n+1)/2.\n\
    \        // We can also use the fact that the sum of the first n numbers is n(n+1)/2.\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptqmoswyl.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// We\
    \ can solve this problem by using the fact that the sum of the first n odd numbers\
    \ is n^2.\e[0m\n\e[31m16 |\e[0m        \e[34m// We can also use the fact that\
    \ the sum of the first n even numbers is n(n+1).\e[0m\n\e[31m17 |\e[0m       \
    \ \e[34m// Thus, the sum of the first n odd numbers is n^2, and the sum of the\
    \ first n even numbers is n(n+1).\e[0m\n\e[31m18 |\e[0m        \e[34m// We can\
    \ also use the fact that the sum of the first n numbers is n(n+1)/2.\e[0m\n\e\
    [31m19 |\e[0m        \e[34m// We can also use the fact that the sum of the first\
    \ n squares is n(n+1)(2n+1)/6.\e[0m\n\e[31m20 |\e[0m        \e[34m// We can also\
    \ use the fact that the sum of the first n cubes is n^2(n+1)^2/4.\e[0m\n\e[31m21\
    \ |\e[0m        \e[34m// We can also use the fact that the sum of the first n\
    \ numbers is n(n+1)/2.\e[0m\n\e[31m22 |\e[0m        \e[34m// We can also use the\
    \ fact that the sum of the first n numbers is n(n+1)/2.\e[0m\n\e[31m23 |\e[0m\
    \        \e[34m// We can also use the fact that the sum of the first n numbers\
    \ is n(n+1)/2.\e[0m\n\e[31m24 |\e[0m        \e[34m// We can also use the fact\
    \ that the sum of the first n numbers is n(n+1)/2.\e[0m\n\e[31m25 |\e[0m     \
    \   \e[34m// We can also use the fact that the sum of the first n numbers is n(n+1)/2.\e\
    [0m\n\e[31m26 |\e[0m        \e[34m// We can also use the fact that the sum of\
    \ the first n numbers is n(n+1)/2.\e[0m\n\e[31m27 |\e[0m        \e[34m// We can\
    \ also use the fact that the sum of the first n numbers is n(n+1)/2.\e[0m\n\e\
    [31m28 |\e[0m        \e[34m// We can also use the fact that the sum of the first\
    \ n numbers is n(n+1)/2.\e[0m\n\e[31m29 |\e[0m        \e[34m// We can also use\
    \ the fact that the sum of the first n numbers is"
  stdout: ''
  timestamp: 1659797942
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // We can use the fact that\
    \ a[i] = i * i - i + 1 is a multiple of 3 if and only if i is a multiple of 3.\n\
    \        // So we can count the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.\n        // We can count\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j]\
    \ + a[k] is a multiple of 3.\n        // We can count the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \        // We can count the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, and a[i] + a[j] + a[k] is a multiple of 3.\n        // We can count\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j]\
    \ + a[k] is a multiple of 3.\n        // We can count the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.\n\
    \        // We can count the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, and a[i] + a[j] + a[k] is a multiple of 3.\n        // We can count\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j]\
    \ + a[k] is a multiple of 3.\n        // We can count the number of triples (a[i],\
    \ a[j], a[k]) of a where i < j < k, and a[i] + a[j\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi7czt_t7.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// We\
    \ can use the fact that a[i] = i * i - i + 1 is a multiple of 3 if and only if\
    \ i is a multiple of 3.\e[0m\n\e[31m16 |\e[0m        \e[34m// So we can count\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j]\
    \ + a[k] is a multiple of 3.\e[0m\n\e[31m17 |\e[0m        \e[34m// We can count\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j]\
    \ + a[k] is a multiple of 3.\e[0m\n\e[31m18 |\e[0m        \e[34m// We can count\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j]\
    \ + a[k] is a multiple of 3.\e[0m\n\e[31m19 |\e[0m        \e[34m// We can count\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j]\
    \ + a[k] is a multiple of 3.\e[0m\n\e[31m20 |\e[0m        \e[34m// We can count\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j]\
    \ + a[k] is a multiple of 3.\e[0m\n\e[31m21 |\e[0m        \e[34m// We can count\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j]\
    \ + a[k] is a multiple of 3.\e[0m\n\e[31m22 |\e[0m        \e[34m// We can count\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j]\
    \ + a[k] is a multiple of 3.\e[0m\n\e[31m23 |\e[0m        \e[34m// We can count\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j]\
    \ + a[k] is a multiple of 3.\e[0m\n\e[31m24 |\e[0m        \e[34m// We can count\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j\e\
    [0m\n\e[31m25 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797942
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0l\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjcng8tlc.scala:28)\n\tat Problem.main(tmpjcng8tlc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797944
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Let's first find the number\
    \ of triples that sum to a multiple of 3.\n        // Let's first find the number\
    \ of triples that sum to a multiple of 3.\n        // Let's first find the number\
    \ of triples that sum to a multiple of 3.\n        // Let's first find the number\
    \ of triples that sum to a multiple of 3.\n        // Let's first find the number\
    \ of triples that sum to a multiple of 3.\n        // Let's first find the number\
    \ of triples that sum to a multiple of 3.\n        // Let's first find the number\
    \ of triples that sum to a multiple of 3.\n        // Let's first find the number\
    \ of triples that sum to a multiple of 3.\n        // Let's first find the number\
    \ of triples that sum to a multiple of 3.\n        // Let's first find the number\
    \ of triples that sum to a multiple of 3.\n        // Let's first find the number\
    \ of triples that sum to a multiple of 3.\n        // Let's first find the number\
    \ of triples that sum to a multiple of 3.\n        // Let's first find the number\
    \ of triples that sum to a multiple of 3.\n        // Let's first find the number\
    \ of triples that sum to a multiple of 3.\n        // Let's first find the number\
    \ of triples that sum to a multiple of 3.\n        // Let's first find the number\
    \ of triples that sum to a multiple of 3.\n        // Let's first find the number\
    \ of triples that sum to a multiple of 3.\n        // Let's first find the number\
    \ of triples that sum to a multiple of 3.\n        // Let's first find the number\
    \ of triples that sum to a multiple of 3.\n        // Let's first find the number\
    \ of triples that sum to a multiple of 3.\n        // Let's first find the number\
    \ of triples that sum to a multiple of 3.\n        // Let's first find the number\
    \ of triples that sum to a multiple of 3.\n        // Let's first find the number\
    \ of triples that sum to a multiple of 3.\n        // Let's first find the number\
    \ of triples that sum to a multiple of 3.\n        // Let's first find the number\
    \ of triples that sum to a multiple of 3.\n        // Let's first find the number\
    \ of triples\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfu2iaj2h.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// Let's\
    \ first find the number of triples that sum to a multiple of 3.\e[0m\n\e[31m16\
    \ |\e[0m        \e[34m// Let's first find the number of triples that sum to a\
    \ multiple of 3.\e[0m\n\e[31m17 |\e[0m        \e[34m// Let's first find the number\
    \ of triples that sum to a multiple of 3.\e[0m\n\e[31m18 |\e[0m        \e[34m//\
    \ Let's first find the number of triples that sum to a multiple of 3.\e[0m\n\e\
    [31m19 |\e[0m        \e[34m// Let's first find the number of triples that sum\
    \ to a multiple of 3.\e[0m\n\e[31m20 |\e[0m        \e[34m// Let's first find the\
    \ number of triples that sum to a multiple of 3.\e[0m\n\e[31m21 |\e[0m       \
    \ \e[34m// Let's first find the number of triples that sum to a multiple of 3.\e\
    [0m\n\e[31m22 |\e[0m        \e[34m// Let's first find the number of triples that\
    \ sum to a multiple of 3.\e[0m\n\e[31m23 |\e[0m        \e[34m// Let's first find\
    \ the number of triples that sum to a multiple of 3.\e[0m\n\e[31m24 |\e[0m   \
    \     \e[34m// Let's first find the number of triples that sum to a multiple of\
    \ 3.\e[0m\n\e[31m25 |\e[0m        \e[34m// Let's first find the number of triples\
    \ that sum to a multiple of 3.\e[0m\n\e[31m26 |\e[0m        \e[34m// Let's first\
    \ find the number of triples that sum to a multiple of 3.\e[0m\n\e[31m27 |\e[0m\
    \        \e[34m// Let's first find the number of triples that sum to a multiple\
    \ of 3.\e[0m\n\e[31m28 |\e[0m        \e[34m// Let's first find the number of triples\
    \ that sum to a multiple of 3.\e[0m\n\e[31m29 |\e[0m        \e[34m// Let's first\
    \ find the number of triples that sum to a multiple of 3.\e[0m\n\e[31m30 |\e[0m\
    \        \e[34m// Let's first find the number of triples that sum to a multiple\
    \ of 3.\e[0m\n\e[31m31 |\e[0m        \e[34m// "
  stdout: ''
  timestamp: 1659797943
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0l\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6tktpwy_.scala:28)\n\tat Problem.main(tmp6tktpwy_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797923
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt1vxoa1w.scala:19)\n\tat Problem.main(tmpt1vxoa1w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = (1l to n).map(x =>\
    \ x * x - x + 1).toList\n        val b = a.combinations(3).filter(x => (x(0) +\
    \ x(1) + x(2)) % 3 == 0).toList\n        b.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797944
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0l\n        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797923
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // We can use the fact that\
    \ a[i] + a[j] + a[k] is a multiple of 3 if and only if\n        // a[i] + a[j]\
    \ is a multiple of 3.\n        // We can also use the fact that a[i] + a[j] is\
    \ a multiple of 3 if and only if\n        // a[i] is a multiple of 3 or a[j] is\
    \ a multiple of 3.\n        // So we can just count the number of multiples of\
    \ 3 in the list.\n        // The number of multiples of 3 in the list is n / 3.\n\
    \        // The number of triples is n / 3 * (n / 3 - 1) / 2.\n        n / 3 *\
    \ (n / 3 - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbc0x5vqt.scala:25)\n\tat Problem.main(tmpbc0x5vqt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797944
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // We can see that a[i] =\
    \ i * i - i + 1 is a quadratic function.\n        // We can also see that a[i]\
    \ is always odd.\n        // We can also see that a[i] + a[j] + a[k] is always\
    \ odd.\n        // We can also see that a[i] + a[j] + a[k] is always divisible\
    \ by 3.\n        // We can also see that a[i] + a[j] + a[k] is always divisible\
    \ by 6.\n        // We can also see that a[i] + a[j] + a[k] is always divisible\
    \ by 9.\n        // We can also see that a[i] + a[j] + a[k] is always divisible\
    \ by 12.\n        // We can also see that a[i] + a[j] + a[k] is always divisible\
    \ by 15.\n        // We can also see that a[i] + a[j] + a[k] is always divisible\
    \ by 18.\n        // We can also see that a[i] + a[j] + a[k] is always divisible\
    \ by 21.\n        // We can also see that a[i] + a[j] + a[k] is always divisible\
    \ by 24.\n        // We can also see that a[i] + a[j] + a[k] is always divisible\
    \ by 27.\n        // We can also see that a[i] + a[j] + a[k] is always divisible\
    \ by 30.\n        // We can also see that a[i] + a[j] + a[k] is always divisible\
    \ by 33.\n        // We can also see that a[i] + a[j] + a[k] is always divisible\
    \ by 36.\n        // We can also see that a[i] + a[j] + a[k] is always divisible\
    \ by 39.\n        // We can also see that a[i] + a[j] + a[k] is always divisible\
    \ by 42.\n        // We can also see that a[i] + a[j] + a[k] is always divisible\
    \ by 45.\n        // We can also see that a\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcoq_3y2x.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// We\
    \ can see that a[i] = i * i - i + 1 is a quadratic function.\e[0m\n\e[31m16 |\e\
    [0m        \e[34m// We can also see that a[i] is always odd.\e[0m\n\e[31m17 |\e\
    [0m        \e[34m// We can also see that a[i] + a[j] + a[k] is always odd.\e[0m\n\
    \e[31m18 |\e[0m        \e[34m// We can also see that a[i] + a[j] + a[k] is always\
    \ divisible by 3.\e[0m\n\e[31m19 |\e[0m        \e[34m// We can also see that a[i]\
    \ + a[j] + a[k] is always divisible by 6.\e[0m\n\e[31m20 |\e[0m        \e[34m//\
    \ We can also see that a[i] + a[j] + a[k] is always divisible by 9.\e[0m\n\e[31m21\
    \ |\e[0m        \e[34m// We can also see that a[i] + a[j] + a[k] is always divisible\
    \ by 12.\e[0m\n\e[31m22 |\e[0m        \e[34m// We can also see that a[i] + a[j]\
    \ + a[k] is always divisible by 15.\e[0m\n\e[31m23 |\e[0m        \e[34m// We can\
    \ also see that a[i] + a[j] + a[k] is always divisible by 18.\e[0m\n\e[31m24 |\e\
    [0m        \e[34m// We can also see that a[i] + a[j] + a[k] is always divisible\
    \ by 21.\e[0m\n\e[31m25 |\e[0m        \e[34m// We can also see that a[i] + a[j]\
    \ + a[k] is always divisible by 24.\e[0m\n\e[31m26 |\e[0m        \e[34m// We can\
    \ also see that a[i] + a[j] + a[k] is always divisible by 27.\e[0m\n\e[31m27 |\e\
    [0m        \e[34m// We can also see that a[i] + a[j] + a[k] is always divisible\
    \ by 30.\e[0m\n\e[31m28 |\e[0m        \e[34m// We can also see that a[i] + a[j]\
    \ + a[k] is always divisible by 33.\e[0m\n\e[31m29 |\e[0m        \e[34m// We can\
    \ also see that a[i] + a[j] + a[k] is always divisible by 36.\e[0m\n\e[31m30 |\e\
    [0m        \e[34m// We can also see that a[i] + a[j] + a[k] is always divisible\
    \ by 39.\e[0m\n\e[31m31 |\e[0m        \e[34m// We can also see that a[i] + a[j]\
    \ + a[k] is always divisible by"
  stdout: ''
  timestamp: 1659797943
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // We can see that a[i] +\
    \ a[j] + a[k] is a multiple of 3 if and only if a[i] + a[j] is a multiple of 3.\n\
    \        // So we need to find the number of pairs (a[i], a[j]) such that a[i]\
    \ + a[j] is a multiple of 3.\n        // For each i (1 \u2264 i \u2264 n), the\
    \ number of j (i < j \u2264 n) such that a[i] + a[j] is a multiple of 3 is (n\
    \ - i) / 3.\n        // So the answer is the sum of (n - i) / 3 for i = 1 to n.\n\
    \        // The sum of (n - i) / 3 for i = 1 to n is (n - 1) * n / 6.\n      \
    \  (n - 1) * n / 6\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk_1h_bn8.scala:23)\n\tat Problem.main(tmpk_1h_bn8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797944
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // We can see that a[i] =\
    \ i * i - i + 1 is a multiple of 3 if and only if i is a multiple of 3.\n    \
    \    // Therefore, the number of valid triples is equal to the number of triples\
    \ (i, j, k) such that\n        // i, j, k are all multiples of 3, and i < j <\
    \ k.\n        // We can see that the number of valid triples is equal to the number\
    \ of triples (i, j, k) such that\n        // i, j, k are all multiples of 3, and\
    \ i < j < k.\n        // We can see that the number of valid triples is equal\
    \ to the number of triples (i, j, k) such that\n        // i, j, k are all multiples\
    \ of 3, and i < j < k.\n        // We can see that the number of valid triples\
    \ is equal to the number of triples (i, j, k) such that\n        // i, j, k are\
    \ all multiples of 3, and i < j < k.\n        // We can see that the number of\
    \ valid triples is equal to the number of triples (i, j, k) such that\n      \
    \  // i, j, k are all multiples of 3, and i < j < k.\n        // We can see that\
    \ the number of valid triples is equal to the number of triples (i, j, k) such\
    \ that\n        // i, j, k are all multiples of 3, and i < j < k.\n        //\
    \ We can see that the number of valid triples is equal to the number of triples\
    \ (i, j, k) such that\n        // i, j, k are all multiples of 3, and i < j <\
    \ k.\n        // We can see that the number of valid triples is equal to the number\
    \ of triples (i, j, k) such that\n        // i, j, k are all multiples of 3, and\
    \ i < j < k.\n        // We can see that the number of valid triples is equal\
    \ to the number of triples (i, j, k) such that\n        // i, j, k are all multiples\
    \ of 3, and i < j < k.\n        // We can see that the number of valid\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_u3b31p0.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// We\
    \ can see that a[i] = i * i - i + 1 is a multiple of 3 if and only if i is a multiple\
    \ of 3.\e[0m\n\e[31m16 |\e[0m        \e[34m// Therefore, the number of valid triples\
    \ is equal to the number of triples (i, j, k) such that\e[0m\n\e[31m17 |\e[0m\
    \        \e[34m// i, j, k are all multiples of 3, and i < j < k.\e[0m\n\e[31m18\
    \ |\e[0m        \e[34m// We can see that the number of valid triples is equal\
    \ to the number of triples (i, j, k) such that\e[0m\n\e[31m19 |\e[0m        \e\
    [34m// i, j, k are all multiples of 3, and i < j < k.\e[0m\n\e[31m20 |\e[0m  \
    \      \e[34m// We can see that the number of valid triples is equal to the number\
    \ of triples (i, j, k) such that\e[0m\n\e[31m21 |\e[0m        \e[34m// i, j, k\
    \ are all multiples of 3, and i < j < k.\e[0m\n\e[31m22 |\e[0m        \e[34m//\
    \ We can see that the number of valid triples is equal to the number of triples\
    \ (i, j, k) such that\e[0m\n\e[31m23 |\e[0m        \e[34m// i, j, k are all multiples\
    \ of 3, and i < j < k.\e[0m\n\e[31m24 |\e[0m        \e[34m// We can see that the\
    \ number of valid triples is equal to the number of triples (i, j, k) such that\e\
    [0m\n\e[31m25 |\e[0m        \e[34m// i, j, k are all multiples of 3, and i < j\
    \ < k.\e[0m\n\e[31m26 |\e[0m        \e[34m// We can see that the number of valid\
    \ triples is equal to the number of triples (i, j, k) such that\e[0m\n\e[31m27\
    \ |\e[0m        \e[34m// i, j, k are all multiples of 3, and i < j < k.\e[0m\n\
    \e[31m28 |\e[0m        \e[34m// We can see that the number of valid triples is\
    \ equal to the number of triples (i, j, k) such that\e[0m\n\e[31m29 |\e[0m   \
    \     \e[34m// i, j, k are all multiples of 3, and i < j < k.\e[0m\n\e[31m30 |\e\
    [0m        \e[34m// We can see that th"
  stdout: ''
  timestamp: 1659797944
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0l)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var cnt = 0l\n\
    \        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until n.toInt\
    \ - 1) {\n                for (k <- j + 1 until n.toInt) {\n                 \
    \   if ((a(i) + a(j) + a(k)) % 3 == 0) cnt += 1\n                }\n         \
    \   }\n        }\n        cnt\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp32v9ssri.scala:28)\n\tat Problem.main(tmp32v9ssri.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797945
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Let's find the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n        // and a[i] +\
    \ a[j] + a[k] is a multiple of 3.\n        // We can find the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n        // and a[i] + a[j] + a[k]\
    \ is a multiple of 3 by finding the number of triples (a[i], a[j], a[k]) of a\
    \ where i < j < k, \n        // and a[i] + a[j] + a[k] is a multiple of 3, and\
    \ a[i] + a[j] is a multiple of 3.\n        // We can find the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n        // and a[i] + a[j] + a[k]\
    \ is a multiple of 3, and a[i] + a[j] is a multiple of 3 by finding the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n        // and a[i] +\
    \ a[j] + a[k] is a multiple of 3, and a[i] + a[j] is a multiple of 3, and a[i]\
    \ is a multiple of 3.\n        // We can find the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n        // and a[i] + a[j] + a[k] is a multiple\
    \ of 3, and a[i] + a[j] is a multiple of 3, and a[i] is a multiple of 3 by finding\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n        //\
    \ and a[i] + a[j] + a[k] is a multiple of 3, and a[i] + a[j] is a multiple of\
    \ 3, and a[i] is a multiple of 3, and a[j] is a multiple\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy9d2rz60.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// Let's\
    \ find the number of triples (a[i], a[j], a[k]) of a where i < j < k, \e[0m\n\e\
    [31m16 |\e[0m        \e[34m// and a[i] + a[j] + a[k] is a multiple of 3.\e[0m\n\
    \e[31m17 |\e[0m        \e[34m// We can find the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \e[0m\n\e[31m18 |\e[0m        \e[34m// and a[i]\
    \ + a[j] + a[k] is a multiple of 3 by finding the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \e[0m\n\e[31m19 |\e[0m        \e[34m// and a[i]\
    \ + a[j] + a[k] is a multiple of 3, and a[i] + a[j] is a multiple of 3.\e[0m\n\
    \e[31m20 |\e[0m        \e[34m// We can find the number of triples (a[i], a[j],\
    \ a[k]) of a where i < j < k, \e[0m\n\e[31m21 |\e[0m        \e[34m// and a[i]\
    \ + a[j] + a[k] is a multiple of 3, and a[i] + a[j] is a multiple of 3 by finding\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \e[0m\n\e[31m22\
    \ |\e[0m        \e[34m// and a[i] + a[j] + a[k] is a multiple of 3, and a[i] +\
    \ a[j] is a multiple of 3, and a[i] is a multiple of 3.\e[0m\n\e[31m23 |\e[0m\
    \        \e[34m// We can find the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \e[0m\n\e[31m24 |\e[0m        \e[34m// and a[i] + a[j] + a[k] is\
    \ a multiple of 3, and a[i] + a[j] is a multiple of 3, and a[i] is a multiple\
    \ of 3 by finding the number of triples (a[i], a[j], a[k]) of a where i < j <\
    \ k, \e[0m\n\e[31m25 |\e[0m        \e[34m// and a[i] + a[j] + a[k] is a multiple\
    \ of 3, and a[i] + a[j] is a multiple of 3, and a[i] is a multiple of 3, and a[j]\
    \ is a multiple\e[0m\n\e[31m26 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797944
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // We can see that the sum\
    \ of the first n odd numbers is n^2.\n        // We can also see that the sum\
    \ of the first n even numbers is n^2.\n        // Therefore, the sum of the first\
    \ n numbers is n^2.\n        // The sum of the first n odd numbers is n^2.\n \
    \       // The sum of the first n even numbers is n^2.\n        // The sum of\
    \ the first n odd numbers is n^2.\n        // The sum of the first n even numbers\
    \ is n^2.\n        // The sum of the first n odd numbers is n^2.\n        // The\
    \ sum of the first n even numbers is n^2.\n        // The sum of the first n odd\
    \ numbers is n^2.\n        // The sum of the first n even numbers is n^2.\n  \
    \      // The sum of the first n odd numbers is n^2.\n        // The sum of the\
    \ first n even numbers is n^2.\n        // The sum of the first n odd numbers\
    \ is n^2.\n        // The sum of the first n even numbers is n^2.\n        //\
    \ The sum of the first n odd numbers is n^2.\n        // The sum of the first\
    \ n even numbers is n^2.\n        // The sum of the first n odd numbers is n^2.\n\
    \        // The sum of the first n even numbers is n^2.\n        // The sum of\
    \ the first n odd numbers is n^2.\n        // The sum of the first n even numbers\
    \ is n^2.\n        // The sum of the first n odd numbers is n^2.\n        // The\
    \ sum of the first n even numbers is n^2.\n        // The sum of the first n odd\
    \ numbers is n^2.\n        // The sum of the first n even numbers is n^2.\n  \
    \      // The sum of the first n odd numbers is n^2.\n        // The sum of the\
    \ first n even numbers is n^2.\n        // The sum of the first n odd numbers\
    \ is n^2.\n        // The sum of the first n even numbers is n^2.\n        //\
    \ The sum of the first n odd numbers is n^2.\n        // The sum of the first\
    \ n even numbers is n^2.\n        // The sum of\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6e5fhg_4.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// We\
    \ can see that the sum of the first n odd numbers is n^2.\e[0m\n\e[31m16 |\e[0m\
    \        \e[34m// We can also see that the sum of the first n even numbers is\
    \ n^2.\e[0m\n\e[31m17 |\e[0m        \e[34m// Therefore, the sum of the first n\
    \ numbers is n^2.\e[0m\n\e[31m18 |\e[0m        \e[34m// The sum of the first n\
    \ odd numbers is n^2.\e[0m\n\e[31m19 |\e[0m        \e[34m// The sum of the first\
    \ n even numbers is n^2.\e[0m\n\e[31m20 |\e[0m        \e[34m// The sum of the\
    \ first n odd numbers is n^2.\e[0m\n\e[31m21 |\e[0m        \e[34m// The sum of\
    \ the first n even numbers is n^2.\e[0m\n\e[31m22 |\e[0m        \e[34m// The sum\
    \ of the first n odd numbers is n^2.\e[0m\n\e[31m23 |\e[0m        \e[34m// The\
    \ sum of the first n even numbers is n^2.\e[0m\n\e[31m24 |\e[0m        \e[34m//\
    \ The sum of the first n odd numbers is n^2.\e[0m\n\e[31m25 |\e[0m        \e[34m//\
    \ The sum of the first n even numbers is n^2.\e[0m\n\e[31m26 |\e[0m        \e\
    [34m// The sum of the first n odd numbers is n^2.\e[0m\n\e[31m27 |\e[0m      \
    \  \e[34m// The sum of the first n even numbers is n^2.\e[0m\n\e[31m28 |\e[0m\
    \        \e[34m// The sum of the first n odd numbers is n^2.\e[0m\n\e[31m29 |\e\
    [0m        \e[34m// The sum of the first n even numbers is n^2.\e[0m\n\e[31m30\
    \ |\e[0m        \e[34m// The sum of the first n odd numbers is n^2.\e[0m\n\e[31m31\
    \ |\e[0m        \e[34m// The sum of the first n even numbers is n^2.\e[0m\n\e\
    [31m32 |\e[0m        \e[34m// The sum of the first n odd numbers is n^2.\e[0m\n\
    \e[31m33 |\e[0m        \e[34m// The sum of the first n even numbers is n^2.\e\
    [0m\n\e[31m34 |\e[0m        \e[34m// The sum of the first n odd numbers is n^2.\e\
    [0m\n\e[31m35 |\e[0m        \e[34m// The sum of the first n even numbers is n^2."
  stdout: ''
  timestamp: 1659797944
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // We can use the fact that\
    \ a[i] = i * i - i + 1 is a multiple of 3 if and only if i is a multiple of 3.\n\
    \        // So we can count the number of multiples of 3 in the range [1, n].\n\
    \        // Let's call this number k.\n        // Then, the number of triples\
    \ is k * (k - 1) * (k - 2) / 6.\n        val k = n / 3\n        k * (k - 1) *\
    \ (k - 2) / 6\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpon7yk_8_.scala:23)\n\tat Problem.main(tmpon7yk_8_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797944
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var count = 0l\n        for\
    \ (i <- 1l to n - 2) {\n            for (j <- i + 1l to n - 1) {\n           \
    \     for (k <- j + 1l to n) {\n                    if ((i * i - i + 1 + j * j\
    \ - j + 1 + k * k - k + 1) % 3 == 0) {\n                        count += 1\n \
    \                   }\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797945
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0l\n        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797945
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0l)\n\
    \        for (i <- 1 to n.toInt) {\n            a(i - 1) = i * i - i + 1\n   \
    \     }\n        var count = 0l\n        for (i <- 0 to n.toInt - 3) {\n     \
    \       for (j <- i + 1 to n.toInt - 2) {\n                for (k <- j + 1 to\
    \ n.toInt - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) {\n \
    \                       count += 1\n                    }\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797945
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        var count = 0l\n        for\
    \ (i <- 1l to n - 2) {\n            for (j <- i + 1l to n - 1) {\n           \
    \     for (k <- j + 1l to n) {\n                    if ((i * i - i + 1 + j * j\
    \ - j + 1 + k * k - k + 1) % 3 == 0) count += 1\n                }\n         \
    \   }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n\
    \    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797935
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0\n        for (i <- 0 until n.toInt - 2) {\n            for (j <- i + 1 until\
    \ n.toInt - 1) {\n                for (k <- j + 1 until n.toInt) {\n         \
    \           if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797924
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt1vxoa1w.scala:19)\n\tat Problem.main(tmpt1vxoa1w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   val a = new Array[Long](n.toInt)\n        for (i <- 1 to n.toInt) {\n    \
    \        a(i - 1) = i * i - i + 1\n        }\n        var count = 0\n        for\
    \ (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt - 2) {\n \
    \               for (k <- j + 1 to n.toInt - 1) {\n                    if ((a(i)\
    \ + a(j) + a(k)) % 3 == 0) {\n                        count += 1\n           \
    \         }\n                }\n            }\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n\
    \    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l)) ==\
    \ (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797945
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // The number of triples\
    \ is equal to the number of triples where a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n        // a[i] + a[j] + a[k] is a multiple of 3 if and only if a[i] + a[j]\
    \ is a multiple of 3.\n        // a[i] + a[j] is a multiple of 3 if and only if\
    \ a[i] and a[j] have the same remainder when divided by 3.\n        // For each\
    \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        // a[i]\
    \ is a multiple of 3 if and only if i is a multiple of 3.\n        // a[i] is\
    \ a multiple of 3 if and only if i is a multiple of 3.\n        // a[i] is a multiple\
    \ of 3 if and only if i is a multiple of 3.\n        // a[i] is a multiple of\
    \ 3 if and only if i is a multiple of 3.\n        // a[i] is a multiple of 3 if\
    \ and only if i is a multiple of 3.\n        // a[i] is a multiple of 3 if and\
    \ only if i is a multiple of 3.\n        // a[i] is a multiple of 3 if and only\
    \ if i is a multiple of 3.\n        // a[i] is a multiple of 3 if and only if\
    \ i is a multiple of 3.\n        // a[i] is a multiple of 3 if and only if i is\
    \ a multiple of 3.\n        // a[i] is a multiple of 3 if and only if i is a multiple\
    \ of 3.\n        // a[i] is a multiple of 3 if and only if i is a multiple of\
    \ 3.\n        // a[i] is a multiple of 3 if and only if i is a multiple of 3.\n\
    \        // a[i] is a multiple of 3 if and only if i is a multiple of 3.\n   \
    \     // a[i] is a multiple of 3 if and only if i is a multiple of 3.\n      \
    \  // a[i] is a multiple of 3 if and only if i is a multiple of 3.\n        //\
    \ a[i] is a multiple of 3 if and only if i is a multiple of\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuwfflacs.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// The\
    \ number of triples is equal to the number of triples where a[i] + a[j] + a[k]\
    \ is a multiple of 3.\e[0m\n\e[31m16 |\e[0m        \e[34m// a[i] + a[j] + a[k]\
    \ is a multiple of 3 if and only if a[i] + a[j] is a multiple of 3.\e[0m\n\e[31m17\
    \ |\e[0m        \e[34m// a[i] + a[j] is a multiple of 3 if and only if a[i] and\
    \ a[j] have the same remainder when divided by 3.\e[0m\n\e[31m18 |\e[0m      \
    \  \e[34m// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i +\
    \ 1.\e[0m\n\e[31m19 |\e[0m        \e[34m// a[i] is a multiple of 3 if and only\
    \ if i is a multiple of 3.\e[0m\n\e[31m20 |\e[0m        \e[34m// a[i] is a multiple\
    \ of 3 if and only if i is a multiple of 3.\e[0m\n\e[31m21 |\e[0m        \e[34m//\
    \ a[i] is a multiple of 3 if and only if i is a multiple of 3.\e[0m\n\e[31m22\
    \ |\e[0m        \e[34m// a[i] is a multiple of 3 if and only if i is a multiple\
    \ of 3.\e[0m\n\e[31m23 |\e[0m        \e[34m// a[i] is a multiple of 3 if and only\
    \ if i is a multiple of 3.\e[0m\n\e[31m24 |\e[0m        \e[34m// a[i] is a multiple\
    \ of 3 if and only if i is a multiple of 3.\e[0m\n\e[31m25 |\e[0m        \e[34m//\
    \ a[i] is a multiple of 3 if and only if i is a multiple of 3.\e[0m\n\e[31m26\
    \ |\e[0m        \e[34m// a[i] is a multiple of 3 if and only if i is a multiple\
    \ of 3.\e[0m\n\e[31m27 |\e[0m        \e[34m// a[i] is a multiple of 3 if and only\
    \ if i is a multiple of 3.\e[0m\n\e[31m28 |\e[0m        \e[34m// a[i] is a multiple\
    \ of 3 if and only if i is a multiple of 3.\e[0m\n\e[31m29 |\e[0m        \e[34m//\
    \ a[i] is a multiple of 3 if and only if i is a multiple of 3.\e[0m\n\e[31m30\
    \ |\e[0m        \e[34m// a[i] is a multiple of 3 if and only if i is a multiple\
    \ of 3.\e[0m\n\e[31m31 |\e[0m        \e[34m// a[i] is "
  stdout: ''
  timestamp: 1659797945
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0l\n        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797923
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 0 until n.toInt) a(i) = i * i - i + 1\n        var count =\
    \ 0l\n        for (i <- 0 until n.toInt) {\n            for (j <- i + 1 until\
    \ n.toInt) {\n                for (k <- j + 1 until n.toInt) {\n             \
    \       if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n   \
    \         }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpba0j0pr6.scala:28)\n\tat Problem.main(tmpba0j0pr6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797923
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0\n        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n.toInt)(0)\n\
    \        for (i <- 1 to n.toInt) {\n            a(i - 1) = i * i - i + 1\n   \
    \     }\n        var count = 0\n        for (i <- 0 to n.toInt - 3) {\n      \
    \      for (j <- i + 1 to n.toInt - 2) {\n                for (k <- j + 1 to n.toInt\
    \ - 1) {\n                    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n\
    \                }\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797935
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // We can use the fact that\
    \ a[i] = i * i - i + 1 is a multiple of 3 if and only if i is a multiple of 3.\n\
    \        // Let's count the number of triples (a[i], a[j], a[k]) where i, j, k\
    \ are multiples of 3.\n        // We have to count the number of triples (i, j,\
    \ k) where i < j < k and i, j, k are multiples of 3.\n        // Let's count the\
    \ number of triples (i, j, k) where i < j < k.\n        // We have n choose 3\
    \ triples.\n        // Let's count the number of triples (i, j, k) where i, j,\
    \ k are multiples of 3.\n        // We have n / 3 choose 3 triples.\n        //\
    \ The answer is n choose 3 - n / 3 choose 3.\n        // The answer is n * (n\
    \ - 1) * (n - 2) / 6 - n / 3 * (n / 3 - 1) * (n / 3 - 2) / 6.\n        // The\
    \ answer is n * (n - 1) * (n - 2) / 6 - n * (n - 1) * (n - 2) / 18.\n        //\
    \ The answer is n * (n - 1) * (n - 2) / 18.\n        n * (n - 1) * (n - 2) / 18\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3w8c7asq.scala:29)\n\tat Problem.main(tmp3w8c7asq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797946
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // We can use the fact that\
    \ a[i] = i * i - i + 1 is a multiple of 3 if and only if i is a multiple of 3.\n\
    \        // So we can count the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n        // and a[i] + a[j] + a[k] is a multiple of 3.\n       \
    \ // We can do this by counting the number of triples (i, j, k) where i < j <\
    \ k, \n        // and i + j + k is a multiple of 3.\n        // We can do this\
    \ by counting the number of triples (i, j, k) where i < j < k, \n        // and\
    \ i + j + k is a multiple of 3.\n        // We can do this by counting the number\
    \ of triples (i, j, k) where i < j < k, \n        // and i + j + k is a multiple\
    \ of 3.\n        // We can do this by counting the number of triples (i, j, k)\
    \ where i < j < k, \n        // and i + j + k is a multiple of 3.\n        //\
    \ We can do this by counting the number of triples (i, j, k) where i < j < k,\
    \ \n        // and i + j + k is a multiple of 3.\n        // We can do this by\
    \ counting the number of triples (i, j, k) where i < j < k, \n        // and i\
    \ + j + k is a multiple of 3.\n        // We can do this by counting the number\
    \ of triples (i, j, k) where i < j < k, \n        // and i + j + k is a multiple\
    \ of 3.\n        // We can do this by counting the number of triples (i, j, k)\
    \ where i < j < k, \n        // and i + j + k is a multiple of 3.\n        //\
    \ We can do this by counting the number of triples (i, j, k) where i < j < k,\
    \ \n        // and i + j + k is a multiple of 3.\n        // We can do this by\
    \ counting the number of triples (i, j, k\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1gl79sib.scala:14:41\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m    \e[33mdef\e[0m \e[36mgetMaxTriples\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m15 |\e[0m        \e[34m// We\
    \ can use the fact that a[i] = i * i - i + 1 is a multiple of 3 if and only if\
    \ i is a multiple of 3.\e[0m\n\e[31m16 |\e[0m        \e[34m// So we can count\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \e[0m\n\e[31m17\
    \ |\e[0m        \e[34m// and a[i] + a[j] + a[k] is a multiple of 3.\e[0m\n\e[31m18\
    \ |\e[0m        \e[34m// We can do this by counting the number of triples (i,\
    \ j, k) where i < j < k, \e[0m\n\e[31m19 |\e[0m        \e[34m// and i + j + k\
    \ is a multiple of 3.\e[0m\n\e[31m20 |\e[0m        \e[34m// We can do this by\
    \ counting the number of triples (i, j, k) where i < j < k, \e[0m\n\e[31m21 |\e\
    [0m        \e[34m// and i + j + k is a multiple of 3.\e[0m\n\e[31m22 |\e[0m  \
    \      \e[34m// We can do this by counting the number of triples (i, j, k) where\
    \ i < j < k, \e[0m\n\e[31m23 |\e[0m        \e[34m// and i + j + k is a multiple\
    \ of 3.\e[0m\n\e[31m24 |\e[0m        \e[34m// We can do this by counting the number\
    \ of triples (i, j, k) where i < j < k, \e[0m\n\e[31m25 |\e[0m        \e[34m//\
    \ and i + j + k is a multiple of 3.\e[0m\n\e[31m26 |\e[0m        \e[34m// We can\
    \ do this by counting the number of triples (i, j, k) where i < j < k, \e[0m\n\
    \e[31m27 |\e[0m        \e[34m// and i + j + k is a multiple of 3.\e[0m\n\e[31m28\
    \ |\e[0m        \e[34m// We can do this by counting the number of triples (i,\
    \ j, k) where i < j < k, \e[0m\n\e[31m29 |\e[0m        \e[34m// and i + j + k\
    \ is a multiple of 3.\e[0m\n\e[31m30 |\e[0m        \e[34m// We can do this by\
    \ counting the number of triples (i, j, k) where i < j < k, \e[0m\n\e[31m31 |\e\
    [0m        \e[34m// and i + j + k is a multiple of 3.\e[0m\n\e[31m32 |\e[0m  \
    \      \e[34m// We can do this by counting the number of triples (i, "
  stdout: ''
  timestamp: 1659797946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        // Your code here\n     \
    \   return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxTriples((5l))\
    \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
    \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fw_y86u.scala:19)\n\tat Problem.main(tmp3fw_y86u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a positive integer n. You have to create an integer\
    \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of\
    \ a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n   \
    \ // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    def getMaxTriples(n : Long) : Long = {\n        val a = new Array[Long](n.toInt)\n\
    \        for (i <- 1 to n.toInt) a(i - 1) = i * i - i + 1\n        var count =\
    \ 0l\n        for (i <- 0 to n.toInt - 3) {\n            for (j <- i + 1 to n.toInt\
    \ - 2) {\n                for (k <- j + 1 to n.toInt - 1) {\n                \
    \    if ((a(i) + a(j) + a(k)) % 3 == 0) count += 1\n                }\n      \
    \      }\n        }\n        count\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getMaxTriples((5l)) == (1l));\n    assert(getMaxTriples((6l))\
    \ == (4l));\n    assert(getMaxTriples((10l)) == (36l));\n    assert(getMaxTriples((100l))\
    \ == (53361l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797923
