name: HumanEval_159_eat
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You're a hungry rabbit, and you already have eaten a certain number of carrots,\n\
  \    // but now you need to eat more carrots to complete the day's meals.\n    //\
  \ you should return a list of [ total number of eaten carrots after your meals,\n\
  \    // the number of carrots left after your meals ]\n    // if there are not enough\
  \ remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\
  \    // Example:\n    // >>> eat((5l), (6l), (10l))\n    // (List[Long](11l.toLong,\
  \ 4l.toLong))\n    // >>> eat((4l), (8l), (9l))\n    // (List[Long](12l.toLong,\
  \ 1l.toLong))\n    // >>> eat((1l), (10l), (10l))\n    // (List[Long](11l.toLong,\
  \ 0l.toLong))\n    // >>> eat((2l), (11l), (5l))\n    // (List[Long](7l.toLong,\
  \ 0l.toLong))\n    // Variables:\n    // @number : integer\n    // the number of\
  \ carrots that you have eaten.\n    // @need : integer\n    // the number of carrots\
  \ that you need to eat.\n    // @remaining : integer\n    // the number of remaining\
  \ carrots thet exist in stock\n    // Constrain:\n    // * 0 <= number <= 1000\n\
  \    // * 0 <= need <= 1000\n    // * 0 <= remaining <= 1000\n    // Have fun :)\n\
  \    def eat(number : Long, need : Long, remaining : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(eat((5l), (6l), (10l)).equals((List[Long](11l.toLong,\
  \ 4l.toLong))));\n    assert(eat((4l), (8l), (9l)).equals((List[Long](12l.toLong,\
  \ 1l.toLong))));\n    assert(eat((1l), (10l), (10l)).equals((List[Long](11l.toLong,\
  \ 0l.toLong))));\n    assert(eat((2l), (11l), (5l)).equals((List[Long](7l.toLong,\
  \ 0l.toLong))));\n    assert(eat((4l), (5l), (7l)).equals((List[Long](9l.toLong,\
  \ 2l.toLong))));\n    assert(eat((4l), (5l), (1l)).equals((List[Long](5l.toLong,\
  \ 0l.toLong))));\n    }\n\n}\n"
completions: ["        // Write your code here\n        // To print results to the\
    \ standard output you can use Console.println\n        // Example:\n        //\
    \ Console.println(\"Hello world\")\n        var result = List[Long]()\n      \
    \  if(remaining >= need) {\n            result = List(number + need, remaining\
    \ - need)\n        } else {\n            result = List(number + remaining, 0)\n\
    \        }\n        result", "        // Write your code here\n        // To print\
    \ results to the standard output you can use Console.println\n        // Example:\n\
    \        // Console.println(\"Hello world\")\n        var result = List[Long]()\n\
    \        var total = number + need\n        if (total > remaining) {\n       \
    \     result = List(remaining, 0)\n        } else {\n            result = List(total,\
    \ remaining - total)\n        }\n        result", "        var result = List[Long]()\n\
    \        if (number + need <= remaining) {\n            result = List(number +\
    \ need, remaining - (number + need))\n        } else {\n            result = List(remaining,\
    \ 0)\n        }\n        return result", "        // Write your code here\n  \
    \      // To print results to the standard output you can use Console.println\n\
    \        // Example:\n        // Console.println(\"Hello world\")\n        var\
    \ result = List[Long]()\n        if (remaining < need) {\n            result =\
    \ List(number + remaining, 0)\n        } else {\n            result = List(number\
    \ + need, remaining - need)\n        }\n        result", "        // Write your\
    \ code here\n        // To print results to the standard output you can use Console.println\n\
    \        // Example:\n        // Console.println(\"Hello world\")\n        var\
    \ result = List[Long]()\n        var total = number + need\n        if (total\
    \ > remaining) {\n            result = List(remaining, 0)\n        } else {\n\
    \            result = List(total, remaining - total)\n        }\n        result",
  "        if (remaining >= need) {\n            List(number + need, remaining - need)\n\
    \        } else {\n            List(number + remaining, 0)\n        }", "    \
    \    // Write your code here\n        // To print results to the standard output\
    \ you can use Console.println\n        // Example:\n        // Console.println(\"\
    Hello world\")\n        var result = List[Long]()\n        if (number + need <=\
    \ remaining) {\n            result = List(number + need, remaining - (number +\
    \ need))\n        } else {\n            result = List(remaining, 0)\n        }\n\
    \        result", "        // Write your code here\n        // To print results\
    \ to the standard output you can use Console.println\n        // Example:\n  \
    \      // Console.println(\"Hello world\")\n        var result = List[Long]()\n\
    \        if (remaining >= need) {\n            result = List(number + need, remaining\
    \ - need)\n        } else {\n            result = List(number + remaining, 0)\n\
    \        }\n        result", "        // Your code here\n        List(0, 0)",
  "        // Your code here\n        var result = List[Long]()\n        if (number\
    \ + need > remaining) {\n            result = List(remaining, 0)\n        } else\
    \ {\n            result = List(number + need, remaining - (number + need))\n \
    \       }\n        result", "        var result = List[Long]()\n        if (remaining\
    \ >= need) {\n            result = List[Long](number + need, remaining - need)\n\
    \        } else {\n            result = List[Long](number + remaining, 0)\n  \
    \      }\n        return result", "        var result = List[Long]()\n       \
    \ if (remaining >= need) {\n            result = List[Long](number + need, remaining\
    \ - need)\n        } else {\n            result = List[Long](number + remaining,\
    \ 0)\n        }\n        return result", "        var result = List[Long]()\n\
    \        if (remaining < need) {\n            result = List(number + remaining,\
    \ 0)\n        } else {\n            result = List(number + need, remaining - need)\n\
    \        }\n        result", "        var result = List[Long]()\n        var eaten\
    \ = number\n        var left = remaining\n        if (need <= remaining) {\n \
    \           eaten += need\n            left -= need\n        } else {\n      \
    \      eaten += remaining\n            left = 0\n        }\n        result = eaten\
    \ :: left :: result\n        result", "        // Write your code here\n     \
    \   // To print results to the standard output you can use Console.println\n \
    \       // Example:\n        // Console.println(\"Hello world\")\n        var\
    \ result = List[Long]()\n        if (remaining >= need) {\n            result\
    \ = List(number + need, remaining - need)\n        } else {\n            result\
    \ = List(number + remaining, 0)\n        }\n        result", "        // your\
    \ code here\n        List[Long](number + need, remaining - need)", "        //\
    \ Write your code here\n        // To print results to the standard output you\
    \ can use Console.println\n        // Example:\n        // Console.println(\"\
    Hello world\")\n        var result = new ListBuffer[Long]()\n        if (remaining\
    \ < need) {\n            result += number + remaining\n            result += 0\n\
    \        } else {\n            result += number + need\n            result +=\
    \ remaining - need\n        }\n        result.toList", "        // your code here\n\
    \        List(0l, 0l)", "        // Write your code here\n        // To print\
    \ results to the standard output you can use Console.println\n        // Example:\n\
    \        // Console.println(\"Hello world\")\n        var result = List[Long]()\n\
    \        if (remaining >= need) {\n            result = List(number + need, remaining\
    \ - need)\n        } else {\n            result = List(number + remaining, 0)\n\
    \        }\n        result", "        var result = List[Long]()\n        var total\
    \ = number + need\n        if (total > remaining) {\n            result = List(remaining,\
    \ 0)\n        } else {\n            result = List(total, remaining - total)\n\
    \        }\n        result"]
stop_tokens:
- "\n    }\n"
