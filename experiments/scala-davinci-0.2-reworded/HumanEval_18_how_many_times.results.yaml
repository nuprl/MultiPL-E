language: scala
name: HumanEval_18_how_many_times
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ index = string.indexOf(substring)\n        while (index != -1) {\n         \
    \   count += 1\n            index = string.indexOf(substring, index + 1)\n   \
    \     }\n        return count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ index = 0\n        while (index < string.length) {\n            if (string.substring(index).startsWith(substring))\
    \ {\n                count += 1\n                index += substring.length\n \
    \           }\n            else index += 1\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnr0ox6lj.scala:26)\n\tat Problem.main(tmpnr0ox6lj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ index = 0\n        while(index < string.length) {\n            if(string.substring(index).startsWith(substring))\
    \ {\n                count += 1\n                index += substring.length\n \
    \           }\n            else index += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpse65po02.scala:26)\n\tat Problem.main(tmpse65po02.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaz7bmmq.scala:27)\n\tat Problem.main(tmpmaz7bmmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ index = 0\n        while (index != -1) {\n            index = string.indexOf(substring,\
    \ index)\n            if (index != -1) {\n                count += 1\n       \
    \         index += 1\n            }\n        }\n        return count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ index = 0\n        while (index < string.length) {\n            if (string.indexOf(substring,\
    \ index) == index) {\n                count += 1\n                index += substring.length\n\
    \            }\n            else index += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf6i7mkul.scala:26)\n\tat Problem.main(tmpf6i7mkul.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaz7bmmq.scala:27)\n\tat Problem.main(tmpmaz7bmmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ index = 0\n        while (index != -1) {\n            index = string.indexOf(substring,\
    \ index)\n            if (index != -1) {\n                count += 1\n       \
    \         index += 1\n            }\n        }\n        return count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ index = string.indexOf(substring)\n        while (index != -1) {\n         \
    \   count += 1\n            index = string.indexOf(substring, index + 1)\n   \
    \     }\n        return count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) {\n                count += 1\n        \
    \    }\n        }\n        return count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaz7bmmq.scala:27)\n\tat Problem.main(tmpmaz7bmmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ index = 0\n        while (index < string.length) {\n            if (string.indexOf(substring,\
    \ index) != -1) {\n                count += 1\n                index = string.indexOf(substring,\
    \ index) + 1\n            }\n            else index = string.length\n        }\n\
    \        return count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ index = 0\n        while (index < string.length) {\n            if (string.substring(index).startsWith(substring))\
    \ {\n                count += 1\n                index += substring.length\n \
    \           }\n            else index += 1\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnr0ox6lj.scala:26)\n\tat Problem.main(tmpnr0ox6lj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaz7bmmq.scala:27)\n\tat Problem.main(tmpmaz7bmmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaz7bmmq.scala:27)\n\tat Problem.main(tmpmaz7bmmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) {\n                count += 1\n        \
    \    }\n        }\n        return count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ index = 0\n        while (index != -1) {\n            index = string.indexOf(substring,\
    \ index)\n            if (index != -1) {\n                count += 1\n       \
    \         index += 1\n            }\n        }\n        return count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaz7bmmq.scala:27)\n\tat Problem.main(tmpmaz7bmmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaz7bmmq.scala:27)\n\tat Problem.main(tmpmaz7bmmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaz7bmmq.scala:27)\n\tat Problem.main(tmpmaz7bmmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaz7bmmq.scala:27)\n\tat Problem.main(tmpmaz7bmmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaz7bmmq.scala:27)\n\tat Problem.main(tmpmaz7bmmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ index = 0\n        while (index < string.length) {\n            if (string.substring(index).startsWith(substring))\
    \ {\n                count += 1\n                index += substring.length\n \
    \           }\n            else index += 1\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnr0ox6lj.scala:26)\n\tat Problem.main(tmpnr0ox6lj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaz7bmmq.scala:27)\n\tat Problem.main(tmpmaz7bmmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i <= string.length - substring.length) {\n           \
    \ if (string.substring(i, i + substring.length) == substring) {\n            \
    \    count += 1\n                i += substring.length\n            }\n      \
    \      else i += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8p1aqfx2.scala:26)\n\tat Problem.main(tmp8p1aqfx2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ index = 0\n        while (index < string.length) {\n            if (string.substring(index).startsWith(substring))\
    \ {\n                count += 1\n                index += substring.length\n \
    \           }\n            else index += 1\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnr0ox6lj.scala:26)\n\tat Problem.main(tmpnr0ox6lj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaz7bmmq.scala:27)\n\tat Problem.main(tmpmaz7bmmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        if (string.length < substring.length)\
    \ return 0\n        var count = 0\n        for (i <- 0 to string.length - substring.length)\
    \ {\n            if (string.substring(i, i + substring.length) == substring) count\
    \ += 1\n        }\n        return count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) {\n                count += 1\n        \
    \    }\n        }\n        return count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaz7bmmq.scala:27)\n\tat Problem.main(tmpmaz7bmmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) {\n                count += 1\n        \
    \    }\n        }\n        return count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ index = 0\n        while (index < string.length) {\n            if (string.substring(index).startsWith(substring))\
    \ {\n                count += 1\n                index += substring.length\n \
    \           }\n            else index += 1\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnr0ox6lj.scala:26)\n\tat Problem.main(tmpnr0ox6lj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ index = 0\n        while (index != -1) {\n            index = string.indexOf(substring,\
    \ index)\n            if (index != -1) {\n                count += 1\n       \
    \         index += 1\n            }\n        }\n        return count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val n = string.length\n  \
    \      val m = substring.length\n        var count = 0l\n        for (i <- 0 until\
    \ n - m + 1) {\n            var found = true\n            for (j <- 0 until m)\
    \ {\n                if (string(i + j) != substring(j)) {\n                  \
    \  found = false\n                    break\n                }\n            }\n\
    \            if (found) count += 1\n        }\n        return count\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9kk2i3l4.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797558
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length - substring.length + 1) {\n        \
    \    if (string.substring(i, i + substring.length) == substring) {\n         \
    \       count += 1\n                i += substring.length\n            }\n   \
    \         else i += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpodecw0et.scala:26)\n\tat Problem.main(tmpodecw0et.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaz7bmmq.scala:27)\n\tat Problem.main(tmpmaz7bmmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) {\n                count += 1\n        \
    \    }\n        }\n        return count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0L\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaz7bmmq.scala:27)\n\tat Problem.main(tmpmaz7bmmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ index = string.indexOf(substring)\n        while (index != -1) {\n         \
    \   count += 1\n            index = string.indexOf(substring, index + 1)\n   \
    \     }\n        return count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length - substring.length + 1) {\n        \
    \    if (string.substring(i, i + substring.length) == substring) {\n         \
    \       count += 1\n                i += substring.length\n            }\n   \
    \         else i += 1\n        }\n        return count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu8a1k_2h.scala:26)\n\tat Problem.main(tmpu8a1k_2h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaz7bmmq.scala:27)\n\tat Problem.main(tmpmaz7bmmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaz7bmmq.scala:27)\n\tat Problem.main(tmpmaz7bmmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaz7bmmq.scala:27)\n\tat Problem.main(tmpmaz7bmmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaz7bmmq.scala:27)\n\tat Problem.main(tmpmaz7bmmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ index = 0\n        while (index != -1) {\n            index = string.indexOf(substring,\
    \ index)\n            if (index != -1) {\n                count += 1\n       \
    \         index += 1\n            }\n        }\n        return count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        if (string.length < substring.length)\
    \ return 0l\n        if (string.length == substring.length) {\n            if\
    \ (string == substring) return 1l\n            else return 0l\n        }\n   \
    \     var count = 0l\n        var i = 0\n        while (i < string.length - substring.length\
    \ + 1) {\n            if (string.substring(i, i + substring.length) == substring)\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       }\n            else i += 1\n        }\n        return count\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnazhn6ml.scala:31)\n\tat Problem.main(tmpnazhn6ml.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ index = 0\n        while (index != -1) {\n            index = string.indexOf(substring,\
    \ index)\n            if (index != -1) {\n                count += 1\n       \
    \         index += 1\n            }\n        }\n        return count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ index = 0\n        while (index != -1) {\n            index = string.indexOf(substring,\
    \ index)\n            if (index != -1) {\n                count += 1\n       \
    \         index += 1\n            }\n        }\n        return count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ index = 0\n        while (index != -1) {\n            index = string.indexOf(substring,\
    \ index)\n            if (index != -1) {\n                count += 1\n       \
    \         index += 1\n            }\n        }\n        return count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ index = 0\n        while (index != -1) {\n            index = string.indexOf(substring,\
    \ index)\n            if (index != -1) {\n                count += 1\n       \
    \         index += 1\n            }\n        }\n        return count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        if (string.length < substring.length)\
    \ return 0\n        var count = 0\n        for (i <- 0 to string.length - substring.length)\
    \ {\n            if (string.substring(i, i + substring.length) == substring) count\
    \ += 1\n        }\n        return count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length - substring.length + 1) {\n        \
    \    if (string.substring(i, i + substring.length) == substring) {\n         \
    \       count += 1\n                i += substring.length\n            }\n   \
    \         else i += 1\n        }\n        return count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu8a1k_2h.scala:26)\n\tat Problem.main(tmpu8a1k_2h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ index = 0\n        while (index != -1) {\n            index = string.indexOf(substring,\
    \ index)\n            if (index != -1) {\n                count += 1\n       \
    \         index += 1\n            }\n        }\n        return count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ index = 0\n        while (index != -1) {\n            index = string.indexOf(substring,\
    \ index)\n            if (index != -1) {\n                count += 1\n       \
    \         index += 1\n            }\n        }\n        return count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaz7bmmq.scala:27)\n\tat Problem.main(tmpmaz7bmmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaz7bmmq.scala:27)\n\tat Problem.main(tmpmaz7bmmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ index = 0\n        while (index < string.length) {\n            val i = string.indexOf(substring,\
    \ index)\n            if (i == -1) return count\n            count += 1\n    \
    \        index = i + 1\n        }\n        return count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length - substring.length + 1) {\n        \
    \    if (string.substring(i, i + substring.length) == substring) {\n         \
    \       count += 1\n                i += substring.length\n            }\n   \
    \         else i += 1\n        }\n        return count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu8a1k_2h.scala:26)\n\tat Problem.main(tmpu8a1k_2h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaz7bmmq.scala:27)\n\tat Problem.main(tmpmaz7bmmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val n = string.length\n  \
    \      val m = substring.length\n        var count = 0l\n        for (i <- 0 until\
    \ n - m + 1) {\n            if (string.substring(i, i + m) == substring) count\
    \ += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaz7bmmq.scala:27)\n\tat Problem.main(tmpmaz7bmmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ index = 0\n        while (index != -1) {\n            index = string.indexOf(substring,\
    \ index)\n            if (index != -1) {\n                count += 1\n       \
    \         index += 1\n            }\n        }\n        return count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ index = 0\n        while (index != -1) {\n            index = string.indexOf(substring,\
    \ index)\n            if (index != -1) {\n                count += 1\n       \
    \         index += 1\n            }\n        }\n        return count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaz7bmmq.scala:27)\n\tat Problem.main(tmpmaz7bmmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaz7bmmq.scala:27)\n\tat Problem.main(tmpmaz7bmmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ index = 0\n        while (index < string.length) {\n            val result =\
    \ string.indexOf(substring, index)\n            if (result == -1) return count\n\
    \            count += 1\n            index = result + 1\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) {\n                count += 1\n        \
    \    }\n        }\n        return count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ index = 0\n        while (index < string.length) {\n            if (string.substring(index).startsWith(substring))\
    \ {\n                count += 1\n                index += substring.length\n \
    \           }\n            else index += 1\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnr0ox6lj.scala:26)\n\tat Problem.main(tmpnr0ox6lj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ index = 0\n        while (index != -1) {\n            index = string.indexOf(substring,\
    \ index)\n            if (index != -1) {\n                count += 1\n       \
    \         index += 1\n            }\n        }\n        return count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ index = 0\n        while (index < string.length) {\n            if (string.substring(index).startsWith(substring))\
    \ {\n                count += 1\n                index += substring.length\n \
    \           }\n            else index += 1\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnr0ox6lj.scala:26)\n\tat Problem.main(tmpnr0ox6lj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ index = 0\n        while (index < string.length) {\n            if (string.substring(index).startsWith(substring))\
    \ {\n                count += 1\n                index += substring.length\n \
    \           }\n            else index += 1\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnr0ox6lj.scala:26)\n\tat Problem.main(tmpnr0ox6lj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaz7bmmq.scala:27)\n\tat Problem.main(tmpmaz7bmmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaz7bmmq.scala:27)\n\tat Problem.main(tmpmaz7bmmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ index = 0\n        while (index < string.length) {\n            val subIndex\
    \ = string.indexOf(substring, index)\n            if (subIndex == -1) return count\n\
    \            count += 1\n            index = subIndex + 1\n        }\n       \
    \ return count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ index = 0\n        while (index != -1) {\n            index = string.indexOf(substring,\
    \ index)\n            if (index != -1) {\n                count += 1\n       \
    \         index += 1\n            }\n        }\n        return count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaz7bmmq.scala:27)\n\tat Problem.main(tmpmaz7bmmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) {\n                count += 1\n        \
    \    }\n        }\n        return count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ index = 0\n        while (index < string.length) {\n            if (string.substring(index).startsWith(substring))\
    \ {\n                count += 1\n                index += substring.length\n \
    \           }\n            else index += 1\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnr0ox6lj.scala:26)\n\tat Problem.main(tmpnr0ox6lj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ index = 0\n        while(index < string.length) {\n            if(string.substring(index).startsWith(substring))\
    \ {\n                count += 1\n                index += substring.length\n \
    \           }\n            else index += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpse65po02.scala:26)\n\tat Problem.main(tmpse65po02.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaz7bmmq.scala:27)\n\tat Problem.main(tmpmaz7bmmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ index = 0\n        while (index < string.length) {\n            if (string.substring(index).startsWith(substring))\
    \ {\n                count += 1\n                index += substring.length\n \
    \           }\n            else index += 1\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnr0ox6lj.scala:26)\n\tat Problem.main(tmpnr0ox6lj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val n = string.length\n  \
    \      val m = substring.length\n        var count = 0l\n        for (i <- 0 until\
    \ n - m + 1) {\n            var matchFound = true\n            for (j <- 0 until\
    \ m) {\n                if (string(i + j) != substring(j)) {\n               \
    \     matchFound = false\n                    break\n                }\n     \
    \       }\n            if (matchFound) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf8aljfgo.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797558
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ index = 0\n        while (index != -1) {\n            index = string.indexOf(substring,\
    \ index)\n            if (index != -1) {\n                count += 1\n       \
    \         index += 1\n            }\n        }\n        return count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) {\n                count += 1\n        \
    \    }\n        }\n        return count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) {\n                count += 1\n        \
    \    }\n        }\n        return count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val n = string.length\n  \
    \      val m = substring.length\n        val dp = Array.fill(n + 1, m + 1)(0l)\n\
    \        for (i <- 0 to n) {\n            for (j <- 0 to m) {\n              \
    \  if (i == 0 || j == 0) dp(i)(j) = 0\n                else if (string(i - 1)\
    \ == substring(j - 1)) dp(i)(j) = dp(i - 1)(j - 1) + 1\n                else dp(i)(j)\
    \ = dp(i - 1)(j)\n            }\n        }\n        dp(n)(m)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcid90d81.scala:26)\n\tat Problem.main(tmpcid90d81.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ index = 0\n        while (index < string.length) {\n            val subIndex\
    \ = string.indexOf(substring, index)\n            if (subIndex == -1) {\n    \
    \            return count\n            }\n            count += 1\n           \
    \ index = subIndex + 1\n        }\n        return count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaz7bmmq.scala:27)\n\tat Problem.main(tmpmaz7bmmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        if (string.length < substring.length)\
    \ return 0\n        var count = 0\n        for (i <- 0 to string.length - substring.length)\
    \ {\n            if (string.substring(i, i + substring.length) == substring) count\
    \ += 1\n        }\n        return count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaz7bmmq.scala:27)\n\tat Problem.main(tmpmaz7bmmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaz7bmmq.scala:27)\n\tat Problem.main(tmpmaz7bmmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val n = string.length\n  \
    \      val m = substring.length\n        var count = 0l\n        for (i <- 0 until\
    \ n - m + 1) {\n            var flag = true\n            for (j <- 0 until m)\
    \ {\n                if (string(i + j) != substring(j)) {\n                  \
    \  flag = false\n                    break\n                }\n            }\n\
    \            if (flag) count += 1\n        }\n        return count\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7o_yr85e.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797561
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length - substring.length + 1) {\n        \
    \    if (string.substring(i, i + substring.length) == substring) {\n         \
    \       count += 1\n                i += substring.length\n            }\n   \
    \         else i += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpodecw0et.scala:26)\n\tat Problem.main(tmpodecw0et.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) {\n                count += 1\n        \
    \    }\n        }\n        return count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaz7bmmq.scala:27)\n\tat Problem.main(tmpmaz7bmmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ index = 0\n        while (index < string.length) {\n            if (string.substring(index).startsWith(substring))\
    \ {\n                count += 1\n                index += substring.length\n \
    \           }\n            else index += 1\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnr0ox6lj.scala:26)\n\tat Problem.main(tmpnr0ox6lj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) {\n                count += 1\n        \
    \    }\n        }\n        return count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaz7bmmq.scala:27)\n\tat Problem.main(tmpmaz7bmmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaz7bmmq.scala:27)\n\tat Problem.main(tmpmaz7bmmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaz7bmmq.scala:27)\n\tat Problem.main(tmpmaz7bmmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        return\
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaz7bmmq.scala:27)\n\tat Problem.main(tmpmaz7bmmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        var\
    \ index = 0\n        while (index != -1) {\n            index = string.indexOf(substring,\
    \ index)\n            if (index != -1) {\n                count += 1\n       \
    \         index += 1\n            }\n        }\n        return count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) {\n                count += 1\n        \
    \    }\n        }\n        return count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        if (string.length < substring.length)\
    \ return 0\n        if (string.length == substring.length) return if (string ==\
    \ substring) 1 else 0\n        var count = 0\n        for (i <- 0 to string.length\
    \ - substring.length) {\n            if (string.substring(i, i + substring.length)\
    \ == substring) count += 1\n        }\n        return count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797562
