language: scala
name: HumanEval_49_modp
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exp : Long = n\n        while (exp > 0) {\n            if ((exp & 1)\
    \ == 1) {\n                result = (result * base) % p\n            }\n     \
    \       exp >>= 1\n            base = (base * base) % p\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var i : Long = 0\n      \
    \  while(i < n) {\n            result = (result * 2) % p\n            i += 1\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exp : Long = n\n        while (exp > 0) {\n            if ((exp & 1)\
    \ == 1) {\n                result = (result * base) % p\n            }\n     \
    \       exp >>= 1\n            base = (base * base) % p\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var res = 1l\n        var x = n\n        var y = p\n   \
    \     while (x > 0) {\n            if ((x & 1) == 1) {\n                res =\
    \ (res * x) % y\n            }\n            x = x >> 1\n            y = (y * y)\
    \ % p\n        }\n        return res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.modp(tmppktyffzy.scala:21)\n\
    \tat Problem$.main(tmppktyffzy.scala:29)\n\tat Problem.main(tmppktyffzy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exp : Long = n\n        while (exp > 0) {\n            if ((exp & 1)\
    \ == 1) {\n                result = (result * base) % p\n            }\n     \
    \       exp >>= 1\n            base = (base * base) % p\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var b : Long = 2\n      \
    \  var e : Long = n\n        while (e > 0) {\n            if ((e & 1) == 1) {\n\
    \                result = (result * b) % p\n            }\n            e = e >>\
    \ 1\n            b = (b * b) % p\n        }\n        return result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        var result = 1l\n        var\
    \ base = 2l\n        var exponent = n\n        while (exponent > 0) {\n      \
    \      if ((exponent & 1) == 1) {\n                result = (result * base) %\
    \ p\n            }\n            base = (base * base) % p\n            exponent\
    \ >>= 1\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        if (n % 2 == 0) {\n      \
    \      val x = modp(n / 2, p)\n            return (x * x) % p\n        }\n   \
    \     else return (modp(n - 1, p) * 2) % p\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var b : Long = 2\n      \
    \  var e : Long = n\n        while (e > 0) {\n            if ((e & 1) == 1) result\
    \ = (result * b) % p\n            e >>= 1\n            b = (b * b) % p\n     \
    \   }\n        return result\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        var m = modp(n / 2, p)\n \
    \       m = (m * m) % p\n        if (n % 2 == 1) m = (m * 2) % p\n        return\
    \ m\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exponent : Long = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exp : Long = n\n        while (exp > 0) {\n            if ((exp & 1)\
    \ == 1) {\n                result = (result * base) % p\n            }\n     \
    \       exp >>= 1\n            base = (base * base) % p\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var b : Long = 2\n      \
    \  var m : Long = n\n        while (m > 0) {\n            if ((m & 1) == 1) {\n\
    \                result = (result * b) % p\n            }\n            m >>= 1\n\
    \            b = (b * b) % p\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exp : Long = n\n        while (exp > 0) {\n            if ((exp & 1)\
    \ == 1) {\n                result = (result * base) % p\n            }\n     \
    \       exp >>= 1\n            base = (base * base) % p\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        if (n % 2 == 0) {\n      \
    \      val x = modp(n / 2, p)\n            return (x * x) % p\n        }\n   \
    \     return (n * modp(n - 1, p)) % p\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4vvc8tlk.scala:25)\n\tat Problem.main(tmp4vvc8tlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exp : Long = n\n        while (exp > 0) {\n            if ((exp & 1)\
    \ == 1) {\n                result = (result * base) % p\n            }\n     \
    \       exp >>= 1\n            base = (base * base) % p\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        if (n % 2 == 0) {\n      \
    \      val t = modp(n / 2, p)\n            return (t * t) % p\n        }\n   \
    \     else return (modp(n - 1, p) * 2) % p\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var power : Long = n\n  \
    \      var mod : Long = p\n        while (power > 0) {\n            if ((power\
    \ & 1) == 1) {\n                result = (result * n) % p\n            }\n   \
    \         power >>= 1\n            n = (n * n) % p\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpdmgdw2bb.scala:24:14 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            n = (n * n) % p\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800156
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        var result = 1l\n        var\
    \ b = n\n        var e = p - 2\n        while (e > 0) {\n            if ((e &\
    \ 1) == 1) result = (result * b) % p\n            b = (b * b) % p\n          \
    \  e >>= 1\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxvu4fx3d.scala:28)\n\tat Problem.main(tmpxvu4fx3d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        var result = 1l\n        var\
    \ x = n\n        var y = p\n        while (x > 0) {\n            if ((x & 1) ==\
    \ 1) {\n                result = (result * y) % p\n            }\n           \
    \ x >>= 1\n            y = (y * y) % p\n        }\n        return result\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6c3dje28.scala:30)\n\tat Problem.main(tmp6c3dje28.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var res = 1l\n        var b = n\n        var e = p - 2l\n\
    \        while (e > 0) {\n            if (e % 2 == 1) {\n                res =\
    \ (res * b) % p\n            }\n            e >>= 1\n            b = (b * b) %\
    \ p\n        }\n        return res\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy1evrkpi.scala:29)\n\tat Problem.main(tmpy1evrkpi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1l\n        var power : Long = n\n \
    \       var base : Long = 2l\n        while (power > 0) {\n            if ((power\
    \ & 1) == 1) {\n                result = (result * base) % p\n            }\n\
    \            base = (base * base) % p\n            power >>= 1\n        }\n  \
    \      return result\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var res = 1l\n        var x = n\n        var y = p\n   \
    \     while (x > 0) {\n            if ((x & 1) == 1) {\n                res =\
    \ (res * y) % p\n            }\n            x >>= 1\n            y = (y * y) %\
    \ p\n        }\n        res\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprhof6om8.scala:29)\n\tat Problem.main(tmprhof6om8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800158
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var nn = n\n        var pp = p\n        var result = 1l\n\
    \        while (nn > 0) {\n            if ((nn & 1) == 1) {\n                result\
    \ = (result * n) % p\n            }\n            nn = nn >> 1\n            n =\
    \ (n * n) % p\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpbx7gpw1m.scala:24:14 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            n = (n * n) % p\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800156
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        if (n % 2 == 0) {\n      \
    \      val x = modp(n / 2, p)\n            return (x * x) % p\n        }\n   \
    \     else return (2 * modp(n - 1, p)) % p\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exp : Long = n\n        while (exp > 0) {\n            if ((exp & 1)\
    \ == 1) {\n                result = (result * base) % p\n            }\n     \
    \       exp >>= 1\n            base = (base * base) % p\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var b : Long = 2\n      \
    \  var e : Long = n\n        while (e > 0) {\n            if ((e & 1) == 1) {\n\
    \                result = (result * b) % p\n            }\n            e = e >>\
    \ 1\n            b = (b * b) % p\n        }\n        return result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var x : Long = n\n      \
    \  var y : Long = p\n        while (x > 0) {\n            if ((x & 1) == 1) {\n\
    \                result = (result * x) % y\n            }\n            x = x >>\
    \ 1\n            y = (y * y) % p\n        }\n        return result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.modp(tmpx9lyhxoa.scala:21)\n\
    \tat Problem$.main(tmpx9lyhxoa.scala:29)\n\tat Problem.main(tmpx9lyhxoa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800158
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var k : Long = n\n      \
    \  var m : Long = p\n        while (k > 0) {\n            if ((k & 1) == 1) {\n\
    \                result = (result * n) % p\n            }\n            k >>= 1\n\
    \            n = (n * n) % p\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp_qrm31jb.scala:24:14 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            n = (n * n) % p\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800156
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        if (n % 2 == 0) {\n      \
    \      val x = modp(n / 2, p)\n            return (x * x) % p\n        }\n   \
    \     else {\n            return (2 * modp(n - 1, p)) % p\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        if (n % 2 == 0) {\n      \
    \      val t = modp(n / 2, p)\n            return (t * t) % p\n        }\n   \
    \     else return (modp(n - 1, p) * n) % p\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2whl3l5q.scala:25)\n\tat Problem.main(tmp2whl3l5q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800164
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        if (n % 2 == 0) {\n      \
    \      val x = modp(n / 2, p)\n            return (x * x) % p\n        }\n   \
    \     else {\n            return (2 * modp(n - 1, p)) % p\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        if (n % 2 == 0) {\n      \
    \      val x = modp(n / 2, p)\n            return (x * x) % p\n        }\n   \
    \     return (modp(n - 1, p) * n) % p\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfpkw1tyn.scala:25)\n\tat Problem.main(tmpfpkw1tyn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800165
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exponent : Long = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        if (n % 2 == 0) {\n      \
    \      val x = modp(n / 2, p)\n            return (x * x) % p\n        }\n   \
    \     else {\n            return (2 * modp(n - 1, p)) % p\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exponent : Long = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        if (n % 2 == 0) {\n      \
    \      val x = modp(n / 2, p)\n            return (x * x) % p\n        }\n   \
    \     return (modp(n - 1, p) * n) % p\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfpkw1tyn.scala:25)\n\tat Problem.main(tmpfpkw1tyn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800165
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        var result = 1l\n        var\
    \ b = 2l\n        var e = n\n        while (e > 0) {\n            if ((e & 1)\
    \ == 1) result = (result * b) % p\n            e >>= 1\n            b = (b * b)\
    \ % p\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800166
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exponent : Long = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exponent : Long = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var power : Long = n\n  \
    \      var mod : Long = p\n        while (power > 0) {\n            if ((power\
    \ & 1) == 1) {\n                result = (result * n) % p\n            }\n   \
    \         power >>= 1\n            n = (n * n) % p\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpdmgdw2bb.scala:24:14 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            n = (n * n) % p\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800156
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var x : Long = n\n      \
    \  var y : Long = p\n        while (x > 0) {\n            if ((x & 1) == 1) {\n\
    \                result = (result * y) % p\n            }\n            x >>= 1\n\
    \            y = (y * y) % p\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpezeiqth6.scala:29)\n\tat Problem.main(tmpezeiqth6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var i : Long = 0\n      \
    \  while (i < n) {\n            result = (result * 2) % p\n            i += 1\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        var result = 1l\n        var\
    \ b = n\n        var e = p - 2\n        while (e > 0) {\n            if ((e &\
    \ 1) == 1) result = (result * b) % p\n            b = (b * b) % p\n          \
    \  e >>= 1\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxvu4fx3d.scala:28)\n\tat Problem.main(tmpxvu4fx3d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800158
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var res = 1l\n        var x = n\n        var y = p\n   \
    \     while (x > 0) {\n            if ((x & 1) == 1) res = (res * n) % p\n   \
    \         x >>= 1\n            n = (n * n) % p\n        }\n        res\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpiljj74er.scala:22:14 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            n = (n * n) % p\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800165
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        def modp(n : Long, p : Long, a : Long) : Long = {\n    \
    \        if (n == 0) a\n            else if (n % 2 == 0) modp(n / 2, p, a * a\
    \ % p)\n            else modp(n - 1, p, a * a % p * a % p)\n        }\n      \
    \  modp(n, p, 1)\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1w20vva_.scala:24)\n\tat Problem.main(tmp1w20vva_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var power : Long = n\n  \
    \      var mod : Long = p\n        while (power > 0) {\n            if ((power\
    \ & 1) == 1) {\n                result = (result * n) % p\n            }\n   \
    \         power >>= 1\n            n = (n * n) % p\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpdmgdw2bb.scala:24:14 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            n = (n * n) % p\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800156
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exponent : Long = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var x : Long = n\n      \
    \  var y : Long = p\n        while (x > 0) {\n            if ((x & 1) == 1) {\n\
    \                result = (result * y) % p\n            }\n            x >>= 1\n\
    \            y = (y * y) % p\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpezeiqth6.scala:29)\n\tat Problem.main(tmpezeiqth6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var b : Long = 2\n      \
    \  var e : Long = n\n        while (e > 0) {\n            if ((e & 1) == 1) {\n\
    \                result = (result * b) % p\n            }\n            e = e >>\
    \ 1\n            b = (b * b) % p\n        }\n        return result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var r = 1l\n        var b = 2l\n        var e = n\n    \
    \    while (e > 0) {\n            if (e % 2 == 1) {\n                r = (r *\
    \ b) % p\n            }\n            e = e / 2\n            b = (b * b) % p\n\
    \        }\n        return r\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var b : Long = 2\n      \
    \  var e : Long = n\n        while (e > 0) {\n            if ((e & 1) == 1) {\n\
    \                result = (result * b) % p\n            }\n            e = e >>\
    \ 1\n            b = (b * b) % p\n        }\n        return result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exponent : Long = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exponent : Long = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1l\n        var base : Long = 2l\n \
    \       var exponent : Long = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var b : Long = 2\n      \
    \  var p2 : Long = p\n        var n2 : Long = n\n        while (n2 > 0) {\n  \
    \          if ((n2 & 1) == 1) {\n                result = (result * b) % p2\n\
    \            }\n            n2 >>= 1\n            b = (b * b) % p2\n        }\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exp : Long = n\n        while (exp > 0) {\n            if ((exp & 1)\
    \ == 1) {\n                result = (result * base) % p\n            }\n     \
    \       exp >>= 1\n            base = (base * base) % p\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        var result = 1l\n        var\
    \ i = 0\n        var nn = n\n        while (i < 64) {\n            if ((nn & 1)\
    \ == 1) result = (result * 2) % p\n            nn = nn >> 1\n            i +=\
    \ 1\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpofs0x1dw.scala:28)\n\tat Problem.main(tmpofs0x1dw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        var x = modp(n / 2, p)\n \
    \       x = (x * x) % p\n        if (n % 2 == 1) x = (x * 2) % p\n        return\
    \ x\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1l\n        var x : Long = n\n     \
    \   var y : Long = p\n        while (x > 0) {\n            if ((x & 1) == 1) {\n\
    \                result = (result * x) % y\n            }\n            x = x >>\
    \ 1\n            y = (y * y) % p\n        }\n        return result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.modp(tmpxsbh2ktp.scala:21)\n\
    \tat Problem$.main(tmpxsbh2ktp.scala:29)\n\tat Problem.main(tmpxsbh2ktp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exponent : Long = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exponent : Long = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        var result = 1l\n        var\
    \ base = 2l\n        var exponent = n\n        while (exponent > 0) {\n      \
    \      if ((exponent & 1) == 1) {\n                result = (result * base) %\
    \ p\n            }\n            exponent >>= 1\n            base = (base * base)\
    \ % p\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800167
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var k : Long = n\n      \
    \  var m : Long = p\n        while (k > 0) {\n            if ((k & 1) == 1) {\n\
    \                result = (result * n) % p\n            }\n            k >>= 1\n\
    \            n = (n * n) % p\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp_qrm31jb.scala:24:14 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            n = (n * n) % p\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800156
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        var x = modp(n / 2, p)\n \
    \       x = (x * x) % p\n        if (n % 2 == 1) x = (x * 2) % p\n        return\
    \ x\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exponent : Long = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        var result = 1l\n        var\
    \ x = n\n        var y = p\n        while (x > 0) {\n            if ((x & 1) ==\
    \ 1) {\n                result = (result * y) % p\n            }\n           \
    \ x >>= 1\n            y = (y * y) % p\n        }\n        return result\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6c3dje28.scala:30)\n\tat Problem.main(tmp6c3dje28.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        if (n % 2 == 0) {\n      \
    \      val x = modp(n / 2, p)\n            return (x * x) % p\n        }\n   \
    \     else {\n            return (2 * modp(n - 1, p)) % p\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var b : Long = 2\n      \
    \  var e : Long = n\n        while (e > 0) {\n            if ((e & 1) == 1) {\n\
    \                result = (result * b) % p\n            }\n            e = e >>\
    \ 1\n            b = (b * b) % p\n        }\n        return result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var nn = n\n        var pp = p\n        var result = 1l\n\
    \        while (nn > 0) {\n            if ((nn & 1) == 1) {\n                result\
    \ = (result * nn) % pp\n            }\n            nn = nn >> 1\n        }\n \
    \       return result\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfrnyjnvy.scala:29)\n\tat Problem.main(tmpfrnyjnvy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800166
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exponent : Long = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) 1\n        else if (n % 2 == 0) {\n        \
    \    val x = modp(n / 2, p)\n            (x * x) % p\n        } else {\n     \
    \       (2 * modp(n - 1, p)) % p\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var nn : Long = n\n     \
    \   var pp : Long = p\n        while (nn > 0) {\n            if ((nn & 1) == 1)\
    \ result = (result * nn) % pp\n            nn = nn >> 1\n            pp = (pp\
    \ * pp) % p\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.modp(tmpt2v82h7m.scala:20)\n\
    \tat Problem$.main(tmpt2v82h7m.scala:27)\n\tat Problem.main(tmpt2v82h7m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        if (n % 2 == 0) {\n      \
    \      val x = modp(n / 2, p)\n            return (x * x) % p\n        }\n   \
    \     else return (2 * modp(n - 1, p)) % p\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var b : Long = 2\n      \
    \  var m : Long = n\n        while (m > 0) {\n            if ((m & 1) == 1) {\n\
    \                result = (result * b) % p\n            }\n            m >>= 1\n\
    \            b = (b * b) % p\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exp : Long = n\n        while (exp > 0) {\n            if ((exp & 1)\
    \ == 1) {\n                result = (result * base) % p\n            }\n     \
    \       exp >>= 1\n            base = (base * base) % p\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exponent : Long = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exponent : Long = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var x : Long = n\n      \
    \  var y : Long = p\n        while (x > 0) {\n            if ((x & 1) == 1) {\n\
    \                result = (result * y) % p\n            }\n            x >>= 1\n\
    \            y = (y * y) % p\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpezeiqth6.scala:29)\n\tat Problem.main(tmpezeiqth6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exp : Long = n\n        while (exp > 0) {\n            if ((exp & 1)\
    \ == 1) {\n                result = (result * base) % p\n            }\n     \
    \       exp >>= 1\n            base = (base * base) % p\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) 1\n        else if (n % 2 == 0) modp(n / 2,\
    \ p) * modp(n / 2, p) % p\n        else modp(n / 2, p) * modp(n / 2, p) * 2 %\
    \ p\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exponent : Long = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        if (n % 2 == 0) {\n      \
    \      val x = modp(n / 2, p)\n            return (x * x) % p\n        }\n   \
    \     else return (2 * modp(n - 1, p)) % p\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) 1\n        else if (n % 2 == 0) {\n        \
    \    val x = modp(n / 2, p)\n            (x * x) % p\n        } else {\n     \
    \       (2 * modp(n - 1, p)) % p\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exponent : Long = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var b : Long = 2\n      \
    \  var m : Long = n\n        while (m > 0) {\n            if ((m & 1) == 1) {\n\
    \                result = (result * b) % p\n            }\n            m >>= 1\n\
    \            b = (b * b) % p\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exp : Long = n\n        while (exp > 0) {\n            if ((exp & 1)\
    \ == 1) {\n                result = (result * base) % p\n            }\n     \
    \       exp >>= 1\n            base = (base * base) % p\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exponent : Long = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var x : Long = n\n      \
    \  var y : Long = p\n        while (x > 0) {\n            if ((x & 1) == 1) {\n\
    \                result = (result * y) % p\n            }\n            x >>= 1\n\
    \            y = (y * y) % p\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpezeiqth6.scala:29)\n\tat Problem.main(tmpezeiqth6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var x : Long = n\n      \
    \  var y : Long = p\n        while (x > 0) {\n            if ((x & 1) == 1) {\n\
    \                result = (result * y) % p\n            }\n            x >>= 1\n\
    \            y = (y * y) % p\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpezeiqth6.scala:29)\n\tat Problem.main(tmpezeiqth6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        var result = 1l\n        var\
    \ b = n\n        var e = p - 2\n        while (e > 0) {\n            if ((e &\
    \ 1) == 1) result = (result * b) % p\n            b = (b * b) % p\n          \
    \  e >>= 1\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxvu4fx3d.scala:28)\n\tat Problem.main(tmpxvu4fx3d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var x : Long = n\n      \
    \  var y : Long = p\n        while (x > 0) {\n            if ((x & 1) == 1) {\n\
    \                result = (result * x) % y\n            }\n            x = x >>\
    \ 1\n            y = (y * y) % p\n        }\n        return result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.modp(tmpx9lyhxoa.scala:21)\n\
    \tat Problem$.main(tmpx9lyhxoa.scala:29)\n\tat Problem.main(tmpx9lyhxoa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exponent : Long = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        var res = 1l\n        var\
    \ b = 2l\n        var e = n\n        while (e > 0) {\n            if (e % 2 ==\
    \ 1) res = (res * b) % p\n            b = (b * b) % p\n            e /= 2\n  \
    \      }\n        return res\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) 1\n        else if (n % 2 == 0) modp(n / 2,\
    \ p) * modp(n / 2, p) % p\n        else modp(n / 2, p) * modp(n / 2, p) * 2 %\
    \ p\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var x : Long = n\n      \
    \  var y : Long = p\n        while (x > 0) {\n            if ((x & 1) == 1) {\n\
    \                result = (result * x) % y\n            }\n            x = x >>\
    \ 1\n            y = (y * y) % p\n        }\n        return result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.modp(tmpx9lyhxoa.scala:21)\n\
    \tat Problem$.main(tmpx9lyhxoa.scala:29)\n\tat Problem.main(tmpx9lyhxoa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var b : Long = 2\n      \
    \  var r : Long = n\n        while (r > 0) {\n            if (r % 2 == 1) {\n\
    \                result = (result * b) % p\n            }\n            r = r /\
    \ 2\n            b = (b * b) % p\n        }\n        return result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var x : Long = n\n      \
    \  var y : Long = p\n        while (x > 0) {\n            if ((x & 1) == 1) {\n\
    \                result = (result * y) % p\n            }\n            x >>= 1\n\
    \            y = (y * y) % p\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpezeiqth6.scala:29)\n\tat Problem.main(tmpezeiqth6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exponent : Long = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        var result = 1l\n        var\
    \ x = n\n        var y = p\n        while (x > 0) {\n            if ((x & 1) ==\
    \ 1) result = (result * n) % p\n            x >>= 1\n            n = (n * n) %\
    \ p\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpfv3jbj7s.scala:23:14 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            n = (n * n) % p\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800166
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exponent : Long = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var power : Long = n\n  \
    \      var mod : Long = p\n        while (power > 0) {\n            if ((power\
    \ & 1) == 1) {\n                result = (result * n) % p\n            }\n   \
    \         power >>= 1\n            n = (n * n) % p\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpdmgdw2bb.scala:24:14 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            n = (n * n) % p\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800156
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        var x = modp(n / 2, p)\n \
    \       x = (x * x) % p\n        if (n % 2 == 1) x = (x * 2) % p\n        return\
    \ x\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var r = 1l\n        var b = 2l\n        var e = n\n    \
    \    while (e > 0) {\n            if (e % 2 == 1) {\n                r = (r *\
    \ b) % p\n            }\n            e /= 2\n            b = (b * b) % p\n   \
    \     }\n        return r\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var x : Long = n\n      \
    \  var y : Long = p\n        while (x > 0) {\n            if ((x & 1) == 1) {\n\
    \                result = (result * x) % y\n            }\n            x = x >>\
    \ 1\n            y = (y * y) % p\n        }\n        return result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.modp(tmpx9lyhxoa.scala:21)\n\
    \tat Problem$.main(tmpx9lyhxoa.scala:29)\n\tat Problem.main(tmpx9lyhxoa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        if (n % 2 == 0) {\n      \
    \      val t = modp(n / 2, p)\n            return (t * t) % p\n        }\n   \
    \     else {\n            return (modp(n - 1, p) * 2) % p\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exponent : Long = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exp : Long = n\n        while (exp > 0) {\n            if ((exp & 1)\
    \ == 1) {\n                result = (result * base) % p\n            }\n     \
    \       exp >>= 1\n            base = (base * base) % p\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var b : Long = 2\n      \
    \  var e : Long = n\n        while (e > 0) {\n            if ((e & 1) == 1) {\n\
    \                result = (result * b) % p\n            }\n            e = e >>\
    \ 1\n            b = (b * b) % p\n        }\n        return result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        if (n % 2 == 0) {\n      \
    \      val x = modp(n / 2, p)\n            return (x * x) % p\n        }\n   \
    \     else return (modp(n - 1, p) * 2) % p\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var x : Long = n\n      \
    \  var y : Long = p\n        while (x > 0) {\n            if ((x & 1) != 0) {\n\
    \                result = (result * x) % y\n            }\n            x = x >>\
    \ 1\n            y = (y * y) % p\n        }\n        return result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.modp(tmpbxe_x_v4.scala:21)\n\
    \tat Problem$.main(tmpbxe_x_v4.scala:29)\n\tat Problem.main(tmpbxe_x_v4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800171
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exponent : Long = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var b : Long = 2\n      \
    \  var e : Long = n\n        while (e > 0) {\n            if ((e & 1) == 1) {\n\
    \                result = (result * b) % p\n            }\n            e = e >>\
    \ 1\n            b = (b * b) % p\n        }\n        return result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var i : Long = 0\n      \
    \  while (i < n) {\n            result = (result * 2) % p\n            i += 1\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        if (n % 2 == 0) {\n      \
    \      val t = modp(n / 2, p)\n            return (t * t) % p\n        }\n   \
    \     return (modp(n - 1, p) * n) % p\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwk53zz9b.scala:25)\n\tat Problem.main(tmpwk53zz9b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800171
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var b : Long = 2\n      \
    \  var e : Long = n\n        while (e > 0) {\n            if ((e & 1) == 1) {\n\
    \                result = (result * b) % p\n            }\n            e = e >>\
    \ 1\n            b = (b * b) % p\n        }\n        return result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        var x = modp(n / 2, p)\n \
    \       x = (x * x) % p\n        if (n % 2 == 1) x = (x * 2) % p\n        return\
    \ x\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var b : Long = 2\n      \
    \  var e : Long = n\n        while (e > 0) {\n            if ((e & 1) == 1) {\n\
    \                result = (result * b) % p\n            }\n            e = e >>\
    \ 1\n            b = (b * b) % p\n        }\n        return result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var b : Long = 2\n      \
    \  var e : Long = n\n        while (e > 0) {\n            if ((e & 1) == 1) {\n\
    \                result = (result * b) % p\n            }\n            e = e >>\
    \ 1\n            b = (b * b) % p\n        }\n        return result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var x : Long = n\n      \
    \  var y : Long = p\n        while (x > 0) {\n            if ((x & 1) == 1) {\n\
    \                result = (result * x) % y\n            }\n            x = x >>\
    \ 1\n            y = (y * y) % p\n        }\n        return result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.modp(tmpx9lyhxoa.scala:21)\n\
    \tat Problem$.main(tmpx9lyhxoa.scala:29)\n\tat Problem.main(tmpx9lyhxoa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exponent : Long = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var b : Long = 2\n      \
    \  var e : Long = n\n        while (e > 0) {\n            if ((e & 1) == 1) {\n\
    \                result = (result * b) % p\n            }\n            e = e >>\
    \ 1\n            b = (b * b) % p\n        }\n        return result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        if (n % 2 == 0) {\n      \
    \      val t = modp(n / 2, p)\n            return (t * t) % p\n        }\n   \
    \     else {\n            return (2 * modp(n - 1, p)) % p\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800171
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) 1\n        else if (n % 2 == 0) {\n        \
    \    val x = modp(n / 2, p)\n            (x * x) % p\n        } else {\n     \
    \       (2 * modp(n - 1, p)) % p\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        var result = 1l\n        var\
    \ x = n\n        var y = p\n        while (x > 0) {\n            if ((x & 1) ==\
    \ 1) {\n                result = (result * y) % p\n            }\n           \
    \ x >>= 1\n            y = (y * y) % p\n        }\n        return result\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6c3dje28.scala:30)\n\tat Problem.main(tmp6c3dje28.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) 1\n        else if (n % 2 == 0) {\n        \
    \    val x = modp(n / 2, p)\n            (x * x) % p\n        } else {\n     \
    \       (2 * modp(n - 1, p)) % p\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800167
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1l\n        var k : Long = n\n     \
    \   var m : Long = p\n        while (k > 0) {\n            if ((k & 1) == 1) {\n\
    \                result = (result * n) % p\n            }\n            k >>= 1\n\
    \            n = (n * n) % p\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpdaedhq0v.scala:24:14 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            n = (n * n) % p\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800170
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exp : Long = n\n        while (exp > 0) {\n            if ((exp & 1)\
    \ == 1) {\n                result = (result * base) % p\n            }\n     \
    \       exp >>= 1\n            base = (base * base) % p\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var x : Long = n\n      \
    \  var y : Long = p\n        while (x > 0) {\n            if ((x & 1) == 1) {\n\
    \                result = (result * y) % p\n            }\n            x >>= 1\n\
    \            y = (y * y) % p\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpezeiqth6.scala:29)\n\tat Problem.main(tmpezeiqth6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        var x = modp(n / 2, p)\n \
    \       x = (x * x) % p\n        if (n % 2 == 1) x = (x * 2) % p\n        return\
    \ x\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exponent : Long = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var x : Long = n\n      \
    \  var y : Long = p\n        while (x > 0) {\n            if ((x & 1) == 1) {\n\
    \                result = (result * y) % p\n            }\n            x >>= 1\n\
    \            y = (y * y) % p\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpezeiqth6.scala:29)\n\tat Problem.main(tmpezeiqth6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800167
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var power : Long = n\n  \
    \      var mod : Long = p\n        while (power > 0) {\n            if ((power\
    \ & 1) == 1) {\n                result = (result * n) % p\n            }\n   \
    \         power = power >> 1\n            n = (n * n) % p\n        }\n       \
    \ return result\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmppn3moif2.scala:24:14 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            n = (n * n) % p\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800170
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var power : Long = n\n        while (power > 0) {\n            if (power\
    \ % 2 == 1) {\n                result = (result * base) % p\n            }\n \
    \           base = (base * base) % p\n            power /= 2\n        }\n    \
    \    return result\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800172
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var b : Long = 2\n      \
    \  var m : Long = n\n        while (m > 0) {\n            if ((m & 1) == 1) {\n\
    \                result = (result * b) % p\n            }\n            m >>= 1\n\
    \            b = (b * b) % p\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exp : Long = n\n        while (exp > 0) {\n            if ((exp & 1)\
    \ == 1) {\n                result = (result * base) % p\n            }\n     \
    \       exp >>= 1\n            base = (base * base) % p\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exponent : Long = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        var result = 1l\n        var\
    \ b = n\n        var e = p - 2\n        while (e > 0) {\n            if ((e &\
    \ 1) == 1) result = (result * b) % p\n            b = (b * b) % p\n          \
    \  e >>= 1\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxvu4fx3d.scala:28)\n\tat Problem.main(tmpxvu4fx3d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        var res = 1l\n        var\
    \ x = n\n        var y = p\n        while (x > 1) {\n            if ((x & 1) !=\
    \ 0) {\n                res = (res * x) % y\n            }\n            x = (x\
    \ * x) % y\n        }\n        return res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg4e7d8dy.scala:30)\n\tat Problem.main(tmpg4e7d8dy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800172
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        if (n % 2 == 0) {\n      \
    \      val x = modp(n / 2, p)\n            return (x * x) % p\n        }\n   \
    \     return (modp(n - 1, p) * n) % p\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfpkw1tyn.scala:25)\n\tat Problem.main(tmpfpkw1tyn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800165
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exp : Long = n\n        while (exp > 0) {\n            if ((exp & 1)\
    \ == 1) {\n                result = (result * base) % p\n            }\n     \
    \       exp >>= 1\n            base = (base * base) % p\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        if (n % 2 == 0) {\n      \
    \      val x = modp(n / 2, p)\n            return (x * x) % p\n        }\n   \
    \     else {\n            return (2 * modp(n - 1, p)) % p\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var power : Long = n\n  \
    \      var mod : Long = p\n        while (power > 0) {\n            if ((power\
    \ & 1) == 1) {\n                result = (result * n) % p\n            }\n   \
    \         power >>= 1\n            n = (n * n) % p\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpdmgdw2bb.scala:24:14 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            n = (n * n) % p\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800156
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var b : Long = 2\n      \
    \  var m : Long = n\n        while (m > 0) {\n            if ((m & 1) == 1) {\n\
    \                result = (result * b) % p\n            }\n            m >>= 1\n\
    \            b = (b * b) % p\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exp : Long = n\n        while (exp > 0) {\n            if ((exp & 1)\
    \ == 1) {\n                result = (result * base) % p\n            }\n     \
    \       exp >>= 1\n            base = (base * base) % p\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var b : Long = 2\n      \
    \  var e : Long = n\n        while (e > 0) {\n            if ((e & 1) == 1) {\n\
    \                result = (result * b) % p\n            }\n            e = e >>\
    \ 1\n            b = (b * b) % p\n        }\n        return result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        var result = 1l\n        var\
    \ b = n\n        var e = p - 2\n        while (e > 0) {\n            if ((e &\
    \ 1) == 1) result = (result * b) % p\n            b = (b * b) % p\n          \
    \  e >>= 1\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxvu4fx3d.scala:28)\n\tat Problem.main(tmpxvu4fx3d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        if (n % 2 == 0) {\n      \
    \      val x = modp(n / 2, p)\n            return (x * x) % p\n        }\n   \
    \     else return (modp(n - 1, p) * 2) % p\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var res = 1l\n        var nn = n\n        while (nn > 0)\
    \ {\n            if ((nn & 1) == 1) {\n                res = (res * n) % p\n \
    \           }\n            nn = nn >> 1\n            n = (n * n) % p\n       \
    \ }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpzq1s2rt1.scala:23:14 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            n = (n * n) % p\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800171
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exp : Long = n\n        while (exp > 0) {\n            if ((exp & 1)\
    \ == 1) {\n                result = (result * base) % p\n            }\n     \
    \       exp >>= 1\n            base = (base * base) % p\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exp : Long = n\n        while (exp > 0) {\n            if ((exp & 1)\
    \ == 1) {\n                result = (result * base) % p\n            }\n     \
    \       exp >>= 1\n            base = (base * base) % p\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var b : Long = 2\n      \
    \  var e : Long = n\n        while (e > 0) {\n            if ((e & 1) == 1) {\n\
    \                result = (result * b) % p\n            }\n            e = e >>\
    \ 1\n            b = (b * b) % p\n        }\n        return result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exponent : Long = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exp : Long = n\n        while (exp > 0) {\n            if ((exp & 1)\
    \ == 1) {\n                result = (result * base) % p\n            }\n     \
    \       exp >>= 1\n            base = (base * base) % p\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var x : Long = n\n      \
    \  var y : Long = p\n        while (x > 0) {\n            if ((x & 1) == 1) {\n\
    \                result = (result * y) % p\n            }\n            x >>= 1\n\
    \            y = (y * y) % p\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpezeiqth6.scala:29)\n\tat Problem.main(tmpezeiqth6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exponent : Long = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var b : Long = 2\n      \
    \  var bpow : Long = b\n        var nb : Long = n\n        while (nb > 0) {\n\
    \            if ((nb & 1) == 1) {\n                result = (result * bpow) %\
    \ p\n            }\n            bpow = (bpow * bpow) % p\n            nb = nb\
    \ >> 1\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800172
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var x : Long = n\n      \
    \  var y : Long = p\n        while (x > 0) {\n            if ((x & 1) == 1) {\n\
    \                result = (result * x) % y\n            }\n            x = x >>\
    \ 1\n            y = (y * y) % p\n        }\n        return result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.modp(tmpx9lyhxoa.scala:21)\n\
    \tat Problem$.main(tmpx9lyhxoa.scala:29)\n\tat Problem.main(tmpx9lyhxoa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        if (n % 2 == 0) {\n      \
    \      val x = modp(n / 2, p)\n            return (x * x) % p\n        }\n   \
    \     else return (2 * modp(n - 1, p)) % p\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        if (n % 2 == 0) {\n      \
    \      val x = modp(n / 2, p)\n            return (x * x) % p\n        }\n   \
    \     else return (2 * modp(n - 1, p)) % p\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var b : Long = 2\n      \
    \  var p2 : Long = p\n        var n2 : Long = n\n        while (n2 > 0) {\n  \
    \          if ((n2 & 1) == 1) {\n                result = (result * b) % p2\n\
    \            }\n            n2 >>= 1\n            b = (b * b) % p2\n        }\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var k : Long = n\n      \
    \  var m : Long = p\n        while (k > 0) {\n            if ((k & 1) == 1) {\n\
    \                result = (result * k) % m\n            }\n            k = k >>\
    \ 1\n            k = k % m\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp43zt0fg8.scala:30)\n\tat Problem.main(tmp43zt0fg8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800172
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        var x = modp(n / 2, p)\n \
    \       x = (x * x) % p\n        if (n % 2 == 1) x = (x * 2) % p\n        return\
    \ x\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var b : Long = 2\n      \
    \  var e : Long = n\n        while (e > 0) {\n            if ((e & 1) == 1) {\n\
    \                result = (result * b) % p\n            }\n            e = e >>\
    \ 1\n            b = (b * b) % p\n        }\n        return result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exponent : Long = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exponent : Long = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var b : Long = 2\n      \
    \  var e : Long = n\n        while (e > 0) {\n            if ((e & 1) == 1) {\n\
    \                result = (result * b) % p\n            }\n            e = e >>\
    \ 1\n            b = (b * b) % p\n        }\n        return result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exponent : Long = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        var x = modp(n / 2, p)\n \
    \       x = (x * x) % p\n        if (n % 2 == 1) x = (x * 2) % p\n        return\
    \ x\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        var x = modp(n / 2, p)\n \
    \       x = (x * x) % p\n        if (n % 2 == 1) x = (x * 2) % p\n        return\
    \ x\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        var res = 1l\n        var\
    \ b = 2l\n        var e = n\n        while (e > 0) {\n            if ((e & 1)\
    \ == 1) res = (res * b) % p\n            b = (b * b) % p\n            e >>= 1\n\
    \        }\n        return res\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n\
    \    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n\
    \    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n\
    \    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800172
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var x : Long = n\n      \
    \  var y : Long = p\n        while (x > 0) {\n            if ((x & 1) == 1) {\n\
    \                result = (result * y) % p\n            }\n            x >>= 1\n\
    \            y = (y * y) % p\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpezeiqth6.scala:29)\n\tat Problem.main(tmpezeiqth6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exponent : Long = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        var x = modp(n / 2, p)\n \
    \       x = (x * x) % p\n        if (n % 2 == 1) x = (x * 2) % p\n        return\
    \ x\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l))\
    \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var b : Long = 2\n      \
    \  var m : Long = n\n        while (m > 0) {\n            if ((m & 1) == 1) {\n\
    \                result = (result * b) % p\n            }\n            m >>= 1\n\
    \            b = (b * b) % p\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exponent : Long = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exp : Long = n\n        while (exp > 0) {\n            if ((exp & 1)\
    \ == 1) {\n                result = (result * base) % p\n            }\n     \
    \       exp >>= 1\n            base = (base * base) % p\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exp : Long = n\n        while (exp > 0) {\n            if ((exp & 1)\
    \ == 1) {\n                result = (result * base) % p\n            }\n     \
    \       exp >>= 1\n            base = (base * base) % p\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var x : Long = n\n      \
    \  var y : Long = p\n        while (x > 0) {\n            if ((x & 1) == 1) {\n\
    \                result = (result * x) % y\n            }\n            x = x >>\
    \ 1\n            y = (y * y) % p\n        }\n        return result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.modp(tmpx9lyhxoa.scala:21)\n\
    \tat Problem$.main(tmpx9lyhxoa.scala:29)\n\tat Problem.main(tmpx9lyhxoa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exponent : Long = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exp : Long = n\n        while (exp > 0) {\n            if ((exp & 1)\
    \ == 1) {\n                result = (result * base) % p\n            }\n     \
    \       exp >>= 1\n            base = (base * base) % p\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var x : Long = n\n      \
    \  var y : Long = p\n        while (x > 0) {\n            if ((x & 1) == 1) {\n\
    \                result = (result * x) % y\n            }\n            x = x >>\
    \ 1\n            y = (y * y) % p\n        }\n        return result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.modp(tmpx9lyhxoa.scala:21)\n\
    \tat Problem$.main(tmpx9lyhxoa.scala:29)\n\tat Problem.main(tmpx9lyhxoa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var x : Long = n\n      \
    \  var y : Long = p\n        while (x > 0) {\n            if ((x & 1) == 1) {\n\
    \                result = (result * x) % y\n            }\n            x = x >>\
    \ 1\n            y = (y * y) % p\n        }\n        return result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.modp(tmpx9lyhxoa.scala:21)\n\
    \tat Problem$.main(tmpx9lyhxoa.scala:29)\n\tat Problem.main(tmpx9lyhxoa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var b : Long = 2\n      \
    \  var e : Long = n\n        while (e > 0) {\n            if ((e & 1) == 1) {\n\
    \                result = (result * b) % p\n            }\n            e = e >>\
    \ 1\n            b = (b * b) % p\n        }\n        return result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var b : Long = 2\n      \
    \  var e : Long = n\n        while (e > 0) {\n            if ((e & 1) == 1) {\n\
    \                result = (result * b) % p\n            }\n            e = e >>\
    \ 1\n            b = (b * b) % p\n        }\n        return result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var x : Long = n\n      \
    \  var y : Long = p\n        while (x > 0) {\n            if ((x & 1) == 1) {\n\
    \                result = (result * x) % y\n            }\n            x = x >>\
    \ 1\n            y = (y * y) % p\n        }\n        return result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.modp(tmpx9lyhxoa.scala:21)\n\
    \tat Problem$.main(tmpx9lyhxoa.scala:29)\n\tat Problem.main(tmpx9lyhxoa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var b : Long = 2\n      \
    \  var exp : Long = n\n        while (exp > 0) {\n            if ((exp & 1) ==\
    \ 1) {\n                result = (result * b) % p\n            }\n           \
    \ exp >>= 1\n            b = (b * b) % p\n        }\n        return result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800172
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var x : Long = 2\n      \
    \  var power : Long = n\n        while (power > 0) {\n            if (power %\
    \ 2 == 1) {\n                result = (result * x) % p\n            }\n      \
    \      x = (x * x) % p\n            power /= 2\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) ==\
    \ (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l))\
    \ == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800172
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) return 1\n        var result = 1l\n        var\
    \ b = 2l\n        var e = n\n        while (e > 0) {\n            if ((e & 1)\
    \ == 1) result = (result * b) % p\n            e >>= 1\n            b = (b * b)\
    \ % p\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l))\
    \ == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800166
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        if (n == 0) 1 else {\n            var x = modp(n / 2, p)\n\
    \            x = (x * x) % p\n            if (n % 2 == 1) x = (x * 2) % p\n  \
    \          x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800172
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var b : Long = 2\n      \
    \  var m : Long = n\n        while (m > 0) {\n            if ((m & 1) == 1) {\n\
    \                result = (result * b) % p\n            }\n            m >>= 1\n\
    \            b = (b * b) % p\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var b : Long = 2\n      \
    \  var e : Long = n\n        while (e > 0) {\n            if ((e & 1) == 1) {\n\
    \                result = (result * b) % p\n            }\n            e = e >>\
    \ 1\n            b = (b * b) % p\n        }\n        return result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exp : Long = n\n        while (exp > 0) {\n            if ((exp & 1)\
    \ == 1) {\n                result = (result * base) % p\n            }\n     \
    \       exp >>= 1\n            base = (base * base) % p\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var b : Long = 2\n      \
    \  var m : Long = n\n        while (m > 0) {\n            if ((m & 1) == 1) {\n\
    \                result = (result * b) % p\n            }\n            m >>= 1\n\
    \            b = (b * b) % p\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var nn : Long = n\n     \
    \   var pp : Long = p\n        while (nn > 0) {\n            if ((nn & 1) == 1)\
    \ {\n                result = (result * nn) % pp\n            }\n            nn\
    \ = nn >> 1\n            nn = nn % pp\n        }\n        return result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpakb1x5b7.scala:30)\n\tat Problem.main(tmpakb1x5b7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800172
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var b : Long = 2\n      \
    \  var e : Long = n\n        while (e > 0) {\n            if ((e & 1) == 1) {\n\
    \                result = (result * b) % p\n            }\n            e = e >>\
    \ 1\n            b = (b * b) % p\n        }\n        return result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n\
    \    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l)) ==\
    \ (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
    \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
    \ == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exp : Long = n\n        while (exp > 0) {\n            if ((exp & 1)\
    \ == 1) {\n                result = (result * base) % p\n            }\n     \
    \       exp >>= 1\n            base = (base * base) % p\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(modp((3l),\
    \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
    \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
    \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
    \ (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var k : Long = n\n      \
    \  var m : Long = p\n        while (k > 0) {\n            if ((k & 1) == 1) {\n\
    \                result = (result * n) % p\n            }\n            k >>= 1\n\
    \            n = (n * n) % p\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l),\
    \ (101l)) == (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l),\
    \ (11l)) == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp_qrm31jb.scala:24:14 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            n = (n * n) % p\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800156
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exponent : Long = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l),\
    \ (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>>\
    \ modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n\
    \    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long)\
    \ : Long = {\n        var result : Long = 1\n        var base : Long = 2\n   \
    \     var exponent : Long = n\n        while (exponent > 0) {\n            if\
    \ ((exponent & 1) == 1) {\n                result = (result * base) % p\n    \
    \        }\n            exponent >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(modp((3l), (5l)) == (3l));\n    assert(modp((1101l), (101l)) ==\
    \ (2l));\n    assert(modp((0l), (101l)) == (1l));\n    assert(modp((3l), (11l))\
    \ == (8l));\n    assert(modp((100l), (101l)) == (1l));\n    assert(modp((30l),\
    \ (5l)) == (4l));\n    assert(modp((31l), (5l)) == (3l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800158
