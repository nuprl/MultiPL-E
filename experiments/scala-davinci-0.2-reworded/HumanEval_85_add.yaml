name: HumanEval_85_add
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a non-empty list of integers lst. add the even elements that are at\
  \ odd indices..\n    // Examples:\n    // >>> add((List[Long](4l.toLong, 2l.toLong,\
  \ 6l.toLong, 7l.toLong)))\n    // (2l)\n    def add(lst : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(add((List[Long](4l.toLong,\
  \ 88l.toLong))) == (88l));\n    assert(add((List[Long](4l.toLong, 5l.toLong, 6l.toLong,\
  \ 7l.toLong, 2l.toLong, 122l.toLong))) == (122l));\n    assert(add((List[Long](4l.toLong,\
  \ 0l.toLong, 6l.toLong, 7l.toLong))) == (0l));\n    assert(add((List[Long](4l.toLong,\
  \ 4l.toLong, 6l.toLong, 8l.toLong))) == (12l));\n    }\n\n}\n"
completions: ["        var sum : Long = 0\n        for (i <- 0 until lst.length by\
    \ 2) {\n            sum += lst(i)\n        }\n        return sum", "        var\
    \ sum : Long = 0\n        for (i <- 0 until lst.length) {\n            if (i %\
    \ 2 == 1) {\n                sum += lst(i)\n            }\n        }\n       \
    \ return sum", "        var sum = 0l\n        for (i <- 0 until lst.length) {\n\
    \            if (i % 2 == 1 && lst(i) % 2 == 0) {\n                sum += lst(i)\n\
    \            }\n        }\n        return sum", "        var sum = 0l\n      \
    \  for (i <- 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 ==\
    \ 0) {\n                sum += lst(i)\n            }\n        }\n        return\
    \ sum", '        lst.zipWithIndex.filter(x => x._2 % 2 == 1).map(x => x._1).sum',
  "        var sum : Long = 0\n        for (i <- 0 until lst.length) {\n         \
    \   if (i % 2 == 1) {\n                sum += lst(i)\n            }\n        }\n\
    \        return sum", '        lst.zipWithIndex.filter(x => x._2 % 2 == 1).map(x
    => x._1).sum', '        lst.zipWithIndex.filter(x => x._2 % 2 == 1).map(x => x._1).sum',
  '        lst.zipWithIndex.filter(x => x._2 % 2 == 1).map(x => x._1).sum', "    \
    \    var sum = 0l\n        for (i <- 0 until lst.length) {\n            if (i\
    \ % 2 == 1 && lst(i) % 2 == 0) sum += lst(i)\n        }\n        return sum",
  "        var sum : Long = 0\n        for (i <- 0 until lst.length) {\n         \
    \   if (i % 2 == 1) {\n                sum += lst(i)\n            }\n        }\n\
    \        return sum", '        lst.zipWithIndex.filter(x => x._2 % 2 == 1).map(x
    => x._1).sum', "        var sum = 0l\n        for (i <- 0 until lst.length) {\n\
    \            if (i % 2 == 1 && lst(i) % 2 == 0) {\n                sum += lst(i)\n\
    \            }\n        }\n        return sum", "        // Fill up this function\
    \ body\n        // You have to return the sum of even elements that are at odd\
    \ indices\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n   \
    \         if (i % 2 == 1 && lst(i) % 2 == 0) {\n                sum += lst(i)\n\
    \            }\n        }\n        sum", "        var sum = 0l\n        for (i\
    \ <- 0 until lst.length) {\n            if (i % 2 == 1 && lst(i) % 2 == 0) {\n\
    \                sum += lst(i)\n            }\n        }\n        return sum",
  '        lst.zipWithIndex.filter(x => x._2 % 2 == 1).map(x => x._1).sum', "    \
    \    var sum : Long = 0\n        for (i <- 0 until lst.length) {\n           \
    \ if (i % 2 == 1) {\n                sum += lst(i)\n            }\n        }\n\
    \        return sum", '        lst.zipWithIndex.filter(x => x._2 % 2 == 1).map(x
    => x._1).sum', '        lst.zipWithIndex.filter(x => x._2 % 2 == 1).map(x => x._1).sum',
  '        lst.zipWithIndex.filter(x => x._2 % 2 == 1).map(x => x._1).sum']
stop_tokens:
- "\n    }\n"
