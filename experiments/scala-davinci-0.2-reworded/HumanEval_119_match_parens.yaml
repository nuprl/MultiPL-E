name: HumanEval_119_match_parens
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a list of two strings, both strings consist of open\n    //\
  \ parentheses '(' or close parentheses ')' only.\n    // Your job is to check if\
  \ it is possible to concatenate the two strings in\n    // some order, that the\
  \ resulting string will be good.\n    // A string S is considered to be good if\
  \ and only if all parentheses in S\n    // are balanced. For example: the string\
  \ '(())()' is good, while the string\n    // '())' is not.\n    // Return 'Yes'\
  \ if there's a way to make a good string, and return 'No' otherwise.\n    // Examples:\n\
  \    // >>> matchParens((List[String](\"()(\", \")\")))\n    // (\"Yes\")\n    //\
  \ >>> matchParens((List[String](\")\", \")\")))\n    // (\"No\")\n    def matchParens(lst\
  \ : List[String]) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(matchParens((List[String](\"\
  ()(\", \")\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\")\"\
  , \")\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(()(())\"\
  , \"())())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")())\"\
  , \"(()()(\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"(())))\"\
  , \"(()())((\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"()\"\
  , \"())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(()(\",\
  \ \"()))()\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"((((\"\
  , \"((())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")(()\"\
  , \"(()(\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")(\", \"\
  )(\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(\", \")\"))).equals((\"\
  Yes\")));\n    assert(matchParens((List[String](\")\", \"(\"))).equals((\"Yes\"\
  )));\n    }\n\n}\n"
completions: ["        val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1\
    \ + s2\n        val stack = new Stack[Char]\n        for (c <- s) {\n        \
    \    if (c == '(') stack.push(c)\n            else if (c == ')') {\n         \
    \       if (stack.isEmpty) return \"No\"\n                else stack.pop\n   \
    \         }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "   \
    \     val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n    \
    \    var stack = new Stack[Char]\n        for (c <- s) {\n            if (c ==\
    \ '(') stack.push(c)\n            else {\n                if (stack.isEmpty) return\
    \ \"No\"\n                else stack.pop\n            }\n        }\n        if\
    \ (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val\
    \ s2 = lst(1)\n        val s = s1 + s2\n        val stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else {\n                if (stack.isEmpty) return \"No\"\n                else\
    \ stack.pop\n            }\n        }\n        if (stack.isEmpty) \"Yes\" else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s =\
    \ s1 + s2\n        val stack = new Stack[Char]\n        for (c <- s) {\n     \
    \       if (c == '(') {\n                stack.push(c)\n            } else {\n\
    \                if (stack.isEmpty) return \"No\"\n                stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      val stack = new Stack[Char]\n        for (c <- s) {\n            if (c\
    \ == '(') stack.push(c)\n            else if (c == ')') {\n                if\
    \ (stack.isEmpty) return \"No\"\n                else stack.pop\n            }\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 =\
    \ lst(0)\n        val s2 = lst(1)\n        val s3 = s1 + s2\n        val s4 =\
    \ s2 + s1\n        if (isGood(s3)) \"Yes\"\n        else if (isGood(s4)) \"Yes\"\
    \n        else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        var stack = Stack[Char]()\n        for (c <- s)\
    \ {\n            if (c == '(') stack.push(c)\n            else if (c == ')') {\n\
    \                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      val stack = Stack[Char]()\n        for (c <- s) {\n            if (c ==\
    \ '(') stack.push(c)\n            else {\n                if (stack.isEmpty) return\
    \ \"No\"\n                else stack.pop\n            }\n        }\n        if\
    \ (stack.isEmpty) \"Yes\" else \"No\"", "        val s = lst.mkString\n      \
    \  var count = 0\n        for (c <- s) {\n            if (c == '(') count += 1\n\
    \            else count -= 1\n            if (count < 0) return \"No\"\n     \
    \   }\n        if (count == 0) \"Yes\" else \"No\"", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        val s = s1 + s2\n        val n = s.length\n\
    \        var stack = new Stack[Char]\n        for (i <- 0 until n) {\n       \
    \     val c = s(i)\n            if (c == '(') stack.push(c)\n            else\
    \ {\n                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s1_left = s1.count(_\
    \ == '(')\n        val s1_right = s1.count(_ == ')')\n        val s2_left = s2.count(_\
    \ == '(')\n        val s2_right = s2.count(_ == ')')\n        if (s1_left == s1_right\
    \ && s2_left == s2_right) return \"Yes\"\n        if (s1_left == s1_right && s2_left\
    \ != s2_right) return \"No\"\n        if (s1_left != s1_right && s2_left == s2_right)\
    \ return \"No\"\n        if (s1_left != s1_right && s2_left != s2_right) {\n \
    \           val s1_diff = abs(s1_left - s1_right)\n            val s2_diff = abs(s2_left\
    \ - s2_right)\n            if (s1_diff == s2_diff) return \"Yes\"\n          \
    \  else return \"No\"\n        }\n        return \"No\"", "        def isGood(s\
    \ : String) : Boolean = {\n            var count = 0\n            for (c <- s)\
    \ {\n                if (c == '(') count += 1\n                else if (c == ')')\
    \ count -= 1\n                if (count < 0) return false\n            }\n   \
    \         return count == 0\n        }\n        if (isGood(lst(0) + lst(1))) return\
    \ \"Yes\"\n        if (isGood(lst(1) + lst(0))) return \"Yes\"\n        return\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s =\
    \ s1 + s2\n        var stack = new Stack[Char]\n        for (i <- 0 until s.length)\
    \ {\n            val c = s(i)\n            if (c == '(') stack.push(c)\n     \
    \       else if (c == ')') {\n                if (stack.isEmpty) return \"No\"\
    \n                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val str1 = lst(0)\n        val str2 = lst(1)\n\
    \        val str = str1 + str2\n        var count = 0\n        for (c <- str)\
    \ {\n            if (c == '(') count += 1\n            else count -= 1\n     \
    \       if (count < 0) return \"No\"\n        }\n        if (count == 0) \"Yes\"\
    \ else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        def\
    \ isGood(s : String) : Boolean = {\n            var count = 0\n            for\
    \ (c <- s) {\n                if (c == '(') count += 1\n                else if\
    \ (c == ')') count -= 1\n                if (count < 0) return false\n       \
    \     }\n            return count == 0\n        }\n        if (isGood(s1 + s2))\
    \ return \"Yes\"\n        else if (isGood(s2 + s1)) return \"Yes\"\n        else\
    \ return \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val\
    \ s3 = s1 + s2\n        val s4 = s2 + s1\n        if (isGood(s3)) \"Yes\"\n  \
    \      else if (isGood(s4)) \"Yes\"\n        else \"No\"", "        val str1 =\
    \ lst(0)\n        val str2 = lst(1)\n        val str1_open = str1.count(_ == '(')\n\
    \        val str1_close = str1.count(_ == ')')\n        val str2_open = str2.count(_\
    \ == '(')\n        val str2_close = str2.count(_ == ')')\n        if (str1_open\
    \ == str1_close && str2_open == str2_close) \"Yes\"\n        else if (str1_open\
    \ == str1_close && str2_open != str2_close) \"No\"\n        else if (str1_open\
    \ != str1_close && str2_open == str2_close) \"No\"\n        else if (str1_open\
    \ != str1_close && str2_open != str2_close) {\n            if (str1_open > str1_close)\
    \ {\n                if (str1_open - str1_close == str2_open - str2_close) \"\
    Yes\"\n                else \"No\"\n            }\n            else {\n      \
    \          if (str1_close - str1_open == str2_close - str2_open) \"Yes\"\n   \
    \             else \"No\"\n            }\n        }\n        else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      val stack = new Stack[Char]\n        for (c <- s) {\n            if (c\
    \ == '(') stack.push(c)\n            else if (c == ')') {\n                if\
    \ (stack.isEmpty) return \"No\"\n                else stack.pop\n            }\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 =\
    \ lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n        var count\
    \ = 0\n        for (i <- 0 until s.length) {\n            if (s(i) == '(') count\
    \ += 1\n            else count -= 1\n            if (count < 0) return \"No\"\n\
    \        }\n        if (count == 0) \"Yes\" else \"No\"", "        val s = lst.reduceLeft(_\
    \ + _)\n        if (s.length % 2 == 1) return \"No\"\n        val stack = new\
    \ Stack[Char]\n        for (c <- s) {\n            if (c == '(') stack.push(c)\n\
    \            else if (stack.isEmpty) return \"No\"\n            else stack.pop\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 =\
    \ lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n        val stack\
    \ = new Stack[Char]\n        for (c <- s) {\n            if (c == '(') stack.push(c)\n\
    \            else if (c == ')') {\n                if (stack.isEmpty) return \"\
    No\"\n                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        val stack = new Stack[Char]\n        for (c <-\
    \ s) {\n            if (c == '(') stack.push(c)\n            else if (c == ')')\
    \ {\n                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      val stack = new Stack[Char]\n        for (c <- s) {\n            if (c\
    \ == '(') stack.push(c)\n            else if (c == ')') {\n                if\
    \ (stack.isEmpty) return \"No\"\n                else stack.pop\n            }\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 =\
    \ lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n        var stack\
    \ = new Stack[Char]\n        for (c <- s) {\n            if (c == '(') stack.push(c)\n\
    \            else if (c == ')') {\n                if (stack.isEmpty) return \"\
    No\"\n                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        var stack = new Stack[Char]\n        for (c <-\
    \ s) {\n            if (c == '(') stack.push(c)\n            else if (c == ')')\
    \ {\n                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val (s1, s2) = (lst(0), lst(1))\n        val (c1, c2) = (s1.count(_ ==\
    \ '('), s1.count(_ == ')'))\n        val (d1, d2) = (s2.count(_ == '('), s2.count(_\
    \ == ')'))\n        if (c1 == c2 && d1 == d2) \"Yes\"\n        else if (c1 ==\
    \ c2 && d1 != d2) \"No\"\n        else if (c1 != c2 && d1 == d2) \"No\"\n    \
    \    else if (c1 > c2 && d1 > d2) \"Yes\"\n        else if (c1 < c2 && d1 < d2)\
    \ \"Yes\"\n        else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s = s1 + s2\n        var stack = new Stack[Char]\n        for (c\
    \ <- s) {\n            if (c == '(') stack.push(c)\n            else if (c ==\
    \ ')') {\n                if (stack.isEmpty) return \"No\"\n                else\
    \ stack.pop\n            }\n        }\n        if (stack.isEmpty) \"Yes\" else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s =\
    \ s1 + s2\n        val n = s.length\n        var count = 0\n        for (i <-\
    \ 0 until n) {\n            if (s(i) == '(') count += 1\n            else count\
    \ -= 1\n            if (count < 0) return \"No\"\n        }\n        if (count\
    \ == 0) \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s = s1 + s2\n        val stack = new Stack[Char]\n        for (c\
    \ <- s) {\n            if (c == '(') stack.push(c)\n            else if (c ==\
    \ ')') {\n                if (stack.isEmpty) return \"No\"\n                else\
    \ stack.pop\n            }\n        }\n        if (stack.isEmpty) \"Yes\" else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s =\
    \ s1 + s2\n        val stack = new Stack[Char]\n        for (c <- s) {\n     \
    \       if (c == '(') stack.push(c)\n            else if (c == ')') {\n      \
    \          if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      val stack = new Stack[Char]\n        for (c <- s) {\n            if (c\
    \ == '(') stack.push(c)\n            else if (c == ')') {\n                if\
    \ (stack.isEmpty) return \"No\"\n                else stack.pop\n            }\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 =\
    \ lst(0)\n        val s2 = lst(1)\n        val s1c = s1.count(_ == '(')\n    \
    \    val s2c = s2.count(_ == '(')\n        val s1o = s1.count(_ == ')')\n    \
    \    val s2o = s2.count(_ == ')')\n        if (s1c == s1o && s2c == s2o) {\n \
    \           \"Yes\"\n        } else if (s1c == s1o && s2c > s2o) {\n         \
    \   if (s2c - s2o <= s1c) \"Yes\" else \"No\"\n        } else if (s1c > s1o &&\
    \ s2c == s2o) {\n            if (s1c - s1o <= s2c) \"Yes\" else \"No\"\n     \
    \   } else if (s1c > s1o && s2c > s2o) {\n            if (s1c - s1o <= s2c &&\
    \ s2c - s2o <= s1c) \"Yes\" else \"No\"\n        } else {\n            \"No\"\n\
    \        }", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s1c\
    \ = s1.count(_ == '(')\n        val s2c = s2.count(_ == '(')\n        val s1o\
    \ = s1.count(_ == ')')\n        val s2o = s2.count(_ == ')')\n        if (s1c\
    \ == s1o && s2c == s2o) return \"Yes\"\n        else if (s1c == s1o && s2c > s2o)\
    \ return \"Yes\"\n        else if (s1c > s1o && s2c == s2o) return \"Yes\"\n \
    \       else return \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s = s1 + s2\n        if (s.length % 2 == 1) return \"No\"\n     \
    \   val stack = new Stack[Char]\n        for (c <- s) {\n            if (c ==\
    \ '(') stack.push(c)\n            else if (stack.isEmpty) return \"No\"\n    \
    \        else stack.pop\n        }\n        if (stack.isEmpty) \"Yes\" else \"\
    No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 +\
    \ s2\n        var stack = new Stack[Char]\n        for (c <- s) {\n          \
    \  if (c == '(') stack.push(c)\n            else {\n                if (stack.isEmpty)\
    \ return \"No\"\n                else stack.pop\n            }\n        }\n  \
    \      if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n   \
    \     val s2 = lst(1)\n        val s = s1 + s2\n        val stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (c == ')') {\n                if (stack.isEmpty) return \"No\"\n   \
    \             stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        val n = s.length\n        var stack = new Stack[Char]\n\
    \        for (i <- 0 until n) {\n            val c = s(i)\n            if (c ==\
    \ '(') stack.push(c)\n            else {\n                if (stack.isEmpty) return\
    \ \"No\"\n                else stack.pop\n            }\n        }\n        if\
    \ (stack.isEmpty) \"Yes\" else \"No\"", "        def isGood(s : String) : Boolean\
    \ = {\n            var count = 0\n            for (c <- s) {\n               \
    \ if (c == '(') count += 1\n                else if (c == ')') count -= 1\n  \
    \              if (count < 0) return false\n            }\n            return\
    \ count == 0\n        }\n        if (isGood(lst(0) + lst(1))) return \"Yes\"\n\
    \        if (isGood(lst(1) + lst(0))) return \"Yes\"\n        return \"No\"",
  "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n   \
    \     var stack = new Stack[Char]\n        for (c <- s) {\n            if (c ==\
    \ '(') stack.push(c)\n            else {\n                if (stack.isEmpty) return\
    \ \"No\"\n                else stack.pop\n            }\n        }\n        if\
    \ (stack.isEmpty) \"Yes\" else \"No\"", "        val str1 = lst(0)\n        val\
    \ str2 = lst(1)\n        val str1Open = str1.count(_ == '(')\n        val str1Close\
    \ = str1.count(_ == ')')\n        val str2Open = str2.count(_ == '(')\n      \
    \  val str2Close = str2.count(_ == ')')\n        if (str1Open == str1Close &&\
    \ str2Open == str2Close) {\n            \"Yes\"\n        } else if (str1Open ==\
    \ str1Close && str2Open > str2Close) {\n            if (str2Open - str2Close ==\
    \ str1Open) \"Yes\" else \"No\"\n        } else if (str1Open == str1Close && str2Open\
    \ < str2Close) {\n            if (str2Close - str2Open == str1Open) \"Yes\" else\
    \ \"No\"\n        } else if (str1Open > str1Close && str2Open == str2Close) {\n\
    \            if (str1Open - str1Close == str2Open) \"Yes\" else \"No\"\n     \
    \   } else if (str1Open < str1Close && str2Open == str2Close) {\n            if\
    \ (str1Close - str1Open == str2Open) \"Yes\" else \"No\"\n        } else if (str1Open\
    \ > str1Close && str2Open > str2Close) {\n            if (str1Open - str1Close\
    \ == str2Open - str2Close) \"Yes\" else \"No\"\n        } else if (str1Open >\
    \ str1Close && str2Open < str2Close) {\n            if (str1Open - str1Close ==\
    \ str2Close - str2Open) \"Yes\" else \"No\"\n        } else if (str1Open < str1Close\
    \ && str2Open > str2Close) {\n            if (str1Close - str1Open == str2Open\
    \ - str2Close) \"Yes\" else \"No\"\n        } else if (str1Open < str1Close &&\
    \ str2Open < str2Close) {\n            if (str1Close - str1Open == str2Close -\
    \ str2Open) \"Yes\" else \"No\"\n        } else {\n            \"No\"\n      \
    \  }\n    }", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s3\
    \ = s1 + s2\n        val s4 = s2 + s1\n        if (isGood(s3)) \"Yes\"\n     \
    \   else if (isGood(s4)) \"Yes\"\n        else \"No\"", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        val s = s1 + s2\n        val stack = new Stack[Char]\n\
    \        for (i <- 0 until s.length) {\n            val c = s(i)\n           \
    \ if (c == '(') stack.push(c)\n            else {\n                if (stack.isEmpty)\
    \ return \"No\"\n                else stack.pop\n            }\n        }\n  \
    \      if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n   \
    \     val s2 = lst(1)\n        val s = s1 + s2\n        val n = s.length\n   \
    \     var cnt = 0\n        for (i <- 0 until n) {\n            if (s(i) == '(')\
    \ cnt += 1\n            else cnt -= 1\n            if (cnt < 0) return \"No\"\n\
    \        }\n        if (cnt == 0) \"Yes\" else \"No\"", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        val s = s1 + s2\n        var stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (c == ')') {\n                if (stack.isEmpty) return \"No\"\n   \
    \             else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s = lst.mkString\n        val n = s.length\n\
    \        var cnt = 0\n        for (i <- 0 until n) {\n            if (s(i) ==\
    \ '(') cnt += 1\n            else cnt -= 1\n            if (cnt < 0) return \"\
    No\"\n        }\n        if (cnt == 0) \"Yes\" else \"No\"", "        val s1 =\
    \ lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n        if (s.length\
    \ % 2 == 1) return \"No\"\n        val stack = new Stack[Char]\n        for (c\
    \ <- s) {\n            if (c == '(') stack.push(c)\n            else if (stack.isEmpty)\
    \ return \"No\"\n            else stack.pop\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s3 = s1 + s2\n        val s4 = s2 + s1\n        if (isGood(s3)) \"\
    Yes\"\n        else if (isGood(s4)) \"Yes\"\n        else \"No\"", "        val\
    \ (s1, s2) = (lst(0), lst(1))\n        if (s1.length == 0) {\n            if (s2.length\
    \ == 0) \"Yes\"\n            else if (s2.length % 2 == 0) \"Yes\"\n          \
    \  else \"No\"\n        } else if (s2.length == 0) {\n            if (s1.length\
    \ == 0) \"Yes\"\n            else if (s1.length % 2 == 0) \"Yes\"\n          \
    \  else \"No\"\n        } else {\n            val (c1, c2) = (s1(0), s2(0))\n\
    \            if (c1 == '(' && c2 == ')') \"Yes\"\n            else if (c1 == ')'\
    \ && c2 == '(') \"Yes\"\n            else matchParens(List(s1.substring(1), s2.substring(1)))\n\
    \        }", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s\
    \ = s1 + s2\n        val n = s.length\n        var stack = new Stack[Char]\n \
    \       for (i <- 0 until n) {\n            val c = s(i)\n            if (c ==\
    \ '(') stack.push(c)\n            else if (c == ')') {\n                if (stack.isEmpty)\
    \ return \"No\"\n                else stack.pop\n            }\n        }\n  \
    \      if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n   \
    \     val s2 = lst(1)\n        val s = s1 + s2\n        val stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else {\n                if (stack.isEmpty) return \"No\"\n                else\
    \ stack.pop\n            }\n        }\n        if (stack.isEmpty) \"Yes\" else\
    \ \"No\"", "        val s = lst.mkString\n        if (s.length % 2 == 1) return\
    \ \"No\"\n        val stack = new Stack[Char]\n        for (c <- s) {\n      \
    \      if (c == '(') stack.push(c)\n            else if (stack.isEmpty) return\
    \ \"No\"\n            else stack.pop\n        }\n        if (stack.isEmpty) \"\
    Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n      \
    \  val s = s1 + s2\n        var stack = new Stack[Char]\n        for (c <- s)\
    \ {\n            if (c == '(') stack.push(c)\n            else if (c == ')') {\n\
    \                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      val stack = new Stack[Char]\n        for (c <- s) {\n            if (c\
    \ == '(') stack.push(c)\n            else if (c == ')') {\n                if\
    \ (stack.isEmpty) return \"No\"\n                else stack.pop\n            }\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 =\
    \ lst(0)\n        val s2 = lst(1)\n        def isGood(s : String) : Boolean =\
    \ {\n            var stack = new Stack[Char]\n            for (c <- s) {\n   \
    \             if (c == '(') stack.push(c)\n                else if (c == ')')\
    \ {\n                    if (stack.isEmpty) return false\n                   \
    \ else stack.pop\n                }\n            }\n            stack.isEmpty\n\
    \        }\n        if (isGood(s1 + s2)) \"Yes\"\n        else if (isGood(s2 +\
    \ s1)) \"Yes\"\n        else \"No\"", "        val s1 = lst(0)\n        val s2\
    \ = lst(1)\n        val s = s1 + s2\n        var stack = new Stack[Char]\n   \
    \     for (c <- s) {\n            if (c == '(') stack.push(c)\n            else\
    \ if (c == ')') {\n                if (stack.isEmpty) return \"No\"\n        \
    \        else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        val stack = new Stack[Char]\n        for (c <-\
    \ s) {\n            if (c == '(') stack.push(c)\n            else if (c == ')')\
    \ {\n                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s = lst.mkString\n        if (s.count(_ == '(') != s.count(_ == ')'))\
    \ \"No\"\n        else {\n            val stack = new Stack[Char]\n          \
    \  for (c <- s) {\n                if (c == '(') stack.push(c)\n             \
    \   else if (stack.isEmpty) return \"No\"\n                else stack.pop\n  \
    \          }\n            if (stack.isEmpty) \"Yes\" else \"No\"\n        }",
  "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n   \
    \     var stack = new Stack[Char]\n        for (i <- 0 until s.length) {\n   \
    \         val c = s(i)\n            if (c == '(') stack.push(c)\n            else\
    \ if (c == ')') {\n                if (stack.isEmpty) return \"No\"\n        \
    \        else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        val n = s.length\n        var count = 0\n    \
    \    for (i <- 0 until n) {\n            if (s(i) == '(') count += 1\n       \
    \     else count -= 1\n            if (count < 0) return \"No\"\n        }\n \
    \       if (count == 0) \"Yes\" else \"No\"", "        val s1 = lst(0)\n     \
    \   val s2 = lst(1)\n        val s = s1 + s2\n        val stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (c == ')') {\n                if (stack.isEmpty) return \"No\"\n   \
    \             else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s = lst.foldLeft(\"\")(_ + _)\n        if\
    \ (s.count(_ == '(') != s.count(_ == ')')) return \"No\"\n        var cnt = 0\n\
    \        for (c <- s) {\n            if (c == '(') cnt += 1\n            else\
    \ cnt -= 1\n            if (cnt < 0) return \"No\"\n        }\n        \"Yes\"",
  "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n   \
    \     val stack = new Stack[Char]\n        for (c <- s) {\n            if (c ==\
    \ '(') stack.push(c)\n            else {\n                if (stack.isEmpty) return\
    \ \"No\"\n                else stack.pop\n            }\n        }\n        if\
    \ (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val\
    \ s2 = lst(1)\n        val s1c = s1.count(_ == '(')\n        val s2c = s2.count(_\
    \ == '(')\n        val s1o = s1.count(_ == ')')\n        val s2o = s2.count(_\
    \ == ')')\n        if (s1c == s1o && s2c == s2o) \"Yes\"\n        else if (s1c\
    \ == s1o && s2c < s2o) \"No\"\n        else if (s1c < s1o && s2c == s2o) \"No\"\
    \n        else if (s1c < s1o && s2c < s2o) \"No\"\n        else if (s1c > s1o\
    \ && s2c > s2o) \"Yes\"\n        else if (s1c > s1o && s2c < s2o) \"Yes\"\n  \
    \      else if (s1c < s1o && s2c > s2o) \"Yes\"\n        else \"No\"", "     \
    \   val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n      \
    \  var stack = new Stack[Char]\n        for (c <- s) {\n            if (c == '(')\
    \ stack.push(c)\n            else {\n                if (stack.isEmpty) return\
    \ \"No\"\n                else stack.pop\n            }\n        }\n        if\
    \ (stack.isEmpty) \"Yes\" else \"No\"", "        val s = lst.mkString\n      \
    \  val n = s.length\n        var cnt = 0\n        for (i <- 0 until n) {\n   \
    \         if (s(i) == '(') cnt += 1\n            else cnt -= 1\n            if\
    \ (cnt < 0) return \"No\"\n        }\n        if (cnt == 0) \"Yes\" else \"No\"",
  "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n   \
    \     val stack = new Stack[Char]\n        for (c <- s) {\n            if (c ==\
    \ '(') stack.push(c)\n            else {\n                if (stack.isEmpty) return\
    \ \"No\"\n                else stack.pop\n            }\n        }\n        if\
    \ (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val\
    \ s2 = lst(1)\n        val s = s1 + s2\n        val n = s.length\n        var\
    \ stack = new Stack[Char]\n        for (i <- 0 until n) {\n            val c =\
    \ s(i)\n            if (c == '(') stack.push(c)\n            else if (c == ')')\
    \ {\n                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      val stack = Stack[Char]()\n        for (c <- s) {\n            if (c ==\
    \ '(') stack.push(c)\n            else {\n                if (stack.isEmpty) return\
    \ \"No\"\n                else stack.pop\n            }\n        }\n        if\
    \ (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val\
    \ s2 = lst(1)\n        val s = s1 + s2\n        val stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (c == ')') {\n                if (stack.isEmpty) return \"No\"\n   \
    \             else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        def isGood(s : String) : Boolean = {\n      \
    \      var cnt = 0\n            for (c <- s) {\n                if (c == '(')\
    \ cnt += 1\n                else cnt -= 1\n                if (cnt < 0) return\
    \ false\n            }\n            return cnt == 0\n        }\n        if (isGood(lst(0)\
    \ + lst(1))) \"Yes\"\n        else if (isGood(lst(1) + lst(0))) \"Yes\"\n    \
    \    else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n       \
    \ val s = s1 + s2\n        var stack = new Stack[Char]\n        for (c <- s) {\n\
    \            if (c == '(') stack.push(c)\n            else if (c == ')') {\n \
    \               if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        def isGood(s : String)\
    \ : Boolean = {\n            var count = 0\n            for (c <- s) {\n     \
    \           if (c == '(') count += 1\n                else count -= 1\n      \
    \          if (count < 0) return false\n            }\n            return count\
    \ == 0\n        }\n        if (isGood(s1 + s2)) return \"Yes\"\n        if (isGood(s2\
    \ + s1)) return \"Yes\"\n        return \"No\"", "        val s1 = lst(0)\n  \
    \      val s2 = lst(1)\n        val s = s1 + s2\n        val n = s.length\n  \
    \      var stack = new Stack[Char]\n        for (i <- 0 until n) {\n         \
    \   if (s(i) == '(') stack.push(s(i))\n            else if (s(i) == ')') {\n \
    \               if (stack.isEmpty) return \"No\"\n                stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      var stack = new Stack[Char]\n        for (c <- s) {\n            if (c\
    \ == '(') stack.push(c)\n            else if (c == ')') {\n                if\
    \ (stack.isEmpty) return \"No\"\n                else stack.pop\n            }\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 =\
    \ lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n        var stack\
    \ = new Stack[Char]\n        for (c <- s) {\n            if (c == '(') stack.push(c)\n\
    \            else if (c == ')') {\n                if (stack.isEmpty) return \"\
    No\"\n                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s = lst.mkString\n        val n = s.length\n\
    \        var cnt = 0\n        for (i <- 0 until n) {\n            if (s(i) ==\
    \ '(') cnt += 1\n            else cnt -= 1\n            if (cnt < 0) return \"\
    No\"\n        }\n        if (cnt == 0) \"Yes\" else \"No\"", "        val s1 =\
    \ lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n        var stack\
    \ = new Stack[Char]\n        for (c <- s) {\n            if (c == '(') stack.push(c)\n\
    \            else {\n                if (stack.isEmpty) return \"No\"\n      \
    \          else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        var stack = new Stack[Char]\n        for (c <-\
    \ s) {\n            if (c == '(') stack.push(c)\n            else if (c == ')')\
    \ {\n                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      var stack = new Stack[Char]\n        for (c <- s) {\n            if (c\
    \ == '(') stack.push(c)\n            else if (c == ')') {\n                if\
    \ (stack.isEmpty) return \"No\"\n                else stack.pop\n            }\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 =\
    \ lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n        var stack\
    \ = new Stack[Char]\n        for (c <- s) {\n            if (c == '(') stack.push(c)\n\
    \            else if (c == ')') {\n                if (stack.isEmpty) return \"\
    No\"\n                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val str1 = lst(0)\n        val str2 = lst(1)\n\
    \        val str1_len = str1.length\n        val str2_len = str2.length\n    \
    \    val str1_open = str1.count(_ == '(')\n        val str1_close = str1.count(_\
    \ == ')')\n        val str2_open = str2.count(_ == '(')\n        val str2_close\
    \ = str2.count(_ == ')')\n        if (str1_open == str1_close && str2_open ==\
    \ str2_close) {\n            if (str1_open == str2_close) \"Yes\"\n          \
    \  else \"No\"\n        }\n        else if (str1_open == str1_close) {\n     \
    \       if (str1_open == str2_close) \"Yes\"\n            else \"No\"\n      \
    \  }\n        else if (str2_open == str2_close) {\n            if (str2_open ==\
    \ str1_close) \"Yes\"\n            else \"No\"\n        }\n        else \"No\"",
  "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n   \
    \     val stack = new Stack[Char]\n        for (c <- s) {\n            if (c ==\
    \ '(') stack.push(c)\n            else if (c == ')') {\n                if (stack.isEmpty)\
    \ return \"No\"\n                else stack.pop\n            }\n        }\n  \
    \      if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n   \
    \     val s2 = lst(1)\n        val s3 = s1 + s2\n        val s4 = s2 + s1\n  \
    \      if (isGood(s3)) \"Yes\"\n        else if (isGood(s4)) \"Yes\"\n       \
    \ else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val\
    \ s = s1 + s2\n        var stack = new Stack[Char]\n        for (i <- 0 until\
    \ s.length) {\n            val c = s(i)\n            if (c == '(') stack.push(c)\n\
    \            else {\n                if (stack.isEmpty) return \"No\"\n      \
    \          stack.pop\n            }\n        }\n        if (stack.isEmpty) \"\
    Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n      \
    \  val n1 = s1.length\n        val n2 = s2.length\n        val dp = Array.ofDim[Int](n1\
    \ + 1, n2 + 1)\n        for (i <- 0 to n1) {\n            for (j <- 0 to n2) {\n\
    \                if (i == 0 && j == 0) dp(i)(j) = 0\n                else if (i\
    \ == 0) {\n                    if (s2(j - 1) == '(') dp(i)(j) = dp(i)(j - 1) +\
    \ 1\n                    else dp(i)(j) = dp(i)(j - 1) - 1\n                }\n\
    \                else if (j == 0) {\n                    if (s1(i - 1) == '(')\
    \ dp(i)(j) = dp(i - 1)(j) + 1\n                    else dp(i)(j) = dp(i - 1)(j)\
    \ - 1\n                }\n                else {\n                    if (s1(i\
    \ - 1) == '(') dp(i)(j) = max(dp(i - 1)(j) + 1, dp(i)(j - 1))\n              \
    \      else dp(i)(j) = max(dp(i - 1)(j) - 1, dp(i)(j - 1))\n                }\n\
    \            }\n        }\n        if (dp(n1)(n2) == 0) \"Yes\" else \"No\"",
  "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n   \
    \     val stack = new Stack[Char]\n        for (i <- 0 until s.length) {\n   \
    \         val c = s(i)\n            if (c == '(') stack.push(c)\n            else\
    \ if (c == ')') {\n                if (stack.isEmpty) return \"No\"\n        \
    \        else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        var stack = new Stack[Char]\n        for (c <-\
    \ s) {\n            if (c == '(') stack.push(c)\n            else {\n        \
    \        if (stack.isEmpty) return \"No\"\n                else stack.pop\n  \
    \          }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "  \
    \      val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n   \
    \     val len = s.length\n        var stack = new Stack[Char]\n        for (i\
    \ <- 0 until len) {\n            if (s(i) == '(') stack.push('(')\n          \
    \  else if (stack.isEmpty) return \"No\"\n            else stack.pop\n       \
    \ }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        val s = s1 + s2\n        val stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else {\n                if (stack.isEmpty) return \"No\"\n                else\
    \ stack.pop\n            }\n        }\n        if (stack.isEmpty) \"Yes\" else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s =\
    \ s1 + s2\n        val stack = new Stack[Char]\n        for (c <- s) {\n     \
    \       if (c == '(') stack.push(c)\n            else if (c == ')') {\n      \
    \          if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      var stack = new Stack[Char]\n        for (c <- s) {\n            if (c\
    \ == '(') stack.push(c)\n            else if (c == ')') {\n                if\
    \ (stack.isEmpty) return \"No\"\n                else stack.pop\n            }\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 =\
    \ lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n        var stack\
    \ = Stack[Char]()\n        for (c <- s) {\n            if (c == '(') stack.push(c)\n\
    \            else if (c == ')') {\n                if (stack.isEmpty) return \"\
    No\"\n                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        val n = s.length\n        var stack = new Stack[Char]\n\
    \        for (i <- 0 until n) {\n            if (s(i) == '(') stack.push(s(i))\n\
    \            else if (s(i) == ')') {\n                if (stack.isEmpty) return\
    \ \"No\"\n                else stack.pop\n            }\n        }\n        if\
    \ (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val\
    \ s2 = lst(1)\n        val s = s1 + s2\n        var stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else {\n                if (stack.isEmpty) return \"No\"\n                else\
    \ stack.pop\n            }\n        }\n        if (stack.isEmpty) \"Yes\" else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s =\
    \ s1 + s2\n        val stack = new Stack[Char]\n        for (c <- s) {\n     \
    \       if (c == '(') stack.push(c)\n            else if (c == ')') {\n      \
    \          if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s1c = s1.count(c\
    \ => c == '(')\n        val s2c = s2.count(c => c == '(')\n        if (s1c ==\
    \ s2c) {\n            val s = s1 + s2\n            if (s.count(c => c == '(')\
    \ == s.count(c => c == ')')) \"Yes\" else \"No\"\n        } else if (s1c > s2c)\
    \ {\n            val s = s1 + s2\n            if (s.count(c => c == '(') == s.count(c\
    \ => c == ')')) \"Yes\" else \"No\"\n        } else {\n            val s = s2\
    \ + s1\n            if (s.count(c => c == '(') == s.count(c => c == ')')) \"Yes\"\
    \ else \"No\"\n        }", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s = s1 + s2\n        val stack = Stack[Char]()\n        for (c <-\
    \ s) {\n            if (c == '(') stack.push(c)\n            else {\n        \
    \        if (stack.isEmpty) return \"No\"\n                else stack.pop\n  \
    \          }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "  \
    \      val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n   \
    \     val stack = new Stack[Char]\n        for (c <- s) {\n            if (c ==\
    \ '(') stack.push(c)\n            else if (c == ')') {\n                if (stack.isEmpty)\
    \ return \"No\"\n                else stack.pop\n            }\n        }\n  \
    \      if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n   \
    \     val s2 = lst(1)\n        val s = s1 + s2\n        var stack = new Stack[Char]\n\
    \        for (i <- 0 until s.length) {\n            val c = s(i)\n           \
    \ if (c == '(') stack.push(c)\n            else {\n                if (stack.isEmpty)\
    \ return \"No\"\n                else stack.pop\n            }\n        }\n  \
    \      if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n   \
    \     val s2 = lst(1)\n        val s = s1 + s2\n        val stack = Stack[Char]()\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else {\n                if (stack.isEmpty) return \"No\"\n                else\
    \ stack.pop\n            }\n        }\n        if (stack.isEmpty) \"Yes\" else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s =\
    \ s1 + s2\n        val n = s.length\n        var cnt = 0\n        for (i <- 0\
    \ until n) {\n            if (s(i) == '(') cnt += 1\n            else cnt -= 1\n\
    \            if (cnt < 0) return \"No\"\n        }\n        if (cnt == 0) \"Yes\"\
    \ else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val\
    \ s = s1 + s2\n        var stack = new Stack[Char]\n        for (c <- s) {\n \
    \           if (c == '(') stack.push(c)\n            else if (c == ')') {\n  \
    \              if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      val stack = new Stack[Char]\n        for (c <- s) {\n            if (c\
    \ == '(') stack.push(c)\n            else if (c == ')') {\n                if\
    \ (stack.isEmpty) return \"No\"\n                else stack.pop\n            }\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 =\
    \ lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n        val stack\
    \ = Stack[Char]()\n        for (c <- s) {\n            if (c == '(') stack.push(c)\n\
    \            else {\n                if (stack.isEmpty) return \"No\"\n      \
    \          else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        val stack = new Stack[Char]\n        for (i <-\
    \ 0 until s.length) {\n            val c = s(i)\n            if (c == '(') stack.push(c)\n\
    \            else if (c == ')') {\n                if (stack.isEmpty) return \"\
    No\"\n                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        val stack = Stack[Char]()\n        for (c <- s)\
    \ {\n            if (c == '(') stack.push(c)\n            else if (c == ')') {\n\
    \                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      var stack = new Stack[Char]\n        for (c <- s) {\n            if (c\
    \ == '(') stack.push(c)\n            else if (c == ')') {\n                if\
    \ (stack.isEmpty) return \"No\"\n                else stack.pop\n            }\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 =\
    \ lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n        val n = s.length\n\
    \        var stack = new Stack[Char]\n        for (i <- 0 until n) {\n       \
    \     val c = s(i)\n            if (c == '(') stack.push(c)\n            else\
    \ {\n                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      val stack = new Stack[Char]\n        for (c <- s) {\n            if (c\
    \ == '(') stack.push(c)\n            else if (c == ')') {\n                if\
    \ (stack.isEmpty) return \"No\"\n                else stack.pop\n            }\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 =\
    \ lst(0)\n        val s2 = lst(1)\n        val s3 = s1 + s2\n        val s4 =\
    \ s2 + s1\n        if (isGood(s3)) \"Yes\"\n        else if (isGood(s4)) \"Yes\"\
    \n        else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        val stack = new Stack[Char]\n        for (c <-\
    \ s) {\n            if (c == '(') stack.push(c)\n            else if (c == ')')\
    \ {\n                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      val n = s.length\n        val dp = Array.fill(n + 1)(0)\n        for (i\
    \ <- 0 until n) {\n            if (s(i) == '(') dp(i + 1) = dp(i) + 1\n      \
    \      else dp(i + 1) = dp(i) - 1\n        }\n        if (dp(n) != 0) return \"\
    No\"\n        for (i <- 0 until n) {\n            if (dp(i) < 0) return \"No\"\
    \n        }\n        return \"Yes\"", "        val s1 = lst(0)\n        val s2\
    \ = lst(1)\n        val s1_good = isGood(s1)\n        val s2_good = isGood(s2)\n\
    \        if (s1_good && s2_good) return \"Yes\"\n        if (s1_good) {\n    \
    \        val s2_good_after_concat = isGood(s1 + s2)\n            if (s2_good_after_concat)\
    \ return \"Yes\"\n        }\n        if (s2_good) {\n            val s1_good_after_concat\
    \ = isGood(s2 + s1)\n            if (s1_good_after_concat) return \"Yes\"\n  \
    \      }\n        \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s = s1 + s2\n        val stack = new Stack[Char]\n        for (i\
    \ <- 0 until s.length) {\n            val c = s(i)\n            if (c == '(')\
    \ stack.push(c)\n            else {\n                if (stack.isEmpty) return\
    \ \"No\"\n                stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        val n = s.length\n        var stack = new Stack[Char]\n\
    \        for (i <- 0 until n) {\n            val c = s(i)\n            if (c ==\
    \ '(') stack.push(c)\n            else {\n                if (stack.isEmpty) return\
    \ \"No\"\n                else stack.pop\n            }\n        }\n        if\
    \ (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val\
    \ s2 = lst(1)\n        val s = s1 + s2\n        val stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else {\n                if (stack.isEmpty) return \"No\"\n                else\
    \ stack.pop\n            }\n        }\n        if (stack.isEmpty) \"Yes\" else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s1Open\
    \ = s1.count(_ == '(')\n        val s1Close = s1.count(_ == ')')\n        val\
    \ s2Open = s2.count(_ == '(')\n        val s2Close = s2.count(_ == ')')\n    \
    \    if (s1Open == s1Close && s2Open == s2Close) \"Yes\"\n        else if (s1Open\
    \ == s1Close && s2Open > s2Close) \"Yes\"\n        else if (s1Open > s1Close &&\
    \ s2Open == s2Close) \"Yes\"\n        else if (s1Open > s1Close && s2Open > s2Close)\
    \ {\n            if (s1Open - s1Close == s2Open - s2Close) \"Yes\"\n         \
    \   else \"No\"\n        }\n        else \"No\"", "        val s1 = lst(0)\n \
    \       val s2 = lst(1)\n        val s = s1 + s2\n        val stack = new Stack[Char]\n\
    \        for (i <- 0 until s.length) {\n            val c = s(i)\n           \
    \ if (c == '(') stack.push(c)\n            else if (c == ')') {\n            \
    \    if (stack.isEmpty) return \"No\"\n                else stack.pop\n      \
    \      }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "      \
    \  val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n       \
    \ val stack = new Stack[Char]\n        for (c <- s) {\n            if (c == '(')\
    \ stack.push(c)\n            else if (c == ')') {\n                if (stack.isEmpty)\
    \ return \"No\"\n                else stack.pop\n            }\n        }\n  \
    \      if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n   \
    \     val s2 = lst(1)\n        val s = s1 + s2\n        var stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else {\n                if (stack.isEmpty) return \"No\"\n                else\
    \ stack.pop\n            }\n        }\n        if (stack.isEmpty) \"Yes\" else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s1_count\
    \ = s1.count(_ == '(')\n        val s2_count = s2.count(_ == '(')\n        val\
    \ s1_count_close = s1.count(_ == ')')\n        val s2_count_close = s2.count(_\
    \ == ')')\n        if (s1_count == s1_count_close && s2_count == s2_count_close)\
    \ {\n            if (s1_count == s2_count_close && s2_count == s1_count_close)\
    \ {\n                \"Yes\"\n            } else {\n                \"No\"\n \
    \           }\n        } else {\n            \"No\"\n        }", "        val\
    \ (l, r) = (lst(0), lst(1))\n        val (l_open, l_close) = (l.count(_ == '('),\
    \ l.count(_ == ')'))\n        val (r_open, r_close) = (r.count(_ == '('), r.count(_\
    \ == ')'))\n        if (l_open == l_close && r_open == r_close) \"Yes\"\n    \
    \    else if (l_open == l_close && r_open > r_close) \"Yes\"\n        else if\
    \ (l_open > l_close && r_open == r_close) \"Yes\"\n        else if (l_open > l_close\
    \ && r_open > r_close) \"Yes\"\n        else \"No\"", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        val s = s1 + s2\n        if (s.count(_ == '(')\
    \ != s.count(_ == ')')) return \"No\"\n        var stack = new Stack[Char]\n \
    \       for (c <- s) {\n            if (c == '(') stack.push(c)\n            else\
    \ {\n                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s3 = s1 + s2\n \
    \       val s4 = s2 + s1\n        if (isGood(s3)) \"Yes\"\n        else if (isGood(s4))\
    \ \"Yes\"\n        else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s = s1 + s2\n        if (s.length % 2 == 1) return \"No\"\n     \
    \   val stack = new Stack[Char]\n        for (i <- 0 until s.length) {\n     \
    \       if (s(i) == '(') stack.push('(')\n            else {\n               \
    \ if (stack.isEmpty) return \"No\"\n                else stack.pop\n         \
    \   }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val\
    \ s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n        val n\
    \ = s.length\n        var stack = new Stack[Char]\n        for (i <- 0 until n)\
    \ {\n            val c = s(i)\n            if (c == '(') stack.push(c)\n     \
    \       else if (c == ')') {\n                if (stack.isEmpty) return \"No\"\
    \n                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        var stack = new Stack[Char]\n        for (c <-\
    \ s) {\n            if (c == '(') stack.push(c)\n            else if (c == ')')\
    \ {\n                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      var stack = new Stack[Char]\n        for (c <- s) {\n            if (c\
    \ == '(') stack.push(c)\n            else if (c == ')') {\n                if\
    \ (stack.isEmpty) return \"No\"\n                else stack.pop\n            }\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 =\
    \ lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n        val n = s.length\n\
    \        var stack = new Stack[Char]\n        for (i <- 0 until n) {\n       \
    \     val c = s(i)\n            if (c == '(') stack.push(c)\n            else\
    \ {\n                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      val stack = new Stack[Char]\n        for (i <- 0 until s.length) {\n  \
    \          val c = s(i)\n            if (c == '(') stack.push(c)\n           \
    \ else if (c == ')') {\n                if (stack.isEmpty) return \"No\"\n   \
    \             stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        val n = s.length\n        var stack = new Stack[Char]\n\
    \        for (i <- 0 until n) {\n            val c = s(i)\n            if (c ==\
    \ '(') stack.push(c)\n            else {\n                if (stack.isEmpty) return\
    \ \"No\"\n                else stack.pop\n            }\n        }\n        if\
    \ (stack.isEmpty) \"Yes\" else \"No\"", "        val str1 = lst(0)\n        val\
    \ str2 = lst(1)\n        val str1Len = str1.length\n        val str2Len = str2.length\n\
    \        val str1Open = str1.count(_ == '(')\n        val str1Close = str1.count(_\
    \ == ')')\n        val str2Open = str2.count(_ == '(')\n        val str2Close\
    \ = str2.count(_ == ')')\n        if (str1Open == str1Close && str2Open == str2Close)\
    \ {\n            \"Yes\"\n        } else if (str1Open == str1Close && str2Open\
    \ != str2Close) {\n            if (str2Open > str2Close) {\n                if\
    \ (str2Open - str2Close == str1Open) {\n                    \"Yes\"\n        \
    \        } else {\n                    \"No\"\n                }\n           \
    \ } else {\n                if (str2Close - str2Open == str1Close) {\n       \
    \             \"Yes\"\n                } else {\n                    \"No\"\n\
    \                }\n            }\n        } else if (str1Open != str1Close &&\
    \ str2Open == str2Close) {\n            if (str1Open > str1Close) {\n        \
    \        if (str1Open - str1Close == str2Open) {\n                    \"Yes\"\n\
    \                } else {\n                    \"No\"\n                }\n   \
    \         } else {\n                if (str1Close - str1Open == str2Close) {\n\
    \                    \"Yes\"\n                } else {\n                    \"\
    No\"\n                }\n            }\n        } else {\n            if (str1Open\
    \ > str1Close) {\n                if (str1Open - str1Close == str2Open) {\n  \
    \                  \"Yes\"\n                } else {\n                    \"No\"\
    \n                }\n            } else {\n                if (str1Close - str1Open\
    \ == str2Close) {\n                    \"Yes\"\n                } else {\n   \
    \                 \"No\"\n                }\n            }\n        }", "    \
    \    val s = lst.foldLeft(\"\")((x, y) => x + y)\n        val n = s.length\n \
    \       var stack = new Stack[Char]\n        for (i <- 0 until n) {\n        \
    \    val c = s(i)\n            if (c == '(') stack.push(c)\n            else if\
    \ (c == ')') {\n                if (stack.isEmpty) return \"No\"\n           \
    \     else stack.pop\n            }\n        }\n        if (stack.isEmpty) \"\
    Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n      \
    \  val s1l = s1.length\n        val s2l = s2.length\n        val s1c = s1.count(_\
    \ == '(')\n        val s2c = s2.count(_ == '(')\n        val s1o = s1.count(_\
    \ == ')')\n        val s2o = s2.count(_ == ')')\n        if (s1c == s1o && s2c\
    \ == s2o) {\n            if (s1c == s2o) \"Yes\"\n            else \"No\"\n  \
    \      } else {\n            if (s1c == s2o && s1o == s2c) \"Yes\"\n         \
    \   else \"No\"\n        }", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s = s1 + s2\n        var stack = new Stack[Char]\n        for (c\
    \ <- s) {\n            if (c == '(') stack.push(c)\n            else {\n     \
    \           if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      val stack = new Stack[Char]\n        for (i <- 0 until s.length) {\n  \
    \          if (s(i) == '(') stack.push('(')\n            else if (stack.isEmpty)\
    \ return \"No\"\n            else stack.pop\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        var stack = new Stack[Char]\n        for (c <-\
    \ s) {\n            if (c == '(') stack.push(c)\n            else {\n        \
    \        if (stack.isEmpty) return \"No\"\n                else stack.pop\n  \
    \          }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "  \
    \      val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n   \
    \     val stack = new Stack[Char]\n        for (c <- s) {\n            if (c ==\
    \ '(') stack.push(c)\n            else if (c == ')') {\n                if (stack.isEmpty)\
    \ return \"No\"\n                stack.pop\n            }\n        }\n       \
    \ if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val\
    \ s2 = lst(1)\n        val s = s1 + s2\n        val stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (c == ')') {\n                if (stack.isEmpty) return \"No\"\n   \
    \             else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        val stack = Stack[Char]()\n        for (i <- 0\
    \ until s.length) {\n            val c = s(i)\n            if (c == '(') stack.push(c)\n\
    \            else if (c == ')') {\n                if (stack.isEmpty) return \"\
    No\"\n                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        val stack = new Stack[Char]\n        for (i <-\
    \ 0 until s.length) {\n            val c = s(i)\n            if (c == '(') stack.push(c)\n\
    \            else if (c == ')') {\n                if (stack.isEmpty) return \"\
    No\"\n                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        if (s.length % 2 == 1) return \"No\"\n       \
    \ val stack = new Stack[Char]\n        for (c <- s) {\n            if (c == '(')\
    \ stack.push(c)\n            else if (stack.isEmpty) return \"No\"\n         \
    \   else stack.pop\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"",
  "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n   \
    \     if (s.length % 2 == 1) return \"No\"\n        val stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (stack.isEmpty) return \"No\"\n            else stack.pop\n        }\n\
    \        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n \
    \       val s2 = lst(1)\n        val s = s1 + s2\n        val stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (c == ')') {\n                if (stack.isEmpty) return \"No\"\n   \
    \             else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        val n = s.length\n        var stack = new Stack[Char]\n\
    \        for (i <- 0 until n) {\n            val c = s(i)\n            if (c ==\
    \ '(') stack.push(c)\n            else {\n                if (stack.isEmpty) return\
    \ \"No\"\n                else stack.pop\n            }\n        }\n        if\
    \ (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val\
    \ s2 = lst(1)\n        val s1_count = s1.count(_ == '(')\n        val s2_count\
    \ = s2.count(_ == '(')\n        val s1_count_close = s1.count(_ == ')')\n    \
    \    val s2_count_close = s2.count(_ == ')')\n        if (s1_count == s1_count_close\
    \ && s2_count == s2_count_close) {\n            val s = s1 + s2\n            val\
    \ s_count = s.count(_ == '(')\n            val s_count_close = s.count(_ == ')')\n\
    \            if (s_count == s_count_close) \"Yes\" else \"No\"\n        } else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s =\
    \ s1 + s2\n        var stack = new Stack[Char]\n        for (i <- 0 until s.length)\
    \ {\n            val c = s(i)\n            if (c == '(') stack.push(c)\n     \
    \       else {\n                if (stack.isEmpty) return \"No\"\n           \
    \     stack.pop\n            }\n        }\n        if (stack.isEmpty) \"Yes\"\
    \ else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val\
    \ s = s1 + s2\n        val stack = new Stack[Char]\n        for (c <- s) {\n \
    \           if (c == '(') stack.push(c)\n            else if (c == ')') {\n  \
    \              if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      val n = s.length\n        var stack = new Stack[Char]\n        for (i <-\
    \ 0 until n) {\n            val c = s(i)\n            if (c == '(') stack.push(c)\n\
    \            else {\n                if (stack.isEmpty) return \"No\"\n      \
    \          else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        val stack = new Stack[Char]\n        for (c <-\
    \ s) {\n            if (c == '(') stack.push(c)\n            else if (c == ')')\
    \ {\n                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       var s = lst(0) + lst(1)\n        var count = 0\n        for (i <- 0 until\
    \ s.length) {\n            if (s(i) == '(') count += 1\n            else count\
    \ -= 1\n            if (count < 0) return \"No\"\n        }\n        if (count\
    \ == 0) \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s = s1 + s2\n        val n = s.length\n        var stack = new Stack[Char]\n\
    \        for (i <- 0 until n) {\n            val c = s(i)\n            if (c ==\
    \ '(') stack.push(c)\n            else if (c == ')') {\n                if (stack.isEmpty)\
    \ return \"No\"\n                else stack.pop\n            }\n        }\n  \
    \      if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n   \
    \     val s2 = lst(1)\n        var stack = new Stack[Char]\n        for (c <-\
    \ s1) {\n            if (c == '(') stack.push(c)\n            else if (stack.nonEmpty)\
    \ stack.pop\n            else return \"No\"\n        }\n        for (c <- s2)\
    \ {\n            if (c == '(') stack.push(c)\n            else if (stack.nonEmpty)\
    \ stack.pop\n            else return \"No\"\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        val stack = new Stack[Char]\n        for (c <-\
    \ s) {\n            if (c == '(') stack.push(c)\n            else if (c == ')')\
    \ {\n                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      val n = s.length\n        var stack = new Stack[Char]\n        for (i <-\
    \ 0 until n) {\n            val c = s(i)\n            if (c == '(') stack.push(c)\n\
    \            else if (c == ')') {\n                if (stack.isEmpty) return \"\
    No\"\n                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        val stack = new Stack[Char]\n        for (c <-\
    \ s) {\n            if (c == '(') stack.push(c)\n            else if (c == ')')\
    \ {\n                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      val stack = new Stack[Char]\n        for (c <- s) {\n            if (c\
    \ == '(') stack.push(c)\n            else if (c == ')') {\n                if\
    \ (stack.isEmpty) return \"No\"\n                else stack.pop\n            }\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 =\
    \ lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n        val stack\
    \ = new Stack[Char]\n        for (c <- s) {\n            if (c == '(') stack.push(c)\n\
    \            else if (c == ')') {\n                if (stack.isEmpty) return \"\
    No\"\n                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        if (s.length % 2 == 1) return \"No\"\n       \
    \ val stack = new Stack[Char]\n        for (c <- s) {\n            if (c == '(')\
    \ stack.push(c)\n            else if (stack.isEmpty) return \"No\"\n         \
    \   else stack.pop\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"",
  "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s3 = s1 + s2\n  \
    \      val s4 = s2 + s1\n        if (isGood(s3)) \"Yes\"\n        else if (isGood(s4))\
    \ \"Yes\"\n        else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s = s1 + s2\n        val stack = new Stack[Char]\n        for (c\
    \ <- s) {\n            if (c == '(') stack.push(c)\n            else {\n     \
    \           if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s1_open = s1.count(_\
    \ == '(')\n        val s1_close = s1.count(_ == ')')\n        val s2_open = s2.count(_\
    \ == '(')\n        val s2_close = s2.count(_ == ')')\n        if (s1_open == s1_close\
    \ && s2_open == s2_close) \"Yes\"\n        else if (s1_open == s1_close && s2_open\
    \ > s2_close) {\n            if (s2_open - s2_close <= s1_open) \"Yes\"\n    \
    \        else \"No\"\n        }\n        else if (s1_open == s1_close && s2_open\
    \ < s2_close) {\n            if (s2_close - s2_open <= s1_open) \"Yes\"\n    \
    \        else \"No\"\n        }\n        else if (s1_open > s1_close && s2_open\
    \ == s2_close) {\n            if (s1_open - s1_close <= s2_open) \"Yes\"\n   \
    \         else \"No\"\n        }\n        else if (s1_open < s1_close && s2_open\
    \ == s2_close) {\n            if (s1_close - s1_open <= s2_open) \"Yes\"\n   \
    \         else \"No\"\n        }\n        else if (s1_open > s1_close && s2_open\
    \ > s2_close) {\n            if (s1_open - s1_close + s2_open - s2_close <= s1_open\
    \ + s2_open) \"Yes\"\n            else \"No\"\n        }\n        else if (s1_open\
    \ > s1_close && s2_open < s2_close) {\n            if (s1_open - s1_close + s2_close\
    \ - s2_open <= s1_open + s2_open) \"Yes\"\n            else \"No\"\n        }\n\
    \        else if (s1_open < s1_close && s2_open > s2_", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        val s = s1 + s2\n        val stack = new Stack[Char]\n\
    \        for (i <- 0 until s.length) {\n            val c = s(i)\n           \
    \ if (c == '(') stack.push(c)\n            else if (c == ')') {\n            \
    \    if (stack.isEmpty) return \"No\"\n                else stack.pop\n      \
    \      }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "      \
    \  val s1 = lst(0)\n        val s2 = lst(1)\n        val s1c = s1.count(_ == '(')\n\
    \        val s2c = s2.count(_ == '(')\n        val s1o = s1.count(_ == ')')\n\
    \        val s2o = s2.count(_ == ')')\n        if (s1c == s1o && s2c == s2o) \"\
    Yes\"\n        else if (s1c == s1o && s2c > s2o) \"Yes\"\n        else if (s1c\
    \ > s1o && s2c == s2o) \"Yes\"\n        else \"No\"", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        val s1_open = s1.count(_ == '(')\n        val\
    \ s1_close = s1.count(_ == ')')\n        val s2_open = s2.count(_ == '(')\n  \
    \      val s2_close = s2.count(_ == ')')\n        if (s1_open == s1_close && s2_open\
    \ == s2_close) \"Yes\"\n        else if (s1_open == s1_close && s2_open > s2_close)\
    \ \"Yes\"\n        else if (s1_open > s1_close && s2_open == s2_close) \"Yes\"\
    \n        else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        val stack = new Stack[Char]\n        for (i <-\
    \ 0 until s.length) {\n            val c = s(i)\n            if (c == '(') stack.push(c)\n\
    \            else {\n                if (stack.isEmpty) return \"No\"\n      \
    \          else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s1c = s1.count(_ == '(')\n        val s2c = s2.count(_ == '(')\n  \
    \      if (s1c == s2c) \"Yes\"\n        else if (s1c > s2c) {\n            if\
    \ (s1.count(_ == ')') > s2.count(_ == ')')) \"Yes\"\n            else \"No\"\n\
    \        }\n        else {\n            if (s2.count(_ == ')') > s1.count(_ ==\
    \ ')')) \"Yes\"\n            else \"No\"\n        }", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        val s = s1 + s2\n        val stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (c == ')') {\n                if (stack.isEmpty) return \"No\"\n   \
    \             else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        var stack = new Stack[Char]\n        for (c <-\
    \ s) {\n            if (c == '(') stack.push(c)\n            else if (c == ')')\
    \ {\n                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      var stack = new Stack[Char]\n        for (c <- s) {\n            if (c\
    \ == '(') stack.push(c)\n            else if (c == ')') {\n                if\
    \ (stack.isEmpty) return \"No\"\n                else stack.pop\n            }\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 =\
    \ lst(0)\n        val s2 = lst(1)\n        val s1Count = s1.count(_ == '(')\n\
    \        val s2Count = s2.count(_ == '(')\n        if (s1Count == s2Count) \"\
    Yes\"\n        else if (s1Count == s2Count + 1) {\n            if (s1.count(_\
    \ == ')') == s2.count(_ == ')')) \"Yes\"\n            else \"No\"\n        }\n\
    \        else if (s1Count + 1 == s2Count) {\n            if (s1.count(_ == ')')\
    \ == s2.count(_ == ')')) \"Yes\"\n            else \"No\"\n        }\n       \
    \ else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val\
    \ s = s1 + s2\n        val stack = new Stack[Char]\n        for (c <- s) {\n \
    \           if (c == '(') stack.push(c)\n            else if (c == ')') {\n  \
    \              if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      val n = s.length\n        var stack = new Stack[Char]\n        for (i <-\
    \ 0 until n) {\n            val c = s(i)\n            if (c == '(') stack.push(c)\n\
    \            else {\n                if (stack.isEmpty) return \"No\"\n      \
    \          else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        val stack = new Stack[Char]\n        for (c <-\
    \ s) {\n            if (c == '(') stack.push(c)\n            else if (c == ')')\
    \ {\n                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      val stack = new Stack[Char]\n        for (c <- s) {\n            if (c\
    \ == '(') stack.push(c)\n            else if (c == ')') {\n                if\
    \ (stack.isEmpty) return \"No\"\n                else stack.pop\n            }\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 =\
    \ lst(0)\n        val s2 = lst(1)\n        val s3 = s1 + s2\n        if (s3.length\
    \ % 2 == 1) return \"No\"\n        val stack = new Stack[Char]\n        for (c\
    \ <- s3) {\n            if (c == '(') stack.push(c)\n            else if (stack.isEmpty)\
    \ return \"No\"\n            else stack.pop\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s = lst.mkString\n        if (s.count(_ ==\
    \ '(') != s.count(_ == ')')) \"No\"\n        else {\n            val stack = new\
    \ Stack[Char]\n            for (c <- s) {\n                if (c == '(') stack.push(c)\n\
    \                else if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n            if (stack.isEmpty) \"Yes\" else \"No\"\n        }",
  "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n   \
    \     val n = s.length\n        var stack = new Stack[Char]\n        for (i <-\
    \ 0 until n) {\n            val c = s(i)\n            if (c == '(') stack.push(c)\n\
    \            else {\n                if (stack.isEmpty) return \"No\"\n      \
    \          else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val (s1, s2) = (lst(0), lst(1))\n        def\
    \ isGood(s : String) : Boolean = {\n            var count = 0\n            for\
    \ (c <- s) {\n                if (c == '(') count += 1\n                else if\
    \ (c == ')') count -= 1\n                if (count < 0) return false\n       \
    \     }\n            return count == 0\n        }\n        if (isGood(s1 + s2))\
    \ return \"Yes\"\n        if (isGood(s2 + s1)) return \"Yes\"\n        return\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s =\
    \ s1 + s2\n        val stack = new Stack[Char]\n        for (c <- s) {\n     \
    \       if (c == '(') stack.push(c)\n            else if (c == ')') {\n      \
    \          if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      val n = s.length\n        var stack = new Stack[Char]\n        for (i <-\
    \ 0 until n) {\n            val c = s(i)\n            if (c == '(') stack.push(c)\n\
    \            else if (c == ')') {\n                if (stack.isEmpty) return \"\
    No\"\n                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        val stack = new Stack[Char]\n        for (c <-\
    \ s) {\n            if (c == '(') stack.push(c)\n            else if (c == ')')\
    \ {\n                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s3 = s1 + s2\n \
    \       val s4 = s2 + s1\n        if (s3.length % 2 == 1) return \"No\"\n    \
    \    val stack = new Stack[Char]\n        for (c <- s3) {\n            if (c ==\
    \ '(') stack.push(c)\n            else if (stack.isEmpty) return \"No\"\n    \
    \        else stack.pop\n        }\n        if (stack.isEmpty) return \"Yes\"\n\
    \        else {\n            stack.clear\n            for (c <- s4) {\n      \
    \          if (c == '(') stack.push(c)\n                else if (stack.isEmpty)\
    \ return \"No\"\n                else stack.pop\n            }\n            if\
    \ (stack.isEmpty) return \"Yes\"\n            else return \"No\"\n        }",
  "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n   \
    \     val stack = new Stack[Char]\n        for (c <- s) {\n            if (c ==\
    \ '(') stack.push(c)\n            else if (c == ')') {\n                if (stack.isEmpty)\
    \ return \"No\"\n                else stack.pop\n            }\n        }\n  \
    \      if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n   \
    \     val s2 = lst(1)\n        val s = s1 + s2\n        var stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else {\n                if (stack.isEmpty) return \"No\"\n                else\
    \ stack.pop\n            }\n        }\n        if (stack.isEmpty) \"Yes\" else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s =\
    \ s1 + s2\n        var stack = new Stack[Char]\n        for (c <- s) {\n     \
    \       if (c == '(') stack.push(c)\n            else if (c == ')') {\n      \
    \          if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        if (s1.length + s2.length\
    \ % 2 == 1) return \"No\"\n        val s = s1 + s2\n        val stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else {\n                if (stack.isEmpty) return \"No\"\n                stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      val n = s.length\n        var stack = new Stack[Char]\n        for (i <-\
    \ 0 until n) {\n            val c = s(i)\n            if (c == '(') stack.push(c)\n\
    \            else {\n                if (stack.isEmpty) return \"No\"\n      \
    \          else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        val n = s.length\n        var stack = Stack[Char]()\n\
    \        for (i <- 0 until n) {\n            val c = s(i)\n            if (c ==\
    \ '(') stack.push(c)\n            else {\n                if (stack.isEmpty) return\
    \ \"No\"\n                else stack.pop\n            }\n        }\n        if\
    \ (stack.isEmpty) \"Yes\" else \"No\"", "        val s = lst.mkString(\"\")\n\
    \        val stack = new Stack[Char]\n        for (c <- s) {\n            if (c\
    \ == '(') stack.push(c)\n            else if (stack.isEmpty) return \"No\"\n \
    \           else stack.pop\n        }\n        if (stack.isEmpty) \"Yes\" else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s =\
    \ s1 + s2\n        val stack = new Stack[Char]\n        for (c <- s) {\n     \
    \       if (c == '(') stack.push(c)\n            else {\n                if (stack.isEmpty)\
    \ return \"No\"\n                else stack.pop\n            }\n        }\n  \
    \      if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n   \
    \     val s2 = lst(1)\n        val s = s1 + s2\n        val n = s.length\n   \
    \     var cnt = 0\n        for (i <- 0 until n) {\n            if (s(i) == '(')\
    \ cnt += 1\n            else cnt -= 1\n            if (cnt < 0) return \"No\"\n\
    \        }\n        if (cnt == 0) \"Yes\" else \"No\"", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        val s = s1 + s2\n        var stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (c == ')') {\n                if (stack.isEmpty) return \"No\"\n   \
    \             stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        var stack = new Stack[Char]\n        for (c <-\
    \ s) {\n            if (c == '(') stack.push(c)\n            else if (c == ')')\
    \ {\n                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      val n = s.length\n        var stack = new Stack[Char]\n        for (i <-\
    \ 0 until n) {\n            if (s(i) == '(') stack.push(s(i))\n            else\
    \ if (s(i) == ')') {\n                if (stack.isEmpty) return \"No\"\n     \
    \           else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        val stack = new Stack[Char]\n        for (i <-\
    \ 0 until s.length) {\n            val c = s(i)\n            if (c == '(') stack.push(c)\n\
    \            else {\n                if (stack.isEmpty) return \"No\"\n      \
    \          else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        val stack = new Stack[Char]\n        for (c <-\
    \ s) {\n            if (c == '(') stack.push(c)\n            else if (c == ')')\
    \ {\n                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s3 = s1 + s2\n \
    \       if (s3.count(_ == '(') == s3.count(_ == ')')) \"Yes\" else \"No\"", " \
    \       val s = lst.mkString\n        var count = 0\n        for (c <- s) {\n\
    \            if (c == '(') count += 1\n            else count -= 1\n         \
    \   if (count < 0) return \"No\"\n        }\n        if (count == 0) \"Yes\" else\
    \ \"No\"", "        var s = lst(0) + lst(1)\n        var stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (stack.isEmpty) return \"No\"\n            else stack.pop\n        }\n\
    \        if (stack.isEmpty) \"Yes\" else \"No\""]
stop_tokens:
- "\n    }\n"
