name: HumanEval_109_move_one_ball
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n   \
  \ // numbers in the list will be randomly ordered. Your task is to determine if\n\
  \    // it is possible to get a list sorted in non-decreasing order by performing\
  \ \n    // the following operation on the given list:\n    // You are allowed to\
  \ perform right shift operation any number of times.\n    // One right shift operation\
  \ means shifting all elements of the list by one\n    // position in the right direction.\
  \ The last element of the list will be moved to\n    // the starting position in\
  \ the list i.e. 0th index. \n    // If it is possible to obtain the sorted list\
  \ by performing the above operation\n    // then return true else return false.\n\
  \    // If the given list is empty then return true.\n    // Note: The given list\
  \ is guaranteed to have unique elements.\n    // For Example:\n    // >>> moveOneBall((List[Long](3l.toLong,\
  \ 4l.toLong, 5l.toLong, 1l.toLong, 2l.toLong)))\n    // (true)\n    // Explanation:\
  \ By performin 2 right shift operations, non-decreasing order can\n    // be achieved\
  \ for the given list.\n    // >>> moveOneBall((List[Long](3l.toLong, 5l.toLong,\
  \ 4l.toLong, 1l.toLong, 2l.toLong)))\n    // (false)\n    // Explanation:It is not\
  \ possible to get non-decreasing order for the given\n    // list by performing\
  \ any number of right shift operations.\n    def moveOneBall(arr : List[Long]) :\
  \ Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(moveOneBall((List[Long](3l.toLong,\
  \ 4l.toLong, 5l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(moveOneBall((List[Long](3l.toLong,\
  \ 5l.toLong, 10l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(moveOneBall((List[Long](4l.toLong,\
  \ 3l.toLong, 1l.toLong, 2l.toLong))) == (false));\n    assert(moveOneBall((List[Long](3l.toLong,\
  \ 5l.toLong, 4l.toLong, 1l.toLong, 2l.toLong))) == (false));\n    assert(moveOneBall((List[Long]()))\
  \ == (true));\n    }\n\n}\n"
completions: ["        // Your code goes here\n        return true", "        if (arr.isEmpty)\
    \ return true\n        val sorted = arr.sorted\n        val min = sorted.head\n\
    \        val max = sorted.last\n        val minIndex = arr.indexOf(min)\n    \
    \    val maxIndex = arr.indexOf(max)\n        if (minIndex == 0) return true\n\
    \        if (maxIndex == arr.length - 1) return true\n        if (minIndex ==\
    \ arr.length - 1) return false\n        if (maxIndex == 0) return false\n    \
    \    return true", "        if (arr.length == 0) return true\n        val min\
    \ = arr.min\n        val minIndex = arr.indexOf(min)\n        val max = arr.max\n\
    \        val maxIndex = arr.indexOf(max)\n        if (minIndex == maxIndex) return\
    \ true\n        if (minIndex < maxIndex) {\n            val sub = arr.slice(minIndex,\
    \ maxIndex + 1)\n            val subSorted = sub.sorted\n            if (sub ==\
    \ subSorted) return true\n            else return false\n        }\n        else\
    \ {\n            val sub = arr.slice(maxIndex, minIndex + 1)\n            val\
    \ subSorted = sub.sorted\n            if (sub == subSorted) return true\n    \
    \        else return false\n        }", "        if (arr.length == 0) return true\n\
    \        var min = arr(0)\n        var minIndex = 0\n        for (i <- 1 until\
    \ arr.length) {\n            if (arr(i) < min) {\n                min = arr(i)\n\
    \                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == 0) return true\n        var max = arr(minIndex)\n        for (i <- 0 until\
    \ minIndex) {\n            if (arr(i) > max) return false\n        }\n       \
    \ return true", "        if (arr.isEmpty) return true\n        val sorted = arr.sorted\n\
    \        val map = HashMap[Long, Long]()\n        for (i <- 0 until arr.length)\
    \ {\n            map(arr(i)) = sorted(i)\n        }\n        val visited = HashSet[Long]()\n\
    \        def dfs(x : Long) : Boolean = {\n            if (visited.contains(x))\
    \ return false\n            visited += x\n            if (map(x) == x) return\
    \ true\n            dfs(map(x))\n        }\n        for (i <- 0 until arr.length)\
    \ {\n            if (!dfs(arr(i))) return false\n        }\n        true", " \
    \       if (arr.length == 0) return true\n        val sorted = arr.sorted\n  \
    \      val min = sorted.head\n        val max = sorted.last\n        val minIndex\
    \ = arr.indexOf(min)\n        val maxIndex = arr.indexOf(max)\n        if (minIndex\
    \ == 0 && maxIndex == arr.length - 1) return true\n        if (minIndex == 0 &&\
    \ maxIndex == arr.length - 2) return true\n        if (minIndex == 1 && maxIndex\
    \ == arr.length - 1) return true\n        return false", "        if (arr.length\
    \ == 0) return true\n        val sorted = arr.sorted\n        val min = sorted.head\n\
    \        val max = sorted.last\n        val minIndex = arr.indexOf(min)\n    \
    \    val maxIndex = arr.indexOf(max)\n        if (minIndex == 0) {\n         \
    \   if (maxIndex == arr.length - 1) return true\n            else return false\n\
    \        }\n        else if (maxIndex == arr.length - 1) return false\n      \
    \  else {\n            val minIndex2 = arr.indexOf(min, minIndex + 1)\n      \
    \      val maxIndex2 = arr.indexOf(max, maxIndex + 1)\n            if (minIndex2\
    \ == -1 && maxIndex2 == -1) return true\n            else if (minIndex2 == -1)\
    \ return false\n            else if (maxIndex2 == -1) return false\n         \
    \   else {\n                val minIndex3 = arr.indexOf(min, minIndex2 + 1)\n\
    \                val maxIndex3 = arr.indexOf(max, maxIndex2 + 1)\n           \
    \     if (minIndex3 == -1 && maxIndex3 == -1) return true\n                else\
    \ if (minIndex3 == -1) return false\n                else if (maxIndex3 == -1)\
    \ return false\n                else return false\n            }\n        }",
  "        if (arr.length == 0) return true\n        var min = arr(0)\n        for\
    \ (i <- 1 until arr.length) {\n            if (arr(i) < min) return false\n  \
    \          min = min min arr(i)\n        }\n        return true", "        if\
    \ (arr.length == 0) return true\n        var min = arr(0)\n        var max = arr(0)\n\
    \        for (i <- 1 until arr.length) {\n            min = min min arr(i)\n \
    \           max = max max arr(i)\n        }\n        if (min == 1 && max == arr.length)\
    \ return true\n        else return false", "        if (arr.length == 0) return\
    \ true\n        val sorted = arr.sorted\n        var i = 0\n        while (i <\
    \ arr.length) {\n            if (arr(i) != sorted(i)) return false\n         \
    \   i += 1\n        }\n        return true", "        if (arr.length == 0) return\
    \ true\n        val sorted = arr.sorted\n        val map = new HashMap[Long, Int]\n\
    \        for (i <- 0 until arr.length) {\n            map(arr(i)) = i\n      \
    \  }\n        for (i <- 0 until arr.length) {\n            if (arr(i) != sorted(i))\
    \ {\n                val index = map(sorted(i))\n                if (index !=\
    \ 0 && arr(index - 1) == sorted(i - 1)) {\n                    val temp = arr(index)\n\
    \                    arr(index) = arr(index - 1)\n                    arr(index\
    \ - 1) = temp\n                    map(arr(index)) = index\n                 \
    \   map(arr(index - 1)) = index - 1\n                } else {\n              \
    \      return false\n                }\n            }\n        }\n        true",
  "        val n = arr.length\n        if (n == 0) return true\n        val sorted\
    \ = arr.sorted\n        var i = 0\n        while (i < n) {\n            if (arr(i)\
    \ != sorted(i)) {\n                val j = arr.indexOf(sorted(i))\n          \
    \      if (j == n - 1) return false\n                val k = arr.indexOf(sorted(j))\n\
    \                if (k == n - 1) return false\n                if (arr(k) != sorted(i))\
    \ return false\n                i = k\n            }\n            i += 1\n   \
    \     }\n        true", "        if (arr.length == 0) return true\n        val\
    \ sorted = arr.sorted\n        val min = sorted.head\n        val max = sorted.last\n\
    \        var count = 0\n        for (i <- 0 until arr.length) {\n            if\
    \ (arr(i) == min) {\n                count += 1\n            }\n        }\n  \
    \      if (count == 1) return true\n        if (count == arr.length) return false\n\
    \        return true", "        val n = arr.length\n        if (n == 0) return\
    \ true\n        var min = arr(0)\n        var max = arr(0)\n        var minIndex\
    \ = 0\n        var maxIndex = 0\n        for (i <- 1 until n) {\n            if\
    \ (arr(i) < min) {\n                min = arr(i)\n                minIndex = i\n\
    \            }\n            if (arr(i) > max) {\n                max = arr(i)\n\
    \                maxIndex = i\n            }\n        }\n        if (minIndex\
    \ == 0 && maxIndex == n - 1) return true\n        if (maxIndex == 0 && minIndex\
    \ == n - 1) return true\n        if (maxIndex == 0 && minIndex == n - 2) return\
    \ true\n        if (maxIndex == 1 && minIndex == n - 1) return true\n        return\
    \ false", "        if (arr.length == 0) return true\n        var min = arr(0)\n\
    \        var max = arr(0)\n        for (i <- 1 until arr.length) {\n         \
    \   if (arr(i) < min) min = arr(i)\n            if (arr(i) > max) max = arr(i)\n\
    \        }\n        if (max - min == arr.length - 1) return true\n        else\
    \ return false", "        if (arr.length == 0) return true\n        var min =\
    \ arr(0)\n        for (i <- 1 until arr.length) {\n            if (arr(i) < min)\
    \ return false\n            min = min min arr(i)\n        }\n        return true",
  "        val n = arr.length\n        if (n == 0) return true\n        val m = arr.max\n\
    \        val a = arr.filter(x => x != m)\n        val b = arr.filter(x => x ==\
    \ m)\n        val c = a.sorted\n        if (a.length == 0) return true\n     \
    \   if (a.length == 1) return true\n        if (a.length == 2) return true\n \
    \       if (c.head == a.head && c.last == a.last) return true\n        return\
    \ false", "        val n = arr.length\n        if (n == 0) return true\n     \
    \   val arr2 = arr.toArray\n        val arr3 = arr.toArray\n        for (i <-\
    \ 0 until n) {\n            arr2(i) = arr(i)\n            arr3(i) = arr(i)\n \
    \       }\n        scala.util.Sorting.quickSort(arr2)\n        val dp = Array.ofDim[Boolean](n,\
    \ n)\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n   \
    \             if (arr2(i) == arr3(j)) {\n                    dp(i)(j) = true\n\
    \                    if (i == 0) dp(i)(j) = true\n                    else if\
    \ (j == 0) dp(i)(j) = dp(i - 1)(n - 1)\n                    else dp(i)(j) = dp(i\
    \ - 1)(j - 1)\n                }\n            }\n        }\n        for (i <-\
    \ 0 until n) {\n            if (dp(n - 1)(i)) return true\n        }\n       \
    \ return false", "        if (arr.length == 0) return true\n        val min =\
    \ arr.min\n        val minIndex = arr.indexOf(min)\n        val max = arr.max\n\
    \        val maxIndex = arr.indexOf(max)\n        if (minIndex == maxIndex) return\
    \ true\n        if (minIndex > maxIndex) return false\n        val sorted = arr.sorted\n\
    \        val sortedIndex = arr.indexOf(sorted(0))\n        if (sortedIndex ==\
    \ minIndex) return true\n        if (sortedIndex == maxIndex) return false\n \
    \       val sortedIndex2 = arr.indexOf(sorted(1))\n        if (sortedIndex2 ==\
    \ minIndex) return true\n        if (sortedIndex2 == maxIndex) return false\n\
    \        return false", "        val n = arr.length\n        if (n == 0) return\
    \ true\n        val sorted = arr.sorted\n        val diff = new Array[Int](n)\n\
    \        for (i <- 0 until n) {\n            diff(i) = (arr(i) - sorted(i) + n)\
    \ % n\n        }\n        for (i <- 0 until n) {\n            for (j <- i + 1\
    \ until n) {\n                if (diff(i) == diff(j)) return true\n          \
    \  }\n        }\n        return false", "        if (arr.length == 0) return true\n\
    \        val sorted = arr.sorted\n        val min = sorted.head\n        val max\
    \ = sorted.last\n        val minIndex = arr.indexOf(min)\n        val maxIndex\
    \ = arr.indexOf(max)\n        if (minIndex == 0) return true\n        if (maxIndex\
    \ == arr.length - 1) return true\n        if (minIndex == maxIndex) return true\n\
    \        if (minIndex < maxIndex) return false\n        if (maxIndex == 0) return\
    \ true\n        if (minIndex == arr.length - 1) return true\n        if (minIndex\
    \ - maxIndex == 1) return true\n        return false", "        if (arr.length\
    \ == 0) return true\n        var min = arr(0)\n        var max = arr(0)\n    \
    \    for (i <- 1 until arr.length) {\n            if (arr(i) < min) min = arr(i)\n\
    \            if (arr(i) > max) max = arr(i)\n        }\n        if (max - min\
    \ == arr.length - 1) return true\n        return false", "        val n = arr.length\n\
    \        if (n == 0) return true\n        val a = arr.toArray\n        val b =\
    \ new Array[Long](n)\n        for (i <- 0 until n) b(i) = a(i)\n        scala.util.Sorting.quickSort(b)\n\
    \        for (i <- 0 until n) {\n            if (a(i) != b(i)) {\n           \
    \     var j = i\n                while (j < n && a(j) != b(i)) j += 1\n      \
    \          if (j == n) return false\n                var k = j\n             \
    \   while (k > i) {\n                    val t = a(k)\n                    a(k)\
    \ = a(k - 1)\n                    a(k - 1) = t\n                    k -= 1\n \
    \               }\n            }\n        }\n        true", "        if (arr.isEmpty)\
    \ return true\n        val arr2 = arr.sorted\n        val arr3 = arr.reverse.sorted\n\
    \        var i = 0\n        while (i < arr.length) {\n            if (arr(i) !=\
    \ arr2(i) && arr(i) != arr3(i)) return false\n            i += 1\n        }\n\
    \        return true", "        if (arr.length == 0) return true\n        val\
    \ sorted = arr.sorted\n        val min = sorted.head\n        val max = sorted.last\n\
    \        val minIndex = arr.indexOf(min)\n        val maxIndex = arr.indexOf(max)\n\
    \        if (minIndex == 0) {\n            if (maxIndex == arr.length - 1) return\
    \ true\n            else return false\n        }\n        else if (maxIndex ==\
    \ arr.length - 1) return false\n        else return true", "        if (arr.length\
    \ == 0) return true\n        val sorted = arr.sorted\n        var count = 0\n\
    \        for (i <- 0 until arr.length) {\n            if (arr(i) != sorted(i))\
    \ count += 1\n        }\n        if (count == 1) return true\n        else return\
    \ false", "        if (arr.length == 0) return true\n        val sorted = arr.sorted\n\
    \        val min = sorted.head\n        val max = sorted.last\n        val minIndex\
    \ = arr.indexOf(min)\n        val maxIndex = arr.indexOf(max)\n        if (minIndex\
    \ == 0) return true\n        if (maxIndex == arr.length - 1) return true\n   \
    \     if (minIndex == maxIndex) return true\n        if (maxIndex - minIndex ==\
    \ 1) return true\n        return false", "        if (arr.length == 0) return\
    \ true\n        var max = arr(0)\n        var min = arr(0)\n        for (i <-\
    \ 1 until arr.length) {\n            if (arr(i) > max) max = arr(i)\n        \
    \    if (arr(i) < min) min = arr(i)\n        }\n        if (max - min + 1 == arr.length)\
    \ return true\n        return false", "        if (arr.length == 0) return true\n\
    \        var min = arr(0)\n        var max = arr(0)\n        for (i <- 1 until\
    \ arr.length) {\n            if (arr(i) < min) min = arr(i)\n            if (arr(i)\
    \ > max) max = arr(i)\n        }\n        if (max - min + 1 == arr.length) return\
    \ true\n        else return false", "        // Fill up this function body\n \
    \       // 'arr' is a list of integers\n        // 'true' if it is possible to\
    \ get a list sorted in non-decreasing order\n        // 'false' otherwise\n  \
    \      // You can use the 'readLine()' function to read input from the standard\
    \ input\n        // and 'print()' function to write to the standard output\n \
    \       // Example:\n        // val x = readLine()\n        // print(x)\n    \
    \    // Write your code here\n        val n = arr.length\n        if (n == 0)\
    \ return true\n        val a = arr.toArray\n        val b = Array.fill(n)(0)\n\
    \        for (i <- 0 until n) {\n            b(i) = a(i)\n        }\n        scala.util.Sorting.quickSort(b)\n\
    \        for (i <- 0 until n) {\n            if (a(i) != b(i)) return false\n\
    \        }\n        return true", "        if (arr.length == 0) return true\n\
    \        val sorted = arr.sorted\n        var i = 0\n        while (i < arr.length\
    \ && arr(i) == sorted(i)) i += 1\n        if (i == arr.length) return true\n \
    \       var j = i + 1\n        while (j < arr.length && arr(j) == sorted(j)) j\
    \ += 1\n        if (j == arr.length) return true\n        if (arr(j) == sorted(i))\
    \ return true\n        return false", "        if (arr.length == 0) return true\n\
    \        val sorted = arr.sorted\n        val min = sorted.head\n        val max\
    \ = sorted.last\n        val minIndex = arr.indexOf(min)\n        val maxIndex\
    \ = arr.indexOf(max)\n        if (minIndex == 0) return true\n        if (maxIndex\
    \ == arr.length - 1) return true\n        if (minIndex > maxIndex) return true\n\
    \        return false", "        if (arr.length == 0) return true\n        var\
    \ min = arr(0)\n        var max = arr(0)\n        for (i <- 1 until arr.length)\
    \ {\n            if (arr(i) < min) min = arr(i)\n            if (arr(i) > max)\
    \ max = arr(i)\n        }\n        if (max - min + 1 == arr.length) return true\n\
    \        return false", "        if (arr.length == 0) return true\n        val\
    \ sorted = arr.sorted\n        val min = sorted.head\n        val max = sorted.last\n\
    \        val minIndex = arr.indexOf(min)\n        val maxIndex = arr.indexOf(max)\n\
    \        val minDistance = minIndex\n        val maxDistance = arr.length - maxIndex\
    \ - 1\n        if (minDistance == maxDistance) return true\n        if (minDistance\
    \ > maxDistance) return false\n        val minDistance2 = arr.length - minIndex\
    \ - 1\n        val maxDistance2 = maxIndex\n        if (minDistance2 == maxDistance2)\
    \ return true\n        if (minDistance2 > maxDistance2) return false\n       \
    \ return false", "        if (arr.length == 0) return true\n        var min =\
    \ arr(0)\n        var max = arr(0)\n        for (i <- 1 until arr.length) {\n\
    \            if (arr(i) < min) min = arr(i)\n            if (arr(i) > max) max\
    \ = arr(i)\n        }\n        if (max - min + 1 == arr.length) return true\n\
    \        return false", "        if (arr.length == 0) return true\n        var\
    \ min = arr(0)\n        for (i <- 1 until arr.length) {\n            if (arr(i)\
    \ < min) return false\n            min = min min arr(i)\n        }\n        return\
    \ true", "        if (arr.length == 0) return true\n        var min = arr(0)\n\
    \        for (i <- 1 until arr.length) {\n            if (arr(i) < min) return\
    \ false\n            min = min min arr(i)\n        }\n        return true", " \
    \       if (arr.length == 0) return true\n        var min = arr(0)\n        var\
    \ max = arr(0)\n        for (i <- 1 until arr.length) {\n            if (arr(i)\
    \ < min) min = arr(i)\n            if (arr(i) > max) max = arr(i)\n        }\n\
    \        if (min == max) return true\n        var count = 0\n        for (i <-\
    \ 0 until arr.length) {\n            if (arr(i) == min) count += 1\n        }\n\
    \        if (count > 1) return false\n        return true", "        if (arr.length\
    \ == 0) return true\n        val sorted = arr.sorted\n        val min = arr.min\n\
    \        val max = arr.max\n        val minIndex = arr.indexOf(min)\n        val\
    \ maxIndex = arr.indexOf(max)\n        val sortedIndex = arr.indexOf(sorted(0))\n\
    \        val sortedLastIndex = arr.indexOf(sorted(sorted.length - 1))\n      \
    \  if (minIndex == sortedIndex && maxIndex == sortedLastIndex) return true\n \
    \       if (minIndex == sortedLastIndex && maxIndex == sortedIndex) return true\n\
    \        return false", "        if (arr.length == 0) return true\n        val\
    \ sorted = arr.sorted\n        val min = sorted.head\n        val max = sorted.last\n\
    \        val minIndex = arr.indexOf(min)\n        val maxIndex = arr.indexOf(max)\n\
    \        val minDistance = minIndex - 0\n        val maxDistance = arr.length\
    \ - 1 - maxIndex\n        if (minDistance == maxDistance) return true\n      \
    \  else return false", "        if (arr.length == 0) return true\n        var\
    \ min = arr(0)\n        var max = arr(0)\n        for (i <- 1 until arr.length)\
    \ {\n            if (arr(i) < min) min = arr(i)\n            if (arr(i) > max)\
    \ max = arr(i)\n        }\n        if (min == max) return true\n        var minIndex\
    \ = 0\n        var maxIndex = 0\n        for (i <- 0 until arr.length) {\n   \
    \         if (arr(i) == min) minIndex = i\n            if (arr(i) == max) maxIndex\
    \ = i\n        }\n        if (minIndex == maxIndex) return true\n        if (minIndex\
    \ > maxIndex) return false\n        var count = 0\n        for (i <- minIndex\
    \ until maxIndex) {\n            if (arr(i) > arr(i + 1)) count += 1\n       \
    \ }\n        if (count > 1) return false\n        return true", "        if (arr.length\
    \ == 0) return true\n        var max = arr(0)\n        var min = arr(0)\n    \
    \    for (i <- 1 until arr.length) {\n            if (arr(i) > max) max = arr(i)\n\
    \            if (arr(i) < min) min = arr(i)\n        }\n        if (max - min\
    \ == arr.length - 1) return true\n        return false", "        // Your Code\
    \ Here\n        return true", "        if (arr.isEmpty) return true\n        val\
    \ n = arr.length\n        val sorted = arr.sorted\n        val min = sorted.head\n\
    \        val max = sorted.last\n        val minIndex = arr.indexOf(min)\n    \
    \    val maxIndex = arr.indexOf(max)\n        if (minIndex == 0 && maxIndex ==\
    \ n - 1) return true\n        if (minIndex == 0 && maxIndex == n - 2) return true\n\
    \        if (minIndex == 1 && maxIndex == n - 1) return true\n        return false",
  "        if (arr.length == 0) return true\n        var min = arr(0)\n        var\
    \ max = arr(0)\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ < min) min = arr(i)\n            if (arr(i) > max) max = arr(i)\n        }\n\
    \        if (max - min == arr.length - 1) return true\n        return false",
  "        if (arr.length == 0) return true\n        val sorted = arr.sorted\n   \
    \     var index = 0\n        while (index < arr.length) {\n            if (arr(index)\
    \ != sorted(index)) {\n                val temp = arr(index)\n               \
    \ arr(index) = arr(index + 1)\n                arr(index + 1) = temp\n       \
    \         if (arr.sorted == sorted) return true\n                else {\n    \
    \                arr(index + 1) = arr(index)\n                    arr(index) =\
    \ temp\n                }\n            }\n            index += 1\n        }\n\
    \        return false", "        var sorted = arr.sorted\n        var count =\
    \ 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) != sorted(i))\
    \ count += 1\n        }\n        if (count > 2) return false\n        return true",
  "        if (arr.length == 0) return true\n        var min = arr(0)\n        var\
    \ max = arr(0)\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ < min) min = arr(i)\n            if (arr(i) > max) max = arr(i)\n        }\n\
    \        if (max - min + 1 == arr.length) return true\n        return false",
  "        // Your code goes here\n        return true", "        if (arr.length ==\
    \ 0) return true\n        val sorted = arr.sorted\n        val min = sorted.head\n\
    \        val max = sorted.last\n        val minIndex = arr.indexOf(min)\n    \
    \    val maxIndex = arr.indexOf(max)\n        val diff = maxIndex - minIndex\n\
    \        if (diff == arr.length - 1) return true\n        if (diff == 0) return\
    \ false\n        val sorted2 = arr.slice(minIndex, maxIndex + 1).sorted\n    \
    \    for (i <- 0 until sorted2.length) {\n            if (sorted2(i) != sorted(i))\
    \ return false\n        }\n        true", "        if (arr.length == 0) return\
    \ true\n        val sorted = arr.sorted\n        val min = sorted.head\n     \
    \   val max = sorted.last\n        val minIndex = arr.indexOf(min)\n        val\
    \ maxIndex = arr.indexOf(max)\n        if (maxIndex == 0) return true\n      \
    \  if (minIndex == arr.length - 1) return true\n        if (minIndex == 0 && maxIndex\
    \ == arr.length - 1) return true\n        return false", "        // Fill up this\
    \ function body\n        // 'arr' is the given list\n        // You have to return\
    \ true if it is possible to get a list sorted in\n        // non-decreasing order\
    \ by performing the above operation else return false.\n        // If the given\
    \ list is empty then return true.\n        // Note: The given list is guaranteed\
    \ to have unique elements.\n        if (arr.isEmpty) true\n        else {\n  \
    \          val sorted = arr.sorted\n            val min = sorted.head\n      \
    \      val max = sorted.last\n            val minIndex = arr.indexOf(min)\n  \
    \          val maxIndex = arr.indexOf(max)\n            val diff = maxIndex -\
    \ minIndex\n            if (diff == arr.length - 1) true\n            else false\n\
    \        }", "        val n = arr.length\n        if (n == 0) return true\n  \
    \      val sorted = arr.sorted\n        val diff = new Array[Int](n)\n       \
    \ for (i <- 0 until n) diff(i) = (arr(i) - sorted(i)).toInt\n        val max =\
    \ diff.max\n        val min = diff.min\n        if (max - min > 1) return false\n\
    \        if (max == min) return true\n        val maxIndex = diff.indexOf(max)\n\
    \        val minIndex = diff.indexOf(min)\n        if (maxIndex == 0) return true\n\
    \        if (minIndex == n - 1) return true\n        if (maxIndex == n - 1) return\
    \ false\n        if (minIndex == 0) return false\n        if (diff(maxIndex -\
    \ 1) == min) return true\n        if (diff(minIndex + 1) == max) return true\n\
    \        return false", "        val n = arr.length\n        if (n == 0) return\
    \ true\n        val sorted = arr.sorted\n        val dp = Array.fill(n)(0)\n \
    \       for (i <- 0 until n) {\n            var min = Int.MaxValue\n         \
    \   for (j <- 0 until n) {\n                if (arr(i) == sorted(j)) {\n     \
    \               min = min min (dp(j) + abs(i - j))\n                }\n      \
    \      }\n            dp(i) = min\n        }\n        dp(n - 1) <= 2", "     \
    \   val n = arr.length\n        if (n == 0) return true\n        val arr2 = arr.toArray\n\
    \        val arr3 = arr.toArray\n        var i = 0\n        while (i < n) {\n\
    \            arr2(i) = arr(i)\n            arr3(i) = arr(i)\n            i +=\
    \ 1\n        }\n        scala.util.Sorting.quickSort(arr2)\n        var j = 0\n\
    \        while (j < n) {\n            var i = 0\n            while (i < n) {\n\
    \                if (arr2(i) != arr3(i)) {\n                    val temp = arr3(i)\n\
    \                    arr3(i) = arr3(i + 1)\n                    arr3(i + 1) =\
    \ temp\n                    i += 1\n                }\n                i += 1\n\
    \            }\n            j += 1\n        }\n        var k = 0\n        while\
    \ (k < n) {\n            if (arr2(k) != arr3(k)) return false\n            k +=\
    \ 1\n        }\n        return true", "        val n = arr.length\n        if\
    \ (n == 0) return true\n        val sorted = arr.sorted\n        val map = new\
    \ HashMap[Long, Int]\n        for (i <- 0 until n) {\n            map(arr(i))\
    \ = i\n        }\n        for (i <- 0 until n) {\n            if (arr(i) != sorted(i))\
    \ {\n                val j = map(sorted(i))\n                if (j - i > 1) return\
    \ false\n            }\n        }\n        return true", "        var min = Long.MaxValue\n\
    \        var max = Long.MinValue\n        var minIndex = -1\n        var maxIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) < min)\
    \ {\n                min = arr(i)\n                minIndex = i\n            }\n\
    \            if (arr(i) > max) {\n                max = arr(i)\n             \
    \   maxIndex = i\n            }\n        }\n        if (minIndex == maxIndex)\
    \ return true\n        if (minIndex < maxIndex) return false\n        if (minIndex\
    \ - maxIndex == 1) return true\n        if (minIndex - maxIndex == arr.length\
    \ - 1) return true\n        return false", "        // We will use a queue to\
    \ store the elements of the list.\n        // We will also use a stack to store\
    \ the elements of the list.\n        // We will use a hashmap to store the elements\
    \ of the list.\n        // We will use a hashset to store the elements of the\
    \ list.\n        // We will use a list to store the elements of the list.\n  \
    \      // We will use a linked list to store the elements of the list.\n     \
    \   // We will use a priority queue to store the elements of the list.\n     \
    \   // We will use a tree set to store the elements of the list.\n        // We\
    \ will use a tree map to store the elements of the list.\n        // We will use\
    \ a vector to store the elements of the list.\n        // We will use a bit set\
    \ to store the elements of the list.\n        // We will use a hash table to store\
    \ the elements of the list.\n        // We will use a hash list to store the elements\
    \ of the list.\n        // We will use a hash vector to store the elements of\
    \ the list.\n        // We will use a hash priority queue to store the elements\
    \ of the list.\n        // We will use a hash tree set to store the elements of\
    \ the list.\n        // We will use a hash tree map to store the elements of the\
    \ list.\n        // We will use a hash bit set to store the elements of the list.\n\
    \        // We will use a hash array list to store the elements of the list.\n\
    \        // We will use a hash array vector to store the elements of the list.\n\
    \        // We will use a hash array priority queue to store the elements of the\
    \ list.\n        // We will use a hash array tree set to store the elements of\
    \ the list.\n        // We will use a hash array tree map to store the elements\
    \ of the list.\n        // We will use a hash array bit set to store the elements\
    \ of the list.\n        // We will use a hash array to store the elements of the\
    \ list.\n        // We will use a hash list array to store the elements of the\
    \ list.\n        // We will use a hash vector array to store the elements of the\
    \ list.\n        // We will use a hash priority queue array to store the elements\
    \ of the list.\n        // We will use a hash tree set array to store the elements\
    \ of the list.\n       ", "        if (arr.isEmpty) return true\n        val n\
    \ = arr.length\n        val dp = Array.fill(n)(0)\n        for (i <- 0 until n)\
    \ {\n            val x = arr(i)\n            var j = i - 1\n            while\
    \ (j >= 0 && arr(j) > x) {\n                j -= 1\n            }\n          \
    \  dp(i) = i - j\n        }\n        val max = dp.max\n        max <= n - max",
  "        val n = arr.length\n        if (n == 0) return true\n        val a = arr.toArray\n\
    \        val b = new Array[Long](n)\n        for (i <- 0 until n) b(i) = a(i)\n\
    \        scala.util.Sorting.quickSort(b)\n        val c = new Array[Long](n)\n\
    \        for (i <- 0 until n) c(i) = a(i)\n        scala.util.Sorting.quickSort(c)\n\
    \        val d = new Array[Long](n)\n        for (i <- 0 until n) d(i) = a(i)\n\
    \        scala.util.Sorting.quickSort(d)\n        for (i <- 0 until n) {\n   \
    \         val t = a(i)\n            a(i) = a(n - 1)\n            a(n - 1) = t\n\
    \            if (a.sameElements(b)) return true\n            if (a.sameElements(c))\
    \ return true\n            if (a.sameElements(d)) return true\n        }\n   \
    \     false", "        // Your code here\n        return true", "        val n\
    \ = arr.length\n        if (n == 0) return true\n        val arr2 = arr.toArray\n\
    \        val arr3 = arr.toArray\n        for (i <- 0 until n) {\n            arr2(i)\
    \ = arr(n - i - 1)\n        }\n        for (i <- 0 until n) {\n            arr3(i)\
    \ = arr2(n - i - 1)\n        }\n        val arr4 = arr.toArray\n        for (i\
    \ <- 0 until n) {\n            arr4(i) = arr3(n - i - 1)\n        }\n        val\
    \ arr5 = arr.toArray\n        for (i <- 0 until n) {\n            arr5(i) = arr4(n\
    \ - i - 1)\n        }\n        val arr6 = arr.toArray\n        for (i <- 0 until\
    \ n) {\n            arr6(i) = arr5(n - i - 1)\n        }\n        val arr7 = arr.toArray\n\
    \        for (i <- 0 until n) {\n            arr7(i) = arr6(n - i - 1)\n     \
    \   }\n        val arr8 = arr.toArray\n        for (i <- 0 until n) {\n      \
    \      arr8(i) = arr7(n - i - 1)\n        }\n        val arr9 = arr.toArray\n\
    \        for (i <- 0 until n) {\n            arr9(i) = arr8(n - i - 1)\n     \
    \   }\n        val arr10 = arr.toArray\n        for (i <- 0 until n) {\n     \
    \       arr10(i) = arr9(n - i - 1)\n        }\n        val arr11 = arr.toArray\n\
    \        for (i <- 0 until n) {\n            arr11(i) = arr10(n - i - 1)\n   \
    \     }\n        val arr12 = arr.toArray\n        for (i <- 0 until n) {\n   \
    \         arr12(i) = arr11(n - i - 1)\n        }\n        val arr13 = arr.toArray\n\
    \        for (i <- 0 until n) {\n            arr13(i) = arr12(n - i - 1)\n   \
    \     }\n        val", "        if (arr.length == 0) return true\n        var\
    \ min = arr(0)\n        var max = arr(0)\n        for (i <- 1 until arr.length)\
    \ {\n            if (arr(i) < min) min = arr(i)\n            if (arr(i) > max)\
    \ max = arr(i)\n        }\n        if (max - min + 1 == arr.length) return true\n\
    \        return false", "        if (arr.length == 0) true\n        else {\n \
    \           val sorted = arr.sorted\n            val min = sorted.head\n     \
    \       val max = sorted.last\n            val minIndex = arr.indexOf(min)\n \
    \           val maxIndex = arr.indexOf(max)\n            if (minIndex == 0 &&\
    \ maxIndex == arr.length - 1) true\n            else if (minIndex == 0 && maxIndex\
    \ == arr.length - 2) true\n            else if (minIndex == 1 && maxIndex == arr.length\
    \ - 1) true\n            else false\n        }", "        if (arr.length == 0)\
    \ return true\n        val sorted = arr.sorted\n        var count = 0\n      \
    \  for (i <- 0 until arr.length) {\n            if (arr(i) != sorted(i)) count\
    \ += 1\n        }\n        if (count == 1) return true\n        else return false",
  "        // Fill up this function body\n        // 'arr' is a list of integers\n\
    \        // You have to return a boolean value\n        // If it is possible to\
    \ get a list sorted in non-decreasing order by performing\n        // the following\
    \ operation on the given list then return true else return false.\n        //\
    \ You are allowed to perform right shift operation any number of times.\n    \
    \    // One right shift operation means shifting all elements of the list by one\n\
    \        // position in the right direction. The last element of the list will\
    \ be moved to\n        // the starting position in the list i.e. 0th index. \n\
    \        // If the given list is empty then return true.\n        // Note: The\
    \ given list is guaranteed to have unique elements.\n        // For Example:\n\
    \        // >>> moveOneBall((List[Long](3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong,\
    \ 2l.toLong)))\n        // (true)\n        // Explanation: By performin 2 right\
    \ shift operations, non-decreasing order can\n        // be achieved for the given\
    \ list.\n        // >>> moveOneBall((List[Long](3l.toLong, 5l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong)))\n        // (false)\n        // Explanation:It is not\
    \ possible to get non-decreasing order for the given\n        // list by performing\
    \ any number of right shift operations.\n        if (arr.length == 0) {\n    \
    \        return true\n        }\n        var min = arr(0)\n        var max = arr(0)\n\
    \        for (i <- 0 until arr.length) {\n            if (arr(i) < min) {\n  \
    \              min = arr(i)\n            }\n            if (arr(i) > max) {\n\
    \                max = arr(i)\n            }\n        }\n        if (min == max)\
    \ {\n            return true\n        }\n        var minIndex = 0\n        var\
    \ maxIndex = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ == min) {\n                minIndex = i\n            }\n            if (arr(i)\
    \ == max) {\n                maxIndex = i\n", "        // Your Code Here\n   \
    \     return true", "        val n = arr.length\n        if (n == 0) return true\n\
    \        val arr2 = arr.toArray\n        val arr3 = arr.toArray\n        val arr4\
    \ = arr.toArray\n        val arr5 = arr.toArray\n        val arr6 = arr.toArray\n\
    \        val arr7 = arr.toArray\n        val arr8 = arr.toArray\n        val arr9\
    \ = arr.toArray\n        val arr10 = arr.toArray\n        val arr11 = arr.toArray\n\
    \        val arr12 = arr.toArray\n        val arr13 = arr.toArray\n        val\
    \ arr14 = arr.toArray\n        val arr15 = arr.toArray\n        val arr16 = arr.toArray\n\
    \        val arr17 = arr.toArray\n        val arr18 = arr.toArray\n        val\
    \ arr19 = arr.toArray\n        val arr20 = arr.toArray\n        val arr21 = arr.toArray\n\
    \        val arr22 = arr.toArray\n        val arr23 = arr.toArray\n        val\
    \ arr24 = arr.toArray\n        val arr25 = arr.toArray\n        val arr26 = arr.toArray\n\
    \        val arr27 = arr.toArray\n        val arr28 = arr.toArray\n        val\
    \ arr29 = arr.toArray\n        val arr30 = arr.toArray\n        val arr31 = arr.toArray\n\
    \        val arr32 = arr.toArray\n        val arr33 = arr.toArray\n        val\
    \ arr34 = arr.toArray\n        val arr35 = arr.toArray\n        val arr36 = arr.toArray\n\
    \        val arr37 = arr.toArray\n        val arr38 = arr.toArray\n        val\
    \ arr39 = arr.toArray\n        val arr40 = arr.toArray\n        val arr41 = arr.toArray\n\
    \        val arr42 = arr.toArray\n        val arr43 = arr.toArray\n        val\
    \ arr44 = arr.toArray\n        val arr45 = arr.toArray\n        val arr46 = arr.toArray\n\
    \        val arr47 = arr.toArray\n        val arr48 = arr.toArray\n        val\
    \ arr49 = arr.toArray\n        val arr50 = arr.toArray\n        val arr", "  \
    \      val n = arr.length\n        if (n == 0) return true\n        val a = arr.toArray\n\
    \        val b = new Array[Long](n)\n        for (i <- 0 until n) b(i) = a(i)\n\
    \        scala.util.Sorting.quickSort(b)\n        for (i <- 0 until n) {\n   \
    \         if (a(i) != b(i)) {\n                var j = i + 1\n               \
    \ while (j < n && a(j) != b(i)) j += 1\n                if (j == n) return false\n\
    \                val t = a(j)\n                for (k <- j - 1 to i by -1) a(k\
    \ + 1) = a(k)\n                a(i) = t\n            }\n        }\n        true",
  "        if (arr.length == 0) return true\n        val sorted = arr.sorted\n   \
    \     for (i <- 0 until arr.length) {\n            if (arr(i) != sorted(i)) return\
    \ false\n        }\n        return true", "        if (arr.length == 0) return\
    \ true\n        val sorted = arr.sorted\n        val min = sorted.head\n     \
    \   val max = sorted.last\n        val minIndex = arr.indexOf(min)\n        val\
    \ maxIndex = arr.indexOf(max)\n        if (minIndex == 0) {\n            if (maxIndex\
    \ == arr.length - 1) return true\n            else {\n                val next\
    \ = arr(maxIndex + 1)\n                if (next > max) return true\n         \
    \       else return false\n            }\n        }\n        else {\n        \
    \    val prev = arr(minIndex - 1)\n            if (prev < min) return true\n \
    \           else return false\n        }", "        val n = arr.length\n     \
    \   if (n == 0) return true\n        val max = arr.max\n        val min = arr.min\n\
    \        val minIndex = arr.indexOf(min)\n        val maxIndex = arr.indexOf(max)\n\
    \        if (maxIndex == n - 1) {\n            if (minIndex == 0) return true\n\
    \            else return false\n        }\n        else if (minIndex == 0) return\
    \ true\n        else return false", "        if (arr.length == 0) return true\n\
    \        val sorted = arr.sorted\n        val min = sorted.head\n        val max\
    \ = sorted.last\n        val minIndex = arr.indexOf(min)\n        val maxIndex\
    \ = arr.indexOf(max)\n        if (minIndex == 0) return true\n        if (maxIndex\
    \ == arr.length - 1) return true\n        if (minIndex > maxIndex) return true\n\
    \        return false", "        val n = arr.length\n        if (n == 0) return\
    \ true\n        val sorted = arr.sorted\n        val diff = (0 until n).map(i\
    \ => arr(i) - sorted(i)).toList\n        val max = diff.max\n        val min =\
    \ diff.min\n        if (max - min > 1) return false\n        if (max == min) return\
    \ true\n        val maxIndex = diff.indexOf(max)\n        val minIndex = diff.indexOf(min)\n\
    \        if (maxIndex == 0) return true\n        if (minIndex == n - 1) return\
    \ true\n        if (maxIndex == n - 1) return false\n        if (minIndex == 0)\
    \ return false\n        if (maxIndex - minIndex == 1) return true\n        if\
    \ (minIndex - maxIndex == 1) return true\n        return false", "        if (arr.length\
    \ == 0) return true\n        var min = arr(0)\n        for (i <- 1 until arr.length)\
    \ {\n            if (arr(i) < min) return false\n            min = min min arr(i)\n\
    \        }\n        return true", "        // Fill up this function body\n   \
    \     // 'arr' is a list of integers\n        // You have to return a boolean\
    \ value\n        // If it is possible to get a list sorted in non-decreasing order\
    \ by performing\n        // the above operation then return true else return false.\n\
    \        // If the given list is empty then return true.\n        if (arr.isEmpty)\
    \ return true\n        var min = arr.min\n        var minIndex = arr.indexOf(min)\n\
    \        var max = arr.max\n        var maxIndex = arr.indexOf(max)\n        var\
    \ arr2 = arr.toArray\n        var arr3 = arr.toArray\n        for (i <- 0 until\
    \ arr.length) {\n            if (arr2(i) == min) {\n                arr2(i) =\
    \ max\n            } else if (arr2(i) == max) {\n                arr2(i) = min\n\
    \            }\n        }\n        var arr2Sorted = arr2.sorted\n        var arr3Sorted\
    \ = arr3.sorted\n        if (arr2.deep == arr2Sorted.deep || arr3.deep == arr3Sorted.deep)\
    \ return true\n        return false", "        if (arr.isEmpty) return true\n\
    \        val arr2 = arr.sorted\n        for (i <- 0 until arr.length) {\n    \
    \        if (arr(i) != arr2(i)) return false\n        }\n        return true",
  "        if (arr.isEmpty) return true\n        val sorted = arr.sorted\n       \
    \ val min = sorted.head\n        val max = sorted.last\n        val minIndex =\
    \ arr.indexOf(min)\n        val maxIndex = arr.indexOf(max)\n        val diff\
    \ = maxIndex - minIndex\n        if (diff == arr.length - 1) return true\n   \
    \     if (diff == 0) return false\n        if (diff == 1) return true\n      \
    \  if (diff == arr.length - 2) return true\n        if (diff == 2) return false\n\
    \        if (diff == arr.length - 3) return true\n        if (diff == 3) return\
    \ false\n        if (diff == arr.length - 4) return true\n        if (diff ==\
    \ 4) return false\n        if (diff == arr.length - 5) return true\n        if\
    \ (diff == 5) return false\n        if (diff == arr.length - 6) return true\n\
    \        if (diff == 6) return false\n        if (diff == arr.length - 7) return\
    \ true\n        if (diff == 7) return false\n        if (diff == arr.length -\
    \ 8) return true\n        if (diff == 8) return false\n        if (diff == arr.length\
    \ - 9) return true\n        if (diff == 9) return false\n        if (diff == arr.length\
    \ - 10) return true\n        if (diff == 10) return false\n        if (diff ==\
    \ arr.length - 11) return true\n        if (diff == 11) return false\n       \
    \ if (diff == arr.length - 12) return true\n        if (diff == 12) return false\n\
    \        if (diff == arr.length - 13) return true\n        if (diff == 13) return\
    \ false\n        if (diff == arr.length - 14) return true\n        if (diff ==\
    \ 14) return false\n        if (diff == arr.length - 15) return true\n       \
    \ if (diff == 15) return false\n        if (diff == arr.length - 16) return true\n\
    \        if (diff == 16) return false\n        if (diff == arr.length - 17) return\
    \ true\n        if (diff == 17) return false\n        if (diff == arr.length -\
    \ 18) return true\n        if (diff == 18)", "        val n = arr.length\n   \
    \     if (n == 0) return true\n        val a = arr.toArray\n        var i = 0\n\
    \        while (i < n) {\n            if (a(i) != i + 1) {\n                val\
    \ j = a(i) - 1\n                if (a(j) == j + 1) {\n                    val\
    \ temp = a(i)\n                    a(i) = a(j)\n                    a(j) = temp\n\
    \                } else {\n                    return false\n                }\n\
    \            }\n            i += 1\n        }\n        return true", "       \
    \ // Your Code Here\n        return true", "        val n = arr.length\n     \
    \   if (n == 0) return true\n        val sorted = arr.sorted\n        for (i <-\
    \ 0 until n) {\n            val diff = sorted(i) - arr(i)\n            if (diff\
    \ < 0) return false\n            if (diff > 0) {\n                val newArr =\
    \ arr.slice(i, n) ++ arr.slice(0, i)\n                return moveOneBall(newArr)\n\
    \            }\n        }\n        return true", "        if (arr.length == 0)\
    \ return true\n        val sorted = arr.sorted\n        val min = sorted.head\n\
    \        val max = sorted.last\n        val minIndex = arr.indexOf(min)\n    \
    \    val maxIndex = arr.indexOf(max)\n        if (minIndex == 0) {\n         \
    \   if (maxIndex == arr.length - 1) return true\n            else return false\n\
    \        }\n        else if (maxIndex == arr.length - 1) return false\n      \
    \  else {\n            if (maxIndex - minIndex == 1) return true\n           \
    \ else return false\n        }", "        if (arr.isEmpty) return true\n     \
    \   var count = 0\n        for (i <- 0 until arr.length - 1) {\n            if\
    \ (arr(i) > arr(i + 1)) count += 1\n        }\n        if (count > 1) return false\n\
    \        return true", "        if (arr.length == 0) return true\n        var\
    \ min = arr(0)\n        var max = arr(0)\n        for (i <- 1 until arr.length)\
    \ {\n            min = min min arr(i)\n            max = max max arr(i)\n    \
    \    }\n        if (min == 1 && max == arr.length) return true\n        return\
    \ false", "        if (arr.length == 0) return true\n        val sorted = arr.sorted\n\
    \        val min = sorted.head\n        val max = sorted.last\n        val minIndex\
    \ = arr.indexOf(min)\n        val maxIndex = arr.indexOf(max)\n        if (minIndex\
    \ == 0) {\n            if (maxIndex == arr.length - 1) return true\n         \
    \   else return false\n        }\n        else if (maxIndex == arr.length - 1)\
    \ return false\n        else {\n            val left = arr.slice(0, minIndex)\n\
    \            val right = arr.slice(minIndex, arr.length)\n            val leftSorted\
    \ = left.sorted\n            val rightSorted = right.sorted\n            if (leftSorted\
    \ == left && rightSorted == right) return true\n            else return false\n\
    \        }", "        if (arr.isEmpty) return true\n        var min = arr.min\n\
    \        var minIndex = arr.indexOf(min)\n        var max = arr.max\n        var\
    \ maxIndex = arr.indexOf(max)\n        if (minIndex == 0 && maxIndex == arr.length\
    \ - 1) return true\n        if (minIndex == 0 && maxIndex != arr.length - 1) return\
    \ false\n        if (minIndex != 0 && maxIndex == arr.length - 1) return true\n\
    \        if (minIndex != 0 && maxIndex != arr.length - 1) return false", "   \
    \     val n = arr.length\n        if (n == 0) return true\n        val arr2 =\
    \ arr.toArray\n        val arr3 = arr.toArray\n        for (i <- 0 until n) {\n\
    \            arr2(i) = arr(n - i - 1)\n        }\n        val arr4 = arr2.sorted\n\
    \        val arr5 = arr3.sorted\n        for (i <- 0 until n) {\n            if\
    \ (arr4(i) != arr5(i)) return false\n        }\n        return true", "      \
    \  if (arr.length == 0) return true\n        var min = arr(0)\n        var max\
    \ = arr(0)\n        for (i <- 1 until arr.length) {\n            min = min min\
    \ arr(i)\n            max = max max arr(i)\n        }\n        if (max - min +\
    \ 1 == arr.length) return true\n        return false", "        if (arr.length\
    \ == 0) return true\n        var min = arr(0)\n        var max = arr(0)\n    \
    \    for (i <- 1 until arr.length) {\n            if (arr(i) < min) min = arr(i)\n\
    \            if (arr(i) > max) max = arr(i)\n        }\n        if (max - min\
    \ == arr.length - 1) return true\n        return false", "        if (arr.length\
    \ == 0) return true\n        var min = arr(0)\n        var max = arr(0)\n    \
    \    for (i <- 1 until arr.length) {\n            if (arr(i) < min) min = arr(i)\n\
    \            if (arr(i) > max) max = arr(i)\n        }\n        if (min == max)\
    \ return true\n        var count = 0\n        for (i <- 0 until arr.length) {\n\
    \            if (arr(i) == min) count += 1\n        }\n        if (count == arr.length)\
    \ return true\n        count = 0\n        for (i <- 0 until arr.length) {\n  \
    \          if (arr(i) == max) count += 1\n        }\n        if (count == arr.length)\
    \ return true\n        return false", "        if (arr.length == 0) return true\n\
    \        var min = arr(0)\n        var max = arr(0)\n        for (i <- 1 until\
    \ arr.length) {\n            if (arr(i) < min) min = arr(i)\n            if (arr(i)\
    \ > max) max = arr(i)\n        }\n        if (min == max) return true\n      \
    \  var minIndex = -1\n        var maxIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) == min) minIndex = i\n            if (arr(i) == max)\
    \ maxIndex = i\n        }\n        if (minIndex == 0 && maxIndex == arr.length\
    \ - 1) return true\n        if (minIndex == arr.length - 1 && maxIndex == 0) return\
    \ true\n        if (minIndex == 0 && maxIndex == arr.length - 2) return true\n\
    \        if (minIndex == 1 && maxIndex == arr.length - 1) return true\n      \
    \  if (minIndex == 1 && maxIndex == arr.length - 2) return true\n        if (minIndex\
    \ == 2 && maxIndex == arr.length - 1) return true\n        if (minIndex == 2 &&\
    \ maxIndex == arr.length - 2) return true\n        if (minIndex == 2 && maxIndex\
    \ == arr.length - 3) return true\n        if (minIndex == 3 && maxIndex == arr.length\
    \ - 1) return true\n        if (minIndex == 3 && maxIndex == arr.length - 2) return\
    \ true\n        if (minIndex == 3 && maxIndex == arr.length - 3) return true\n\
    \        if (minIndex == 3 && maxIndex == arr.length - 4) return true\n      \
    \  return false", "        val n = arr.length\n        if (n == 0) return true\n\
    \        val min = arr.min\n        val max = arr.max\n        val minIndex =\
    \ arr.indexOf(min)\n        val maxIndex = arr.indexOf(max)\n        if (minIndex\
    \ == 0) return true\n        if (maxIndex == n - 1) return true\n        if (minIndex\
    \ == n - 1) return false\n        if (maxIndex == 0) return false\n        if\
    \ (minIndex < maxIndex) return true\n        if (minIndex > maxIndex) return false",
  "        if (arr.length == 0) return true\n        val sorted = arr.sorted\n   \
    \     val min = sorted.head\n        val max = sorted.last\n        val minIndex\
    \ = arr.indexOf(min)\n        val maxIndex = arr.indexOf(max)\n        val minDistance\
    \ = minIndex\n        val maxDistance = arr.length - maxIndex - 1\n        if\
    \ (minDistance == maxDistance) return true\n        if (minDistance > maxDistance)\
    \ return false\n        if (minDistance == 0) return true\n        if (maxDistance\
    \ == 0) return true\n        if (minDistance == 1) return true\n        if (maxDistance\
    \ == 1) return true\n        if (minDistance == 2) return true\n        if (maxDistance\
    \ == 2) return true\n        return false", "        // Fill up this function\
    \ body\n        // 'arr' is a list of integers\n        // You have to return\
    \ true if it is possible to get a list sorted in\n        // non-decreasing order\
    \ by performing the following operation on the given\n        // list:\n     \
    \   // You are allowed to perform right shift operation any number of times.\n\
    \        // One right shift operation means shifting all elements of the list\
    \ by one\n        // position in the right direction. The last element of the\
    \ list will be moved to\n        // the starting position in the list i.e. 0th\
    \ index. \n        // If it is possible to obtain the sorted list by performing\
    \ the above operation\n        // then return true else return false.\n      \
    \  // If the given list is empty then return true.\n        // Note: The given\
    \ list is guaranteed to have unique elements.\n        // For Example:\n     \
    \   // >>> moveOneBall((List[Long](3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong,\
    \ 2l.toLong)))\n        // (true)\n        // Explanation: By performin 2 right\
    \ shift operations, non-decreasing order can\n        // be achieved for the given\
    \ list.\n        // >>> moveOneBall((List[Long](3l.toLong, 5l.toLong, 4l.toLong,\
    \ 1l.toLong, 2l.toLong)))\n        // (false)\n        // Explanation:It is not\
    \ possible to get non-decreasing order for the given\n        // list by performing\
    \ any number of right shift operations.\n        if (arr.length == 0) true\n \
    \       else {\n            val sorted = arr.sorted\n            var count = 0\n\
    \            for (i <- 0 until arr.length) {\n                if (arr(i) != sorted(i))\
    \ count += 1\n            }\n            if (count == 1) true\n            else\
    \ false\n        }", "        // We can use a greedy algorithm to solve this problem.\n\
    \        // We will iterate through the list and keep track of the minimum value\n\
    \        // encountered so far. If the current value is less than the minimum\
    \ value\n        // encountered so far, then we will return false.\n        //\
    \ If we reach the end of the list, then we will return true.\n        // Time\
    \ Complexity: O(n)\n        // Space Complexity: O(1)\n        var min = Long.MaxValue\n\
    \        for (i <- 0 until arr.length) {\n            if (arr(i) < min) {\n  \
    \              min = arr(i)\n            }\n            else if (arr(i) > min)\
    \ {\n                return false\n            }\n        }\n        return true",
  "        if (arr.length == 0) return true\n        var min = arr(0)\n        var\
    \ max = arr(0)\n        for (i <- 1 until arr.length) {\n            min = min\
    \ min arr(i)\n            max = max max arr(i)\n        }\n        if (min ==\
    \ 1 && max == arr.length) return true\n        return false", "        if (arr.length\
    \ == 0) return true\n        var min = arr(0)\n        var max = arr(0)\n    \
    \    for (i <- 1 until arr.length) {\n            if (arr(i) < min) min = arr(i)\n\
    \            if (arr(i) > max) max = arr(i)\n        }\n        return (max -\
    \ min + 1) == arr.length", "        if (arr.isEmpty) return true\n        val\
    \ sorted = arr.sorted\n        val min = sorted.min\n        val max = sorted.max\n\
    \        val minIndex = arr.indexOf(min)\n        val maxIndex = arr.indexOf(max)\n\
    \        if (minIndex == 0) {\n            if (maxIndex == arr.length - 1) return\
    \ true\n            else return false\n        }\n        else if (maxIndex ==\
    \ arr.length - 1) return false\n        else {\n            val maxIndex2 = arr.indexOf(max,\
    \ minIndex + 1)\n            if (maxIndex2 == -1) return true\n            else\
    \ return false\n        }", "        if (arr.length == 0) return true\n      \
    \  var min = arr(0)\n        var max = arr(0)\n        for (i <- 1 until arr.length)\
    \ {\n            if (arr(i) < min) min = arr(i)\n            if (arr(i) > max)\
    \ max = arr(i)\n        }\n        if (max - min > arr.length - 1) return false\n\
    \        return true", "        if (arr.length == 0) return true\n        var\
    \ min = arr(0)\n        var max = arr(0)\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) < min) min = arr(i)\n            if (arr(i) > max)\
    \ max = arr(i)\n        }\n        if (max - min == arr.length - 1) return true\n\
    \        return false", "        if (arr.length == 0) return true\n        var\
    \ min = arr(0)\n        for (i <- 1 until arr.length) {\n            if (arr(i)\
    \ < min) return false\n            min = min min arr(i)\n        }\n        return\
    \ true", "        val n = arr.length\n        if (n == 0) return true\n      \
    \  var min = arr(0)\n        var max = arr(0)\n        for (i <- 1 until n) {\n\
    \            min = min min arr(i)\n            max = max max arr(i)\n        }\n\
    \        if (max - min + 1 == n) return true\n        return false", "       \
    \ if (arr.length == 0) return true\n        val sorted = arr.sorted\n        val\
    \ min = arr.min\n        val max = arr.max\n        val minIndex = arr.indexOf(min)\n\
    \        val maxIndex = arr.indexOf(max)\n        if (minIndex == 0) {\n     \
    \       if (maxIndex == arr.length - 1) return true\n            else return false\n\
    \        }\n        else {\n            if (maxIndex == arr.length - 1) return\
    \ true\n            else return false\n        }", "        if (arr.length ==\
    \ 0) return true\n        var min = arr(0)\n        var max = arr(0)\n       \
    \ for (i <- 1 until arr.length) {\n            min = min min arr(i)\n        \
    \    max = max max arr(i)\n        }\n        return (max - min + 1) == arr.length",
  "        // Your code goes here.\n        // Return true if it is possible to get\
    \ a list sorted in non-decreasing order\n        // by performing the above operation\
    \ else return false.\n        // If the given list is empty then return true.\n\
    \        return true;", "        val n = arr.length\n        if (n == 0) return\
    \ true\n        val sorted = arr.sorted\n        val diff = arr.zip(sorted).map(x\
    \ => x._1 - x._2).toList\n        val max = diff.max\n        val min = diff.min\n\
    \        if (max - min > 1) return false\n        if (max - min == 1) {\n    \
    \        val maxIndex = diff.indexOf(max)\n            val minIndex = diff.indexOf(min)\n\
    \            if (maxIndex == 0) return false\n            if (minIndex == n -\
    \ 1) return false\n            if (arr(maxIndex - 1) != sorted(maxIndex - 1))\
    \ return false\n            if (arr(minIndex + 1) != sorted(minIndex + 1)) return\
    \ false\n        }\n        return true", "        val n = arr.length\n      \
    \  if (n == 0) return true\n        val min = arr.min\n        val max = arr.max\n\
    \        val minIndex = arr.indexOf(min)\n        val maxIndex = arr.indexOf(max)\n\
    \        if (minIndex == 0) {\n            if (maxIndex == n - 1) return true\n\
    \            else return false\n        }\n        else if (maxIndex == n - 1)\
    \ return false\n        else {\n            val sorted = arr.sorted\n        \
    \    val sortedIndex = arr.indexOf(sorted(0))\n            if (sortedIndex ==\
    \ 0) return true\n            else {\n                val minIndex = arr.indexOf(sorted(0))\n\
    \                val maxIndex = arr.indexOf(sorted(n - 1))\n                if\
    \ (minIndex == 0) {\n                    if (maxIndex == n - 1) return true\n\
    \                    else return false\n                }\n                else\
    \ if (maxIndex == n - 1) return false\n                else {\n              \
    \      val minIndex = arr.indexOf(sorted(0))\n                    val maxIndex\
    \ = arr.indexOf(sorted(n - 1))\n                    if (minIndex == 0) {\n   \
    \                     if (maxIndex == n - 1) return true\n                   \
    \     else return false\n                    }\n                    else if (maxIndex\
    \ == n - 1) return false\n                    else {\n                       \
    \ val minIndex = arr.indexOf(sorted(0))\n                        val maxIndex\
    \ = arr.indexOf(sorted(n - 1))\n                        if (minIndex == 0) {\n\
    \                            if (maxIndex == n - 1) return true\n            \
    \                else return false\n                        }\n              \
    \          else if (maxIndex == n - 1) return false\n                        else\
    \ {\n                            val minIndex = arr.indexOf(sorted(0))\n     \
    \                       val maxIndex = arr.indexOf(sorted(n - 1))\n          \
    \                  if (minIndex == 0) {\n                                if (maxIndex\
    \ == n - 1) return true\n                                else return false\n \
    \                           }\n                            else if (maxIndex ==\
    \ n - 1) return false\n                            else {\n                  \
    \              val minIndex = arr.indexOf(sorted(0))\n                       \
    \        ", "        if (arr.length == 0) return true\n        var min = arr(0)\n\
    \        for (i <- 1 until arr.length) {\n            if (arr(i) < min) return\
    \ false\n            min = min min arr(i)\n        }\n        return true", " \
    \       if (arr.isEmpty) return true\n        var min = arr.head\n        var\
    \ max = arr.head\n        for (i <- arr) {\n            min = min min i\n    \
    \        max = max max i\n        }\n        if (max - min + 1 == arr.length)\
    \ return true\n        else return false", "        if (arr.length == 0) return\
    \ true\n        val sorted = arr.sorted\n        val min = sorted.head\n     \
    \   val max = sorted.last\n        val minIndex = arr.indexOf(min)\n        val\
    \ maxIndex = arr.indexOf(max)\n        if (minIndex == 0 && maxIndex == arr.length\
    \ - 1) return true\n        if (minIndex == 0 && maxIndex == arr.length - 2) return\
    \ true\n        if (minIndex == 1 && maxIndex == arr.length - 1) return true\n\
    \        return false", "        if (arr.length == 0) return true\n        var\
    \ min = arr(0)\n        var max = arr(0)\n        for (i <- 1 until arr.length)\
    \ {\n            if (arr(i) < min) min = arr(i)\n            if (arr(i) > max)\
    \ max = arr(i)\n        }\n        if (max - min == arr.length - 1) return true\n\
    \        return false", "        val n = arr.length\n        if (n == 0) return\
    \ true\n        val dp = Array.fill(n)(0)\n        dp(0) = 1\n        for (i <-\
    \ 1 until n) {\n            var max = 0\n            for (j <- 0 until i) {\n\
    \                if (arr(j) <= arr(i)) {\n                    max = max max dp(j)\n\
    \                }\n            }\n            dp(i) = max + 1\n        }\n  \
    \      dp(n - 1) == n", "        val sorted = arr.sorted\n        val n = arr.length\n\
    \        val m = arr.max\n        val min = arr.min\n        val max = arr.max\n\
    \        val minIndex = arr.indexOf(min)\n        val maxIndex = arr.indexOf(max)\n\
    \        if (minIndex == 0) {\n            if (maxIndex == n - 1) {\n        \
    \        return true\n            } else {\n                return false\n   \
    \         }\n        } else {\n            if (maxIndex == n - 1) {\n        \
    \        return true\n            } else {\n                return false\n   \
    \         }\n        }", "        if (arr.length == 0) return true\n        val\
    \ sorted = arr.sorted\n        val min = sorted.head\n        val max = sorted.last\n\
    \        val minIndex = arr.indexOf(min)\n        val maxIndex = arr.indexOf(max)\n\
    \        if (minIndex == 0) {\n            if (maxIndex == arr.length - 1) return\
    \ true\n            else {\n                val sub = arr.slice(maxIndex + 1,\
    \ arr.length)\n                if (sub.sorted == sub) return true\n          \
    \      else return false\n            }\n        }\n        else {\n         \
    \   val sub = arr.slice(0, minIndex)\n            if (sub.sorted == sub) return\
    \ true\n            else return false\n        }", "        val n = arr.length\n\
    \        if (n == 0) return true\n        val sorted = arr.sorted\n        val\
    \ map = new HashMap[Long, Int]\n        for (i <- 0 until n) {\n            map(arr(i))\
    \ = i\n        }\n        for (i <- 0 until n) {\n            if (arr(i) != sorted(i))\
    \ {\n                val j = map(sorted(i))\n                if (j != i) {\n \
    \                   if (j == i + 1) {\n                        val temp = arr(i)\n\
    \                        arr(i) = arr(i + 1)\n                        arr(i +\
    \ 1) = temp\n                        map(arr(i)) = i\n                       \
    \ map(arr(i + 1)) = i + 1\n                    } else {\n                    \
    \    return false\n                    }\n                }\n            }\n \
    \       }\n        true", "        if (arr.length == 0) return true\n        val\
    \ arr2 = arr.sorted\n        var flag = false\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) != arr2(i)) {\n                if (flag) return false\n\
    \                else flag = true\n            }\n        }\n        return true",
  "        if (arr.length == 0) return true\n        var min = arr(0)\n        var\
    \ max = arr(0)\n        for (i <- 1 until arr.length) {\n            if (arr(i)\
    \ < min) min = arr(i)\n            if (arr(i) > max) max = arr(i)\n        }\n\
    \        if (min == max) return true\n        var count = 0\n        for (i <-\
    \ 0 until arr.length) {\n            if (arr(i) == min) count += 1\n        }\n\
    \        if (count > 1) return false\n        return true", "        if (arr.length\
    \ == 0) return true\n        var min = arr(0)\n        var max = arr(0)\n    \
    \    for (i <- 1 until arr.length) {\n            min = min min arr(i)\n     \
    \       max = max max arr(i)\n        }\n        return (max - min + 1) == arr.length",
  "        if (arr.isEmpty) true\n        else {\n            val sorted = arr.sorted\n\
    \            val min = sorted.head\n            val max = sorted.last\n      \
    \      val minIndex = arr.indexOf(min)\n            val maxIndex = arr.indexOf(max)\n\
    \            if (minIndex == 0) {\n                if (maxIndex == arr.length\
    \ - 1) true\n                else if (maxIndex == 0) false\n                else\
    \ {\n                    val subarr = arr.slice(maxIndex + 1, arr.length)\n  \
    \                  subarr.forall(_ >= max)\n                }\n            }\n\
    \            else if (maxIndex == arr.length - 1) {\n                if (minIndex\
    \ == arr.length - 1) false\n                else {\n                    val subarr\
    \ = arr.slice(0, minIndex)\n                    subarr.forall(_ <= min)\n    \
    \            }\n            }\n            else {\n                val subarr1\
    \ = arr.slice(0, minIndex)\n                val subarr2 = arr.slice(maxIndex +\
    \ 1, arr.length)\n                subarr1.forall(_ <= min) && subarr2.forall(_\
    \ >= max)\n            }\n        }", "        if (arr.length == 0) return true\n\
    \        var max = arr(0)\n        for (i <- 1 until arr.length) {\n         \
    \   if (arr(i) < max) return false\n            else max = arr(i)\n        }\n\
    \        return true", "        val n = arr.length\n        if (n == 0) return\
    \ true\n        val arr2 = arr.toArray\n        val arr3 = arr.toArray\n     \
    \   scala.util.Sorting.quickSort(arr2)\n        val arr4 = arr2.toList\n     \
    \   if (arr4 == arr) return true\n        var i = 0\n        while (i < n) {\n\
    \            var j = 0\n            while (j < n) {\n                val temp\
    \ = arr3(j)\n                arr3(j) = arr3((j + 1) % n)\n                arr3((j\
    \ + 1) % n) = temp\n                if (arr3.toList == arr4) return true\n   \
    \             j += 1\n            }\n            i += 1\n        }\n        false",
  "        // Fill up this function body\n        // 'arr' is a list of integers\n\
    \        // You have to return a boolean value\n        // If it is possible to\
    \ get a list sorted in non-decreasing order by performing\n        // the following\
    \ operation on the given list then return true else return false.\n        //\
    \ You are allowed to perform right shift operation any number of times.\n    \
    \    // One right shift operation means shifting all elements of the list by one\n\
    \        // position in the right direction. The last element of the list will\
    \ be moved to\n        // the starting position in the list i.e. 0th index. \n\
    \        // If the given list is empty then return true.\n        // Note: The\
    \ given list is guaranteed to have unique elements.\n        if (arr.length ==\
    \ 0) {\n            return true\n        }\n        val sorted = arr.sorted\n\
    \        val min = sorted.head\n        val max = sorted.last\n        val minIndex\
    \ = arr.indexOf(min)\n        val maxIndex = arr.indexOf(max)\n        if (minIndex\
    \ == 0) {\n            return true\n        }\n        if (maxIndex == arr.length\
    \ - 1) {\n            return true\n        }\n        if (maxIndex == minIndex\
    \ + 1) {\n            return true\n        }\n        if (maxIndex == minIndex\
    \ - 1) {\n            return true\n        }\n        return false", "       \
    \ if (arr.length == 0) return true\n        var min = arr(0)\n        var max\
    \ = arr(0)\n        for (i <- 0 until arr.length) {\n            if (arr(i) <\
    \ min) min = arr(i)\n            if (arr(i) > max) max = arr(i)\n        }\n \
    \       if (max - min + 1 == arr.length) return true\n        return false", " \
    \       if (arr.length == 0) return true\n        var min = arr(0)\n        var\
    \ max = arr(0)\n        for (i <- 1 until arr.length) {\n            min = min\
    \ min arr(i)\n            max = max max arr(i)\n        }\n        if (min ==\
    \ 1 && max == arr.length) return true\n        return false", "        if (arr.length\
    \ == 0) return true\n        val sorted = arr.sorted\n        val min = arr.min\n\
    \        val minIndex = arr.indexOf(min)\n        val max = arr.max\n        val\
    \ maxIndex = arr.indexOf(max)\n        if (minIndex == 0 && maxIndex == arr.length\
    \ - 1) return true\n        if (minIndex == 0 && maxIndex == arr.length - 2) return\
    \ true\n        if (minIndex == 1 && maxIndex == arr.length - 1) return true\n\
    \        return false", "        // Your code goes here\n        return true",
  "        if (arr.length == 0) return true\n        val sorted = arr.sorted\n   \
    \     val min = sorted.head\n        val max = sorted.last\n        val minIndex\
    \ = arr.indexOf(min)\n        val maxIndex = arr.indexOf(max)\n        if (minIndex\
    \ == 0) {\n            if (maxIndex == arr.length - 1) return true\n         \
    \   else return false\n        }\n        else if (maxIndex == arr.length - 1)\
    \ return false\n        else {\n            val left = arr.slice(0, minIndex)\n\
    \            val right = arr.slice(minIndex, arr.length)\n            val leftSorted\
    \ = left.sorted\n            val rightSorted = right.sorted\n            if (leftSorted.last\
    \ <= rightSorted.head) return true\n            else return false\n        }",
  "        if (arr.isEmpty) return true\n        val sorted = arr.sorted\n       \
    \ val max = arr.max\n        val min = arr.min\n        val maxIndex = arr.indexOf(max)\n\
    \        val minIndex = arr.indexOf(min)\n        if (maxIndex == arr.length -\
    \ 1) return true\n        if (minIndex == 0) return false\n        if (maxIndex\
    \ < minIndex) return true\n        if (maxIndex == minIndex + 1) return true\n\
    \        if (maxIndex == minIndex + 2) return true\n        return false", " \
    \       if (arr.length == 0) return true\n        val sorted = arr.sorted\n  \
    \      val map = new HashMap[Long, Int]\n        for (i <- 0 until arr.length)\
    \ {\n            map(arr(i)) = i\n        }\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) != sorted(i)) {\n                val index = map(sorted(i))\n\
    \                if (index - i > 1) return false\n            }\n        }\n \
    \       return true", "        // Your code goes here\n        return true", " \
    \       if (arr.isEmpty) return true\n        val sorted = arr.sorted\n      \
    \  val sorted_rev = sorted.reverse\n        val n = arr.length\n        val dp\
    \ = Array.ofDim[Boolean](n + 1, n + 1)\n        for (i <- 0 to n) {\n        \
    \    for (j <- 0 to n) {\n                if (i == 0 || j == 0) dp(i)(j) = true\n\
    \                else if (arr(i - 1) == sorted(j - 1)) dp(i)(j) = dp(i - 1)(j\
    \ - 1)\n                else if (arr(i - 1) == sorted_rev(j - 1)) dp(i)(j) = dp(i\
    \ - 1)(j)\n                else dp(i)(j) = false\n            }\n        }\n \
    \       dp(n)(n)", "        if (arr.length == 0) return true\n        var min\
    \ = arr(0)\n        var max = arr(0)\n        for (i <- 1 until arr.length) {\n\
    \            if (arr(i) < min) min = arr(i)\n            if (arr(i) > max) max\
    \ = arr(i)\n        }\n        if (max - min + 1 == arr.length) return true\n\
    \        else return false", "        val n = arr.length\n        if (n == 0)\
    \ return true\n        val arr2 = arr.sorted\n        val diff = new Array[Int](n)\n\
    \        for (i <- 0 until n) {\n            diff(i) = (arr(i) - arr2(i) + n)\
    \ % n\n        }\n        for (i <- 0 until n) {\n            for (j <- i + 1\
    \ until n) {\n                if (diff(i) > diff(j)) return false\n          \
    \  }\n        }\n        return true", "        if (arr.length == 0) return true\n\
    \        val sorted = arr.sorted\n        val min = sorted.head\n        val max\
    \ = sorted.last\n        val minIndex = arr.indexOf(min)\n        val maxIndex\
    \ = arr.indexOf(max)\n        if (minIndex == 0) {\n            if (maxIndex ==\
    \ arr.length - 1) return true\n            else return false\n        }\n    \
    \    else if (maxIndex == arr.length - 1) return false\n        else {\n     \
    \       val sub = arr.slice(minIndex, maxIndex + 1)\n            val subSorted\
    \ = sub.sorted\n            if (sub == subSorted) return true\n            else\
    \ return false\n        }", "        if (arr.length == 0) return true\n      \
    \  val sorted = arr.sorted\n        val min = sorted.head\n        val max = sorted.last\n\
    \        val minIndex = arr.indexOf(min)\n        val maxIndex = arr.indexOf(max)\n\
    \        val minDistance = minIndex - 0\n        val maxDistance = arr.length\
    \ - 1 - maxIndex\n        if (minDistance <= maxDistance) return true\n      \
    \  else return false", "        if (arr.isEmpty) return true\n        val sorted\
    \ = arr.sorted\n        val diff = sorted.zip(arr).map(x => x._1 - x._2)\n   \
    \     val max = diff.max\n        val min = diff.min\n        if (max > 1 || min\
    \ < -1) return false\n        val count = diff.count(_ == 0)\n        if (count\
    \ == arr.length) return true\n        if (count == arr.length - 1) return true\n\
    \        return false", "        if (arr.isEmpty) return true\n        val n =\
    \ arr.length\n        val m = arr.max\n        val c = arr.count(_ == m)\n   \
    \     if (c == n) return true\n        if (c > 1) return false\n        val p\
    \ = arr.indexOf(m)\n        val q = arr.lastIndexOf(m)\n        if (p == 0) return\
    \ true\n        if (q == n - 1) return true\n        if (p == q) {\n         \
    \   val s = arr.slice(0, p)\n            val t = arr.slice(p + 1, n)\n       \
    \     if (s.isEmpty || t.isEmpty) return true\n            val x = s.max\n   \
    \         val y = t.min\n            if (x < y) return true\n            return\
    \ false\n        }\n        return false", "        if (arr.isEmpty) return true\n\
    \        val n = arr.length\n        val dp = Array.fill(n)(false)\n        for\
    \ (i <- 0 until n) {\n            val x = arr(i)\n            if (i == 0) dp(i)\
    \ = true\n            else if (i == 1) dp(i) = (x >= arr(i - 1))\n           \
    \ else {\n                dp(i) = dp(i - 1) && (x >= arr(i - 1))\n           \
    \     if (!dp(i)) {\n                    dp(i) = dp(i - 2) && (x >= arr(i - 2))\n\
    \                }\n            }\n        }\n        dp(n - 1)", "        if\
    \ (arr.length == 0) return true\n        var min = arr(0)\n        for (i <- 1\
    \ until arr.length) {\n            if (arr(i) < min) return false\n          \
    \  min = min min arr(i)\n        }\n        return true", "        if (arr.isEmpty)\
    \ return true\n        val n = arr.length\n        val min = arr.min\n       \
    \ val minIndex = arr.indexOf(min)\n        val maxIndex = arr.indexOf(arr.max)\n\
    \        if (minIndex == 0) return true\n        if (maxIndex == n - 1) return\
    \ true\n        if (minIndex == n - 1) return false\n        if (maxIndex == 0)\
    \ return false\n        return true", "        val n = arr.length\n        if\
    \ (n == 0) return true\n        val arr2 = arr.sorted\n        val map = new HashMap[Long,\
    \ Long]\n        for (i <- 0 until n) {\n            map(arr(i)) = arr2(i)\n \
    \       }\n        val visited = new Array[Boolean](n)\n        for (i <- 0 until\
    \ n) {\n            if (visited(i)) continue\n            var j = i\n        \
    \    var cycleSize = 0\n            while (!visited(j)) {\n                visited(j)\
    \ = true\n                j = (map(arr(j)) + n - 1) % n\n                cycleSize\
    \ += 1\n            }\n            if (cycleSize % 2 == 0) return false\n    \
    \    }\n        true", "        val n = arr.length\n        if (n == 0) return\
    \ true\n        val max = arr.max\n        val min = arr.min\n        val maxIndex\
    \ = arr.indexOf(max)\n        val minIndex = arr.indexOf(min)\n        if (maxIndex\
    \ == n - 1) {\n            if (minIndex == 0) return true\n            else return\
    \ false\n        }\n        else {\n            if (minIndex == 0) return true\n\
    \            else return false\n        }", "        // Your code here\n     \
    \   return true", "        val n = arr.length\n        if (n == 0) return true\n\
    \        val dp = Array.fill(n)(0l)\n        for (i <- 0 until n) {\n        \
    \    var j = i - 1\n            while (j >= 0) {\n                if (arr(j) <=\
    \ arr(i)) dp(i) = max(dp(i), dp(j) + 1)\n                j -= 1\n            }\n\
    \        }\n        dp.max >= n - 1", "        if (arr.length == 0) return true\n\
    \        var min = arr(0)\n        var minIndex = 0\n        for (i <- 1 until\
    \ arr.length) {\n            if (arr(i) < min) {\n                min = arr(i)\n\
    \                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == 0) return true\n        for (i <- 0 until minIndex) {\n            if (arr(i)\
    \ > min) return false\n        }\n        return true", "        if (arr.length\
    \ == 0) return true\n        var min = arr(0)\n        var max = arr(0)\n    \
    \    for (i <- 1 until arr.length) {\n            if (arr(i) < min) min = arr(i)\n\
    \            if (arr(i) > max) max = arr(i)\n        }\n        if (max - min\
    \ + 1 == arr.length) return true\n        else return false", "        if (arr.isEmpty)\
    \ return true\n        val sorted = arr.sorted\n        val min = sorted.head\n\
    \        val max = sorted.last\n        val minIndex = arr.indexOf(min)\n    \
    \    val maxIndex = arr.indexOf(max)\n        val minDistance = minIndex - 0\n\
    \        val maxDistance = arr.length - 1 - maxIndex\n        if (minDistance\
    \ == maxDistance) return true\n        if (minDistance > maxDistance) return false\n\
    \        val distance = maxDistance - minDistance\n        val maxDistance2 =\
    \ arr.length - 1 - (maxIndex - distance)\n        if (minDistance == maxDistance2)\
    \ return true\n        if (minDistance > maxDistance2) return false\n        false",
  "        if (arr.length == 0) return true\n        var max = arr(0)\n        for\
    \ (i <- 1 until arr.length) {\n            if (arr(i) < max) return false\n  \
    \          max = max max arr(i)\n        }\n        return true", "        if\
    \ (arr.length == 0) return true\n        val sorted = arr.sorted\n        val\
    \ min = sorted.head\n        val max = sorted.last\n        val minIndex = arr.indexOf(min)\n\
    \        val maxIndex = arr.indexOf(max)\n        val minDistance = minIndex\n\
    \        val maxDistance = arr.length - maxIndex - 1\n        if (minDistance\
    \ == maxDistance) return true\n        if (minDistance > maxDistance) return false\n\
    \        val minDistance2 = arr.length - minIndex - 1\n        val maxDistance2\
    \ = maxIndex\n        if (minDistance2 == maxDistance2) return true\n        if\
    \ (minDistance2 > maxDistance2) return false\n        return false", "       \
    \ if (arr.length == 0) return true\n        var min = arr(0)\n        var max\
    \ = arr(0)\n        for (i <- 1 until arr.length) {\n            if (arr(i) <\
    \ min) min = arr(i)\n            if (arr(i) > max) max = arr(i)\n        }\n \
    \       if (max - min == arr.length - 1) return true\n        return false", " \
    \       if (arr.length == 0) return true\n        var min = arr(0)\n        var\
    \ max = arr(0)\n        for (i <- 1 until arr.length) {\n            if (arr(i)\
    \ < min) min = arr(i)\n            if (arr(i) > max) max = arr(i)\n        }\n\
    \        if (min == 1 && max == arr.length) return true\n        return false",
  "        if (arr.length == 0) return true\n        val sorted = arr.sorted\n   \
    \     val min = sorted.head\n        val max = sorted.last\n        val minIndex\
    \ = arr.indexOf(min)\n        val maxIndex = arr.indexOf(max)\n        if (minIndex\
    \ == 0) return true\n        if (maxIndex == arr.length - 1) return true\n   \
    \     if (maxIndex - minIndex == 1) return true\n        return false", "    \
    \    val n = arr.length\n        if (n == 0) return true\n        val sorted =\
    \ arr.sorted\n        val map = new HashMap[Long, Int]\n        for (i <- 0 until\
    \ n) {\n            map(arr(i)) = i\n        }\n        for (i <- 0 until n) {\n\
    \            if (arr(i) != sorted(i)) {\n                val j = map(sorted(i))\n\
    \                if (j == 0) return false\n                if (arr(j - 1) != sorted(i\
    \ - 1)) return false\n            }\n        }\n        return true", "      \
    \  val n = arr.length\n        if (n == 0) return true\n        val a = arr.toArray\n\
    \        var i = 0\n        while (i < n) {\n            if (a(i) != i + 1) {\n\
    \                val j = a(i) - 1\n                if (a(j) != j + 1) return false\n\
    \                val temp = a(i)\n                a(i) = a(j)\n              \
    \  a(j) = temp\n            }\n            i += 1\n        }\n        true", " \
    \       val n = arr.length\n        if (n == 0) return true\n        val sorted\
    \ = arr.sorted\n        val map = HashMap[Long, Int]()\n        for (i <- 0 until\
    \ n) {\n            map(arr(i)) = i\n        }\n        for (i <- 0 until n) {\n\
    \            if (arr(i) != sorted(i)) {\n                val j = map(sorted(i))\n\
    \                if (j == 0) return false\n                if (arr(j - 1) != sorted(i\
    \ - 1)) return false\n            }\n        }\n        return true", "      \
    \  if (arr.length == 0) return true\n        var min = arr(0)\n        var max\
    \ = arr(0)\n        for (i <- 1 until arr.length) {\n            if (arr(i) <\
    \ min) min = arr(i)\n            if (arr(i) > max) max = arr(i)\n        }\n \
    \       if (min == max) return true\n        var minIndex = -1\n        var maxIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) == min)\
    \ minIndex = i\n            if (arr(i) == max) maxIndex = i\n        }\n     \
    \   if (minIndex == -1 || maxIndex == -1) return false\n        if (minIndex ==\
    \ 0) return true\n        if (maxIndex == arr.length - 1) return true\n      \
    \  if (minIndex > maxIndex) return true\n        return false", "        if (arr.isEmpty)\
    \ return true\n        val n = arr.length\n        val max = arr.max\n       \
    \ val min = arr.min\n        val maxIndex = arr.indexOf(max)\n        val minIndex\
    \ = arr.indexOf(min)\n        if (maxIndex == n - 1 && minIndex == 0) return true\n\
    \        if (maxIndex == n - 1) return false\n        if (minIndex == 0) return\
    \ false\n        if (maxIndex < minIndex) return true\n        return false",
  "        if (arr.isEmpty) return true\n        val sorted = arr.sorted\n       \
    \ val min = sorted.head\n        val max = sorted.last\n        val minIndex =\
    \ arr.indexOf(min)\n        val maxIndex = arr.indexOf(max)\n        val minDistance\
    \ = minIndex\n        val maxDistance = arr.length - maxIndex - 1\n        if\
    \ (minDistance == maxDistance) return true\n        if (minDistance < maxDistance)\
    \ {\n            if (minDistance == 0) return false\n            val newArr =\
    \ arr.slice(minIndex + 1, arr.length) ++ arr.slice(0, minIndex + 1)\n        \
    \    return moveOneBall(newArr)\n        }\n        else {\n            if (maxDistance\
    \ == 0) return false\n            val newArr = arr.slice(maxIndex + 1, arr.length)\
    \ ++ arr.slice(0, maxIndex + 1)\n            return moveOneBall(newArr)\n    \
    \    }", "        if (arr.length == 0) return true\n        val sorted = arr.sorted\n\
    \        val min = sorted.head\n        val max = sorted.last\n        val minIndex\
    \ = arr.indexOf(min)\n        val maxIndex = arr.indexOf(max)\n        if (minIndex\
    \ == 0) {\n            if (maxIndex == arr.length - 1) return true\n         \
    \   else return false\n        }\n        else if (maxIndex == arr.length - 1)\
    \ return false\n        else return true", "        if (arr.length == 0) return\
    \ true\n        val sorted = arr.sorted\n        val min = sorted.head\n     \
    \   val max = sorted.last\n        val minIndex = arr.indexOf(min)\n        val\
    \ maxIndex = arr.indexOf(max)\n        val diff = maxIndex - minIndex\n      \
    \  if (diff == 0) return true\n        if (diff == 1) return false\n        if\
    \ (diff == arr.length - 1) return true\n        if (diff > arr.length / 2) return\
    \ false\n        return true", "        if (arr.length == 0) return true\n   \
    \     val sorted = arr.sorted\n        val n = arr.length\n        for (i <- 0\
    \ until n) {\n            val shifted = (arr.drop(i) ++ arr.take(i)).toList\n\
    \            if (shifted == sorted) return true\n        }\n        return false",
  "        // Your code goes here\n        return true", "        if (arr.length ==\
    \ 0) return true\n        var min = arr(0)\n        var max = arr(0)\n       \
    \ for (i <- 1 until arr.length) {\n            min = min min arr(i)\n        \
    \    max = max max arr(i)\n        }\n        if (max - min + 1 == arr.length)\
    \ return true\n        return false", "        if (arr.isEmpty) return true\n\
    \        var min = arr.min\n        var max = arr.max\n        var minIndex =\
    \ arr.indexOf(min)\n        var maxIndex = arr.indexOf(max)\n        var sorted\
    \ = arr.sorted\n        var sortedIndex = arr.indexOf(sorted(0))\n        if (sortedIndex\
    \ == 0) return true\n        if (sortedIndex == arr.length - 1) return true\n\
    \        if (minIndex == 0) return true\n        if (maxIndex == arr.length -\
    \ 1) return true\n        return false", "        // Your Code Here\n        return\
    \ true", "        if (arr.isEmpty) return true\n        val n = arr.length\n \
    \       val max = arr.max\n        val min = arr.min\n        val maxIndex = arr.indexOf(max)\n\
    \        val minIndex = arr.indexOf(min)\n        if (maxIndex == n - 1) return\
    \ true\n        if (minIndex == 0) return false\n        if (maxIndex == n - 2)\
    \ return true\n        if (minIndex == 1) return false\n        if (maxIndex ==\
    \ n - 3) return true\n        if (minIndex == 2) return false\n        if (maxIndex\
    \ == n - 4) return true\n        if (minIndex == 3) return false\n        if (maxIndex\
    \ == n - 5) return true\n        if (minIndex == 4) return false\n        if (maxIndex\
    \ == n - 6) return true\n        if (minIndex == 5) return false\n        if (maxIndex\
    \ == n - 7) return true\n        if (minIndex == 6) return false\n        if (maxIndex\
    \ == n - 8) return true\n        if (minIndex == 7) return false\n        if (maxIndex\
    \ == n - 9) return true\n        if (minIndex == 8) return false\n        if (maxIndex\
    \ == n - 10) return true\n        if (minIndex == 9) return false\n        if\
    \ (maxIndex == n - 11) return true\n        if (minIndex == 10) return false\n\
    \        if (maxIndex == n - 12) return true\n        if (minIndex == 11) return\
    \ false\n        if (maxIndex == n - 13) return true\n        if (minIndex ==\
    \ 12) return false\n        if (maxIndex == n - 14) return true\n        if (minIndex\
    \ == 13) return false\n        if (maxIndex == n - 15) return true\n        if\
    \ (minIndex == 14) return false\n        if (maxIndex == n - 16) return true\n\
    \        if (minIndex == 15) return false\n        if (maxIndex == n - 17) return\
    \ true\n        if (minIndex == 16) return false\n        if (maxIndex == n -\
    \ 18) return true\n        if (minIndex == 17) return false\n        if (maxIndex\
    \ == n - 19) return true\n        if (minIndex", "        val sorted = arr.sorted\n\
    \        val min = arr.min\n        val max = arr.max\n        val minIndex =\
    \ arr.indexOf(min)\n        val maxIndex = arr.indexOf(max)\n        val diff\
    \ = maxIndex - minIndex\n        if (diff == arr.length - 1) {\n            return\
    \ true\n        }\n        if (diff == arr.length - 2) {\n            return false\n\
    \        }\n        val newArr = arr.take(minIndex) ++ arr.drop(minIndex + 1)\n\
    \        moveOneBall(newArr)", "        if (arr.isEmpty) return true\n       \
    \ var min = arr.min\n        var max = arr.max\n        var minIndex = arr.indexOf(min)\n\
    \        var maxIndex = arr.indexOf(max)\n        var minIndexes = List[Int]()\n\
    \        var maxIndexes = List[Int]()\n        for (i <- 0 until arr.length) {\n\
    \            if (arr(i) == min) minIndexes = minIndexes :+ i\n            if (arr(i)\
    \ == max) maxIndexes = maxIndexes :+ i\n        }\n        if (minIndexes.length\
    \ == 1 && maxIndexes.length == 1) {\n            if (minIndex == 0 && maxIndex\
    \ == arr.length - 1) return true\n            else if (minIndex == 0 && maxIndex\
    \ != arr.length - 1) return false\n            else if (minIndex != 0 && maxIndex\
    \ == arr.length - 1) return false\n            else if (minIndex != 0 && maxIndex\
    \ != arr.length - 1) {\n                var minIndex1 = minIndex\n           \
    \     var maxIndex1 = maxIndex\n                var minIndex2 = minIndex\n   \
    \             var maxIndex2 = maxIndex\n                while (minIndex1 > 0)\
    \ {\n                    minIndex1 -= 1\n                    maxIndex1 += 1\n\
    \                    if (arr(minIndex1) > arr(maxIndex1)) return false\n     \
    \           }\n                while (maxIndex2 > 0) {\n                    minIndex2\
    \ += 1\n                    maxIndex2 -= 1\n                    if (arr(minIndex2)\
    \ > arr(maxIndex2)) return false\n                }\n                return true\n\
    \            }\n        }\n        else if (minIndexes.length == 1 && maxIndexes.length\
    \ > 1) {\n            var minIndex1 = minIndex\n            var maxIndex1 = maxIndex\n\
    \            var minIndex2 = minIndex\n            var maxIndex2 = maxIndex\n\
    \            while (minIndex1 > 0) {\n                minIndex1 -= 1\n       \
    \         maxIndex1 += 1\n                if (arr(minIndex1) > arr(maxIndex1))\
    \ return false\n            }\n            while (maxIndex2 > 0) {\n         \
    \       minIndex2 += 1\n                maxIndex2 -= 1\n                if (",
  "        val n = arr.length\n        if (n == 0) return true\n        val max =\
    \ arr.max\n        val min = arr.min\n        val minIndex = arr.indexOf(min)\n\
    \        val maxIndex = arr.indexOf(max)\n        if (maxIndex == n - 1) return\
    \ true\n        if (minIndex == 0) return false\n        if (maxIndex < minIndex)\
    \ return true\n        return false", "        if (arr.length == 0) return true\n\
    \        var min = arr(0)\n        for (i <- 1 until arr.length) {\n         \
    \   if (arr(i) < min) return false\n            min = min min arr(i)\n       \
    \ }\n        return true", "        // Your code here\n        return true", " \
    \       // Write your code here\n        true", "        if (arr.length == 0)\
    \ return true\n        val sorted = arr.sorted\n        val min = sorted.head\n\
    \        val max = sorted.last\n        val minIndex = arr.indexOf(min)\n    \
    \    val maxIndex = arr.indexOf(max)\n        val diff = maxIndex - minIndex\n\
    \        if (diff == arr.length - 1) return true\n        val minIndexInSorted\
    \ = sorted.indexOf(min)\n        val maxIndexInSorted = sorted.indexOf(max)\n\
    \        val diffInSorted = maxIndexInSorted - minIndexInSorted\n        if (diffInSorted\
    \ == arr.length - 1) return true\n        return false", "        val n = arr.length\n\
    \        if (n == 0) return true\n        val arr2 = arr.sorted\n        var i\
    \ = 0\n        while (i < n) {\n            if (arr(i) != arr2(i)) {\n       \
    \         if (i == n - 1) return false\n                if (arr(i + 1) != arr2(i))\
    \ return false\n                else {\n                    val temp = arr(i)\n\
    \                    arr(i) = arr(i + 1)\n                    arr(i + 1) = temp\n\
    \                }\n            }\n            i += 1\n        }\n        return\
    \ true", "        val n = arr.length\n        if (n == 0) return true\n      \
    \  val sorted = arr.sorted\n        val sortedSet = sorted.toSet\n        val\
    \ map = new HashMap[Long, Int]\n        for (i <- 0 until n) {\n            map(arr(i))\
    \ = i\n        }\n        for (i <- 0 until n) {\n            val x = sorted(i)\n\
    \            val y = map(x)\n            if (y != i) {\n                val z\
    \ = map(sorted(y))\n                if (z != y) return false\n               \
    \ map(x) = y\n                map(sorted(y)) = i\n            }\n        }\n \
    \       return true", "        // Your code here\n        return true", "    \
    \    if (arr.isEmpty) return true\n        val sorted = arr.sorted\n        val\
    \ min = sorted.head\n        val max = sorted.last\n        val minIndex = arr.indexOf(min)\n\
    \        val maxIndex = arr.indexOf(max)\n        val minDistance = minIndex\n\
    \        val maxDistance = arr.length - maxIndex - 1\n        if (minDistance\
    \ == maxDistance) return true\n        if (minDistance > maxDistance) return false\n\
    \        val distance = maxDistance - minDistance\n        val minDistance2 =\
    \ arr.indexOf(min, minIndex + 1)\n        val maxDistance2 = arr.indexOf(max,\
    \ maxIndex + 1)\n        if (minDistance2 == -1 && maxDistance2 == -1) return\
    \ true\n        if (minDistance2 == -1) return false\n        if (maxDistance2\
    \ == -1) return false\n        val distance2 = maxDistance2 - minDistance2\n \
    \       if (distance2 == distance) return true\n        return false", "     \
    \   if (arr.length == 0) return true\n        var min = arr(0)\n        var max\
    \ = arr(0)\n        for (i <- 1 until arr.length) {\n            if (arr(i) <\
    \ min) min = arr(i)\n            if (arr(i) > max) max = arr(i)\n        }\n \
    \       if (max - min + 1 == arr.length) return true\n        return false", " \
    \       if (arr.length == 0) return true\n        var min = arr(0)\n        var\
    \ max = arr(0)\n        for (i <- 1 until arr.length) {\n            if (arr(i)\
    \ < min) min = arr(i)\n            if (arr(i) > max) max = arr(i)\n        }\n\
    \        if (min == 1 && max == arr.length) return true\n        return false",
  "        if (arr.isEmpty) return true\n        val n = arr.length\n        val sorted\
    \ = arr.sorted\n        val map = new HashMap[Long, Int]\n        for (i <- 0\
    \ until n) {\n            map(arr(i)) = i\n        }\n        var i = 0\n    \
    \    while (i < n) {\n            if (arr(i) != sorted(i)) {\n               \
    \ val j = map(sorted(i))\n                map(arr(i)) = j\n                map(sorted(i))\
    \ = i\n                val tmp = arr(i)\n                arr(i) = arr(j)\n   \
    \             arr(j) = tmp\n            }\n            i += 1\n        }\n   \
    \     arr == sorted", "        val n = arr.length\n        if (n == 0) return\
    \ true\n        val sortedArr = arr.sorted\n        val sortedArrSet = sortedArr.toSet\n\
    \        val arrSet = arr.toSet\n        if (sortedArrSet != arrSet) return false\n\
    \        var i = 0\n        while (i < n) {\n            if (arr(i) != sortedArr(i))\
    \ {\n                val j = sortedArr.indexOf(arr(i))\n                val k\
    \ = i + 1\n                if (k == n) return false\n                if (arr(k)\
    \ != sortedArr(j)) return false\n                val temp = arr(i)\n         \
    \       arr(i) = arr(k)\n                arr(k) = temp\n                i = 0\n\
    \            }\n            else i += 1\n        }\n        true", "        if\
    \ (arr.isEmpty) return true\n        val min = arr.min\n        val minIndex =\
    \ arr.indexOf(min)\n        val max = arr.max\n        val maxIndex = arr.indexOf(max)\n\
    \        val sorted = arr.sorted\n        if (arr == sorted) return true\n   \
    \     if (minIndex == 0) return false\n        if (maxIndex == arr.length - 1)\
    \ return false\n        if (minIndex == maxIndex) return false\n        if (minIndex\
    \ < maxIndex) {\n            if (arr(minIndex - 1) > max) return false\n     \
    \       if (arr(maxIndex + 1) < min) return false\n        }\n        else {\n\
    \            if (arr(maxIndex - 1) > max) return false\n            if (arr(minIndex\
    \ + 1) < min) return false\n        }\n        return true", "        if (arr.length\
    \ == 0) return true\n        val sorted = arr.sorted\n        val min = sorted.head\n\
    \        val max = sorted.last\n        val minIndex = arr.indexOf(min)\n    \
    \    val maxIndex = arr.indexOf(max)\n        if (minIndex == 0) {\n         \
    \   if (maxIndex == arr.length - 1) return true\n            else return false\n\
    \        }\n        else if (maxIndex == arr.length - 1) return false\n      \
    \  else {\n            val minIndex2 = arr.indexOf(min, minIndex + 1)\n      \
    \      val maxIndex2 = arr.indexOf(max, maxIndex + 1)\n            if (minIndex2\
    \ == -1 && maxIndex2 == -1) return true\n            else if (minIndex2 == -1)\
    \ return false\n            else if (maxIndex2 == -1) return false\n         \
    \   else {\n                if (minIndex2 < maxIndex2) return true\n         \
    \       else return false\n            }\n        }", "        if (arr.isEmpty)\
    \ return true\n        val n = arr.length\n        val max = arr.max\n       \
    \ val min = arr.min\n        val maxIndex = arr.indexOf(max)\n        val minIndex\
    \ = arr.indexOf(min)\n        if (maxIndex == n - 1) {\n            if (minIndex\
    \ == 0) return true\n            else return false\n        }\n        else {\n\
    \            if (minIndex == 0) return true\n            else return false\n \
    \       }", "        val n = arr.length\n        if (n == 0) return true\n   \
    \     val sorted = arr.sorted\n        var i = 0\n        while (i < n) {\n  \
    \          if (arr(i) != sorted(i)) {\n                var j = i + 1\n       \
    \         while (j < n) {\n                    if (arr(j) == sorted(i)) {\n  \
    \                      val temp = arr(j)\n                        arr(j) = arr(i)\n\
    \                        arr(i) = temp\n                        return true\n\
    \                    }\n                    j += 1\n                }\n      \
    \          return false\n            }\n            i += 1\n        }\n      \
    \  true", "        if (arr.isEmpty) return true\n        val sorted = arr.sorted\n\
    \        val min = sorted.head\n        val max = sorted.last\n        val minIndex\
    \ = arr.indexOf(min)\n        val maxIndex = arr.indexOf(max)\n        if (minIndex\
    \ == 0 && maxIndex == arr.length - 1) return true\n        if (minIndex == 0)\
    \ return false\n        if (maxIndex == arr.length - 1) return false\n       \
    \ if (minIndex > maxIndex) return false\n        if (minIndex == maxIndex) return\
    \ false\n        return true", "        if (arr.isEmpty) return true\n       \
    \ var min = arr.min\n        var max = arr.max\n        var minIndex = arr.indexOf(min)\n\
    \        var maxIndex = arr.indexOf(max)\n        var minIndexes = List[Int]()\n\
    \        var maxIndexes = List[Int]()\n        for (i <- 0 until arr.length) {\n\
    \            if (arr(i) == min) minIndexes = minIndexes :+ i\n            if (arr(i)\
    \ == max) maxIndexes = maxIndexes :+ i\n        }\n        if (minIndexes.length\
    \ == 1 && maxIndexes.length == 1) {\n            if (minIndex < maxIndex) return\
    \ true\n            else return false\n        }\n        if (minIndexes.length\
    \ == 1) {\n            var maxIndexesSorted = maxIndexes.sorted\n            var\
    \ maxIndexesSortedLength = maxIndexesSorted.length\n            var maxIndexesSortedLast\
    \ = maxIndexesSorted(maxIndexesSortedLength - 1)\n            var maxIndexesSortedFirst\
    \ = maxIndexesSorted(0)\n            if (minIndex < maxIndexesSortedLast && minIndex\
    \ > maxIndexesSortedFirst) return true\n            else return false\n      \
    \  }\n        if (maxIndexes.length == 1) {\n            var minIndexesSorted\
    \ = minIndexes.sorted\n            var minIndexesSortedLength = minIndexesSorted.length\n\
    \            var minIndexesSortedLast = minIndexesSorted(minIndexesSortedLength\
    \ - 1)\n            var minIndexesSortedFirst = minIndexesSorted(0)\n        \
    \    if (maxIndex > minIndexesSortedFirst && maxIndex < minIndexesSortedLast)\
    \ return true\n            else return false\n        }\n        return false",
  "        if (arr.length == 0) return true\n        val sorted = arr.sorted\n   \
    \     val min = sorted.head\n        val max = sorted.last\n        val minIndex\
    \ = arr.indexOf(min)\n        val maxIndex = arr.indexOf(max)\n        if (minIndex\
    \ == 0) {\n            if (maxIndex == arr.length - 1) return true\n         \
    \   else return false\n        }\n        else if (maxIndex == arr.length - 1)\
    \ return false\n        else return true", "        if (arr.length == 0) return\
    \ true\n        val sorted = arr.sorted\n        val min = sorted.head\n     \
    \   val max = sorted.last\n        val minIndex = arr.indexOf(min)\n        val\
    \ maxIndex = arr.indexOf(max)\n        if (minIndex == 0 && maxIndex == arr.length\
    \ - 1) return true\n        if (minIndex == 0) return false\n        if (maxIndex\
    \ == arr.length - 1) return false\n        if (minIndex < maxIndex) return false\n\
    \        return true", "        if (arr.length == 0) return true\n        val\
    \ sorted = arr.sorted\n        val min = sorted.head\n        val max = sorted.last\n\
    \        val minIndex = arr.indexOf(min)\n        val maxIndex = arr.indexOf(max)\n\
    \        if (minIndex == 0) return true\n        if (maxIndex == arr.length -\
    \ 1) return true\n        if (minIndex == maxIndex) return true\n        if (minIndex\
    \ > maxIndex) return true\n        return false", "        if (arr.isEmpty) return\
    \ true\n        var max = arr(0)\n        for (i <- 1 until arr.length) {\n  \
    \          if (arr(i) < max) return false\n            else max = arr(i)\n   \
    \     }\n        return true", "        val n = arr.length\n        if (n == 0)\
    \ return true\n        val a = arr.toArray\n        val dp = Array.fill(n)(0)\n\
    \        for (i <- 0 until n) {\n            dp(i) = 1\n            for (j <-\
    \ 0 until i) {\n                if (a(j) <= a(i)) dp(i) = max(dp(i), dp(j) + 1)\n\
    \            }\n        }\n        dp.max >= n", "        if (arr.length == 0)\
    \ return true\n        val sorted = arr.sorted\n        for (i <- 0 until arr.length)\
    \ {\n            val shifted = arr.slice(i, arr.length) ++ arr.slice(0, i)\n \
    \           if (shifted == sorted) return true\n        }\n        return false",
  "        val n = arr.length\n        if (n == 0) return true\n        val a = arr.toArray\n\
    \        var i = 0\n        while (i < n - 1) {\n            if (a(i) > a(i +\
    \ 1)) {\n                var j = i + 1\n                while (j < n && a(j) <\
    \ a(j - 1)) j += 1\n                if (j == n) return false\n               \
    \ else {\n                    val tmp = a(j)\n                    for (k <- j\
    \ - 1 to i by -1) a(k + 1) = a(k)\n                    a(i) = tmp\n          \
    \      }\n            }\n            i += 1\n        }\n        true", "     \
    \   if (arr.length == 0) return true\n        var min = arr(0)\n        var max\
    \ = arr(0)\n        for (i <- 1 until arr.length) {\n            if (arr(i) <\
    \ min) min = arr(i)\n            if (arr(i) > max) max = arr(i)\n        }\n \
    \       if (min == max) return true\n        var count = 0\n        for (i <-\
    \ 0 until arr.length) {\n            if (arr(i) == min) count += 1\n        }\n\
    \        if (count == arr.length) return true\n        return false", "      \
    \  val n = arr.length\n        if (n == 0) return true\n        var min = arr(0)\n\
    \        var max = arr(0)\n        for (i <- 1 until n) {\n            min = min\
    \ min arr(i)\n            max = max max arr(i)\n        }\n        if (min ==\
    \ 1 && max == n) return true\n        return false", "        val n = arr.length\n\
    \        if (n == 0) return true\n        val sorted = arr.sorted\n        var\
    \ i = 0\n        while (i < n) {\n            if (arr(i) != sorted(i)) return\
    \ false\n            i += 1\n        }\n        return true", "        if (arr.length\
    \ == 0) return true\n        var min = arr(0)\n        var max = arr(0)\n    \
    \    var minIndex = 0\n        var maxIndex = 0\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) < min) {\n                min = arr(i)\n         \
    \       minIndex = i\n            }\n            if (arr(i) > max) {\n       \
    \         max = arr(i)\n                maxIndex = i\n            }\n        }\n\
    \        if (minIndex == 0) return true\n        if (maxIndex == arr.length -\
    \ 1) return true\n        if (maxIndex == minIndex + 1) return true\n        return\
    \ false", "        if (arr.length == 0) return true\n        var min = arr(0)\n\
    \        for (i <- 1 until arr.length) {\n            if (arr(i) < min) return\
    \ false\n            min = min min arr(i)\n        }\n        return true", " \
    \       if (arr.isEmpty) return true\n        var count = 0\n        for (i <-\
    \ 0 until arr.length - 1) {\n            if (arr(i) > arr(i + 1)) count += 1\n\
    \        }\n        if (count > 1) return false\n        return true"]
stop_tokens:
- "\n    }\n"
