name: HumanEval_58_common
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong,\
  \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
  \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n    //\
  \ (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n    //\
  \ (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 : List[Long])\
  \ : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(common((List[Long](1l.toLong,\
  \ 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong,\
  \ 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong))).equals((List[Long](1l.toLong,\
  \ 5l.toLong, 653l.toLong))));\n    assert(common((List[Long](5l.toLong, 3l.toLong,\
  \ 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong))).equals((List[Long](2l.toLong,\
  \ 3l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong, 2l.toLong,\
  \ 8l.toLong)), (List[Long](3l.toLong, 2l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
  \ 3l.toLong, 4l.toLong))));\n    assert(common((List[Long](4l.toLong, 3l.toLong,\
  \ 2l.toLong, 8l.toLong)), (List[Long]())).equals((List[Long]())));\n    }\n\n}\n"
completions: ["        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 &\
    \ s2).toList.sorted", "        var l = List[Long]()\n        var i = 0\n     \
    \   var j = 0\n        while (i < l1.length && j < l2.length) {\n            if\
    \ (l1(i) == l2(j)) {\n                l = l :+ l1(i)\n                i += 1\n\
    \                j += 1\n            } else if (l1(i) < l2(j)) {\n           \
    \     i += 1\n            } else {\n                j += 1\n            }\n  \
    \      }\n        return l", "        val l3 = l1.intersect(l2)\n        l3.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        val s3 = s1.intersect(s2)\n\
    \        s3.toList.sorted", "        val set1 = l1.toSet\n        val set2 = l2.toSet\n\
    \        val set3 = set1.intersect(set2)\n        set3.toList.sorted", "     \
    \   var l = List[Long]()\n        var i = 0\n        var j = 0\n        while\
    \ (i < l1.length && j < l2.length) {\n            if (l1(i) == l2(j)) {\n    \
    \            l = l :+ l1(i)\n                i += 1\n                j += 1\n\
    \            } else if (l1(i) < l2(j)) {\n                i += 1\n           \
    \ } else {\n                j += 1\n            }\n        }\n        return l",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted",
  "        var l = List[Long]()\n        for (i <- l1) {\n            if (l2.contains(i))\
    \ {\n                l = l :+ i\n            }\n        }\n        return l.sorted.distinct",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        val s3 = s1.intersect(s2)\n\
    \        s3.toList.sorted", "        val l1s = l1.sorted\n        val l2s = l2.sorted\n\
    \        var i = 0\n        var j = 0\n        var result = List[Long]()\n   \
    \     while (i < l1s.length && j < l2s.length) {\n            if (l1s(i) == l2s(j))\
    \ {\n                result = l1s(i) :: result\n                i += 1\n     \
    \           j += 1\n            } else if (l1s(i) < l2s(j)) {\n              \
    \  i += 1\n            } else {\n                j += 1\n            }\n     \
    \   }\n        result.reverse", "        val set1 = l1.toSet\n        val set2\
    \ = l2.toSet\n        (set1 & set2).toList.sorted", "        val l1s = l1.sorted\n\
    \        val l2s = l2.sorted\n        var i = 0\n        var j = 0\n        var\
    \ result = List[Long]()\n        while (i < l1s.length && j < l2s.length) {\n\
    \            if (l1s(i) == l2s(j)) {\n                result = result :+ l1s(i)\n\
    \                i += 1\n                j += 1\n            } else if (l1s(i)\
    \ < l2s(j)) {\n                i += 1\n            } else {\n                j\
    \ += 1\n            }\n        }\n        result", "        val s1 = l1.toSet\n\
    \        val s2 = l2.toSet\n        (s1 & s2).toList.sorted", '        l1.intersect(l2).sorted',
  "        val set1 = l1.toSet\n        val set2 = l2.toSet\n        val set3 = set1.intersect(set2)\n\
    \        set3.toList.sorted", "        val l = l1.intersect(l2)\n        l.sorted",
  "        val l = l1.intersect(l2)\n        l.sorted", "        val s = new HashSet[Long]\n\
    \        for (i <- l1) s += i\n        for (i <- l2) s += i\n        s.toList.sorted",
  "        val s1 = l1.toSet\n        val s2 = l2.toSet\n        (s1 & s2).toList.sorted"]
stop_tokens:
- "\n    }\n"
