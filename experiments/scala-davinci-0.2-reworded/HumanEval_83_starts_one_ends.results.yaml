language: scala
name: HumanEval_83_starts_one_ends
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        // The number of n-digit positive integers that start\
    \ with 1 is\n        // 9 * 10 ^ (n - 1)\n        // The number of n-digit positive\
    \ integers that end with 1 is\n        // 10 ^ (n - 1)\n        // The number\
    \ of n-digit positive integers that start and end with 1 is\n        // 9 * 10\
    \ ^ (n - 2)\n        // The number of n-digit positive integers that start or\
    \ end with 1 is\n        // 9 * 10 ^ (n - 1) + 10 ^ (n - 1) - 9 * 10 ^ (n - 2)\n\
    \        9 * pow(10, n - 1).toLong + pow(10, n - 1).toLong - 9 * pow(10, n - 2).toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3x_ex13q.scala:18)\n\tat Problem.main(tmp3x_ex13q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:8:35\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m, \e[31m2\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                                   ^^^^^\e[0m\n\e[31m  |\e[0m       \
    \                            Found:    Long\n\e[31m  |\e[0m                  \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpphl9ghoc.scala:11:23 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:11 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m           ^\e[0m\n\e[31m   |\e[0m           Found:    (n :\
    \ Long)\n\e[31m   |\e[0m           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxymu46n2.scala:18)\n\tat Problem.main(tmpxymu46n2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        if (n == 2) return 4\n\
    \        if (n == 3) return 8\n        var count = 0\n        for (i <- 1 to 9)\
    \ {\n            count += pow(10, n - 2).toLong\n        }\n        count\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) ==\
    \ (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk1qoxa7s.scala:12:18 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            count += pow(\e[31m10\e[0m, n - \e[31m2\e\
    [0m).toLong\n\e[31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \           value += is not a member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxymu46n2.scala:18)\n\tat Problem.main(tmpxymu46n2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var count = 0L\n        for (i <- 1 to 9) {\n    \
    \        count += pow(10, n - 1).toLong\n        }\n        count\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n\
    \    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) ==\
    \ (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbl1b0fk3.scala:14)\n\tat Problem.main(tmpbl1b0fk3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:8:35\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m, \e[31m2\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                                   ^^^^^\e[0m\n\e[31m  |\e[0m       \
    \                            Found:    Long\n\e[31m  |\e[0m                  \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpphl9ghoc.scala:11:23 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:11 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m           ^\e[0m\n\e[31m   |\e[0m           Found:    (n :\
    \ Long)\n\e[31m   |\e[0m           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val m = pow(10, n -\
    \ 1).toLong\n        val p = pow(10, n).toLong\n        val q = pow(10, n - 2).toLong\n\
    \        val r = pow(10, n - 1).toLong\n        return (p - m) + (r - q)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) ==\
    \ (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1qy4blo9.scala:15)\n\tat Problem.main(tmp1qy4blo9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 2\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) * 9 + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n        }\n        dp(n)(0) + dp(n)(1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n\
    \    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) ==\
    \ (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy3yry3aq.scala:8:35\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m, \e[31m2\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                                   ^^^^^\e[0m\n\e[31m  |\e[0m       \
    \                            Found:    Long\n\e[31m  |\e[0m                  \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpy3yry3aq.scala:11:23 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy3yry3aq.scala:15:11 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m           ^\e[0m\n\e[31m   |\e[0m           Found:    (n :\
    \ Long)\n\e[31m   |\e[0m           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpy3yry3aq.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiht1xwwk.scala:18)\n\tat Problem.main(tmpiht1xwwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 9\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) * 10 - dp(i - 1)(1)\n            dp(i)(1) =\
    \ dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n\
    \    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) ==\
    \ (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa_4gztdc.scala:17)\n\tat Problem.main(tmpa_4gztdc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        var count = 0\n    \
    \    for (i <- 1 to 9) {\n            val s = i.toString\n            val t =\
    \ (i + 1).toString\n            val u = (i - 1).toString\n            if (i !=\
    \ 9) count += s.toLong * pow(10, n - 1).toLong\n            if (i != 1) count\
    \ += u.toLong * pow(10, n - 1).toLong\n            count += t.toLong * pow(10,\
    \ n - 2).toLong\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu5gxut_i.scala:13:30 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (i != \e[31m9\e[0m) count +=\
    \ s.toLong * pow(\e[31m10\e[0m, n - \e[31m1\e[0m).toLong\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m                  value\
    \ += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpu5gxut_i.scala:14:30 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m            \e[33mif\e[0m (i != \e[31m1\e[0m) count += u.toLong\
    \ * pow(\e[31m10\e[0m, n - \e[31m1\e[0m).toLong\n\e[31m\e[31m   |\e[0m       \
    \                 ^^^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is\
    \ not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpu5gxut_i.scala:15:18 ------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m            count += t.toLong * pow(\e[31m10\e[0m, n - \e[31m2\e[0m).toLong\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxymu46n2.scala:18)\n\tat Problem.main(tmpxymu46n2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxymu46n2.scala:18)\n\tat Problem.main(tmpxymu46n2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiht1xwwk.scala:18)\n\tat Problem.main(tmpiht1xwwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) 1\n        else if (n == 2) 21\n     \
    \   else {\n            val dp = Array.fill(n.toInt + 1)(0L)\n            dp(1)\
    \ = 1\n            dp(2) = 21\n            for (i <- 3 to n.toInt) {\n       \
    \         dp(i) = dp(i - 1) * 9 + dp(i - 2) * 10\n            }\n            dp(n.toInt)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3nrzu7_g.scala:21)\n\tat Problem.main(tmp3nrzu7_g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        if (n == 2) return 3\n\
    \        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = 2\n        dp(2)\
    \ = 3\n        for (i <- 3 to n.toInt) {\n            dp(i) = dp(i - 1) + dp(i\
    \ - 2)\n        }\n        dp(n.toInt)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvz51l73k.scala:18)\n\tat Problem.main(tmpvz51l73k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        if (n == 2) return 4\n\
    \        var a = 2\n        var b = 4\n        for (i <- 3 to n.toInt) {\n   \
    \         val c = a + b\n            a = b\n            b = c\n        }\n   \
    \     b\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd9t0rxh8.scala:19)\n\tat Problem.main(tmpd9t0rxh8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiht1xwwk.scala:18)\n\tat Problem.main(tmpiht1xwwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxymu46n2.scala:18)\n\tat Problem.main(tmpxymu46n2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiht1xwwk.scala:18)\n\tat Problem.main(tmpiht1xwwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        if (n == 2) return 4\n\
    \        if (n == 3) return 7\n        if (n == 4) return 13\n        if (n ==\
    \ 5) return 24\n        if (n == 6) return 44\n        if (n == 7) return 81\n\
    \        if (n == 8) return 149\n        if (n == 9) return 274\n        if (n\
    \ == 10) return 504\n        if (n == 11) return 927\n        if (n == 12) return\
    \ 1705\n        if (n == 13) return 3136\n        if (n == 14) return 5768\n \
    \       if (n == 15) return 10609\n        if (n == 16) return 19513\n       \
    \ if (n == 17) return 35890\n        if (n == 18) return 66012\n        if (n\
    \ == 19) return 121415\n        if (n == 20) return 223317\n        if (n == 21)\
    \ return 410744\n        if (n == 22) return 755476\n        if (n == 23) return\
    \ 1389537\n        if (n == 24) return 2555757\n        if (n == 25) return 4700770\n\
    \        if (n == 26) return 8646064\n        if (n == 27) return 15902591\n \
    \       if (n == 28) return 29249425\n        if (n == 29) return 53798080\n \
    \       if (n == 30) return 98950096\n        if (n == 31) return 181997601\n\
    \        if (n == 32) return 334745777\n        if (n == 33) return 615693474\n\
    \        if (n == 34) return 1132436852\n        if (n == 35) return 2082876103\n\
    \        if (n == 36) return 3831006429\n        if (n == 37) return 7046314174\n\
    \        if (n == 38) return 12964479050\n        if (n == 39) return 23925712455\n\
    \        if (n == 40) return 44134970889\n        if (n == 41) return 81294404218\n\
    \        if (n == 42) return 150052053692\n        if (n == 43) return 277348082\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiv4_b3zj.scala:49:8\
    \ ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m        \e[33mif\e[0m (n ==\
    \ \e[31m43\e[0m) \e[33mreturn\e[0m \e[31m277348082\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:   \
    \ Unit\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m        Maybe you\
    \ are missing an else part for the conditional?\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798343
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 1\n        if (n == 2) return 10\n\
    \        var count = 0\n        for (i <- 1 to 9) {\n            count += pow(10,\
    \ n - 2).toLong\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp50atjat6.scala:11:18 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            count += pow(\e[31m10\e[0m, n - \e[31m2\e\
    [0m).toLong\n\e[31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \           value += is not a member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798345
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        var count = 0\n    \
    \    for (i <- 1 to 9) {\n            var num = i\n            for (j <- 1 to\
    \ n - 1) {\n                num *= 10\n                num += i\n            }\n\
    \            count += num\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1he9vm3v.scala:11:27\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m            \e[33mfor\e[0m (j\
    \ <- \e[31m1\e[0m to n - \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m              \
    \             ^^^^^\e[0m\n\e[31m   |\e[0m                           Found:   \
    \ Long\n\e[31m   |\e[0m                           Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659798345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = new Array[Long](n.toInt + 1)\n        dp(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i) = dp(i - 1) * 10 -\
    \ dp(i - 2)\n        }\n        dp(n.toInt)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm7vdjnj3.scala:16)\n\tat Problem.main(tmpm7vdjnj3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0)\
    \ = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n)(0) + dp(n)(1)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n\
    \    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) ==\
    \ (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa9y53br3.scala:7:35\
    \ ---------------------\e[0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m, \e[31m2\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                                   ^^^^^\e[0m\n\e[31m  |\e[0m       \
    \                            Found:    Long\n\e[31m  |\e[0m                  \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpa9y53br3.scala:10:23 --------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa9y53br3.scala:14:11 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m           ^\e[0m\n\e[31m   |\e[0m           Found:    (n :\
    \ Long)\n\e[31m   |\e[0m           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpa9y53br3.scala:14:22 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:8:35\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m, \e[31m2\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                                   ^^^^^\e[0m\n\e[31m  |\e[0m       \
    \                            Found:    Long\n\e[31m  |\e[0m                  \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpphl9ghoc.scala:11:23 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:11 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m           ^\e[0m\n\e[31m   |\e[0m           Found:    (n :\
    \ Long)\n\e[31m   |\e[0m           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        if (n == 2) return 4\n\
    \        var count = 0L\n        for (i <- 1 to 9) {\n            count += pow(10,\
    \ n - 1).toLong\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8pieumqr.scala:16)\n\tat Problem.main(tmp8pieumqr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxymu46n2.scala:18)\n\tat Problem.main(tmpxymu46n2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxymu46n2.scala:18)\n\tat Problem.main(tmpxymu46n2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 9\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) * 10 - dp(i - 1)(1)\n            dp(i)(1) =\
    \ dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n\
    \    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) ==\
    \ (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa_4gztdc.scala:17)\n\tat Problem.main(tmpa_4gztdc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiht1xwwk.scala:18)\n\tat Problem.main(tmpiht1xwwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxymu46n2.scala:18)\n\tat Problem.main(tmpxymu46n2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0)\
    \ = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n)(0) + dp(n)(1)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n\
    \    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) ==\
    \ (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa9y53br3.scala:7:35\
    \ ---------------------\e[0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m, \e[31m2\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                                   ^^^^^\e[0m\n\e[31m  |\e[0m       \
    \                            Found:    Long\n\e[31m  |\e[0m                  \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpa9y53br3.scala:10:23 --------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa9y53br3.scala:14:11 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m           ^\e[0m\n\e[31m   |\e[0m           Found:    (n :\
    \ Long)\n\e[31m   |\e[0m           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpa9y53br3.scala:14:22 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        if (n == 2) return 3\n\
    \        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = 2\n        dp(2)\
    \ = 3\n        for (i <- 3 to n.toInt) {\n            dp(i) = dp(i - 1) + dp(i\
    \ - 2)\n        }\n        dp(n.toInt)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvz51l73k.scala:18)\n\tat Problem.main(tmpvz51l73k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:8:35\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m, \e[31m2\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                                   ^^^^^\e[0m\n\e[31m  |\e[0m       \
    \                            Found:    Long\n\e[31m  |\e[0m                  \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpphl9ghoc.scala:11:23 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:11 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m           ^\e[0m\n\e[31m   |\e[0m           Found:    (n :\
    \ Long)\n\e[31m   |\e[0m           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiht1xwwk.scala:18)\n\tat Problem.main(tmpiht1xwwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiht1xwwk.scala:18)\n\tat Problem.main(tmpiht1xwwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiht1xwwk.scala:18)\n\tat Problem.main(tmpiht1xwwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        var count = 0L\n   \
    \     for (i <- 1 to n) {\n            count += pow(10, i - 1).toLong\n      \
    \  }\n        count * 2\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy81x0q4a.scala:9:23\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m  |\e[0m                       ^\e[0m\n\e\
    [31m  |\e[0m                       Found:    (n : Long)\n\e[31m  |\e[0m      \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val mod = 1000000007L\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = (dp(i - 1)(0) * 10 + dp(i - 1)(1)) % mod\n\
    \            dp(i)(1) = (dp(i - 1)(0) + dp(i - 1)(1)) % mod\n        }\n     \
    \   (dp(n.toInt)(0) + dp(n.toInt)(1)) % mod\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgudq_3n8.scala:19)\n\tat Problem.main(tmpgudq_3n8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 2\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) * 9 + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n        }\n        dp(n)(0) + dp(n)(1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n\
    \    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) ==\
    \ (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy3yry3aq.scala:8:35\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m, \e[31m2\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                                   ^^^^^\e[0m\n\e[31m  |\e[0m       \
    \                            Found:    Long\n\e[31m  |\e[0m                  \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpy3yry3aq.scala:11:23 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy3yry3aq.scala:15:11 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m           ^\e[0m\n\e[31m   |\e[0m           Found:    (n :\
    \ Long)\n\e[31m   |\e[0m           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpy3yry3aq.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        if (n == 2) return 3\n\
    \        var result = 0L\n        for (i <- 1 to 9) {\n            var temp =\
    \ i\n            for (j <- 1 to n - 2) {\n                temp *= 10\n       \
    \         temp += 9\n            }\n            temp *= 10\n            temp +=\
    \ i\n            result += temp\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_yhar2ok.scala:12:27\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (j\
    \ <- \e[31m1\e[0m to n - \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m              \
    \             ^^^^^\e[0m\n\e[31m   |\e[0m                           Found:   \
    \ Long\n\e[31m   |\e[0m                           Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:8:35\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m, \e[31m2\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                                   ^^^^^\e[0m\n\e[31m  |\e[0m       \
    \                            Found:    Long\n\e[31m  |\e[0m                  \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpphl9ghoc.scala:11:23 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:11 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m           ^\e[0m\n\e[31m   |\e[0m           Found:    (n :\
    \ Long)\n\e[31m   |\e[0m           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        if (n == 2) return 3\n\
    \        if (n == 3) return 5\n        if (n == 4) return 8\n        if (n ==\
    \ 5) return 13\n        if (n == 6) return 21\n        if (n == 7) return 34\n\
    \        if (n == 8) return 55\n        if (n == 9) return 89\n        if (n ==\
    \ 10) return 144\n        if (n == 11) return 233\n        if (n == 12) return\
    \ 377\n        if (n == 13) return 610\n        if (n == 14) return 987\n    \
    \    if (n == 15) return 1597\n        if (n == 16) return 2584\n        if (n\
    \ == 17) return 4181\n        if (n == 18) return 6765\n        if (n == 19) return\
    \ 10946\n        if (n == 20) return 17711\n        if (n == 21) return 28657\n\
    \        if (n == 22) return 46368\n        if (n == 23) return 75025\n      \
    \  if (n == 24) return 121393\n        if (n == 25) return 196418\n        if\
    \ (n == 26) return 317811\n        if (n == 27) return 514229\n        if (n ==\
    \ 28) return 832040\n        if (n == 29) return 1346269\n        if (n == 30)\
    \ return 2178309\n        if (n == 31) return 3524578\n        if (n == 32) return\
    \ 5702887\n        if (n == 33) return 9227465\n        if (n == 34) return 14930352\n\
    \        if (n == 35) return 24157817\n        if (n == 36) return 39088169\n\
    \        if (n == 37) return 63245986\n        if (n == 38) return 102334155\n\
    \        if (n == 39) return 165580141\n        if (n == 40) return 267914296\n\
    \        if (n == 41) return 433494437\n        if (n == 42) return 701408733\n\
    \        if (n == 43) return 1134903170\n        if (n == 44) return 1836311903\n\
    \        if (n == 45) return 297\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n\
    \    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) ==\
    \ (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_kd_pxbe.scala:51:8\
    \ ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m        \e[33mif\e[0m (n ==\
    \ \e[31m45\e[0m) \e[33mreturn\e[0m \e[31m297\e[0m\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m\
    \   |\e[0m        Required: Long\n\e[31m   |\e[0m        Maybe you are missing\
    \ an else part for the conditional?\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        if (n == 2) return 4\n\
    \        var result = 0L\n        for (i <- 1 to 9) {\n            result += pow(10,\
    \ n - 1).toLong\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmj32me0.scala:16)\n\tat Problem.main(tmphmj32me0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798356
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:8:35\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m, \e[31m2\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                                   ^^^^^\e[0m\n\e[31m  |\e[0m       \
    \                            Found:    Long\n\e[31m  |\e[0m                  \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpphl9ghoc.scala:11:23 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:11 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m           ^\e[0m\n\e[31m   |\e[0m           Found:    (n :\
    \ Long)\n\e[31m   |\e[0m           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        var count = 0\n    \
    \    for (i <- 1 to 9) {\n            val x = pow(10, n - 1).toLong\n        \
    \    val y = pow(10, n - 2).toLong\n            count += (x - y) * 2\n       \
    \ }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc_yseso_.scala:12:18 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            count += (x - y) * \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is\
    \ not a member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        // The number of n-digit positive integers that start\
    \ with 1 is\n        // 10^(n-1). The number of n-digit positive integers that\
    \ end with 1 is\n        // 9 * 10^(n-2).\n        10L * pow(10, n - 1).toLong\
    \ - 9L * pow(10, n - 2).toLong\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n\
    \    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) ==\
    \ (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphi7avjk_.scala:13)\n\tat Problem.main(tmphi7avjk_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798356
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt,\
    \ 2)\n        dp(0)(0) = 1\n        dp(0)(1) = 1\n        for (i <- 1 until n.toInt)\
    \ {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n.toInt - 1)(0) + dp(n.toInt - 1)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2x_y3eh_.scala:18)\n\tat Problem.main(tmp2x_y3eh_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        if (n == 2) return 4\n\
    \        var result = 0L\n        for (i <- 1 to n) {\n            result += pow(10,\
    \ i - 1).toLong\n        }\n        result * 2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiz8nyvze.scala:10:23\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798356
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:8:35\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m, \e[31m2\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                                   ^^^^^\e[0m\n\e[31m  |\e[0m       \
    \                            Found:    Long\n\e[31m  |\e[0m                  \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpphl9ghoc.scala:11:23 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:11 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m           ^\e[0m\n\e[31m   |\e[0m           Found:    (n :\
    \ Long)\n\e[31m   |\e[0m           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        // The number of n-digit positive integers that start\
    \ or end with 1 is\n        // equal to the number of n-digit positive integers\
    \ that start with 1\n        // minus the number of n-digit positive integers\
    \ that start with 1 and\n        // end with 0.\n        // The number of n-digit\
    \ positive integers that start with 1 is equal\n        // to the number of (n\
    \ - 1)-digit positive integers that start with 1\n        // plus the number of\
    \ (n - 1)-digit positive integers that start with 1\n        // and end with 0.\n\
    \        // The number of n-digit positive integers that start with 1 and end\n\
    \        // with 0 is equal to the number of (n - 2)-digit positive integers\n\
    \        // that start with 1.\n        // Therefore, the number of n-digit positive\
    \ integers that start or end\n        // with 1 is equal to the number of (n -\
    \ 1)-digit positive integers that\n        // start with 1 plus the number of\
    \ (n - 1)-digit positive integers that\n        // start with 1 and end with 0\
    \ minus the number of (n - 2)-digit\n        // positive integers that start with\
    \ 1.\n        // The base case is n = 1, in which case the number of 1-digit positive\n\
    \        // integers that start or end with 1 is 1.\n        // The base case\
    \ is n = 2, in which case the number of 2-digit positive\n        // integers\
    \ that start or end with 1 is 10.\n        // The base case is n = 3, in which\
    \ case the number of 3-digit positive\n        // integers that start or end with\
    \ 1 is 100.\n        // The base case is n = 4, in which case the number of 4-digit\
    \ positive\n        // integers that start or end with 1 is 1000.\n        //\
    \ The base case is n = 5, in which case the number of 5-digit positive\n     \
    \   // integers that start or end with 1 is 10000.\n        // The base case is\
    \ n = 6, in which case the number of 6-digit positive\n        // integers that\
    \ start or end with 1 is 100000.\n        // The base case is n = 7, in which\
    \ case the number of 7-digit positive\n        // integers that start or end with\
    \ 1 is 1000000.\n        // The base case is n = 8, in which case the number of\
    \ 8-digit\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp937la5kv.scala:6:41\
    \ ---------------------\e[0m\e[0m\n\e[31m 6 |\e[0m    \e[33mdef\e[0m \e[36mstartsOneEnds\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m 7 |\e[0m        \e[34m// The\
    \ number of n-digit positive integers that start or end with 1 is\e[0m\n\e[31m\
    \ 8 |\e[0m        \e[34m// equal to the number of n-digit positive integers that\
    \ start with 1\e[0m\n\e[31m 9 |\e[0m        \e[34m// minus the number of n-digit\
    \ positive integers that start with 1 and\e[0m\n\e[31m10 |\e[0m        \e[34m//\
    \ end with 0.\e[0m\n\e[31m11 |\e[0m        \e[34m// The number of n-digit positive\
    \ integers that start with 1 is equal\e[0m\n\e[31m12 |\e[0m        \e[34m// to\
    \ the number of (n - 1)-digit positive integers that start with 1\e[0m\n\e[31m13\
    \ |\e[0m        \e[34m// plus the number of (n - 1)-digit positive integers that\
    \ start with 1\e[0m\n\e[31m14 |\e[0m        \e[34m// and end with 0.\e[0m\n\e\
    [31m15 |\e[0m        \e[34m// The number of n-digit positive integers that start\
    \ with 1 and end\e[0m\n\e[31m16 |\e[0m        \e[34m// with 0 is equal to the\
    \ number of (n - 2)-digit positive integers\e[0m\n\e[31m17 |\e[0m        \e[34m//\
    \ that start with 1.\e[0m\n\e[31m18 |\e[0m        \e[34m// Therefore, the number\
    \ of n-digit positive integers that start or end\e[0m\n\e[31m19 |\e[0m       \
    \ \e[34m// with 1 is equal to the number of (n - 1)-digit positive integers that\e\
    [0m\n\e[31m20 |\e[0m        \e[34m// start with 1 plus the number of (n - 1)-digit\
    \ positive integers that\e[0m\n\e[31m21 |\e[0m        \e[34m// start with 1 and\
    \ end with 0 minus the number of (n - 2)-digit\e[0m\n\e[31m22 |\e[0m        \e\
    [34m// positive integers that start with 1.\e[0m\n\e[31m23 |\e[0m        \e[34m//\
    \ The base case is n = 1, in which case the number of 1-digit positive\e[0m\n\e\
    [31m24 |\e[0m        \e[34m// integers that start or end with 1 is 1.\e[0m\n\e\
    [31m25 |\e[0m        \e[34m// The base case is n = 2"
  stdout: ''
  timestamp: 1659798355
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxymu46n2.scala:18)\n\tat Problem.main(tmpxymu46n2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:8:35\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m, \e[31m2\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                                   ^^^^^\e[0m\n\e[31m  |\e[0m       \
    \                            Found:    Long\n\e[31m  |\e[0m                  \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpphl9ghoc.scala:11:23 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:11 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m           ^\e[0m\n\e[31m   |\e[0m           Found:    (n :\
    \ Long)\n\e[31m   |\e[0m           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        if (n == 2) return 3\n\
    \        var count = 1\n        for (i <- 1 to n - 1) {\n            count *=\
    \ 10\n            count += 1\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjg9iib9_.scala:10:23\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n - \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798357
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxymu46n2.scala:18)\n\tat Problem.main(tmpxymu46n2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        if (n == 2) return 4\n\
    \        if (n == 3) return 8\n        if (n == 4) return 16\n        if (n ==\
    \ 5) return 32\n        if (n == 6) return 64\n        if (n == 7) return 128\n\
    \        if (n == 8) return 256\n        if (n == 9) return 512\n        if (n\
    \ == 10) return 1024\n        if (n == 11) return 2048\n        if (n == 12) return\
    \ 4096\n        if (n == 13) return 8192\n        if (n == 14) return 16384\n\
    \        if (n == 15) return 32768\n        if (n == 16) return 65536\n      \
    \  if (n == 17) return 131072\n        if (n == 18) return 262144\n        if\
    \ (n == 19) return 524288\n        if (n == 20) return 1048576\n        if (n\
    \ == 21) return 2097152\n        if (n == 22) return 4194304\n        if (n ==\
    \ 23) return 8388608\n        if (n == 24) return 16777216\n        if (n == 25)\
    \ return 33554432\n        if (n == 26) return 67108864\n        if (n == 27)\
    \ return 134217728\n        if (n == 28) return 268435456\n        if (n == 29)\
    \ return 536870912\n        if (n == 30) return 1073741824\n        if (n == 31)\
    \ return 2147483648L\n        if (n == 32) return 4294967296L\n        if (n ==\
    \ 33) return 8589934592L\n        if (n == 34) return 17179869184L\n        if\
    \ (n == 35) return 34359738368L\n        if (n == 36) return 68719476736L\n  \
    \      if (n == 37) return 137438953472L\n        if (n == 38) return 274877906944L\n\
    \        if (n == 39) return 549755813888L\n        if (n == 40) return 1099511627776L\n\
    \        if (n == 41) return 2199023255552L\n        if (n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdphiycn0.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpdphiycn0.scala:48:12 --------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \        \e[33mif\e[0m (n\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e\
    [0m            Found:    (n : Long)\n\e[31m   |\e[0m            Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798356
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:8:35\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m, \e[31m2\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                                   ^^^^^\e[0m\n\e[31m  |\e[0m       \
    \                            Found:    Long\n\e[31m  |\e[0m                  \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpphl9ghoc.scala:11:23 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:11 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m           ^\e[0m\n\e[31m   |\e[0m           Found:    (n :\
    \ Long)\n\e[31m   |\e[0m           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        if (n == 2) return 3\n\
    \        var count = 0L\n        for (i <- 1 to n) {\n            count += pow(10,\
    \ i - 1).toLong\n        }\n        count * 2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnxh0orxv.scala:10:23\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798356
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        if (n == 2) return 3\n\
    \        var result = 0L\n        for (i <- 1 to 9) {\n            val x = pow(10,\
    \ n - 1).toLong\n            val y = pow(10, n - 2).toLong\n            result\
    \ += x * i + y * 9\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8_izu4lp.scala:18)\n\tat Problem.main(tmp8_izu4lp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0)\
    \ = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n)(0) + dp(n)(1)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n\
    \    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) ==\
    \ (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa9y53br3.scala:7:35\
    \ ---------------------\e[0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m, \e[31m2\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                                   ^^^^^\e[0m\n\e[31m  |\e[0m       \
    \                            Found:    Long\n\e[31m  |\e[0m                  \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpa9y53br3.scala:10:23 --------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa9y53br3.scala:14:11 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m           ^\e[0m\n\e[31m   |\e[0m           Found:    (n :\
    \ Long)\n\e[31m   |\e[0m           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpa9y53br3.scala:14:22 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 10)\n        for (i <- 0 to 9) dp(1)(i) = 1\n        for (i <- 2 to n.toInt)\
    \ {\n            for (j <- 0 to 9) {\n                for (k <- 0 to 9) {\n  \
    \                  if (j == 1 || k == 1) dp(i)(j) += dp(i - 1)(k)\n          \
    \      }\n            }\n        }\n        var sum = 0L\n        for (i <- 0\
    \ to 9) sum += dp(n.toInt)(i)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnwn8x62s.scala:22)\n\tat Problem.main(tmpnwn8x62s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798358
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiht1xwwk.scala:18)\n\tat Problem.main(tmpiht1xwwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0)\
    \ = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n)(0) + dp(n)(1)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n\
    \    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) ==\
    \ (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa9y53br3.scala:7:35\
    \ ---------------------\e[0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m, \e[31m2\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                                   ^^^^^\e[0m\n\e[31m  |\e[0m       \
    \                            Found:    Long\n\e[31m  |\e[0m                  \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpa9y53br3.scala:10:23 --------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa9y53br3.scala:14:11 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m           ^\e[0m\n\e[31m   |\e[0m           Found:    (n :\
    \ Long)\n\e[31m   |\e[0m           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpa9y53br3.scala:14:22 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var result = 0L\n        for (i <- 1 to 9) {\n   \
    \         result += pow(10, n - 1).toLong\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n\
    \    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) ==\
    \ (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmwvtoada.scala:14)\n\tat Problem.main(tmpmwvtoada.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798358
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiht1xwwk.scala:18)\n\tat Problem.main(tmpiht1xwwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        if (n == 2) return 4\n\
    \        var count = 0L\n        for (i <- 1 to 9) {\n            count += pow(10,\
    \ n - 1).toLong\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8pieumqr.scala:16)\n\tat Problem.main(tmp8pieumqr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiht1xwwk.scala:18)\n\tat Problem.main(tmpiht1xwwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiht1xwwk.scala:18)\n\tat Problem.main(tmpiht1xwwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        if (n == 2) return 4\n\
    \        if (n == 3) return 8\n        var result = 0L\n        for (i <- 1 to\
    \ n) {\n            result += pow(10, i - 1).toLong\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqk98qkud.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798357
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxymu46n2.scala:18)\n\tat Problem.main(tmpxymu46n2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        if (n == 2) return 4\n\
    \        if (n == 3) return 7\n        var count = 0L\n        for (i <- 1 to\
    \ 9) {\n            count += pow(10, n - 2).toLong * 2\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxehjzc3l.scala:17)\n\tat Problem.main(tmpxehjzc3l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        var count = 0\n    \
    \    for (i <- 1 to 9) {\n            count += pow(10, n - 1).toLong\n       \
    \ }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5z11kvcc.scala:10:18 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            count += pow(\e[31m10\e[0m, n - \e[31m1\e\
    [0m).toLong\n\e[31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \           value += is not a member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798357
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiht1xwwk.scala:18)\n\tat Problem.main(tmpiht1xwwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        if (n == 2) return 3\n\
    \        var result = 0L\n        for (i <- 1 to 9) {\n            result += pow(10,\
    \ n - 1).toLong\n        }\n        result += startsOneEnds(n - 1)\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr0gixnp2.scala:17)\n\tat Problem.main(tmpr0gixnp2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        var result = 0L\n  \
    \      for (i <- 1 to n) {\n            result += pow(10, i - 1).toLong\n    \
    \    }\n        result * 2\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n\
    \    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) ==\
    \ (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwjpcdynw.scala:9:23\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m  |\e[0m                       ^\e[0m\n\e\
    [31m  |\e[0m                       Found:    (n : Long)\n\e[31m  |\e[0m      \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798357
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxymu46n2.scala:18)\n\tat Problem.main(tmpxymu46n2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var count = 0L\n        for (i <- 1 to 9) {\n    \
    \        count += pow(10, n - 1).toLong\n        }\n        count\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n\
    \    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) ==\
    \ (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbl1b0fk3.scala:14)\n\tat Problem.main(tmpbl1b0fk3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var count = 0L\n        for (i <- 1 to n) {\n    \
    \        count += pow(10, i - 1).toLong\n        }\n        count\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n\
    \    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) ==\
    \ (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdtuagcs6.scala:8:23\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m  |\e[0m                       ^\e[0m\n\e\
    [31m  |\e[0m                       Found:    (n : Long)\n\e[31m  |\e[0m      \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0)\
    \ = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n)(0) + dp(n)(1)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n\
    \    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) ==\
    \ (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa9y53br3.scala:7:35\
    \ ---------------------\e[0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m, \e[31m2\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                                   ^^^^^\e[0m\n\e[31m  |\e[0m       \
    \                            Found:    Long\n\e[31m  |\e[0m                  \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpa9y53br3.scala:10:23 --------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa9y53br3.scala:14:11 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m           ^\e[0m\n\e[31m   |\e[0m           Found:    (n :\
    \ Long)\n\e[31m   |\e[0m           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpa9y53br3.scala:14:22 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        var count = 0\n    \
    \    for (i <- 1 to 9) {\n            count += pow(10, n - 1).toLong\n       \
    \ }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5z11kvcc.scala:10:18 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            count += pow(\e[31m10\e[0m, n - \e[31m1\e\
    [0m).toLong\n\e[31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \           value += is not a member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798357
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        // The number of n-digit positive integers that start\
    \ with 1 is\n        // 9 * 10^(n-1). The number of n-digit positive integers\
    \ that end with 1\n        // is 10^(n-1).\n        9 * pow(10, n - 1).toLong\
    \ + pow(10, n - 1).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppi9da50w.scala:13)\n\tat Problem.main(tmppi9da50w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:8:35\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m, \e[31m2\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                                   ^^^^^\e[0m\n\e[31m  |\e[0m       \
    \                            Found:    Long\n\e[31m  |\e[0m                  \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpphl9ghoc.scala:11:23 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:11 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m           ^\e[0m\n\e[31m   |\e[0m           Found:    (n :\
    \ Long)\n\e[31m   |\e[0m           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiht1xwwk.scala:18)\n\tat Problem.main(tmpiht1xwwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        var count = 0\n    \
    \    for (i <- 1 to 9) {\n            var x = i\n            var y = i\n     \
    \       for (j <- 1 until n) {\n                x = x * 10 + 1\n             \
    \   y = y * 10 + 9\n            }\n            count += y - x + 1\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp76yzukgp.scala:12:30\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m            \e[33mfor\e[0m (j\
    \ <- \e[31m1\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          \
    \    ^\e[0m\n\e[31m   |\e[0m                              Found:    (n : Long)\n\
    \e[31m   |\e[0m                              Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659798357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        if (n == 2) return 4\n\
    \        if (n == 3) return 8\n        if (n == 4) return 16\n        if (n ==\
    \ 5) return 32\n        if (n == 6) return 64\n        if (n == 7) return 128\n\
    \        if (n == 8) return 256\n        if (n == 9) return 512\n        if (n\
    \ == 10) return 1024\n        if (n == 11) return 2048\n        if (n == 12) return\
    \ 4096\n        if (n == 13) return 8192\n        if (n == 14) return 16384\n\
    \        if (n == 15) return 32768\n        if (n == 16) return 65536\n      \
    \  if (n == 17) return 131072\n        if (n == 18) return 262144\n        if\
    \ (n == 19) return 524288\n        if (n == 20) return 1048576\n        if (n\
    \ == 21) return 2097152\n        if (n == 22) return 4194304\n        if (n ==\
    \ 23) return 8388608\n        if (n == 24) return 16777216\n        if (n == 25)\
    \ return 33554432\n        if (n == 26) return 67108864\n        if (n == 27)\
    \ return 134217728\n        if (n == 28) return 268435456\n        if (n == 29)\
    \ return 536870912\n        if (n == 30) return 1073741824\n        if (n == 31)\
    \ return 2147483648L\n        if (n == 32) return 4294967296L\n        if (n ==\
    \ 33) return 8589934592L\n        if (n == 34) return 17179869184L\n        if\
    \ (n == 35) return 34359738368L\n        if (n == 36) return 68719476736L\n  \
    \      if (n == 37) return 137438953472L\n        if (n == 38) return 274877906944L\n\
    \        if (n == 39) return 549755813888L\n        if (n == 40) return 1099511627776L\n\
    \        if (n == 41) return 2199023255552L\n        if (n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdphiycn0.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpdphiycn0.scala:48:12 --------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \        \e[33mif\e[0m (n\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e\
    [0m            Found:    (n : Long)\n\e[31m   |\e[0m            Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798356
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:8:35\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m, \e[31m2\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                                   ^^^^^\e[0m\n\e[31m  |\e[0m       \
    \                            Found:    Long\n\e[31m  |\e[0m                  \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpphl9ghoc.scala:11:23 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:11 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m           ^\e[0m\n\e[31m   |\e[0m           Found:    (n :\
    \ Long)\n\e[31m   |\e[0m           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 9\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) * 10 - dp(i - 1)(1)\n            dp(i)(1) =\
    \ dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n\
    \    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) ==\
    \ (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa_4gztdc.scala:17)\n\tat Problem.main(tmpa_4gztdc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxymu46n2.scala:18)\n\tat Problem.main(tmpxymu46n2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiht1xwwk.scala:18)\n\tat Problem.main(tmpiht1xwwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxymu46n2.scala:18)\n\tat Problem.main(tmpxymu46n2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxymu46n2.scala:18)\n\tat Problem.main(tmpxymu46n2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiht1xwwk.scala:18)\n\tat Problem.main(tmpiht1xwwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        var count = 0\n    \
    \    for (i <- 1 to 9) {\n            var j = i\n            var k = 1\n     \
    \       while (j <= n) {\n                count += pow(10, j - 1).toLong\n   \
    \             j += 1\n            }\n        }\n        return count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n\
    \    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) ==\
    \ (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5i2xueh_.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                count += pow(\e[31m10\e[0m, j - \e[31m1\e\
    [0m).toLong\n\e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                value += is not a member of Int - did you mean Int.!=?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659798358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var count = 0L\n        for (i <- 1 to 9) {\n    \
    \        var num = i\n            for (j <- 1 until n) {\n                num\
    \ *= 10\n                num += i\n            }\n            count += num\n \
    \       }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1fiu6ba4.scala:10:30\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m            \e[33mfor\e[0m (j\
    \ <- \e[31m1\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          \
    \    ^\e[0m\n\e[31m   |\e[0m                              Found:    (n : Long)\n\
    \e[31m   |\e[0m                              Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659798356
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        if (n == 2) return 4\n\
    \        if (n == 3) return 8\n        val dp = Array.ofDim[Long](n.toInt + 1,\
    \ 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        dp(2)(0) = 2\n     \
    \   dp(2)(1) = 2\n        dp(3)(0) = 4\n        dp(3)(1) = 4\n        for (i <-\
    \ 4 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n      \
    \      dp(i)(1) = dp(i - 1)(0) + dp(i - 1)(1)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcu4y4kht.scala:24)\n\tat Problem.main(tmpcu4y4kht.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798358
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiht1xwwk.scala:18)\n\tat Problem.main(tmpiht1xwwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiht1xwwk.scala:18)\n\tat Problem.main(tmpiht1xwwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var count = 0L\n        for (i <- 1 to n) {\n    \
    \        count += pow(10, i - 1).toLong\n        }\n        count\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n\
    \    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) ==\
    \ (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdtuagcs6.scala:8:23\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m  |\e[0m                       ^\e[0m\n\e\
    [31m  |\e[0m                       Found:    (n : Long)\n\e[31m  |\e[0m      \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:8:35\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m, \e[31m2\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                                   ^^^^^\e[0m\n\e[31m  |\e[0m       \
    \                            Found:    Long\n\e[31m  |\e[0m                  \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpphl9ghoc.scala:11:23 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:11 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m           ^\e[0m\n\e[31m   |\e[0m           Found:    (n :\
    \ Long)\n\e[31m   |\e[0m           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var count = 0L\n        for (i <- 1 to n) {\n    \
    \        count += pow(10, i - 1).toLong\n        }\n        count\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n\
    \    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) ==\
    \ (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdtuagcs6.scala:8:23\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m  |\e[0m                       ^\e[0m\n\e\
    [31m  |\e[0m                       Found:    (n : Long)\n\e[31m  |\e[0m      \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:8:35\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m, \e[31m2\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                                   ^^^^^\e[0m\n\e[31m  |\e[0m       \
    \                            Found:    Long\n\e[31m  |\e[0m                  \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpphl9ghoc.scala:11:23 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:11 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m           ^\e[0m\n\e[31m   |\e[0m           Found:    (n :\
    \ Long)\n\e[31m   |\e[0m           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:8:35\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m, \e[31m2\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                                   ^^^^^\e[0m\n\e[31m  |\e[0m       \
    \                            Found:    Long\n\e[31m  |\e[0m                  \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpphl9ghoc.scala:11:23 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:11 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m           ^\e[0m\n\e[31m   |\e[0m           Found:    (n :\
    \ Long)\n\e[31m   |\e[0m           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        var result = 0L\n  \
    \      for (i <- 1 to n) {\n            result += pow(10, i - 1).toLong\n    \
    \    }\n        result * 2\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n\
    \    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) ==\
    \ (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwjpcdynw.scala:9:23\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m  |\e[0m                       ^\e[0m\n\e\
    [31m  |\e[0m                       Found:    (n : Long)\n\e[31m  |\e[0m      \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798357
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiht1xwwk.scala:18)\n\tat Problem.main(tmpiht1xwwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiht1xwwk.scala:18)\n\tat Problem.main(tmpiht1xwwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiht1xwwk.scala:18)\n\tat Problem.main(tmpiht1xwwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        if (n == 2) return 4\n\
    \        if (n == 3) return 8\n        if (n == 4) return 16\n        if (n ==\
    \ 5) return 32\n        if (n == 6) return 64\n        if (n == 7) return 128\n\
    \        if (n == 8) return 256\n        if (n == 9) return 512\n        if (n\
    \ == 10) return 1024\n        if (n == 11) return 2048\n        if (n == 12) return\
    \ 4096\n        if (n == 13) return 8192\n        if (n == 14) return 16384\n\
    \        if (n == 15) return 32768\n        if (n == 16) return 65536\n      \
    \  if (n == 17) return 131072\n        if (n == 18) return 262144\n        if\
    \ (n == 19) return 524288\n        if (n == 20) return 1048576\n        if (n\
    \ == 21) return 2097152\n        if (n == 22) return 4194304\n        if (n ==\
    \ 23) return 8388608\n        if (n == 24) return 16777216\n        if (n == 25)\
    \ return 33554432\n        if (n == 26) return 67108864\n        if (n == 27)\
    \ return 134217728\n        if (n == 28) return 268435456\n        if (n == 29)\
    \ return 536870912\n        if (n == 30) return 1073741824\n        if (n == 31)\
    \ return 2147483648L\n        if (n == 32) return 4294967296L\n        if (n ==\
    \ 33) return 8589934592L\n        if (n == 34) return 17179869184L\n        if\
    \ (n == 35) return 34359738368L\n        if (n == 36) return 68719476736L\n  \
    \      if (n == 37) return 137438953472L\n        if (n == 38) return 274877906944L\n\
    \        if (n == 39) return 549755813888L\n        if (n == 40) return 1099511627776L\n\
    \        if (n == 41) return 2199023255552L\n        if (n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdphiycn0.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpdphiycn0.scala:48:12 --------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \        \e[33mif\e[0m (n\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e\
    [0m            Found:    (n : Long)\n\e[31m   |\e[0m            Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798356
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxymu46n2.scala:18)\n\tat Problem.main(tmpxymu46n2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        def f(n : Long) : Long = {\n            if (n == 1)\
    \ 1\n            else if (n == 2) 11\n            else {\n                val\
    \ m = n / 2\n                val a = pow(10, m).toLong\n                val b\
    \ = pow(10, m - 1).toLong\n                val c = pow(10, n - 1).toLong\n   \
    \             val d = pow(10, n - 2).toLong\n                val e = pow(10, n\
    \ - 3).toLong\n                val f = pow(10, n - 4).toLong\n               \
    \ val g = pow(10, n - 5).toLong\n                val h = pow(10, n - 6).toLong\n\
    \                val i = pow(10, n - 7).toLong\n                val j = pow(10,\
    \ n - 8).toLong\n                val k = pow(10, n - 9).toLong\n             \
    \   val l = pow(10, n - 10).toLong\n                val m = pow(10, n - 11).toLong\n\
    \                val o = pow(10, n - 12).toLong\n                val p = pow(10,\
    \ n - 13).toLong\n                val q = pow(10, n - 14).toLong\n           \
    \     val r = pow(10, n - 15).toLong\n                val s = pow(10, n - 16).toLong\n\
    \                val t = pow(10, n - 17).toLong\n                val u = pow(10,\
    \ n - 18).toLong\n                val v = pow(10, n - 19).toLong\n           \
    \     val w = pow(10, n - 20).toLong\n                val x = pow(10, n - 21).toLong\n\
    \                val y = pow(10, n - 22).toLong\n                val z = pow(10,\
    \ n - 23).toLong\n                val aa = pow(10, n - 24).toLong\n          \
    \      val ab = pow(10, n - 25).toLong\n                val ac = pow(10, n - 26).toLong\n\
    \                val ad = pow(10, n - 27).toLong\n                val ae = pow(10,\
    \ n - 28).toLong\n                val af = pow(10, n - 29).toLong\n          \
    \      val\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpnngmewwf.scala:43:19 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m                \e[33mval\e[0m\n\e[31m\e[31m   |\e[0m\
    \                   ^\e[0m\n\e[31m   |\e[0m                   pattern expected\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnngmewwf.scala:54:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m54 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnngmewwf.scala:24:20 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m                \e[33mval\e[0m \e[36mm\e[0m = pow(\e[31m10\e[0m,\
    \ n - \e[31m11\e[0m).toLong\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpnngmewwf.scala:53:1 ---------------------\e[0m\e[0m\n\e[31m53\
    \ |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m\
    \   |\e[0m Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpnngmewwf.scala:45:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m45 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n4 errors found\n"
  stdout: ''
  timestamp: 1659798365
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        // The number of n-digit positive integers that start\
    \ with 1 is\n        // 9 * 10^(n-1). The number of n-digit positive integers\
    \ that end with 1\n        // is 10^(n-1).\n        9 * pow(10, n - 1).toLong\
    \ + pow(10, n - 1).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppi9da50w.scala:13)\n\tat Problem.main(tmppi9da50w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798357
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt,\
    \ 2)\n        dp(0)(0) = 1\n        dp(0)(1) = 1\n        for (i <- 1 until n.toInt)\
    \ {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n.toInt - 1)(0) + dp(n.toInt - 1)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2x_y3eh_.scala:18)\n\tat Problem.main(tmp2x_y3eh_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798357
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        if (n == 2) return 5\n\
    \        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(0)(0) = 1\n  \
    \      dp(0)(1) = 1\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i\
    \ <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n   \
    \         dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd4wga4ct.scala:21)\n\tat Problem.main(tmpd4wga4ct.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798367
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxymu46n2.scala:18)\n\tat Problem.main(tmpxymu46n2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        if (n == 2) return 3\n\
    \        if (n == 3) return 5\n        val dp = Array.ofDim[Long](n.toInt + 1)\n\
    \        dp(1) = 2\n        dp(2) = 3\n        dp(3) = 5\n        for (i <- 4\
    \ to n.toInt) {\n            dp(i) = dp(i - 1) + dp(i - 2)\n        }\n      \
    \  dp(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvobh1n86.scala:20)\n\tat Problem.main(tmpvobh1n86.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798367
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiht1xwwk.scala:18)\n\tat Problem.main(tmpiht1xwwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiht1xwwk.scala:18)\n\tat Problem.main(tmpiht1xwwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        // The number of n-digit positive integers that start\
    \ with 1 is\n        // 9 * 10^(n-1). The number of n-digit positive integers\
    \ that end with 1\n        // is 10^(n-1).\n        9 * pow(10, n - 1).toLong\
    \ + pow(10, n - 1).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppi9da50w.scala:13)\n\tat Problem.main(tmppi9da50w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798357
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        var count = 0L\n   \
    \     for (i <- 1 to 9) {\n            count += pow(10, n - 1).toLong\n      \
    \  }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpazix81c4.scala:15)\n\tat Problem.main(tmpazix81c4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798367
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        if (n == 2) return 4\n\
    \        var count = 0L\n        for (i <- 1 to 9) {\n            count += pow(10,\
    \ n - 1).toLong\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8pieumqr.scala:16)\n\tat Problem.main(tmp8pieumqr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var count = 0L\n        for (i <- 1 to 9) {\n    \
    \        val x = pow(10, n - 1).toLong\n            val y = pow(10, n).toLong\n\
    \            count += (i * x) + (y - x)\n        }\n        count\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n\
    \    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) ==\
    \ (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpleeyuek5.scala:16)\n\tat Problem.main(tmpleeyuek5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxymu46n2.scala:18)\n\tat Problem.main(tmpxymu46n2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxymu46n2.scala:18)\n\tat Problem.main(tmpxymu46n2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        // The number of n-digit positive integers that start\
    \ with 1 is\n        // 9 * 10^(n-1)\n        // The number of n-digit positive\
    \ integers that end with 1 is\n        // 10^(n-1)\n        // The number of n-digit\
    \ positive integers that start or end with 1 is\n        // 9 * 10^(n-1) + 10^(n-1)\n\
    \        // The number of n-digit positive integers that start or end with 1 is\n\
    \        // 10 * 10^(n-1)\n        10 * pow(10, n - 1).toLong\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphnfa6c9p.scala:18)\n\tat Problem.main(tmphnfa6c9p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:8:35\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m, \e[31m2\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                                   ^^^^^\e[0m\n\e[31m  |\e[0m       \
    \                            Found:    Long\n\e[31m  |\e[0m                  \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpphl9ghoc.scala:11:23 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:11 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m           ^\e[0m\n\e[31m   |\e[0m           Found:    (n :\
    \ Long)\n\e[31m   |\e[0m           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt,\
    \ 2)\n        dp(0)(0) = 1\n        dp(0)(1) = 1\n        for (i <- 1 until n.toInt)\
    \ {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n.toInt - 1)(0) + dp(n.toInt - 1)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2x_y3eh_.scala:18)\n\tat Problem.main(tmp2x_y3eh_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 1\n        var result = 0\n   \
    \     for (i <- 1 to n) {\n            result += pow(10, i - 1).toLong\n     \
    \   }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppo7tm0d3.scala:9:23\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m  |\e[0m                       ^\e[0m\n\e\
    [31m  |\e[0m                       Found:    (n : Long)\n\e[31m  |\e[0m      \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmppo7tm0d3.scala:10:19 ------------------------\e[0m\e[0m\n\e[31m10 |\e\
    [0m            result += pow(\e[31m10\e[0m, i - \e[31m1\e[0m).toLong\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is\
    \ not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659798367
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiht1xwwk.scala:18)\n\tat Problem.main(tmpiht1xwwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxymu46n2.scala:18)\n\tat Problem.main(tmpxymu46n2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        if (n == 2) return 3\n\
    \        var result = 3L\n        for (i <- 3 to n.toInt) {\n            result\
    \ = result * 2 + 1\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyok1aeeh.scala:16)\n\tat Problem.main(tmpyok1aeeh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxymu46n2.scala:18)\n\tat Problem.main(tmpxymu46n2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        var count = 0\n    \
    \    for (i <- 1 to 9) {\n            val digits = i.toString.toCharArray\n  \
    \          val dp = Array.ofDim[Long](n + 1, 2)\n            dp(0)(0) = 1\n  \
    \          for (j <- 1 to n) {\n                for (k <- 0 to 1) {\n        \
    \            for (l <- 0 to 9) {\n                        if (k == 0 && l == 0)\
    \ dp(j)(k) += dp(j - 1)(k)\n                        else if (k == 0 && l == digits(0))\
    \ dp(j)(k) += dp(j - 1)(k)\n                        else if (k == 1 && l == digits(0))\
    \ dp(j)(k) += dp(j - 1)(k)\n                        else if (k == 1 && l == digits(1))\
    \ dp(j)(k) += dp(j - 1)(k)\n                    }\n                }\n       \
    \     }\n            count += dp(n)(0) + dp(n)(1)\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1f6w_6gh.scala:11:39\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m            \e[33mval\e[0m \e\
    [36mdp\e[0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m, \e[31m2\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                       ^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                       Found:    Long\n\e[31m   |\e[0m\
    \                                       Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp1f6w_6gh.scala:13:27 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mfor\e[0m (j <- \e[31m1\e[0m to n) {\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Found:    (n : Long)\n\e[31m   |\e[0m                  \
    \         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1f6w_6gh.scala:23:18\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            count += dp(n)(\e\
    [31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of Int - did you mean\
    \ Int.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1f6w_6gh.scala:23:24\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            count += dp(n)(\e\
    [31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \   ^\e[0m\n\e[31m   |\e[0m                        Found:    (n : Long)\n\e[31m\
    \   |\e[0m                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp1f6w_6gh.scala:23:35 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            count += dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m \
    \  |\e[0m                                   Found:    (n : Long)\n\e[31m   |\e\
    [0m                                   Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compi"
  stdout: ''
  timestamp: 1659798368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxymu46n2.scala:18)\n\tat Problem.main(tmpxymu46n2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 1\n        var result = 0L\n  \
    \      for (i <- 1 to n) {\n            result += pow(10, i - 1).toLong\n    \
    \    }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj7cvkjxw.scala:9:23\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m  |\e[0m                       ^\e[0m\n\e\
    [31m  |\e[0m                       Found:    (n : Long)\n\e[31m  |\e[0m      \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0)\
    \ = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n)(0) + dp(n)(1)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n\
    \    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) ==\
    \ (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa9y53br3.scala:7:35\
    \ ---------------------\e[0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m, \e[31m2\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                                   ^^^^^\e[0m\n\e[31m  |\e[0m       \
    \                            Found:    Long\n\e[31m  |\e[0m                  \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpa9y53br3.scala:10:23 --------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa9y53br3.scala:14:11 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m           ^\e[0m\n\e[31m   |\e[0m           Found:    (n :\
    \ Long)\n\e[31m   |\e[0m           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpa9y53br3.scala:14:22 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        var count = 0L\n   \
    \     for (i <- 1 to 9) {\n            val x = pow(10, n - 1).toLong\n       \
    \     val y = pow(10, n - 2).toLong\n            count += (x - y) * 2\n      \
    \  }\n        return count\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n\
    \    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) ==\
    \ (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpepjg8a_o.scala:17)\n\tat Problem.main(tmpepjg8a_o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798368
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:8:35\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m, \e[31m2\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                                   ^^^^^\e[0m\n\e[31m  |\e[0m       \
    \                            Found:    Long\n\e[31m  |\e[0m                  \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpphl9ghoc.scala:11:23 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:11 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m           ^\e[0m\n\e[31m   |\e[0m           Found:    (n :\
    \ Long)\n\e[31m   |\e[0m           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt,\
    \ 2)\n        dp(0)(0) = 0\n        dp(0)(1) = 1\n        for (i <- 1 until n.toInt)\
    \ {\n            dp(i)(0) = dp(i - 1)(0) * 9 + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n.toInt - 1)(0) + dp(n.toInt - 1)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfx1gv1g4.scala:18)\n\tat Problem.main(tmpfx1gv1g4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798368
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:8:35\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m, \e[31m2\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                                   ^^^^^\e[0m\n\e[31m  |\e[0m       \
    \                            Found:    Long\n\e[31m  |\e[0m                  \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpphl9ghoc.scala:11:23 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:11 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m           ^\e[0m\n\e[31m   |\e[0m           Found:    (n :\
    \ Long)\n\e[31m   |\e[0m           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiht1xwwk.scala:18)\n\tat Problem.main(tmpiht1xwwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiht1xwwk.scala:18)\n\tat Problem.main(tmpiht1xwwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:8:35\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m, \e[31m2\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                                   ^^^^^\e[0m\n\e[31m  |\e[0m       \
    \                            Found:    Long\n\e[31m  |\e[0m                  \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpphl9ghoc.scala:11:23 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:11 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m           ^\e[0m\n\e[31m   |\e[0m           Found:    (n :\
    \ Long)\n\e[31m   |\e[0m           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 10\n        var count = 0\n   \
    \     for (i <- 1 to 9) {\n            count += pow(10, n - 1).toLong\n      \
    \  }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2uoie5b0.scala:10:18 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            count += pow(\e[31m10\e[0m, n - \e[31m1\e\
    [0m).toLong\n\e[31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \           value += is not a member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:8:35\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m, \e[31m2\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                                   ^^^^^\e[0m\n\e[31m  |\e[0m       \
    \                            Found:    Long\n\e[31m  |\e[0m                  \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpphl9ghoc.scala:11:23 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:11 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m           ^\e[0m\n\e[31m   |\e[0m           Found:    (n :\
    \ Long)\n\e[31m   |\e[0m           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        var result = 0L\n  \
    \      for (i <- 1 to n) {\n            result += pow(10, i - 1).toLong\n    \
    \    }\n        result * 2\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n\
    \    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) ==\
    \ (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwjpcdynw.scala:9:23\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m  |\e[0m                       ^\e[0m\n\e\
    [31m  |\e[0m                       Found:    (n : Long)\n\e[31m  |\e[0m      \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798357
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 1\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj243e2ax.scala:19)\n\tat Problem.main(tmpj243e2ax.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiht1xwwk.scala:18)\n\tat Problem.main(tmpiht1xwwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiht1xwwk.scala:18)\n\tat Problem.main(tmpiht1xwwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        var result = 0L\n  \
    \      for (i <- 1 to n) {\n            result += pow(10, i - 1).toLong\n    \
    \    }\n        result * 2\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n\
    \    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) ==\
    \ (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwjpcdynw.scala:9:23\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m  |\e[0m                       ^\e[0m\n\e\
    [31m  |\e[0m                       Found:    (n : Long)\n\e[31m  |\e[0m      \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798357
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiht1xwwk.scala:18)\n\tat Problem.main(tmpiht1xwwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxymu46n2.scala:18)\n\tat Problem.main(tmpxymu46n2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        // The number of n-digit positive integers that start\
    \ with 1 is\n        // 9 * 10^(n-1). The number of n-digit positive integers\
    \ that end with 1\n        // is 10^(n-1).\n        9 * pow(10, n - 1).toLong\
    \ + pow(10, n - 1).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppi9da50w.scala:13)\n\tat Problem.main(tmppi9da50w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798357
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        if (n == 2) return 3\n\
    \        var result = 0L\n        for (i <- 1 to 9) {\n            val x = pow(10,\
    \ n - 1).toLong\n            val y = pow(10, n - 2).toLong\n            result\
    \ += (x - y) * 2\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw0xfh03k.scala:18)\n\tat Problem.main(tmpw0xfh03k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798368
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 1\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbpay_cih.scala:8:35\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m, \e[31m2\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                                   ^^^^^\e[0m\n\e[31m  |\e[0m       \
    \                            Found:    Long\n\e[31m  |\e[0m                  \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpbpay_cih.scala:11:23 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbpay_cih.scala:15:11 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m           ^\e[0m\n\e[31m   |\e[0m           Found:    (n :\
    \ Long)\n\e[31m   |\e[0m           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpbpay_cih.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        // The number of n-digit numbers that start with 1\
    \ is 10^(n-1).\n        // The number of n-digit numbers that end with 1 is 9\
    \ * 10^(n-1).\n        // The number of n-digit numbers that start and end with\
    \ 1 is 9 * 10^(n-2).\n        // The number of n-digit numbers that start or end\
    \ with 1 is 10^(n-1) + 9 * 10^(n-1) - 9 * 10^(n-2).\n        val start = pow(10,\
    \ n - 1).toLong\n        val end = 9 * pow(10, n - 1).toLong\n        val both\
    \ = 9 * pow(10, n - 2).toLong\n        start + end - both\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcmvceds_.scala:17)\n\tat Problem.main(tmpcmvceds_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798368
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:8:35\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m, \e[31m2\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                                   ^^^^^\e[0m\n\e[31m  |\e[0m       \
    \                            Found:    Long\n\e[31m  |\e[0m                  \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpphl9ghoc.scala:11:23 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:11 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m           ^\e[0m\n\e[31m   |\e[0m           Found:    (n :\
    \ Long)\n\e[31m   |\e[0m           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        if (n == 2) return 4\n\
    \        var result = 0L\n        for (i <- 1 to 9) {\n            result += pow(10,\
    \ n - 1).toLong\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmj32me0.scala:16)\n\tat Problem.main(tmphmj32me0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798356
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        if (n == 2) return 4\n\
    \        if (n == 3) return 8\n        var result = 0L\n        for (i <- 1 to\
    \ n) {\n            result += pow(10, i - 1).toLong\n        }\n        result\
    \ * 2\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp51mbx75n.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxymu46n2.scala:18)\n\tat Problem.main(tmpxymu46n2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        else return (pow(10,\
    \ n - 1).toLong - pow(10, n - 2).toLong) * 2 + startsOneEnds(n - 1)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n\
    \    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) ==\
    \ (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0rixsgqp.scala:11)\n\tat Problem.main(tmp0rixsgqp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt,\
    \ 2)\n        dp(0)(0) = 1\n        dp(0)(1) = 1\n        for (i <- 1 until n.toInt)\
    \ {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n.toInt - 1)(0) + dp(n.toInt - 1)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2x_y3eh_.scala:18)\n\tat Problem.main(tmp2x_y3eh_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798357
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiht1xwwk.scala:18)\n\tat Problem.main(tmpiht1xwwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:8:35\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m, \e[31m2\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                                   ^^^^^\e[0m\n\e[31m  |\e[0m       \
    \                            Found:    Long\n\e[31m  |\e[0m                  \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpphl9ghoc.scala:11:23 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:11 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m           ^\e[0m\n\e[31m   |\e[0m           Found:    (n :\
    \ Long)\n\e[31m   |\e[0m           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiht1xwwk.scala:18)\n\tat Problem.main(tmpiht1xwwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var count = 0L\n        for (i <- 1 to n) {\n    \
    \        count += pow(10, i - 1).toLong\n        }\n        count\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n\
    \    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) ==\
    \ (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdtuagcs6.scala:8:23\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m  |\e[0m                       ^\e[0m\n\e\
    [31m  |\e[0m                       Found:    (n : Long)\n\e[31m  |\e[0m      \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798357
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxymu46n2.scala:18)\n\tat Problem.main(tmpxymu46n2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val m = pow(10, n).toLong\n\
    \        val d = pow(10, n - 1).toLong\n        val a = m - d\n        val b =\
    \ d - 1\n        a + b\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcyt4brgm.scala:15)\n\tat Problem.main(tmpcyt4brgm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 9\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) * 10 - dp(i - 1)(1)\n            dp(i)(1) =\
    \ dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n\
    \    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) ==\
    \ (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa_4gztdc.scala:17)\n\tat Problem.main(tmpa_4gztdc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxymu46n2.scala:18)\n\tat Problem.main(tmpxymu46n2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxymu46n2.scala:18)\n\tat Problem.main(tmpxymu46n2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val m = pow(10, n -\
    \ 1).toLong\n        val a = m / 10\n        val b = m - a\n        return a +\
    \ b\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdfbrxy_0.scala:14)\n\tat Problem.main(tmpdfbrxy_0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        if (n == 2) return 3\n\
    \        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = 2\n        dp(2)\
    \ = 3\n        for (i <- 3 to n.toInt) {\n            dp(i) = dp(i - 1) + dp(i\
    \ - 2)\n        }\n        dp(n.toInt)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvz51l73k.scala:18)\n\tat Problem.main(tmpvz51l73k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var count = 0L\n        for (i <- 1L to n) {\n   \
    \         count += pow(10, i - 1).toLong\n        }\n        count\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n\
    \    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) ==\
    \ (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp68e8xzsr.scala:15)\n\tat Problem.main(tmp68e8xzsr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798369
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiht1xwwk.scala:18)\n\tat Problem.main(tmpiht1xwwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxymu46n2.scala:18)\n\tat Problem.main(tmpxymu46n2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var count = 0L\n        for (i <- 1 to 9) {\n    \
    \        count += (pow(10, n - 1).toLong - pow(10, n - 2).toLong)\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3zsecve0.scala:14)\n\tat Problem.main(tmp3zsecve0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798369
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        if (n == 2) return 4\n\
    \        var result = 0L\n        for (i <- 1 to 9) {\n            result += pow(10,\
    \ n - 1).toLong\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmj32me0.scala:16)\n\tat Problem.main(tmphmj32me0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798356
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxymu46n2.scala:18)\n\tat Problem.main(tmpxymu46n2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        if (n == 2) return 4\n\
    \        if (n == 3) return 8\n        if (n == 4) return 16\n        if (n ==\
    \ 5) return 32\n        if (n == 6) return 64\n        if (n == 7) return 128\n\
    \        if (n == 8) return 256\n        if (n == 9) return 512\n        if (n\
    \ == 10) return 1024\n        if (n == 11) return 2048\n        if (n == 12) return\
    \ 4096\n        if (n == 13) return 8192\n        if (n == 14) return 16384\n\
    \        if (n == 15) return 32768\n        if (n == 16) return 65536\n      \
    \  if (n == 17) return 131072\n        if (n == 18) return 262144\n        if\
    \ (n == 19) return 524288\n        if (n == 20) return 1048576\n        if (n\
    \ == 21) return 2097152\n        if (n == 22) return 4194304\n        if (n ==\
    \ 23) return 8388608\n        if (n == 24) return 16777216\n        if (n == 25)\
    \ return 33554432\n        if (n == 26) return 67108864\n        if (n == 27)\
    \ return 134217728\n        if (n == 28) return 268435456\n        if (n == 29)\
    \ return 536870912\n        if (n == 30) return 1073741824\n        if (n == 31)\
    \ return 2147483648L\n        if (n == 32) return 4294967296L\n        if (n ==\
    \ 33) return 8589934592L\n        if (n == 34) return 17179869184L\n        if\
    \ (n == 35) return 34359738368L\n        if (n == 36) return 68719476736L\n  \
    \      if (n == 37) return 137438953472L\n        if (n == 38) return 274877906944L\n\
    \        if (n == 39) return 549755813888L\n        if (n == 40) return 1099511627776L\n\
    \        if (n == 41) return 2199023255552L\n        if (n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdphiycn0.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpdphiycn0.scala:48:12 --------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \        \e[33mif\e[0m (n\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e\
    [0m            Found:    (n : Long)\n\e[31m   |\e[0m            Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798356
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:8:35\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m, \e[31m2\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                                   ^^^^^\e[0m\n\e[31m  |\e[0m       \
    \                            Found:    Long\n\e[31m  |\e[0m                  \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpphl9ghoc.scala:11:23 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:11 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m           ^\e[0m\n\e[31m   |\e[0m           Found:    (n :\
    \ Long)\n\e[31m   |\e[0m           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpphl9ghoc.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiht1xwwk.scala:18)\n\tat Problem.main(tmpiht1xwwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 2\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) * 9 + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n        }\n        dp(n)(0) + dp(n)(1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n\
    \    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) ==\
    \ (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy3yry3aq.scala:8:35\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m, \e[31m2\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                                   ^^^^^\e[0m\n\e[31m  |\e[0m       \
    \                            Found:    Long\n\e[31m  |\e[0m                  \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpy3yry3aq.scala:11:23 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy3yry3aq.scala:15:11 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m           ^\e[0m\n\e[31m   |\e[0m           Found:    (n :\
    \ Long)\n\e[31m   |\e[0m           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpy3yry3aq.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxymu46n2.scala:18)\n\tat Problem.main(tmpxymu46n2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxymu46n2.scala:18)\n\tat Problem.main(tmpxymu46n2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        var count = 0L\n   \
    \     for (i <- 1 to 9) {\n            count += pow(10, n - 1).toLong\n      \
    \  }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpazix81c4.scala:15)\n\tat Problem.main(tmpazix81c4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        var count = 0\n    \
    \    for (i <- 1 to 9) {\n            val x = pow(10, n - 1).toLong\n        \
    \    val y = pow(10, n - 2).toLong\n            count += (x - y) * 2\n       \
    \ }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc_yseso_.scala:12:18 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            count += (x - y) * \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is\
    \ not a member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        if (n == 2) return 4\n\
    \        var result = 0L\n        for (i <- 1 to 9) {\n            result += pow(10,\
    \ n - 1).toLong\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmj32me0.scala:16)\n\tat Problem.main(tmphmj32me0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798356
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        var count = 0L\n   \
    \     for (i <- 1 to n) {\n            count += pow(10, i - 1).toLong\n      \
    \  }\n        count * 2\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy81x0q4a.scala:9:23\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m  |\e[0m                       ^\e[0m\n\e\
    [31m  |\e[0m                       Found:    (n : Long)\n\e[31m  |\e[0m      \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798345
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var count = 0L\n        for (i <- 1 to n) {\n    \
    \        count += pow(10, i - 1).toLong\n        }\n        count\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n\
    \    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) ==\
    \ (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdtuagcs6.scala:8:23\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m  |\e[0m                       ^\e[0m\n\e\
    [31m  |\e[0m                       Found:    (n : Long)\n\e[31m  |\e[0m      \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        var result = 0L\n  \
    \      for (i <- 1 to n) result += pow(10, i - 1).toLong\n        result * 2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4egitdt9.scala:9:23\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) result += pow(\e[31m10\e[0m, i - \e[31m1\e[0m).toLong\n\e\
    [31m\e[31m  |\e[0m                       ^\e[0m\n\e[31m  |\e[0m              \
    \         Found:    (n : Long)\n\e[31m  |\e[0m                       Required:\
    \ Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798370
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxymu46n2.scala:18)\n\tat Problem.main(tmpxymu46n2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiht1xwwk.scala:18)\n\tat Problem.main(tmpiht1xwwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxymu46n2.scala:18)\n\tat Problem.main(tmpxymu46n2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val m = n - 1\n        val a = pow(10, m).toLong\n\
    \        val b = pow(10, n).toLong\n        val c = pow(10, m - 1).toLong\n  \
    \      val d = pow(10, n - 1).toLong\n        val e = pow(10, m - 2).toLong\n\
    \        val f = pow(10, n - 2).toLong\n        val g = pow(10, m - 3).toLong\n\
    \        val h = pow(10, n - 3).toLong\n        val i = pow(10, m - 4).toLong\n\
    \        val j = pow(10, n - 4).toLong\n        val k = pow(10, m - 5).toLong\n\
    \        val l = pow(10, n - 5).toLong\n        val p = pow(10, m - 6).toLong\n\
    \        val q = pow(10, n - 6).toLong\n        val r = pow(10, m - 7).toLong\n\
    \        val s = pow(10, n - 7).toLong\n        val t = pow(10, m - 8).toLong\n\
    \        val u = pow(10, n - 8).toLong\n        val v = pow(10, m - 9).toLong\n\
    \        val w = pow(10, n - 9).toLong\n        val x = pow(10, m - 10).toLong\n\
    \        val y = pow(10, n - 10).toLong\n        val z = pow(10, m - 11).toLong\n\
    \        val aa = pow(10, n - 11).toLong\n        val ab = pow(10, m - 12).toLong\n\
    \        val ac = pow(10, n - 12).toLong\n        val ad = pow(10, m - 13).toLong\n\
    \        val ae = pow(10, n - 13).toLong\n        val af = pow(10, m - 14).toLong\n\
    \        val ag = pow(10, n - 14).toLong\n        val ah = pow(10, m - 15).toLong\n\
    \        val ai = pow(10, n - 15).toLong\n        val aj = pow(10, m - 16).toLong\n\
    \        val ak = pow(10,\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmvqh94q7.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpmvqh94q7.scala:41:20\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m41 |\e[0m       \
    \ \e[33mval\e[0m \e[36mak\e[0m = pow(\e[31m10\e[0m,\n\e[31m\e[31m   |\e[0m   \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0mmissing argument for parameter y of\
    \ \e[33mmethod\e[0m \e[35mpow\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m:\
    \ (x: Double, y: Double): Double\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmvqh94q7.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798371
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxymu46n2.scala:18)\n\tat Problem.main(tmpxymu46n2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        var count = 0L\n   \
    \     for (i <- 1 to 9) {\n            var temp = i\n            for (j <- 1 until\
    \ n) {\n                temp *= 10\n                temp += i\n            }\n\
    \            count += temp\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeqdfx4fx.scala:11:30\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m            \e[33mfor\e[0m (j\
    \ <- \e[31m1\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          \
    \    ^\e[0m\n\e[31m   |\e[0m                              Found:    (n : Long)\n\
    \e[31m   |\e[0m                              Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659798371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        if (n == 2) return 3\n\
    \        if (n == 3) return 5\n        if (n == 4) return 8\n        if (n ==\
    \ 5) return 13\n        if (n == 6) return 21\n        if (n == 7) return 34\n\
    \        if (n == 8) return 55\n        if (n == 9) return 89\n        if (n ==\
    \ 10) return 144\n        if (n == 11) return 233\n        if (n == 12) return\
    \ 377\n        if (n == 13) return 610\n        if (n == 14) return 987\n    \
    \    if (n == 15) return 1597\n        if (n == 16) return 2584\n        if (n\
    \ == 17) return 4181\n        if (n == 18) return 6765\n        if (n == 19) return\
    \ 10946\n        if (n == 20) return 17711\n        if (n == 21) return 28657\n\
    \        if (n == 22) return 46368\n        if (n == 23) return 75025\n      \
    \  if (n == 24) return 121393\n        if (n == 25) return 196418\n        if\
    \ (n == 26) return 317811\n        if (n == 27) return 514229\n        if (n ==\
    \ 28) return 832040\n        if (n == 29) return 1346269\n        if (n == 30)\
    \ return 2178309\n        if (n == 31) return 3524578\n        if (n == 32) return\
    \ 5702887\n        if (n == 33) return 9227465\n        if (n == 34) return 14930352\n\
    \        if (n == 35) return 24157817\n        if (n == 36) return 39088169\n\
    \        if (n == 37) return 63245986\n        if (n == 38) return 102334155\n\
    \        if (n == 39) return 165580141\n        if (n == 40) return 267914296\n\
    \        if (n == 41) return 433494437\n        if (n == 42) return 701408733\n\
    \        if (n == 43) return 1134903170\n        if (n == 44) return 1836311903\n\
    \        if (n == 45) return 297\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n\
    \    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) ==\
    \ (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_kd_pxbe.scala:51:8\
    \ ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m        \e[33mif\e[0m (n ==\
    \ \e[31m45\e[0m) \e[33mreturn\e[0m \e[31m297\e[0m\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m\
    \   |\e[0m        Required: Long\n\e[31m   |\e[0m        Maybe you are missing\
    \ an else part for the conditional?\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxymu46n2.scala:18)\n\tat Problem.main(tmpxymu46n2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 10\n        var result = 0L\n \
    \       for (i <- 1 to 9) {\n            result += pow(10, n - 1).toLong\n   \
    \     }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsts1sdxh.scala:15)\n\tat Problem.main(tmpsts1sdxh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798371
