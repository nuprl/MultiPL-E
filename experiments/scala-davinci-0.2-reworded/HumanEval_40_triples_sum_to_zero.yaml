name: HumanEval_40_triples_sum_to_zero
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // triples_sum_to_zero takes a list of integers as an input.\n    // it returns\
  \ true if there are three distinct elements in the list that\n    // sum to zero,\
  \ and false otherwise.\n    // >>> triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
  \ 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (true)\n    // >>> triplesSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> triplesSumToZero((List[Long](2l.toLong,\
  \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong)))\n    // (true)\n   \
  \ // >>> triplesSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def triplesSumToZero(l\
  \ : List[Long]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
  \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
  \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
  \ -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
  \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
completions: ["        // Your code here\n        return false", "        // your\
    \ code here\n        return false", "        val h = new HashMap[Long, Int]()\n\
    \        for (i <- l) {\n            if (h.contains(i)) h(i) += 1\n          \
    \  else h(i) = 1\n        }\n        for (i <- l) {\n            for (j <- l)\
    \ {\n                if (i != j) {\n                    val k = -(i + j)\n   \
    \                 if (h.contains(k) && (k != i) && (k != j)) {\n             \
    \           if (k == i) {\n                            if (h(k) > 1) return true\n\
    \                        }\n                        else if (k == j) {\n     \
    \                       if (h(k) > 1) return true\n                        }\n\
    \                        else if (h(k) > 0) return true\n                    }\n\
    \                }\n            }\n        }\n        return false", "       \
    \ // your code here\n        return false", "        // YOUR CODE HERE\n     \
    \   return false", "        var s = l.sorted\n        var i = 0\n        var j\
    \ = 0\n        var k = 0\n        while (i < s.length - 2) {\n            j =\
    \ i + 1\n            k = s.length - 1\n            while (j < k) {\n         \
    \       if (s(i) + s(j) + s(k) == 0) {\n                    return true\n    \
    \            } else if (s(i) + s(j) + s(k) < 0) {\n                    j += 1\n\
    \                } else {\n                    k -= 1\n                }\n   \
    \         }\n            i += 1\n        }\n        return false", "        if\
    \ (l.length < 3) {\n            return false\n        }\n        val s = l.sorted\n\
    \        for (i <- 0 until s.length - 2) {\n            var j = i + 1\n      \
    \      var k = s.length - 1\n            while (j < k) {\n                val\
    \ sum = s(i) + s(j) + s(k)\n                if (sum == 0) {\n                \
    \    return true\n                } else if (sum < 0) {\n                    j\
    \ += 1\n                } else {\n                    k -= 1\n               \
    \ }\n            }\n        }\n        return false", "        // YOUR CODE HERE\n\
    \        return false", "        var m = Map[Long, Int]()\n        for (i <- l)\
    \ {\n            if (m.contains(i)) {\n                m(i) += 1\n           \
    \ } else {\n                m(i) = 1\n            }\n        }\n        for (i\
    \ <- l) {\n            for (j <- l) {\n                if (i != j) {\n       \
    \             if (m.contains(-i - j)) {\n                        if (i == -i -\
    \ j && m(-i - j) < 2) {\n                            return false\n          \
    \              } else if (j == -i - j && m(-i - j) < 2) {\n                  \
    \          return false\n                        } else {\n                  \
    \          return true\n                        }\n                    }\n   \
    \             }\n            }\n        }\n        return false", "        val\
    \ s = l.toSet\n        for (i <- s; j <- s; k <- s) {\n            if (i != j\
    \ && j != k && i != k) {\n                if (i + j + k == 0) return true\n  \
    \          }\n        }\n        return false", "        val s = l.toSet\n   \
    \     for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) {\n                    return true\n                }\n            }\n\
    \        }\n        return false", "        // your code here\n        return\
    \ false", "        // your code here\n        return false", "        // YOUR\
    \ CODE HERE\n        return false", "        // YOUR CODE HERE\n        return\
    \ false", "        // YOUR CODE HERE\n        return false", "        val s =\
    \ l.toSet\n        for (i <- s) {\n            for (j <- s) {\n              \
    \  for (k <- s) {\n                    if (i != j && i != k && j != k && i + j\
    \ + k == 0) {\n                        return true\n                    }\n  \
    \              }\n            }\n        }\n        return false", "        val\
    \ s = l.toSet\n        val s2 = s.map(x => -x)\n        val s3 = s.map(x => x\
    \ * 2)\n        val s4 = s2.map(x => x * 2)\n        val s5 = s.map(x => x * 3)\n\
    \        val s6 = s2.map(x => x * 3)\n        val s7 = s.map(x => x * 4)\n   \
    \     val s8 = s2.map(x => x * 4)\n        val s9 = s.map(x => x * 5)\n      \
    \  val s10 = s2.map(x => x * 5)\n        val s11 = s.map(x => x * 6)\n       \
    \ val s12 = s2.map(x => x * 6)\n        val s13 = s.map(x => x * 7)\n        val\
    \ s14 = s2.map(x => x * 7)\n        val s15 = s.map(x => x * 8)\n        val s16\
    \ = s2.map(x => x * 8)\n        val s17 = s.map(x => x * 9)\n        val s18 =\
    \ s2.map(x => x * 9)\n        val s19 = s.map(x => x * 10)\n        val s20 =\
    \ s2.map(x => x * 10)\n        val s21 = s.map(x => x * 11)\n        val s22 =\
    \ s2.map(x => x * 11)\n        val s23 = s.map(x => x * 12)\n        val s24 =\
    \ s2.map(x => x * 12)\n        val s25 = s.map(x => x * 13)\n        val s26 =\
    \ s2.map(x => x * 13)\n        val s27 = s.map(x => x * 14)\n        val s28 =\
    \ s2.map(x => x * 14)\n        val s29 = s.map(x => x * 15)\n        val s30 =\
    \ s2.map(x => x * 15)\n        val s31 = s.map(x => x * 16)\n        val s32 =\
    \ s2.map", "        val s = l.toSet\n        for (i <- s) {\n            for (j\
    \ <- s) {\n                if (s.contains(-i - j)) return true\n            }\n\
    \        }\n        return false", "        val sorted = l.sorted\n        for\
    \ (i <- 0 until sorted.length - 2) {\n            var j = i + 1\n            var\
    \ k = sorted.length - 1\n            while (j < k) {\n                val sum\
    \ = sorted(i) + sorted(j) + sorted(k)\n                if (sum == 0) return true\n\
    \                else if (sum < 0) j += 1\n                else k -= 1\n     \
    \       }\n        }\n        return false", "        // your code here\n    \
    \    return false", "        // your code here\n        return false", "     \
    \   // YOUR CODE HERE\n        return false", "        var m = new HashMap[Long,\
    \ Int]\n        for (i <- l) {\n            if (m.contains(i)) {\n           \
    \     m(i) += 1\n            } else {\n                m(i) = 1\n            }\n\
    \        }\n        for (i <- l) {\n            for (j <- l) {\n             \
    \   if (m.contains(-i - j)) {\n                    if (i != j || m(i) > 1) {\n\
    \                        return true\n                    }\n                }\n\
    \            }\n        }\n        return false", "        // YOUR CODE HERE\n\
    \        return false", "        // your code here\n        return false", " \
    \       val s = l.toSet\n        for (i <- s) {\n            for (j <- s) {\n\
    \                if (i != j) {\n                    if (s.contains(-i - j)) {\n\
    \                        return true\n                    }\n                }\n\
    \            }\n        }\n        return false", "        // your code here\n\
    \        return false", "        // YOUR CODE HERE\n        return false", " \
    \       if (l.length < 3) {\n            return false\n        }\n        val\
    \ s = l.sorted\n        for (i <- 0 until s.length - 2) {\n            var j =\
    \ i + 1\n            var k = s.length - 1\n            while (j < k) {\n     \
    \           if (s(i) + s(j) + s(k) == 0) {\n                    return true\n\
    \                } else if (s(i) + s(j) + s(k) < 0) {\n                    j +=\
    \ 1\n                } else {\n                    k -= 1\n                }\n\
    \            }\n        }\n        return false", "        // YOUR CODE HERE\n\
    \        return false", "        val s = l.toSet\n        for (i <- s) {\n   \
    \         for (j <- s) {\n                if (s.contains(-i - j)) return true\n\
    \            }\n        }\n        return false", "        if (l.length < 3) {\n\
    \            return false\n        }\n        val s = l.toSet\n        for (i\
    \ <- s) {\n            for (j <- s) {\n                for (k <- s) {\n      \
    \              if (i != j && i != k && j != k && i + j + k == 0) {\n         \
    \               return true\n                    }\n                }\n      \
    \      }\n        }\n        return false", "        // your code here\n     \
    \   return false", "        // YOUR CODE HERE\n        return false", "      \
    \  val l2 = l.sorted\n        for (i <- 0 until l2.length - 2) {\n           \
    \ var j = i + 1\n            var k = l2.length - 1\n            while (j < k)\
    \ {\n                if (l2(i) + l2(j) + l2(k) == 0) return true\n           \
    \     else if (l2(i) + l2(j) + l2(k) < 0) j += 1\n                else k -= 1\n\
    \            }\n        }\n        return false", "        val s = l.toSet\n \
    \       val l2 = l.sorted\n        for (i <- 0 until l2.length - 2) {\n      \
    \      val a = l2(i)\n            var j = i + 1\n            var k = l2.length\
    \ - 1\n            while (j < k) {\n                val b = l2(j)\n          \
    \      val c = l2(k)\n                if (a + b + c == 0) {\n                \
    \    return true\n                } else if (a + b + c < 0) {\n              \
    \      j += 1\n                } else {\n                    k -= 1\n        \
    \        }\n            }\n        }\n        return false", "        // your\
    \ code here\n        return false", "        val l2 = l.sorted\n        for (i\
    \ <- 0 until l2.length - 2) {\n            var j = i + 1\n            var k =\
    \ l2.length - 1\n            while (j < k) {\n                val sum = l2(i)\
    \ + l2(j) + l2(k)\n                if (sum == 0) {\n                    return\
    \ true\n                } else if (sum < 0) {\n                    j += 1\n  \
    \              } else {\n                    k -= 1\n                }\n     \
    \       }\n        }\n        return false", "        // your code here\n    \
    \    return false", "        // your code here\n        return false", "     \
    \   // YOUR CODE HERE\n        return false", "        val s = l.toSet\n     \
    \   for (i <- s) {\n            for (j <- s) {\n                if (i != j &&\
    \ s.contains(-i - j)) {\n                    return true\n                }\n\
    \            }\n        }\n        return false", "        // your code here\n\
    \        return false", "        // Your code here\n        return false", " \
    \       val s = l.sorted\n        for (i <- 0 until s.length - 2) {\n        \
    \    var j = i + 1\n            var k = s.length - 1\n            while (j < k)\
    \ {\n                if (s(i) + s(j) + s(k) == 0) return true\n              \
    \  else if (s(i) + s(j) + s(k) < 0) j += 1\n                else k -= 1\n    \
    \        }\n        }\n        return false", "        // YOUR CODE HERE\n   \
    \     return false", "        // your code here\n        return false", "    \
    \    // your code here\n        return false", "        // your code here\n  \
    \      return false", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        for (i <- 0 until n) {\n            var j = i + 1\n            var k\
    \ = n - 1\n            while (j < k) {\n                val sum = sorted(i) +\
    \ sorted(j) + sorted(k)\n                if (sum == 0) return true\n         \
    \       else if (sum < 0) j += 1\n                else k -= 1\n            }\n\
    \        }\n        return false", "        // your code here\n        return\
    \ false", "        val h = new HashMap[Long, Int]\n        for (i <- l) {\n  \
    \          if (h.contains(i)) h(i) += 1\n            else h(i) = 1\n        }\n\
    \        for (i <- l) {\n            for (j <- l) {\n                if (i !=\
    \ j) {\n                    val k = -(i + j)\n                    if (h.contains(k)\
    \ && (k != i) && (k != j)) {\n                        if (k == i && h(k) > 1)\
    \ return true\n                        if (k == j && h(k) > 1) return true\n \
    \                       if (k != i && k != j) return true\n                  \
    \  }\n                }\n            }\n        }\n        return false", '        return
    false', "        // your code here\n        return false", "        // your code\
    \ here\n        return false", "        // YOUR CODE HERE\n        return false",
  "        // YOUR CODE HERE\n        return false", "        var s = l.toSet\n  \
    \      for (x <- s) {\n            for (y <- s) {\n                if (s.contains(-x\
    \ - y)) return true\n            }\n        }\n        return false", "      \
    \  val s = l.toSet\n        val l2 = l.toList\n        for (i <- 0 until l2.length)\
    \ {\n            for (j <- i + 1 until l2.length) {\n                if (s.contains(-(l2(i)\
    \ + l2(j)))) return true\n            }\n        }\n        return false", " \
    \       // your code here\n        false", "        val sorted = l.sorted\n  \
    \      for (i <- 0 until sorted.length - 2) {\n            val a = sorted(i)\n\
    \            var j = i + 1\n            var k = sorted.length - 1\n          \
    \  while (j < k) {\n                val b = sorted(j)\n                val c =\
    \ sorted(k)\n                if (a + b + c == 0) {\n                    return\
    \ true\n                } else if (a + b + c < 0) {\n                    j +=\
    \ 1\n                } else {\n                    k -= 1\n                }\n\
    \            }\n        }\n        return false", "        if (l.length < 3) {\n\
    \            return false\n        }\n        val s = l.sorted\n        for (i\
    \ <- 0 until s.length - 2) {\n            if (s(i) == 0) {\n                return\
    \ true\n            }\n            var j = i + 1\n            var k = s.length\
    \ - 1\n            while (j < k) {\n                val sum = s(i) + s(j) + s(k)\n\
    \                if (sum == 0) {\n                    return true\n          \
    \      } else if (sum < 0) {\n                    j += 1\n                } else\
    \ {\n                    k -= 1\n                }\n            }\n        }\n\
    \        return false", "        // your code here\n        return false", " \
    \       // your code here\n        return false", "        // YOUR CODE HERE\n\
    \        return false", "        // YOUR CODE HERE\n        return false", " \
    \       val s = l.toSet\n        for (i <- s) {\n            for (j <- s) {\n\
    \                for (k <- s) {\n                    if (i + j + k == 0) {\n \
    \                       return true\n                    }\n                }\n\
    \            }\n        }\n        return false", "        // your code here\n\
    \        false", "        // your code here\n        false", "        val s =\
    \ l.toSet\n        val s2 = s.map(x => x * x)\n        val s3 = s2.map(x => -x)\n\
    \        s2.exists(x => s3.contains(x))", "        // YOUR CODE HERE\n       \
    \ return false", "        if (l.length < 3) {\n            return false\n    \
    \    }\n        val s = l.sorted\n        for (i <- 0 until s.length - 2) {\n\
    \            var j = i + 1\n            var k = s.length - 1\n            while\
    \ (j < k) {\n                val sum = s(i) + s(j) + s(k)\n                if\
    \ (sum == 0) {\n                    return true\n                } else if (sum\
    \ < 0) {\n                    j += 1\n                } else {\n             \
    \       k -= 1\n                }\n            }\n        }\n        return false",
  "        // your code here\n        false", "        // YOUR CODE HERE\n       \
    \ return false", "        // YOUR CODE HERE\n        return false", "        //\
    \ your code here\n        false", "        if (l.length < 3) return false\n  \
    \      val s = l.sorted\n        for (i <- 0 until s.length - 2) {\n         \
    \   var j = i + 1\n            var k = s.length - 1\n            while (j < k)\
    \ {\n                if (s(i) + s(j) + s(k) == 0) return true\n              \
    \  else if (s(i) + s(j) + s(k) < 0) j += 1\n                else k -= 1\n    \
    \        }\n        }\n        return false", "        // YOUR CODE HERE\n   \
    \     return false", "        var m = new HashMap[Long, Int]\n        for (i <-\
    \ l) {\n            if (m.contains(i)) m(i) += 1\n            else m(i) = 1\n\
    \        }\n        for (i <- l) {\n            for (j <- l) {\n             \
    \   if (i != j) {\n                    val k = -i - j\n                    if\
    \ (m.contains(k) && (k != i) && (k != j)) {\n                        if (i ==\
    \ 0) {\n                            if (m(i) >= 3) return true\n             \
    \           }\n                        else if (j == 0) {\n                  \
    \          if (m(j) >= 3) return true\n                        }\n           \
    \             else if (k == 0) {\n                            if (m(k) >= 3) return\
    \ true\n                        }\n                        else return true\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ false", "        // YOUR CODE HERE\n        return false", "        val l2 =\
    \ l.sorted\n        for (i <- 0 until l2.length - 2) {\n            var j = i\
    \ + 1\n            var k = l2.length - 1\n            while (j < k) {\n      \
    \          if (l2(i) + l2(j) + l2(k) == 0) return true\n                else if\
    \ (l2(i) + l2(j) + l2(k) < 0) j += 1\n                else k -= 1\n          \
    \  }\n        }\n        return false", "        // YOUR CODE HERE\n        return\
    \ false", '        l.combinations(3).exists(x => x.sum == 0)', "        // YOUR\
    \ CODE HERE\n        return false", "        // your code here\n        return\
    \ false", "        // YOUR CODE HERE\n        return false", "        var s =\
    \ l.toSet\n        var r = false\n        for (i <- s) {\n            for (j <-\
    \ s) {\n                if (s.contains(-i - j)) {\n                    r = true\n\
    \                }\n            }\n        }\n        return r", "        // YOUR\
    \ CODE HERE\n        return false", "        // your code here\n        return\
    \ false", "        // Your Code Here\n        return false", "        if (l.length\
    \ < 3) {\n            return false\n        }\n        val l2 = l.sorted\n   \
    \     for (i <- 0 to l2.length - 3) {\n            var j = i + 1\n           \
    \ var k = l2.length - 1\n            while (j < k) {\n                if (l2(i)\
    \ + l2(j) + l2(k) == 0) {\n                    return true\n                }\
    \ else if (l2(i) + l2(j) + l2(k) < 0) {\n                    j += 1\n        \
    \        } else {\n                    k -= 1\n                }\n           \
    \ }\n        }\n        return false", "        // your code here\n        return\
    \ false", "        // your code here\n        return false", "        // YOUR\
    \ CODE HERE\n        return false", "        var result = false\n        for (i\
    \ <- 0 until l.length) {\n            for (j <- i + 1 until l.length) {\n    \
    \            for (k <- j + 1 until l.length) {\n                    if (l(i) +\
    \ l(j) + l(k) == 0) {\n                        result = true\n               \
    \     }\n                }\n            }\n        }\n        return result",
  "        // your code here\n        return false", "        // your code here\n\
    \        return false", "        // your code here\n        false", "        var\
    \ result = false\n        for (i <- 0 until l.length) {\n            for (j <-\
    \ i + 1 until l.length) {\n                for (k <- j + 1 until l.length) {\n\
    \                    if (l(i) + l(j) + l(k) == 0) {\n                        result\
    \ = true\n                    }\n                }\n            }\n        }\n\
    \        return result", "        val m = l.groupBy(x => x).mapValues(_.size)\n\
    \        val z = m.getOrElse(0l, 0)\n        if (z >= 3) return true\n       \
    \ for (i <- l) {\n            val j = -i\n            if (m.contains(j)) {\n \
    \               if (i == j) {\n                    if (m(i) >= 2) return true\n\
    \                } else {\n                    return true\n                }\n\
    \            }\n        }\n        return false", "        // your code here\n\
    \        return false", "        val sorted = l.sorted\n        for (i <- 0 until\
    \ sorted.length - 2) {\n            var j = i + 1\n            var k = sorted.length\
    \ - 1\n            while (j < k) {\n                val sum = sorted(i) + sorted(j)\
    \ + sorted(k)\n                if (sum == 0) return true\n                else\
    \ if (sum < 0) j += 1\n                else k -= 1\n            }\n        }\n\
    \        return false", "        val s = l.toSet\n        for (i <- s) {\n   \
    \         for (j <- s) {\n                if (i != j && s.contains(-i - j)) {\n\
    \                    return true\n                }\n            }\n        }\n\
    \        return false", "        val l2 = l.sorted\n        for (i <- 0 until\
    \ l2.length - 2) {\n            var j = i + 1\n            var k = l2.length -\
    \ 1\n            while (j < k) {\n                val sum = l2(i) + l2(j) + l2(k)\n\
    \                if (sum == 0) return true\n                else if (sum < 0)\
    \ j += 1\n                else k -= 1\n            }\n        }\n        return\
    \ false", "        val s = l.toSet\n        for (i <- s) {\n            for (j\
    \ <- s) {\n                if (s.contains(-i - j)) {\n                    return\
    \ true\n                }\n            }\n        }\n        return false", " \
    \       // your code here\n        return false", "        var n = l.length\n\
    \        if (n < 3) {\n            return false\n        }\n        var a = l.sorted\n\
    \        for (i <- 0 until n - 2) {\n            var j = i + 1\n            var\
    \ k = n - 1\n            while (j < k) {\n                var sum = a(i) + a(j)\
    \ + a(k)\n                if (sum == 0) {\n                    return true\n \
    \               } else if (sum < 0) {\n                    j += 1\n          \
    \      } else {\n                    k -= 1\n                }\n            }\n\
    \        }\n        return false", "        val s = l.toSet\n        val sl =\
    \ s.toList\n        for (i <- 0 until sl.length - 2) {\n            for (j <-\
    \ i + 1 until sl.length - 1) {\n                if (s.contains(-(sl(i) + sl(j))))\
    \ return true\n            }\n        }\n        return false", "        // your\
    \ code here\n        return false", "        // YOUR CODE HERE\n        return\
    \ false", "        // your code here\n        return false", "        var result\
    \ = false\n        for (i <- 0 until l.length) {\n            for (j <- i + 1\
    \ until l.length) {\n                for (k <- j + 1 until l.length) {\n     \
    \               if (l(i) + l(j) + l(k) == 0) {\n                        result\
    \ = true\n                    }\n                }\n            }\n        }\n\
    \        return result", "        // YOUR CODE HERE\n        return false", " \
    \       // YOUR CODE HERE\n        return false", "        // your code here\n\
    \        false", "        // your code here\n        return false", "        if\
    \ (l.length < 3) {\n            return false\n        }\n        val s = l.sorted\n\
    \        for (i <- 0 until s.length - 2) {\n            var j = i + 1\n      \
    \      var k = s.length - 1\n            while (j < k) {\n                val\
    \ sum = s(i) + s(j) + s(k)\n                if (sum == 0) {\n                \
    \    return true\n                } else if (sum < 0) {\n                    j\
    \ += 1\n                } else {\n                    k -= 1\n               \
    \ }\n            }\n        }\n        return false", "        var m = Map[Long,\
    \ Int]()\n        for (i <- l) {\n            if (m.contains(i)) {\n         \
    \       m(i) += 1\n            } else {\n                m(i) = 1\n          \
    \  }\n        }\n        for (i <- l) {\n            for (j <- l) {\n        \
    \        if (i != j) {\n                    var k = -i - j\n                 \
    \   if (m.contains(k) && (k != i) && (k != j)) {\n                        return\
    \ true\n                    }\n                }\n            }\n        }\n \
    \       return false", "        // >>> triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n        // (false)\n        // >>> triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n        // (true)\n        // >>> triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n        // (false)\n        // >>> triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong)))\n        // (true)\n\
    \        // >>> triplesSumToZero((List[Long](1l.toLong)))\n        // (false)\n\
    \        // >>> triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong)))\n        // (false)\n        // >>> triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n        // (true)\n        // >>> triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n        // (false)\n        // >>> triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong)))\n        // (true)\n\
    \        // >>> triplesSumToZero((List[Long](1l.toLong)))\n        // (false)\n\
    \        // >>> triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong)))\n        // (false)\n        // >>> triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.", "        val n = l.length\n        if (n < 3) return\
    \ false\n        val l2 = l.sorted\n        for (i <- 0 until n - 2) {\n     \
    \       var j = i + 1\n            var k = n - 1\n            while (j < k) {\n\
    \                val sum = l2(i) + l2(j) + l2(k)\n                if (sum == 0)\
    \ return true\n                else if (sum < 0) j += 1\n                else\
    \ k -= 1\n            }\n        }\n        return false", "        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                for (k <-\
    \ s) {\n                    if (i != j && i != k && j != k && i + j + k == 0)\
    \ {\n                        return true\n                    }\n            \
    \    }\n            }\n        }\n        return false", "        val sorted =\
    \ l.sorted\n        for (i <- 0 until sorted.length - 2) {\n            var j\
    \ = i + 1\n            var k = sorted.length - 1\n            while (j < k) {\n\
    \                val sum = sorted(i) + sorted(j) + sorted(k)\n               \
    \ if (sum == 0) return true\n                else if (sum < 0) j += 1\n      \
    \          else k -= 1\n            }\n        }\n        return false", "   \
    \     var m = Map[Long, Int]()\n        for (i <- l) {\n            if (m.contains(i))\
    \ {\n                m(i) += 1\n            } else {\n                m(i) = 1\n\
    \            }\n        }\n        for (i <- l) {\n            for (j <- l) {\n\
    \                if (i != j) {\n                    var k = -(i + j)\n       \
    \             if (m.contains(k)) {\n                        if (i == k && m(k)\
    \ >= 2) {\n                            return true\n                        }\
    \ else if (i != k) {\n                            return true\n              \
    \          }\n                    }\n                }\n            }\n      \
    \  }\n        return false", "        // your code here\n        return false",
  "        var i = 0\n        var j = 0\n        var k = 0\n        var found = false\n\
    \        while (i < l.length && !found) {\n            j = i + 1\n           \
    \ while (j < l.length && !found) {\n                k = j + 1\n              \
    \  while (k < l.length && !found) {\n                    if (l(i) + l(j) + l(k)\
    \ == 0) {\n                        found = true\n                    }\n     \
    \               k = k + 1\n                }\n                j = j + 1\n    \
    \        }\n            i = i + 1\n        }\n        return found", "       \
    \ // YOUR CODE HERE\n        return false", "        // your code here\n     \
    \   return false", "        val s = l.toSet\n        val l2 = l.sorted\n     \
    \   val n = l2.length\n        for (i <- 0 until n - 2) {\n            val a =\
    \ l2(i)\n            for (j <- i + 1 until n - 1) {\n                val b = l2(j)\n\
    \                val c = -(a + b)\n                if (s.contains(c)) return true\n\
    \            }\n        }\n        return false", "        val l2 = l.sorted\n\
    \        val l3 = l2.zipWithIndex\n        val l4 = l3.filter(x => x._2 % 2 ==\
    \ 0)\n        val l5 = l4.map(x => x._1)\n        val l6 = l5.sorted\n       \
    \ val l7 = l6.zipWithIndex\n        val l8 = l7.filter(x => x._2 % 2 == 0)\n \
    \       val l9 = l8.map(x => x._1)\n        val l10 = l9.sorted\n        val l11\
    \ = l10.zipWithIndex\n        val l12 = l11.filter(x => x._2 % 2 == 0)\n     \
    \   val l13 = l12.map(x => x._1)\n        val l14 = l13.sorted\n        val l15\
    \ = l14.zipWithIndex\n        val l16 = l15.filter(x => x._2 % 2 == 0)\n     \
    \   val l17 = l16.map(x => x._1)\n        val l18 = l17.sorted\n        val l19\
    \ = l18.zipWithIndex\n        val l20 = l19.filter(x => x._2 % 2 == 0)\n     \
    \   val l21 = l20.map(x => x._1)\n        val l22 = l21.sorted\n        val l23\
    \ = l22.zipWithIndex\n        val l24 = l23.filter(x => x._2 % 2 == 0)\n     \
    \   val l25 = l24.map(x => x._1)\n        val l26 = l25.sorted\n        val l27\
    \ = l26.zipWithIndex\n        val l28 = l27.filter(x => x._2 % 2 == 0)\n     \
    \   val l29 = l28.map(x => x._1)\n        val l30 = l29.sorted\n        val l31\
    \ = l30.zipWithIndex\n        val l32 = l31.filter(x => x._2 % 2 == 0)\n     \
    \   val l33 = l32.map(x => x._1)\n        val l34 = l33.sorted\n        val l35\
    \ = l34.zipWithIndex\n       ", "        if (l.length < 3) {\n            return\
    \ false\n        }\n        val s = l.sorted\n        for (i <- 0 until s.length\
    \ - 2) {\n            var j = i + 1\n            var k = s.length - 1\n      \
    \      while (j < k) {\n                val sum = s(i) + s(j) + s(k)\n       \
    \         if (sum == 0) {\n                    return true\n                }\
    \ else if (sum < 0) {\n                    j += 1\n                } else {\n\
    \                    k -= 1\n                }\n            }\n        }\n   \
    \     return false", "        // your code here\n        return false", "    \
    \    val s = l.sorted\n        for (i <- 0 until s.length - 2) {\n           \
    \ var j = i + 1\n            var k = s.length - 1\n            while (j < k) {\n\
    \                val sum = s(i) + s(j) + s(k)\n                if (sum == 0) return\
    \ true\n                else if (sum < 0) j += 1\n                else k -= 1\n\
    \            }\n        }\n        return false", "        if (l.length < 3) {\n\
    \            return false\n        }\n        val s = l.toSet\n        for (i\
    \ <- s) {\n            for (j <- s) {\n                for (k <- s) {\n      \
    \              if (i != j && i != k && j != k && i + j + k == 0) {\n         \
    \               return true\n                    }\n                }\n      \
    \      }\n        }\n        return false", "        // your code here\n     \
    \   return false", "        val s = l.toSet\n        val s2 = s.map(x => x * x)\n\
    \        val s3 = s2.map(x => x * x)\n        val s4 = s3.map(x => x * x)\n  \
    \      val s5 = s4.map(x => x * x)\n        val s6 = s5.map(x => x * x)\n    \
    \    val s7 = s6.map(x => x * x)\n        val s8 = s7.map(x => x * x)\n      \
    \  val s9 = s8.map(x => x * x)\n        val s10 = s9.map(x => x * x)\n       \
    \ val s11 = s10.map(x => x * x)\n        val s12 = s11.map(x => x * x)\n     \
    \   val s13 = s12.map(x => x * x)\n        val s14 = s13.map(x => x * x)\n   \
    \     val s15 = s14.map(x => x * x)\n        val s16 = s15.map(x => x * x)\n \
    \       val s17 = s16.map(x => x * x)\n        val s18 = s17.map(x => x * x)\n\
    \        val s19 = s18.map(x => x * x)\n        val s20 = s19.map(x => x * x)\n\
    \        val s21 = s20.map(x => x * x)\n        val s22 = s21.map(x => x * x)\n\
    \        val s23 = s22.map(x => x * x)\n        val s24 = s23.map(x => x * x)\n\
    \        val s25 = s24.map(x => x * x)\n        val s26 = s25.map(x => x * x)\n\
    \        val s27 = s26.map(x => x * x)\n        val s28 = s27.map(x => x * x)\n\
    \        val s29 = s28.map(x => x * x)\n        val s30 = s29.map(x => x * x)\n\
    \        val s31 = s30.map(", "        // YOUR CODE HERE\n        return false",
  "        if (l.length < 3) {\n            return false\n        }\n        val set\
    \ = new HashSet[Long]()\n        for (i <- 0 until l.length) {\n            set.add(l(i))\n\
    \        }\n        for (i <- 0 until l.length) {\n            for (j <- i + 1\
    \ until l.length) {\n                if (set.contains(-(l(i) + l(j)))) {\n   \
    \                 return true\n                }\n            }\n        }\n \
    \       return false", "        val l2 = l.sorted\n        for (i <- 0 until l2.length\
    \ - 2) {\n            var j = i + 1\n            var k = l2.length - 1\n     \
    \       while (j < k) {\n                if (l2(i) + l2(j) + l2(k) == 0) {\n \
    \                   return true\n                } else if (l2(i) + l2(j) + l2(k)\
    \ < 0) {\n                    j += 1\n                } else {\n             \
    \       k -= 1\n                }\n            }\n        }\n        return false",
  "        val sorted = l.sorted\n        for (i <- 0 until sorted.length - 2) {\n\
    \            var j = i + 1\n            var k = sorted.length - 1\n          \
    \  while (j < k) {\n                val sum = sorted(i) + sorted(j) + sorted(k)\n\
    \                if (sum == 0) return true\n                else if (sum < 0)\
    \ j += 1\n                else k -= 1\n            }\n        }\n        return\
    \ false", "        val s = l.sorted\n        for (i <- 0 until s.length - 2) {\n\
    \            var j = i + 1\n            var k = s.length - 1\n            while\
    \ (j < k) {\n                val sum = s(i) + s(j) + s(k)\n                if\
    \ (sum == 0) return true\n                else if (sum < 0) j += 1\n         \
    \       else k -= 1\n            }\n        }\n        return false", "      \
    \  if (l.length < 3) {\n            return false\n        }\n        val s = l.sorted\n\
    \        for (i <- 0 to s.length - 3) {\n            val a = s(i)\n          \
    \  var j = i + 1\n            var k = s.length - 1\n            while (j < k)\
    \ {\n                val b = s(j)\n                val c = s(k)\n            \
    \    if (a + b + c == 0) {\n                    return true\n                }\
    \ else if (a + b + c < 0) {\n                    j += 1\n                } else\
    \ {\n                    k -= 1\n                }\n            }\n        }\n\
    \        return false", "        val s = l.toSet\n        for (i <- s) {\n   \
    \         for (j <- s) {\n                if (s.contains(-i - j)) {\n        \
    \            return true\n                }\n            }\n        }\n      \
    \  return false", '        l.combinations(3).exists(x => x.sum == 0)', "     \
    \   val s = l.toSet\n        for (i <- s) {\n            for (j <- s) {\n    \
    \            for (k <- s) {\n                    if (i != j && i != k && j !=\
    \ k && i + j + k == 0) {\n                        return true\n              \
    \      }\n                }\n            }\n        }\n        return false",
  "        // YOUR CODE HERE\n        return false", "        // your code here\n\
    \        return false", "        // YOUR CODE HERE\n        return false", " \
    \       // YOUR CODE HERE\n        return false", "        // YOUR CODE HERE\n\
    \        return false", "        if (l.length < 3) {\n            return false\n\
    \        }\n        val s = l.sorted\n        for (i <- 0 until s.length - 2)\
    \ {\n            val a = s(i)\n            var j = i + 1\n            var k =\
    \ s.length - 1\n            while (j < k) {\n                val b = s(j)\n  \
    \              val c = s(k)\n                if (a + b + c == 0) {\n         \
    \           return true\n                } else if (a + b + c < 0) {\n       \
    \             j += 1\n                } else {\n                    k -= 1\n \
    \               }\n            }\n        }\n        return false", "        //\
    \ your code here\n        return false", "        // your code here\n        return\
    \ false", "        val s = l.toSet\n        val s2 = s.map(x => x * x)\n     \
    \   val s3 = s2.map(x => -x)\n        val s4 = s2.intersect(s3)\n        return\
    \ s4.size > 0", "        // your code here\n        return false", "        val\
    \ s = l.toSet\n        for (i <- s) {\n            for (j <- s) {\n          \
    \      if (s.contains(-i - j)) {\n                    return true\n          \
    \      }\n            }\n        }\n        return false", "        var s = Set[Long]()\n\
    \        for (i <- l) {\n            if (s.contains(-i)) return true\n       \
    \     s += i\n        }\n        return false", "        var s = l.sorted\n  \
    \      var i = 0\n        while (i < s.length - 2) {\n            var j = i +\
    \ 1\n            var k = s.length - 1\n            while (j < k) {\n         \
    \       if (s(i) + s(j) + s(k) == 0) return true\n                else if (s(i)\
    \ + s(j) + s(k) < 0) j += 1\n                else k -= 1\n            }\n    \
    \        i += 1\n        }\n        return false", "        // your code here\n\
    \        return false", "        var s = l.sorted\n        for (i <- 0 until s.length\
    \ - 2) {\n            var j = i + 1\n            var k = s.length - 1\n      \
    \      while (j < k) {\n                if (s(i) + s(j) + s(k) == 0) return true\n\
    \                else if (s(i) + s(j) + s(k) < 0) j += 1\n                else\
    \ k -= 1\n            }\n        }\n        return false", "        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false", "      \
    \  // your code here\n        return false", "        // YOUR CODE HERE\n    \
    \    return false", "        val s = l.sorted\n        for (i <- 0 until s.length\
    \ - 2) {\n            val a = s(i)\n            var j = i + 1\n            var\
    \ k = s.length - 1\n            while (j < k) {\n                val b = s(j)\n\
    \                val c = s(k)\n                if (a + b + c == 0) return true\n\
    \                else if (a + b + c < 0) j += 1\n                else k -= 1\n\
    \            }\n        }\n        return false", "        val s = l.toSet\n \
    \       val l2 = l.sorted\n        for (i <- 0 until l2.length - 2) {\n      \
    \      for (j <- i + 1 until l2.length - 1) {\n                val k = -(l2(i)\
    \ + l2(j))\n                if (s.contains(k)) return true\n            }\n  \
    \      }\n        return false", "        if (l.length < 3) {\n            return\
    \ false\n        }\n        val s = l.sorted\n        for (i <- 0 until s.length\
    \ - 2) {\n            var j = i + 1\n            var k = s.length - 1\n      \
    \      while (j < k) {\n                val sum = s(i) + s(j) + s(k)\n       \
    \         if (sum == 0) {\n                    return true\n                }\
    \ else if (sum < 0) {\n                    j += 1\n                } else {\n\
    \                    k -= 1\n                }\n            }\n        }\n   \
    \     return false", "        val s = l.sorted\n        for (i <- 0 until s.length\
    \ - 2) {\n            var j = i + 1\n            var k = s.length - 1\n      \
    \      while (j < k) {\n                val sum = s(i) + s(j) + s(k)\n       \
    \         if (sum == 0) return true\n                else if (sum < 0) j += 1\n\
    \                else k -= 1\n            }\n        }\n        return false",
  "        // YOUR CODE HERE\n        return false", "        // your code here\n\
    \        return false", "        val s = l.toSet\n        for (i <- s) {\n   \
    \         for (j <- s) {\n                for (k <- s) {\n                   \
    \ if (i != j && i != k && j != k && i + j + k == 0) {\n                      \
    \  return true\n                    }\n                }\n            }\n    \
    \    }\n        return false", "        // YOUR CODE HERE\n        return false",
  "        // YOUR CODE HERE\n        return false", "        if (l.length < 3) {\n\
    \            return false\n        }\n        val s = l.sorted\n        for (i\
    \ <- 0 until s.length - 2) {\n            var j = i + 1\n            var k = s.length\
    \ - 1\n            while (j < k) {\n                val sum = s(i) + s(j) + s(k)\n\
    \                if (sum == 0) {\n                    return true\n          \
    \      } else if (sum < 0) {\n                    j += 1\n                } else\
    \ {\n                    k -= 1\n                }\n            }\n        }\n\
    \        return false", "        // your code here\n        return false", " \
    \       // >>> triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\n\
    \        // (false)\n        // >>> triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ -2l.toLong, 1l.toLong)))\n        // (true)\n        // >>> triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n        // (false)\n        // >>> triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong)))\n        // (true)\n\
    \        // >>> triplesSumToZero((List[Long](1l.toLong)))\n        // (false)\n\
    \        if (l.length < 3) {\n            return false\n        }\n        val\
    \ sortedList = l.sorted\n        for (i <- 0 to sortedList.length - 3) {\n   \
    \         var j = i + 1\n            var k = sortedList.length - 1\n         \
    \   while (j < k) {\n                val sum = sortedList(i) + sortedList(j) +\
    \ sortedList(k)\n                if (sum == 0) {\n                    return true\n\
    \                } else if (sum < 0) {\n                    j += 1\n         \
    \       } else {\n                    k -= 1\n                }\n            }\n\
    \        }\n        return false", "        val n = l.length\n        if (n <\
    \ 3) return false\n        val l2 = l.sorted\n        for (i <- 0 until n - 2)\
    \ {\n            var j = i + 1\n            var k = n - 1\n            while (j\
    \ < k) {\n                val sum = l2(i) + l2(j) + l2(k)\n                if\
    \ (sum == 0) return true\n                else if (sum < 0) j += 1\n         \
    \       else k -= 1\n            }\n        }\n        return false", "      \
    \  // YOUR CODE HERE\n        false", "        // YOUR CODE HERE\n        return\
    \ false", "        var m = Map[Long, Int]()\n        for (i <- l) {\n        \
    \    if (m.contains(i)) {\n                m(i) += 1\n            } else {\n \
    \               m(i) = 1\n            }\n        }\n        for (i <- l) {\n \
    \           for (j <- l) {\n                if (i != j) {\n                  \
    \  if (m.contains(-i - j)) {\n                        if (i == -i - j && m(-i\
    \ - j) < 2) {\n                            return false\n                    \
    \    } else if (j == -i - j && m(-i - j) < 2) {\n                            return\
    \ false\n                        } else {\n                            return\
    \ true\n                        }\n                    }\n                }\n\
    \            }\n        }\n        return false", "        // your code here\n\
    \        return false", "        // your code here\n        return false", " \
    \       // YOUR CODE HERE\n        return false", "        // your code here\n\
    \        return false", "        // YOUR CODE HERE\n        return false", " \
    \       // your code here\n        return false", "        val s = l.toSet\n \
    \       for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) {\n                    return true\n                }\n            }\n\
    \        }\n        return false", "        // YOUR CODE HERE\n        return\
    \ false", "        // YOUR CODE HERE\n        return false", "        var s =\
    \ l.sorted\n        for (i <- 0 until s.length - 2) {\n            var j = i +\
    \ 1\n            var k = s.length - 1\n            while (j < k) {\n         \
    \       if (s(i) + s(j) + s(k) == 0) return true\n                else if (s(i)\
    \ + s(j) + s(k) < 0) j += 1\n                else k -= 1\n            }\n    \
    \    }\n        return false", "        val s = l.sorted\n        for (i <- 0\
    \ until s.length - 2) {\n            var j = i + 1\n            var k = s.length\
    \ - 1\n            while (j < k) {\n                val sum = s(i) + s(j) + s(k)\n\
    \                if (sum == 0) return true\n                else if (sum < 0)\
    \ j += 1\n                else k -= 1\n            }\n        }\n        return\
    \ false", "        // YOUR CODE HERE\n        return false", "        // your\
    \ code here\n        false", "        val s = l.sorted\n        for (i <- 0 until\
    \ s.length) {\n            var j = i + 1\n            var k = s.length - 1\n \
    \           while (j < k) {\n                if (s(i) + s(j) + s(k) == 0) return\
    \ true\n                else if (s(i) + s(j) + s(k) < 0) j += 1\n            \
    \    else k -= 1\n            }\n        }\n        return false", "        //\
    \ YOUR CODE HERE\n        return false", "        // YOUR CODE HERE\n        return\
    \ false", '        return false', "        // your code here\n        false",
  "        val s = l.sorted\n        for (i <- 0 until s.length - 2) {\n         \
    \   var j = i + 1\n            var k = s.length - 1\n            while (j < k)\
    \ {\n                val sum = s(i) + s(j) + s(k)\n                if (sum ==\
    \ 0) return true\n                else if (sum < 0) j += 1\n                else\
    \ k -= 1\n            }\n        }\n        return false", "        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) {\n                    return true\n                }\n            }\n\
    \        }\n        return false", "        val s = l.toSet\n        val n = s.size\n\
    \        if (n < 3) return false\n        val a = s.toArray\n        for (i <-\
    \ 0 until n) {\n            for (j <- i + 1 until n) {\n                for (k\
    \ <- j + 1 until n) {\n                    if (a(i) + a(j) + a(k) == 0) return\
    \ true\n                }\n            }\n        }\n        return false"]
stop_tokens:
- "\n    }\n"
