name: HumanEval_40_triples_sum_to_zero
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // triples_sum_to_zero takes a list of integers as an input.\n    // it returns\
  \ true if there are three distinct elements in the list that\n    // sum to zero,\
  \ and false otherwise.\n    // >>> triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
  \ 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (true)\n    // >>> triplesSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> triplesSumToZero((List[Long](2l.toLong,\
  \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong)))\n    // (true)\n   \
  \ // >>> triplesSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def triplesSumToZero(l\
  \ : List[Long]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
  \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
  \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
  \ -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
  \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
completions: ["        // Your code here\n        return false", "        // your\
    \ code here\n        return false", "        val h = new HashMap[Long, Int]()\n\
    \        for (i <- l) {\n            if (h.contains(i)) h(i) += 1\n          \
    \  else h(i) = 1\n        }\n        for (i <- l) {\n            for (j <- l)\
    \ {\n                if (i != j) {\n                    val k = -(i + j)\n   \
    \                 if (h.contains(k) && (k != i) && (k != j)) {\n             \
    \           if (k == i) {\n                            if (h(k) > 1) return true\n\
    \                        }\n                        else if (k == j) {\n     \
    \                       if (h(k) > 1) return true\n                        }\n\
    \                        else if (h(k) > 0) return true\n                    }\n\
    \                }\n            }\n        }\n        return false", "       \
    \ // your code here\n        return false", "        // YOUR CODE HERE\n     \
    \   return false", "        var s = l.sorted\n        var i = 0\n        var j\
    \ = 0\n        var k = 0\n        while (i < s.length - 2) {\n            j =\
    \ i + 1\n            k = s.length - 1\n            while (j < k) {\n         \
    \       if (s(i) + s(j) + s(k) == 0) {\n                    return true\n    \
    \            } else if (s(i) + s(j) + s(k) < 0) {\n                    j += 1\n\
    \                } else {\n                    k -= 1\n                }\n   \
    \         }\n            i += 1\n        }\n        return false", "        if\
    \ (l.length < 3) {\n            return false\n        }\n        val s = l.sorted\n\
    \        for (i <- 0 until s.length - 2) {\n            var j = i + 1\n      \
    \      var k = s.length - 1\n            while (j < k) {\n                val\
    \ sum = s(i) + s(j) + s(k)\n                if (sum == 0) {\n                \
    \    return true\n                } else if (sum < 0) {\n                    j\
    \ += 1\n                } else {\n                    k -= 1\n               \
    \ }\n            }\n        }\n        return false", "        // YOUR CODE HERE\n\
    \        return false", "        var m = Map[Long, Int]()\n        for (i <- l)\
    \ {\n            if (m.contains(i)) {\n                m(i) += 1\n           \
    \ } else {\n                m(i) = 1\n            }\n        }\n        for (i\
    \ <- l) {\n            for (j <- l) {\n                if (i != j) {\n       \
    \             if (m.contains(-i - j)) {\n                        if (i == -i -\
    \ j && m(-i - j) < 2) {\n                            return false\n          \
    \              } else if (j == -i - j && m(-i - j) < 2) {\n                  \
    \          return false\n                        } else {\n                  \
    \          return true\n                        }\n                    }\n   \
    \             }\n            }\n        }\n        return false", "        val\
    \ s = l.toSet\n        for (i <- s; j <- s; k <- s) {\n            if (i != j\
    \ && j != k && i != k) {\n                if (i + j + k == 0) return true\n  \
    \          }\n        }\n        return false", "        val s = l.toSet\n   \
    \     for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) {\n                    return true\n                }\n            }\n\
    \        }\n        return false", "        // your code here\n        return\
    \ false", "        // your code here\n        return false", "        // YOUR\
    \ CODE HERE\n        return false", "        // YOUR CODE HERE\n        return\
    \ false", "        // YOUR CODE HERE\n        return false", "        val s =\
    \ l.toSet\n        for (i <- s) {\n            for (j <- s) {\n              \
    \  for (k <- s) {\n                    if (i != j && i != k && j != k && i + j\
    \ + k == 0) {\n                        return true\n                    }\n  \
    \              }\n            }\n        }\n        return false", "        val\
    \ s = l.toSet\n        val s2 = s.map(x => -x)\n        val s3 = s.map(x => x\
    \ * 2)\n        val s4 = s2.map(x => x * 2)\n        val s5 = s.map(x => x * 3)\n\
    \        val s6 = s2.map(x => x * 3)\n        val s7 = s.map(x => x * 4)\n   \
    \     val s8 = s2.map(x => x * 4)\n        val s9 = s.map(x => x * 5)\n      \
    \  val s10 = s2.map(x => x * 5)\n        val s11 = s.map(x => x * 6)\n       \
    \ val s12 = s2.map(x => x * 6)\n        val s13 = s.map(x => x * 7)\n        val\
    \ s14 = s2.map(x => x * 7)\n        val s15 = s.map(x => x * 8)\n        val s16\
    \ = s2.map(x => x * 8)\n        val s17 = s.map(x => x * 9)\n        val s18 =\
    \ s2.map(x => x * 9)\n        val s19 = s.map(x => x * 10)\n        val s20 =\
    \ s2.map(x => x * 10)\n        val s21 = s.map(x => x * 11)\n        val s22 =\
    \ s2.map(x => x * 11)\n        val s23 = s.map(x => x * 12)\n        val s24 =\
    \ s2.map(x => x * 12)\n        val s25 = s.map(x => x * 13)\n        val s26 =\
    \ s2.map(x => x * 13)\n        val s27 = s.map(x => x * 14)\n        val s28 =\
    \ s2.map(x => x * 14)\n        val s29 = s.map(x => x * 15)\n        val s30 =\
    \ s2.map(x => x * 15)\n        val s31 = s.map(x => x * 16)\n        val s32 =\
    \ s2.map", "        val s = l.toSet\n        for (i <- s) {\n            for (j\
    \ <- s) {\n                if (s.contains(-i - j)) return true\n            }\n\
    \        }\n        return false", "        val sorted = l.sorted\n        for\
    \ (i <- 0 until sorted.length - 2) {\n            var j = i + 1\n            var\
    \ k = sorted.length - 1\n            while (j < k) {\n                val sum\
    \ = sorted(i) + sorted(j) + sorted(k)\n                if (sum == 0) return true\n\
    \                else if (sum < 0) j += 1\n                else k -= 1\n     \
    \       }\n        }\n        return false"]
stop_tokens:
- "\n    }\n"
