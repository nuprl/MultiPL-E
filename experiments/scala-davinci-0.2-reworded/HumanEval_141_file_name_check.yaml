name: HumanEval_141_file_name_check
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Create a function which takes a string representing a file's name, and returns\n\
  \    // 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n   \
  \ // A file's name is considered to be valid if and only if all the following conditions\
  \ \n    // are met:\n    // - There should not be more than three digits ('0'-'9')\
  \ in the file's name.\n    // - The file's name contains exactly one dot '.'\n \
  \   // - The substring before the dot should not be empty, and it starts with a\
  \ letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n    // - The substring\
  \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    // Examples:\n\
  \    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"\
  1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name : String) : String\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
  example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
  )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
  MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
  \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
  /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
  Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n\
  \    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
  @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\"\
  )));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
  Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\"\
  )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"\
  No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n  \
  \  assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
  final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
  )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
  \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
completions: ["        // Write your code here\n        return \"\";", "        //\
    \ Write your code here\n        return \"\"", "        // Write your code here\n\
    \        return \"\"", "        // Write your code here\n        return \"Yes\"",
  "        // Write your code here\n        return \"\"", "        // Write your code\
    \ here\n        return \"\"", "        val file_name_regex = \"\"\"([a-zA-Z]{1}[a-zA-Z0-9]*)\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case file_name_regex(name,\
    \ extension) => \"Yes\"\n            case _ => \"No\"\n        }", "        //\
    \ Write your code here\n        return \"\"", "        // Write your code here\n\
    \        return \"Yes\"", "        // Write your code here\n        return \"\"\
    ;", "        // Write your code here\n        return \"\"", "        // Write\
    \ your code here\n        return \"\"", "        // Write your code here\n   \
    \     return \"Yes\"", "        // Write your code here\n        return \"\"",
  "        // Write your code here\n        return \"\";", "        // Write your\
    \ code here\n        return \"\"", "        // Write your code here\n        return\
    \ \"Yes\"", "        // Write your code here\n        return \"\";", "       \
    \ val file_name_split = file_name.split(\"\\\\.\")\n        if (file_name_split.length\
    \ != 2) {\n            return \"No\"\n        }\n        val file_name_split_0\
    \ = file_name_split(0)\n        val file_name_split_1 = file_name_split(1)\n \
    \       if (file_name_split_0.length == 0) {\n            return \"No\"\n    \
    \    }\n        if (file_name_split_0.count(c => c >= '0' && c <= '9') > 3) {\n\
    \            return \"No\"\n        }\n        if (file_name_split_0(0) < 'a'\
    \ || file_name_split_0(0) > 'z') {\n            return \"No\"\n        }\n   \
    \     if (file_name_split_1 != \"txt\" && file_name_split_1 != \"exe\" && file_name_split_1\
    \ != \"dll\") {\n            return \"No\"\n        }\n        return \"Yes\"",
  "        // Write your code here\n        return \"Yes\""]
stop_tokens:
- "\n    }\n"
