name: HumanEval_152_compare
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // I think we all remember that feeling when the result of some long-awaited\n\
  \    // event is finally known. The feelings and thoughts you have at that moment\
  \ are\n    // definitely worth noting down and comparing.\n    // Your task is to\
  \ determine if a person correctly guessed the results of a number of matches.\n\
  \    // You are given two lists of scores and guesses of equal length, where each\
  \ index shows a match. \n    // Return a list of the same length denoting how far\
  \ off each guess was. If they have guessed correctly,\n    // the value is 0, and\
  \ if not, the value is the absolute difference between the guess and the score.\n\
  \    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
  \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
  \ 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong, 0l.toLong,\
  \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
  \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
  \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
  \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
  \ : List[Long], guess : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
  \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
  \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
  \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
  \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
completions: ["        var result : List[Long] = List()\n        for (i <- 0 until\
    \ game.length) {\n            result = result :+ abs(game(i) - guess(i))\n   \
    \     }\n        return result", "        // Your code here\n        var result\
    \ = List[Long]()\n        for (i <- 0 until game.length) {\n            result\
    \ = result :+ abs(game(i) - guess(i))\n        }\n        result", "        val\
    \ result = new ListBuffer[Long]()\n        for (i <- 0 until game.length) {\n\
    \            result += abs(game(i) - guess(i))\n        }\n        result.toList",
  '        game.zip(guess).map(x => abs(x._1 - x._2))', "        var result : List[Long]\
    \ = List[Long]()\n        for (i <- 0 until game.length) {\n            result\
    \ = result :+ abs(game(i) - guess(i))\n        }\n        return result", "  \
    \      val result = ListBuffer[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            result += abs(game(i) - guess(i))\n        }\n        result.toList",
  "        var result : List[Long] = List()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   return result", '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', "        var result = List[Long]()\n        for (i <- 0\
    \ until game.length) {\n            result = result :+ abs(game(i) - guess(i))\n\
    \        }\n        result", "        // your code here\n        game.zip(guess).map(x\
    \ => abs(x._1 - x._2))", "        var result = List[Long]()\n        for (i <-\
    \ 0 until game.length) {\n            result = result :+ abs(game(i) - guess(i))\n\
    \        }\n        result", '        game.zip(guess).map(x => abs(x._1 - x._2))',
  "        var result = List[Long]()\n        for (i <- 0 until game.length) {\n \
    \           result = result :+ abs(game(i) - guess(i))\n        }\n        result",
  '        game.zip(guess).map(x => abs(x._1 - x._2))', "        var result : List[Long]\
    \ = List()\n        for (i <- 0 until game.length) {\n            result = result\
    \ :+ abs(game(i) - guess(i))\n        }\n        return result", "        // Your\
    \ code here\n        return List[Long]()", '        game.zip(guess).map(x => abs(x._1
    - x._2))', "        var result = List[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   result", "        var result = List[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   result", "        var result = List[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   result", "        var result = List[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   result", "        var result : List[Long] = List[Long]()\n        for (i <-\
    \ 0 until game.length) {\n            result = result :+ abs(game(i) - guess(i))\n\
    \        }\n        return result", '        game.zip(guess).map(x => abs(x._1
    - x._2))', "        var result = List[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   result", "        var result : List[Long] = List[Long]()\n        for (i <-\
    \ 0 until game.length) {\n            result = result :+ abs(game(i) - guess(i))\n\
    \        }\n        return result", "        var result = List[Long]()\n     \
    \   for (i <- 0 until game.length) {\n            result = result :+ abs(game(i)\
    \ - guess(i))\n        }\n        result", "        // Write your code here\n\
    \        var result = List[Long]()\n        for (i <- 0 until game.length) {\n\
    \            result = result :+ abs(game(i) - guess(i))\n        }\n        result",
  "        var result = List[Long]()\n        for (i <- 0 until game.length) {\n \
    \           result = result :+ abs(game(i) - guess(i))\n        }\n        result",
  "        val result = new ListBuffer[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            val diff = abs(game(i) - guess(i))\n            result += diff\n\
    \        }\n        result.toList", "        var result : List[Long] = List()\n\
    \        for (i <- 0 until game.length) {\n            result = result :+ abs(game(i)\
    \ - guess(i))\n        }\n        return result", "        var result : List[Long]\
    \ = List[Long]()\n        for (i <- 0 until game.length) {\n            result\
    \ = result :+ abs(game(i) - guess(i))\n        }\n        return result", "  \
    \      var result = List[Long]()\n        for (i <- 0 until game.length) {\n \
    \           if (game(i) == guess(i)) result = result :+ 0\n            else result\
    \ = result :+ abs(game(i) - guess(i))\n        }\n        result", "        //\
    \ your code here\n        game.zip(guess).map(x => abs(x._1 - x._2))", "     \
    \   val result = ListBuffer[Long]()\n        for (i <- 0 until game.length) {\n\
    \            result += abs(game(i) - guess(i))\n        }\n        result.toList",
  '        game.zip(guess).map(x => abs(x._1 - x._2))', "        var result = List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            result = result :+ abs(game(i)\
    \ - guess(i))\n        }\n        result", "        // Your code here\n      \
    \  return List[Long]()", "        var result : List[Long] = List[Long]()\n   \
    \     for (i <- 0 until game.length) {\n            result = result :+ abs(game(i)\
    \ - guess(i))\n        }\n        return result", "        var result : List[Long]\
    \ = List()\n        for (i <- 0 until game.length) {\n            result = result\
    \ :+ abs(game(i) - guess(i))\n        }\n        return result", "        var\
    \ result : List[Long] = List[Long]()\n        for (i <- 0 until game.length) {\n\
    \            result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result", "        var result = List[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   result", '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', " \
    \       var result : List[Long] = List[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   return result", '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', "        var result : List[Long] = List()\n        for\
    \ (i <- 0 until game.length) {\n            result = result :+ abs(game(i) - guess(i))\n\
    \        }\n        return result", "        val result = new ListBuffer[Long]()\n\
    \        for (i <- 0 until game.length) {\n            val diff = abs(game(i)\
    \ - guess(i))\n            result += diff\n        }\n        result.toList",
  "        var result = List[Long]()\n        for (i <- 0 until game.length) {\n \
    \           result = result :+ abs(game(i) - guess(i))\n        }\n        result",
  "        var result : List[Long] = List[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   return result", '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', "        var result : List[Long] = List()\n        for\
    \ (i <- 0 until game.length) {\n            result = result :+ abs(game(i) - guess(i))\n\
    \        }\n        return result", '        game.zip(guess).map(x => abs(x._1
    - x._2))', "        var result = List[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   result", "        var result = List[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   result", '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', " \
    \       val result = new ListBuffer[Long]\n        for (i <- 0 until game.length)\
    \ {\n            val diff = abs(game(i) - guess(i))\n            result += diff\n\
    \        }\n        result.toList", "        var result = List[Long]()\n     \
    \   for (i <- 0 until game.length) {\n            result = result :+ abs(game(i)\
    \ - guess(i))\n        }\n        result", '        game.zip(guess).map(x => abs(x._1
    - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', " \
    \       // Your code here\n        return List[Long]()", "        // Your code\
    \ here\n        return null;", "        var result = List[Long]()\n        for\
    \ (i <- 0 until game.length) {\n            result = result :+ abs(game(i) - guess(i))\n\
    \        }\n        result", "        var result = List[Long]()\n        for (i\
    \ <- 0 until game.length) {\n            result = result :+ abs(game(i) - guess(i))\n\
    \        }\n        result", "        var result : List[Long] = List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            result = result :+ abs(game(i)\
    \ - guess(i))\n        }\n        return result", "        var result = List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            result = result :+ abs(game(i)\
    \ - guess(i))\n        }\n        result", '        game.zip(guess).map(x => abs(x._1
    - x._2))', "        // Your code here\n        return List[Long]()", "       \
    \ // Your code here\n        return List[Long]()", '        (game, guess).zipped.map((x,
    y) => abs(x - y))', "        var result = List[Long]()\n        for (i <- 0 until\
    \ game.length) {\n            result = result :+ abs(game(i) - guess(i))\n   \
    \     }\n        result", "        var result : List[Long] = List()\n        for\
    \ (i <- 0 until game.length) {\n            result = result :+ abs(game(i) - guess(i))\n\
    \        }\n        return result", "        var result : List[Long] = List()\n\
    \        for (i <- 0 until game.length) {\n            result = result :+ abs(game(i)\
    \ - guess(i))\n        }\n        return result", "        // your code here\n\
    \        game.zip(guess).map(x => abs(x._1 - x._2))", '        game.zip(guess).map(x
    => abs(x._1 - x._2))', "        var result : List[Long] = List()\n        for\
    \ (i <- 0 until game.length) {\n            result = result :+ abs(game(i) - guess(i))\n\
    \        }\n        return result", "        var result : List[Long] = List()\n\
    \        for (i <- 0 until game.length) {\n            result = result :+ abs(game(i)\
    \ - guess(i))\n        }\n        return result", "        var result : List[Long]\
    \ = List()\n        for (i <- 0 until game.length) {\n            result = result\
    \ :+ abs(game(i) - guess(i))\n        }\n        return result", '        game.zip(guess).map(x
    => abs(x._1 - x._2))', "        var result : List[Long] = List()\n        for\
    \ (i <- 0 until game.length) {\n            result = result :+ abs(game(i) - guess(i))\n\
    \        }\n        return result", "        var result = List[Long]()\n     \
    \   for (i <- 0 until game.length) {\n            result = result :+ abs(game(i)\
    \ - guess(i))\n        }\n        result", '        game.zip(guess).map(x => abs(x._1
    - x._2))', "        var result : List[Long] = List()\n        for (i <- 0 until\
    \ game.length) {\n            result = result :+ abs(game(i) - guess(i))\n   \
    \     }\n        return result", '        game.zip(guess).map(x => abs(x._1 -
    x._2))', "        // Write your code here\n        var result : List[Long] = List()\n\
    \        for (i <- 0 until game.length) {\n            result = result :+ abs(game(i)\
    \ - guess(i))\n        }\n        return result", '        game.zip(guess).map(x
    => abs(x._1 - x._2))', "        var result : List[Long] = List()\n        for\
    \ (i <- 0 until game.length) {\n            result = result :+ abs(game(i) - guess(i))\n\
    \        }\n        return result", "        var result = List[Long]()\n     \
    \   for (i <- 0 until game.length) {\n            result = result :+ abs(game(i)\
    \ - guess(i))\n        }\n        result", '        game.zip(guess).map(x => abs(x._1
    - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', "        val result = new ListBuffer[Long]\n        for\
    \ (i <- 0 until game.length) {\n            result += abs(game(i) - guess(i))\n\
    \        }\n        result.toList", "        var result = List[Long]()\n     \
    \   for (i <- 0 until game.length) {\n            result = result :+ abs(game(i)\
    \ - guess(i))\n        }\n        result", "        var result : List[Long] =\
    \ List()\n        for (i <- 0 until game.length) {\n            result = result\
    \ :+ abs(game(i) - guess(i))\n        }\n        return result", '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', " \
    \       var result = List[Long]()\n        for (i <- 0 until game.length) {\n\
    \            result = result :+ abs(game(i) - guess(i))\n        }\n        result",
  "        var result : List[Long] = List()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   return result", "        var result : List[Long] = List()\n        for (i\
    \ <- 0 until game.length) {\n            result = result :+ abs(game(i) - guess(i))\n\
    \        }\n        return result", "        var result = List[Long]()\n     \
    \   for (i <- 0 until game.length) {\n            result = result :+ abs(game(i)\
    \ - guess(i))\n        }\n        result", "        var result : List[Long] =\
    \ List[Long]()\n        for (i <- 0 until game.length) {\n            result =\
    \ result :+ abs(game(i) - guess(i))\n        }\n        return result", '        game.zip(guess).map(x
    => abs(x._1 - x._2))', "        var result : List[Long] = List[Long]()\n     \
    \   for (i <- 0 until game.length) {\n            result = result :+ abs(game(i)\
    \ - guess(i))\n        }\n        return result", "        var result = List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            result = result :+ abs(game(i)\
    \ - guess(i))\n        }\n        result", '        game.zip(guess).map(x => abs(x._1
    - x._2))', "        val result = new ListBuffer[Long]\n        for (i <- 0 until\
    \ game.length) {\n            result += abs(game(i) - guess(i))\n        }\n \
    \       result.toList", "        var result : List[Long] = List()\n        for\
    \ (i <- 0 until game.length) {\n            result = result :+ abs(game(i) - guess(i))\n\
    \        }\n        return result", '        game.zip(guess).map(x => abs(x._1
    - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', "        val result = new ListBuffer[Long]\n        for\
    \ (i <- 0 until game.length) {\n            result += abs(game(i) - guess(i))\n\
    \        }\n        result.toList", "        var result = List[Long]()\n     \
    \   for (i <- 0 until game.length) {\n            result = result :+ abs(game(i)\
    \ - guess(i))\n        }\n        result", '        game.zip(guess).map(x => abs(x._1
    - x._2))', "        var result = List[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   result", "        var result : List[Long] = List()\n        for (i <- 0 until\
    \ game.length) {\n            result = result :+ abs(game(i) - guess(i))\n   \
    \     }\n        return result", "        var result : List[Long] = List()\n \
    \       for (i <- 0 until game.length) {\n            result = result :+ abs(game(i)\
    \ - guess(i))\n        }\n        return result", '        game.zip(guess).map(x
    => abs(x._1 - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', "        var result = List[Long]()\n        for (i <- 0\
    \ until game.length) {\n            result = result :+ abs(game(i) - guess(i))\n\
    \        }\n        result", "        var result = List[Long]()\n        for (i\
    \ <- 0 until game.length) {\n            result = result :+ abs(game(i) - guess(i))\n\
    \        }\n        result", "        var result = List[Long]()\n        for (i\
    \ <- 0 until game.length) {\n            result = result :+ abs(game(i) - guess(i))\n\
    \        }\n        result", "        var result = List[Long]()\n        for (i\
    \ <- 0 until game.length) {\n            result = result :+ abs(game(i) - guess(i))\n\
    \        }\n        result", '        game.zip(guess).map(x => abs(x._1 - x._2))',
  "        var result : List[Long] = List()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   return result", "        // Your code here\n        return List[Long]()",
  "        var result : List[Long] = List()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   return result", "        var result : List[Long] = List()\n        for (i\
    \ <- 0 until game.length) {\n            result = result :+ abs(game(i) - guess(i))\n\
    \        }\n        return result", '        game.zip(guess).map(x => abs(x._1
    - x._2))', "        var result = List[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   result", "        var result = List[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   result", '        game.zip(guess).map(x => abs(x._1 - x._2))', "        var\
    \ result : List[Long] = List[Long]()\n        for (i <- 0 until game.length) {\n\
    \            result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result", '        game.zip(guess).map(x => abs(x._1 - x._2))', "        var\
    \ result = List[Long]()\n        for (i <- 0 until game.length) {\n          \
    \  result = result :+ abs(game(i) - guess(i))\n        }\n        result", " \
    \       var result : List[Long] = List()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   return result", "        var result : List[Long] = Nil\n        for (i <-\
    \ 0 until game.length) {\n            result = abs(game(i) - guess(i)) :: result\n\
    \        }\n        result.reverse", "        var result : List[Long] = List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            result = result :+ abs(game(i)\
    \ - guess(i))\n        }\n        return result", "        var result : List[Long]\
    \ = List[Long]()\n        for (i <- 0 until game.length) {\n            result\
    \ = result :+ abs(game(i) - guess(i))\n        }\n        return result", "  \
    \      var result = List[Long]()\n        for (i <- 0 until game.length) {\n \
    \           result = result :+ abs(game(i) - guess(i))\n        }\n        result",
  '        game.zip(guess).map(x => abs(x._1 - x._2))', '        game.zip(guess).map(x
    => abs(x._1 - x._2))', "        var result : List[Long] = Nil\n        for (i\
    \ <- 0 until game.length) {\n            result = abs(game(i) - guess(i)) :: result\n\
    \        }\n        result.reverse", '        game.zip(guess).map(x => abs(x._1
    - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', "        // Your\
    \ code here\n        return List[Long]()", "        var result : List[Long] =\
    \ List()\n        for (i <- 0 until game.length) {\n            result = result\
    \ :+ abs(game(i) - guess(i))\n        }\n        return result", "        var\
    \ result = List[Long]()\n        for (i <- 0 until game.length) {\n          \
    \  result = result :+ abs(game(i) - guess(i))\n        }\n        result", '        game.zip(guess).map(x
    => abs(x._1 - x._2))', "        val result = new ListBuffer[Long]\n        for\
    \ (i <- 0 until game.length) {\n            result += abs(game(i) - guess(i))\n\
    \        }\n        result.toList", '        game.zip(guess).map(x => abs(x._1
    - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', "        var\
    \ result = new ListBuffer[Long]()\n        for (i <- 0 until game.length) {\n\
    \            result += abs(game(i) - guess(i))\n        }\n        result.toList",
  '        game.zip(guess).map(x => abs(x._1 - x._2))', "        // your code here\n\
    \        game.zip(guess).map(x => abs(x._1 - x._2))", "        var result = List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            result = result :+ abs(game(i)\
    \ - guess(i))\n        }\n        result", "        var result = List[Long]()\n\
    \        for (i <- 0 until game.length) {\n            result = result :+ abs(game(i)\
    \ - guess(i))\n        }\n        result", "        var result : List[Long] =\
    \ List()\n        for (i <- 0 until game.length) {\n            result = result\
    \ :+ abs(game(i) - guess(i))\n        }\n        return result", "        var\
    \ result : List[Long] = List()\n        for (i <- 0 until game.length) {\n   \
    \         result = result :+ abs(game(i) - guess(i))\n        }\n        return\
    \ result", "        var result = List[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   result", "        var result = List[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   result", "        // Write your code here\n        game.zip(guess).map(x =>\
    \ abs(x._1 - x._2))", "        var result = List[Long]()\n        for (i <- 0\
    \ until game.length) {\n            result = result :+ abs(game(i) - guess(i))\n\
    \        }\n        result", "        val result = new ListBuffer[Long]\n    \
    \    for (i <- 0 until game.length) {\n            result += abs(game(i) - guess(i))\n\
    \        }\n        result.toList", '        return game.zip(guess).map(x => abs(x._1
    - x._2))', "        var result = List[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   result", "        var result = List[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   result", "        var result : List[Long] = List()\n        for (i <- 0 until\
    \ game.length) {\n            result = result :+ abs(game(i) - guess(i))\n   \
    \     }\n        return result", '        game.zip(guess).map(x => abs(x._1 -
    x._2))', "        var result = List[Long]()\n        for (i <- 0 until game.length)\
    \ {\n            result = result :+ abs(game(i) - guess(i))\n        }\n     \
    \   result", '        game.zip(guess).map(x => abs(x._1 - x._2))', "        var\
    \ result = List[Long]()\n        for (i <- 0 until game.length) {\n          \
    \  result = result :+ abs(game(i) - guess(i))\n        }\n        result", " \
    \       // Your code here\n        return List[Long]()", '        game.zip(guess).map(x
    => abs(x._1 - x._2))', "        val result = new ListBuffer[Long]\n        for\
    \ (i <- 0 until game.length) {\n            result += abs(game(i) - guess(i))\n\
    \        }\n        result.toList", '        game.zip(guess).map(x => abs(x._1
    - x._2))', '        game.zip(guess).map(x => abs(x._1 - x._2))', "        var\
    \ result = List[Long]()\n        for (i <- 0 until game.length) {\n          \
    \  result = result :+ abs(game(i) - guess(i))\n        }\n        result", '        game.zip(guess).map(x
    => abs(x._1 - x._2))', "        var result : List[Long] = List[Long]()\n     \
    \   for (i <- 0 until game.length) {\n            result = result :+ abs(game(i)\
    \ - guess(i))\n        }\n        return result", "        var result : List[Long]\
    \ = List()\n        for (i <- 0 until game.length) {\n            result = result\
    \ :+ abs(game(i) - guess(i))\n        }\n        return result", "        var\
    \ result : List[Long] = Nil\n        for (i <- 0 until game.length) {\n      \
    \      result = abs(game(i) - guess(i)) :: result\n        }\n        result.reverse",
  '        game.zip(guess).map(x => abs(x._1 - x._2))', "        var result : List[Long]\
    \ = List[Long]()\n        for (i <- 0 until game.length) {\n            result\
    \ = result :+ abs(game(i) - guess(i))\n        }\n        return result", '        game.zip(guess).map(x
    => abs(x._1 - x._2))', "        var result : List[Long] = List()\n        for\
    \ (i <- 0 until game.length) {\n            result = result :+ abs(game(i) - guess(i))\n\
    \        }\n        return result", '        game.zip(guess).map(x => abs(x._1
    - x._2))']
stop_tokens:
- "\n    }\n"
