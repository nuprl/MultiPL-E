name: HumanEval_91_is_bored
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You'll be given a string of words, and your task is to count the number\n\
  \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
  \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    //\
  \ >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is\
  \ blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
  \ : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello\
  \ world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n  \
  \  assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) ==\
  \ (0l));\n    assert(isBored((\"I feel good today. I will be productive. will kill\
  \ It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\")) ==\
  \ (0l));\n    }\n\n}\n"
completions: ["        var count = 0l\n        var i = 0\n        while (i < S.length)\
    \ {\n            if (S(i) == 'I') {\n                count += 1\n            \
    \    while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) != '!') i += 1\n\
    \            }\n            i += 1\n        }\n        count", "        var boredoms\
    \ = 0l\n        var inSentence = false\n        for (c <- S) {\n            if\
    \ (c == '.' || c == '?' || c == '!') {\n                inSentence = false\n \
    \           } else if (c == 'I' && !inSentence) {\n                boredoms +=\
    \ 1\n                inSentence = true\n            }\n        }\n        boredoms",
  "        val sentences = S.split(\"[.?!]\")\n        var count = 0\n        for\
    \ (sentence <- sentences) {\n            if (sentence.trim.startsWith(\"I\"))\
    \ count += 1\n        }\n        count", "        var count = 0l\n        var\
    \ i = 0\n        while (i < S.length) {\n            if (S(i) == 'I') {\n    \
    \            count += 1\n                while (i < S.length && S(i) != '.' &&\
    \ S(i) != '?' && S(i) != '!') i += 1\n            }\n            i += 1\n    \
    \    }\n        count", "        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        var boredoms = 0\n        for (sentence <- sentences) {\n  \
    \          if (sentence.trim().startsWith(\"I\")) boredoms += 1\n        }\n \
    \       boredoms", "        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size", "        var count = 0l\n        var i =\
    \ 0\n        while (i < S.length) {\n            if (S(i) == 'I') {\n        \
    \        count += 1\n                while (i < S.length && S(i) != '.' && S(i)\
    \ != '?' && S(i) != '!') i += 1\n            }\n            i += 1\n        }\n\
    \        count", "        val s = S.split(\"[.?!]\")\n        var count = 0\n\
    \        for (i <- 0 until s.length) {\n            if (s(i).startsWith(\"I\"\
    )) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        sentences.filter(s => s.trim.startsWith(\"I\")).size", "   \
    \     val sentences = S.split(\"[.?!]\")\n        sentences.filter(s => s.trim.startsWith(\"\
    I\")).size", "        val sentences = S.split(\"[.?!]\")\n        var boredoms\
    \ = 0l\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) {\n                boredoms += 1\n            }\n        }\n        boredoms",
  "        val sentences = S.split(\"[.?!]\")\n        var count = 0\n        for\
    \ (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"I\"\
    )) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        var count = 0\n        for (sentence <- sentences) {\n     \
    \       if (sentence.trim().startsWith(\"I\")) count += 1\n        }\n       \
    \ count", "        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size", "        val sentences = S.split(\"[.?!]\"\
    )\n        var count = 0l\n        for (sentence <- sentences) {\n           \
    \ if (sentence.trim().startsWith(\"I\")) {\n                count += 1\n     \
    \       }\n        }\n        count", '        S.split("[.?!]").filter(x => x.trim.startsWith("I")).size',
  '        S.split("[.?!]").filter(s => s.trim().startsWith("I")).size', "       \
    \ val words = S.split(\"[.?!]\")\n        var count = 0\n        for (word <-\
    \ words) {\n            if (word.startsWith(\"I\")) count += 1\n        }\n  \
    \      count", "        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size"]
stop_tokens:
- "\n    }\n"
