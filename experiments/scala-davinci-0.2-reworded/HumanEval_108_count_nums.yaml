name: HumanEval_108_count_nums
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function count_nums which takes a list of integers and returns\n\
  \    // the number of elements which has a sum of digits > 0.\n    // If a number\
  \ is negative, then its first signed digit will be negative:\n    // e.g. -123 has\
  \ signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    // (0l)\n\
  \    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n    //\
  \ (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n  \
  \  // (3l)\n    def countNums(arr : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
  \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
  \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
  \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
  \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
  \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
  \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
  \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n   \
  \ assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
  \ == (1l));\n    }\n\n}\n"
completions: ["        def sumDigits(n : Long) : Long = {\n            if (n == 0)\
    \ 0\n            else {\n                val absN = abs(n)\n                absN\
    \ % 10 + sumDigits(absN / 10)\n            }\n        }\n        arr.filter(sumDigits(_)\
    \ > 0).length", "        def sumDigits(n : Long) : Long = {\n            var sum\
    \ = 0l\n            var nn = n\n            while (nn != 0) {\n              \
    \  sum += abs(nn % 10)\n                nn /= 10\n            }\n            sum\n\
    \        }\n        arr.filter(sumDigits(_) > 0).length", "        def sumDigits(n\
    \ : Long) : Long = {\n            var sum = 0l\n            var m = abs(n)\n \
    \           while (m > 0) {\n                sum += m % 10\n                m\
    \ /= 10\n            }\n            sum\n        }\n        arr.filter(sumDigits(_)\
    \ > 0).length", "        def sumDigits(n : Long) : Long = {\n            var s\
    \ = 0l\n            var m = abs(n)\n            while (m > 0) {\n            \
    \    s += m % 10\n                m /= 10\n            }\n            s\n    \
    \    }\n        arr.map(sumDigits(_)).count(_ > 0)", '        arr.filter(x =>
    x.toString.map(x => x.asDigit).sum > 0).size', '        arr.filter(x => x.toString.map(y
    => y.asDigit).sum > 0).size', "        def sumDigits(n : Long) : Long = {\n  \
    \          var sum = 0l\n            var m = n\n            while (m != 0) {\n\
    \                sum += m % 10\n                m /= 10\n            }\n     \
    \       return sum\n        }\n        var count = 0l\n        for (n <- arr)\
    \ {\n            if (sumDigits(n) > 0) count += 1\n        }\n        return count",
  "        def sumDigits(n : Long) : Long = {\n            var sum = 0l\n        \
    \    var m = n\n            if (m < 0) m = -m\n            while (m > 0) {\n \
    \               sum += m % 10\n                m /= 10\n            }\n      \
    \      sum\n        }\n        arr.filter(sumDigits(_) > 0).length", '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).size', "        var count = 0l\n  \
    \      for (i <- arr) {\n            var sum = 0l\n            var num = i\n \
    \           if (num < 0) num = -num\n            while (num > 0) {\n         \
    \       sum += num % 10\n                num /= 10\n            }\n          \
    \  if (sum > 0) count += 1\n        }\n        return count", "        // Fill\
    \ up this function body\n        // You can add another function as well, if required\n\
    \        var count = 0l\n        for (i <- arr) {\n            var sum = 0l\n\
    \            if (i < 0) {\n                sum += i.abs.toString.head.asDigit\n\
    \            }\n            for (j <- i.abs.toString) {\n                sum +=\
    \ j.asDigit\n            }\n            if (sum > 0) {\n                count\
    \ += 1\n            }\n        }\n        count", "        def sumDigits(n : Long)\
    \ : Long = {\n            if (n == 0) 0\n            else (n % 10) + sumDigits(n\
    \ / 10)\n        }\n        arr.map(sumDigits(_)).filter(_ > 0).length", "   \
    \     var count = 0l\n        for (i <- arr) {\n            var sum = 0l\n   \
    \         var j = i\n            if (j < 0) j = -j\n            while (j > 0)\
    \ {\n                sum += j % 10\n                j /= 10\n            }\n \
    \           if (sum > 0) count += 1\n        }\n        count", "        var count\
    \ = 0l\n        for (i <- arr) {\n            if (i < 0) {\n                if\
    \ (i.toString.substring(1).map(x => x.asDigit).sum > 0) count += 1\n         \
    \   } else {\n                if (i.toString.map(x => x.asDigit).sum > 0) count\
    \ += 1\n            }\n        }\n        count", "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ var count = 0\n        for (i <- arr) {\n            var sum = 0\n         \
    \   var n = i\n            if (n < 0) {\n                n = -n\n            \
    \    sum += -n % 10\n                n /= 10\n            }\n            while\
    \ (n > 0) {\n                sum += n % 10\n                n /= 10\n        \
    \    }\n            if (sum > 0) count += 1\n        }\n        count", "    \
    \    def sumDigits(n : Long) : Long = {\n            var sum = 0l\n          \
    \  var m = n\n            if (m < 0) m = -m\n            while (m > 0) {\n   \
    \             sum += m % 10\n                m /= 10\n            }\n        \
    \    return sum\n        }\n        var count = 0l\n        for (n <- arr) {\n\
    \            if (sumDigits(n) > 0) count += 1\n        }\n        return count",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var count = 0\n        for (i <- arr) {\n    \
    \        var sum = 0\n            var num = i\n            if (num < 0) {\n  \
    \              num = -num\n                sum += -(num % 10)\n              \
    \  num /= 10\n            }\n            while (num > 0) {\n                sum\
    \ += num % 10\n                num /= 10\n            }\n            if (sum >\
    \ 0) count += 1\n        }\n        count", "        def sumDigits(n : Long) :\
    \ Long = {\n            var sum = 0l\n            var m = n\n            if (m\
    \ < 0) m = -m\n            while (m > 0) {\n                sum += m % 10\n  \
    \              m /= 10\n            }\n            sum\n        }\n        var\
    \ count = 0l\n        for (n <- arr) if (sumDigits(n) > 0) count += 1\n      \
    \  count", '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).size',
  "        def sumDigits(n : Long) : Long = {\n            if (n == 0) 0 else (n %\
    \ 10) + sumDigits(n / 10)\n        }\n        arr.filter(sumDigits(_) > 0).length",
  "        def sumDigits(n : Long) : Long = {\n            var sum = 0l\n        \
    \    var m = n\n            while (m != 0) {\n                sum += m % 10\n\
    \                m /= 10\n            }\n            sum\n        }\n        var\
    \ count = 0l\n        for (n <- arr) {\n            if (sumDigits(n) > 0) count\
    \ += 1\n        }\n        count", "        def sumDigits(n : Long) : Long = {\n\
    \            if (n == 0) 0\n            else if (n < 0) -(n % 10) + sumDigits(n\
    \ / 10)\n            else n % 10 + sumDigits(n / 10)\n        }\n        arr.filter(sumDigits(_)\
    \ > 0).length", "        var sum = 0l\n        for (i <- arr) {\n            var\
    \ num = i\n            var digitSum = 0l\n            while (num != 0) {\n   \
    \             digitSum += abs(num % 10)\n                num /= 10\n         \
    \   }\n            if (digitSum > 0) sum += 1\n        }\n        sum", '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).size', "        def sumDigits(n : Long)\
    \ : Long = {\n            if (n == 0) 0\n            else abs(n % 10) + sumDigits(n\
    \ / 10)\n        }\n        arr.filter(sumDigits(_) > 0).length", "        //\
    \ Fill up this function body\n        // You can add another function as well,\
    \ if required\n        var count : Long = 0\n        for (i <- arr) {\n      \
    \      if (i < 0) {\n                var temp = i * -1\n                var sum\
    \ : Long = 0\n                while (temp > 0) {\n                    sum += temp\
    \ % 10\n                    temp /= 10\n                }\n                if\
    \ (sum > 0) {\n                    count += 1\n                }\n           \
    \ } else {\n                var temp = i\n                var sum : Long = 0\n\
    \                while (temp > 0) {\n                    sum += temp % 10\n  \
    \                  temp /= 10\n                }\n                if (sum > 0)\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n        return count", "        // Fill up this function body\n        //\
    \ You can add another function as well, if required\n        var count = 0l\n\
    \        for (i <- arr) {\n            var sum = 0l\n            var num = i\n\
    \            if (num < 0) {\n                num = -num\n                sum +=\
    \ -(num % 10)\n                num /= 10\n            }\n            while (num\
    \ > 0) {\n                sum += num % 10\n                num /= 10\n       \
    \     }\n            if (sum > 0) count += 1\n        }\n        count", "   \
    \     def sumDigits(n : Long) : Long = {\n            if (n == 0) 0\n        \
    \    else abs(n % 10) + sumDigits(n / 10)\n        }\n        arr.filter(sumDigits(_)\
    \ > 0).length", '        return arr.filter(x => x.toString.map(x => x.asDigit).sum
    > 0).length', "        val n = arr.length\n        var count = 0l\n        for\
    \ (i <- 0 until n) {\n            val x = arr(i)\n            var sum = 0l\n \
    \           if (x < 0) {\n                sum += -x % 10\n                var\
    \ y = -x / 10\n                while (y != 0) {\n                    sum += y\
    \ % 10\n                    y /= 10\n                }\n            } else {\n\
    \                var y = x\n                while (y != 0) {\n               \
    \     sum += y % 10\n                    y /= 10\n                }\n        \
    \    }\n            if (sum > 0) count += 1\n        }\n        count", '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).size', "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ var count = 0l\n        for (i <- arr) {\n            if (i < 0) {\n       \
    \         if (i.toString.substring(1).map(_.asDigit).sum > 0) count += 1\n   \
    \         } else {\n                if (i.toString.map(_.asDigit).sum > 0) count\
    \ += 1\n            }\n        }\n        count", '        arr.filter(x => x.toString.map(y
    => y.asDigit).sum > 0).size', '        arr.filter(x => x.toString.map(y => y.asDigit).sum
    > 0).size', "        def sumDigits(n : Long) : Long = {\n            var sum =\
    \ 0l\n            var nn = n\n            if (nn < 0) nn = -nn\n            while\
    \ (nn > 0) {\n                sum += nn % 10\n                nn /= 10\n     \
    \       }\n            sum\n        }\n        arr.filter(sumDigits(_) > 0).length",
  "        def sumDigits(n : Long) : Long = {\n            var sum = 0l\n        \
    \    var m = n\n            if (m < 0) m = -m\n            while (m > 0) {\n \
    \               sum += m % 10\n                m /= 10\n            }\n      \
    \      sum\n        }\n        arr.filter(sumDigits(_) > 0).length", '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).size', "        var count = 0l\n  \
    \      for (i <- arr) {\n            if (i < 0) {\n                if (i.toString.tail.map(_.asDigit).sum\
    \ > 0) count += 1\n            } else {\n                if (i.toString.map(_.asDigit).sum\
    \ > 0) count += 1\n            }\n        }\n        count", "        def sumDigits(n\
    \ : Long) : Long = {\n            var sum = 0l\n            var m = n\n      \
    \      while (m != 0) {\n                sum += m % 10\n                m /= 10\n\
    \            }\n            return sum\n        }\n        return arr.filter(sumDigits(_)\
    \ > 0).length", '        arr.filter(x => x.toString.map(x => x.asDigit).sum >
    0).size', '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).size',
  '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).size', "      \
    \  var count = 0l\n        for (i <- arr) {\n            var sum = 0l\n      \
    \      var num = i\n            if (num < 0) num = -num\n            while (num\
    \ > 0) {\n                sum += num % 10\n                num /= 10\n       \
    \     }\n            if (sum > 0) count += 1\n        }\n        return count",
  "        def sumDigits(n : Long) : Long = {\n            var s = 0l\n          \
    \  var m = n\n            if (m < 0) m = -m\n            while (m > 0) {\n   \
    \             s += m % 10\n                m /= 10\n            }\n          \
    \  return s\n        }\n        var count = 0l\n        for (n <- arr) {\n   \
    \         if (sumDigits(n) > 0) count += 1\n        }\n        return count",
  '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).size', '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).size', "        var count = 0l\n  \
    \      for (i <- arr) {\n            if (i < 0) {\n                if (i.toString.length\
    \ == 1) {\n                    count += 1\n                } else {\n        \
    \            var sum = 0\n                    for (j <- 1 until i.toString.length)\
    \ {\n                        sum += i.toString.charAt(j).asDigit\n           \
    \         }\n                    if (sum > 0) count += 1\n                }\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 0 until i.toString.length) {\n                    sum += i.toString.charAt(j).asDigit\n\
    \                }\n                if (sum > 0) count += 1\n            }\n \
    \       }\n        count", "        def sumDigits(n : Long) : Long = {\n     \
    \       if (n == 0) return 0\n            val sign = if (n < 0) -1 else 1\n  \
    \          return sign * (n % 10 + sumDigits(n / 10))\n        }\n        return\
    \ arr.filter(sumDigits(_) > 0).length", "        def sumDigits(n : Long) : Long\
    \ = {\n            if (n == 0) return 0\n            else return (n % 10) + sumDigits(n\
    \ / 10)\n        }\n        var count = 0l\n        for (i <- arr) {\n       \
    \     if (sumDigits(i) > 0) count += 1\n        }\n        return count", "  \
    \      def sumDigits(n : Long) : Long = {\n            var sum = 0l\n        \
    \    var m = n\n            while (m != 0) {\n                sum += abs(m % 10)\n\
    \                m /= 10\n            }\n            sum\n        }\n        arr.filter(sumDigits(_)\
    \ > 0).length", "        // Fill up this function body\n        // You can add\
    \ another function as well, if required\n        var count = 0\n        for (i\
    \ <- arr) {\n            var sum = 0\n            var num = i\n            if\
    \ (num < 0) num = -num\n            while (num > 0) {\n                sum +=\
    \ num % 10\n                num /= 10\n            }\n            if (sum > 0)\
    \ count += 1\n        }\n        count", "        var count = 0l\n        for\
    \ (i <- arr) {\n            var sum = 0l\n            var n = i\n            if\
    \ (n < 0) n = -n\n            while (n > 0) {\n                sum += n % 10\n\
    \                n /= 10\n            }\n            if (sum > 0) count += 1\n\
    \        }\n        count", "        var count = 0l\n        for (i <- arr) {\n\
    \            if (i < 0) {\n                if (i.toString.length == 1) count +=\
    \ 1\n                else {\n                    var sum = 0\n               \
    \     for (j <- 1 until i.toString.length) {\n                        sum += i.toString.charAt(j).asDigit\n\
    \                    }\n                    if (sum > 0) count += 1\n        \
    \        }\n            }\n            else {\n                var sum = 0\n \
    \               for (j <- 0 until i.toString.length) {\n                    sum\
    \ += i.toString.charAt(j).asDigit\n                }\n                if (sum\
    \ > 0) count += 1\n            }\n        }\n        count", "        var count\
    \ = 0l\n        for (i <- arr) {\n            if (i.toString.filter(_ != '-').map(_.asDigit).sum\
    \ > 0) count += 1\n        }\n        count", "        def sumDigits(n : Long)\
    \ : Long = {\n            var sum = 0l\n            var m = abs(n)\n         \
    \   while (m > 0) {\n                sum += m % 10\n                m /= 10\n\
    \            }\n            sum\n        }\n        var count = 0l\n        for\
    \ (n <- arr) {\n            if (sumDigits(n) > 0) count += 1\n        }\n    \
    \    count", '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).size',
  '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).size', '        arr.filter(x
    => x.toString.map(y => y.asDigit).sum > 0).size', '        arr.filter(x => x.toString.map(x
    => x.asDigit).sum > 0).size', '        arr.filter(x => x.toString.map(x => x.asDigit).sum
    > 0).size', '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).size',
  '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).size', "      \
    \  // Fill up this function body\n        // You can add another function as well,\
    \ if required\n        var count = 0\n        for (i <- arr) {\n            if\
    \ (i > 0) {\n                var sum = 0\n                var temp = i\n     \
    \           while (temp > 0) {\n                    sum += temp % 10\n       \
    \             temp /= 10\n                }\n                if (sum > 0) count\
    \ += 1\n            }\n            else {\n                var sum = 0\n     \
    \           var temp = -i\n                while (temp > 0) {\n              \
    \      sum += temp % 10\n                    temp /= 10\n                }\n \
    \               if (sum > 0) count += 1\n            }\n        }\n        count",
  "        var count = 0l\n        for (i <- arr) {\n            var sum = 0l\n  \
    \          var j = i\n            if (j < 0) j = -j\n            while (j > 0)\
    \ {\n                sum += j % 10\n                j /= 10\n            }\n \
    \           if (sum > 0) count += 1\n        }\n        count", '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).size', "        def countNums(arr :\
    \ List[Long], acc : Long) : Long = {\n            if (arr.isEmpty) acc\n     \
    \       else {\n                val x = arr.head\n                val xs = arr.tail\n\
    \                val sum = if (x < 0) x.toString.tail.map(_.asDigit).sum + 1 else\
    \ x.toString.map(_.asDigit).sum\n                if (sum > 0) countNums(xs, acc\
    \ + 1)\n                else countNums(xs, acc)\n            }\n        }\n  \
    \      countNums(arr, 0)", '        arr.filter(x => x.toString.map(x => abs(x.asDigit)).sum
    > 0).size', "        // Fill up this function body\n        // You can add another\
    \ function as well, if required\n        var count = 0l\n        for (i <- arr)\
    \ {\n            var sum = 0l\n            var j = i\n            if (j < 0) j\
    \ = -j\n            while (j > 0) {\n                sum += j % 10\n         \
    \       j /= 10\n            }\n            if (sum > 0) count += 1\n        }\n\
    \        count", "        // Fill up this function body\n        // '0'\n    \
    \    arr.map(x => x.toString.split(\"\").map(x => x.toInt).sum).filter(x => x\
    \ > 0).size", "        def sumDigits(n : Long) : Long = {\n            var s =\
    \ 0l\n            var m = abs(n)\n            while (m > 0) {\n              \
    \  s += m % 10\n                m /= 10\n            }\n            s\n      \
    \  }\n        arr.filter(sumDigits(_) > 0).length", "        def countNumsHelper(arr\
    \ : List[Long], acc : Long) : Long = {\n            arr match {\n            \
    \    case Nil => acc\n                case x :: xs => {\n                    val\
    \ sum = x.toString.map(x => x.asDigit).sum\n                    if (sum > 0) countNumsHelper(xs,\
    \ acc + 1)\n                    else countNumsHelper(xs, acc)\n              \
    \  }\n            }\n        }\n        countNumsHelper(arr, 0)", '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).size', '        return arr.filter(x
    => x.toString.map(y => y.asDigit).sum > 0).length', '        arr.filter(x => x.toString.map(y
    => y.asDigit).sum > 0).size', '        arr.filter(x => x.toString.map(y => y.asDigit).sum
    > 0).size', '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).size',
  '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).size', '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).size', '        arr.filter(x => x.toString.map(x
    => x.asDigit).sum > 0).size', "        var count = 0l\n        for (i <- arr)\
    \ {\n            if (i < 0) {\n                if (i.toString.length == 1) count\
    \ += 1\n                else {\n                    var sum = 0\n            \
    \        for (j <- 1 until i.toString.length) {\n                        sum +=\
    \ i.toString.charAt(j).asDigit\n                    }\n                    if\
    \ (sum > 0) count += 1\n                }\n            }\n            else {\n\
    \                var sum = 0\n                for (j <- 0 until i.toString.length)\
    \ {\n                    sum += i.toString.charAt(j).asDigit\n               \
    \ }\n                if (sum > 0) count += 1\n            }\n        }\n     \
    \   count", "        def countNumsHelper(arr : List[Long], acc : Long) : Long\
    \ = {\n            if (arr.isEmpty) acc\n            else {\n                val\
    \ sum = arr.head.abs.toString.map(_.asDigit).sum\n                if (sum > 0)\
    \ countNumsHelper(arr.tail, acc + 1)\n                else countNumsHelper(arr.tail,\
    \ acc)\n            }\n        }\n        countNumsHelper(arr, 0)", '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).size', '        arr.map(x => if (x
    < 0) -x else x).map(x => x.toString.map(y => y.asDigit).sum).filter(x => x > 0).length',
  "        def sumDigits(n : Long) : Long = {\n            var sum = 0l\n        \
    \    var m = n\n            while (m != 0) {\n                sum += abs(m % 10)\n\
    \                m /= 10\n            }\n            sum\n        }\n        arr.filter(sumDigits(_)\
    \ > 0).length", "        def sumDigits(n : Long) : Long = {\n            if (n\
    \ == 0) return 0\n            else return (n % 10) + sumDigits(n / 10)\n     \
    \   }\n        arr.filter(x => sumDigits(x) > 0).length", '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).size', "        def sumDigits(n : Long)\
    \ : Long = {\n            var sum = 0l\n            var m = n\n            if\
    \ (m < 0) m = -m\n            while (m > 0) {\n                sum += m % 10\n\
    \                m /= 10\n            }\n            sum\n        }\n        arr.filter(sumDigits(_)\
    \ > 0).length", '        arr.filter(x => x.toString.map(x => x.asDigit).sum >
    0).size', "        def sumDigits(n : Long) : Long = {\n            if (n == 0)\
    \ return 0\n            val sign = if (n < 0) -1 else 1\n            return sign\
    \ * (abs(n) % 10 + sumDigits(abs(n) / 10))\n        }\n        return arr.filter(sumDigits(_)\
    \ > 0).length", '        arr.filter(x => x.toString.map(x => x.asDigit).sum >
    0).size', "        def sumDigits(n : Long) : Long = {\n            if (n < 0)\
    \ return -sumDigits(-n)\n            if (n < 10) return n\n            return\
    \ sumDigits(n / 10) + n % 10\n        }\n        return arr.filter(sumDigits(_)\
    \ > 0).length", '        arr.filter(x => x.toString.map(x => x.asDigit).sum >
    0).size', "        def sumDigits(n : Long) : Long = {\n            if (n == 0)\
    \ 0\n            else abs(n % 10) + sumDigits(n / 10)\n        }\n        arr.filter(sumDigits(_)\
    \ > 0).length", '        arr.filter(x => x.toString.map(x => x.asDigit).sum >
    0).size', '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).size',
  "        def sumDigits(n : Long) : Long = {\n            var sum = 0l\n        \
    \    var m = n\n            while (m != 0) {\n                sum += abs(m % 10)\n\
    \                m /= 10\n            }\n            sum\n        }\n        arr.filter(x\
    \ => sumDigits(x) > 0).length", "        def sum(n : Long) : Long = {\n      \
    \      var sum = 0l\n            var m = n\n            if (m < 0) m = -m\n  \
    \          while (m > 0) {\n                sum += m % 10\n                m /=\
    \ 10\n            }\n            sum\n        }\n        var count = 0l\n    \
    \    for (n <- arr) {\n            if (sum(n) > 0) count += 1\n        }\n   \
    \     count", "        def sumDigits(n : Long) : Long = {\n            var m =\
    \ n\n            var s = 0l\n            while (m != 0) {\n                s +=\
    \ m % 10\n                m /= 10\n            }\n            return s\n     \
    \   }\n        var c = 0l\n        for (n <- arr) {\n            if (sumDigits(n)\
    \ > 0) c += 1\n        }\n        return c", '        arr.filter(x => x.toString.map(y
    => y.asDigit).sum > 0).size', "        var count = 0l\n        for (i <- arr)\
    \ {\n            if (i < 0) {\n                var temp = i.toString.substring(1)\n\
    \                var sum = 0\n                for (j <- temp) {\n            \
    \        sum += j.asDigit\n                }\n                if (sum > 0) count\
    \ += 1\n            }\n            else {\n                var sum = 0\n     \
    \           for (j <- i.toString) {\n                    sum += j.asDigit\n  \
    \              }\n                if (sum > 0) count += 1\n            }\n   \
    \     }\n        count", "        def sumDigits(n : Long) : Long = {\n       \
    \     var sum = 0l\n            var m = n\n            if (m < 0) m = -m\n   \
    \         while (m > 0) {\n                sum += m % 10\n                m /=\
    \ 10\n            }\n            sum\n        }\n        arr.filter(sumDigits(_)\
    \ > 0).length", '        arr.filter(x => x.toString.split("").map(_.toLong).sum
    > 0).size', "        def sumDigits(n : Long) : Long = {\n            var sum =\
    \ 0l\n            var m = n\n            while (m != 0) {\n                sum\
    \ += m % 10\n                m /= 10\n            }\n            sum\n       \
    \ }\n        var count = 0l\n        for (n <- arr) {\n            if (sumDigits(n)\
    \ > 0) count += 1\n        }\n        count", '        arr.filter(x => x.toString.map(x
    => x.asDigit).sum > 0).size', '        arr.filter(x => x.toString.map(y => y.asDigit).sum
    > 0).size', '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).size',
  "        def count(n : Long) : Long = {\n            if (n == 0) 0\n           \
    \ else (n % 10) + count(n / 10)\n        }\n        arr.filter(x => count(x) >\
    \ 0).length", '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).size',
  "        var count = 0l\n        for (i <- arr) {\n            if (i < 0) {\n  \
    \              if (i.toString.tail.map(_.asDigit).sum + 1 > 0) count += 1\n  \
    \          } else {\n                if (i.toString.map(_.asDigit).sum > 0) count\
    \ += 1\n            }\n        }\n        count", "        def sumDigits(n : Long)\
    \ : Long = {\n            if (n == 0) 0\n            else if (n < 0) -n % 10 +\
    \ sumDigits(-n / 10)\n            else n % 10 + sumDigits(n / 10)\n        }\n\
    \        arr.filter(sumDigits(_) > 0).length", '        arr.filter(x => x.toString.map(x
    => x.asDigit).sum > 0).size', "        def sumDigits(n : Long) : Long = {\n  \
    \          var sum = 0l\n            var m = n\n            while (m != 0) {\n\
    \                sum += m % 10\n                m /= 10\n            }\n     \
    \       sum\n        }\n        var count = 0l\n        for (n <- arr) {\n   \
    \         if (sumDigits(n) > 0) count += 1\n        }\n        count", "     \
    \   var count = 0l\n        for (i <- arr) {\n            var sum = 0l\n     \
    \       var n = i\n            if (n < 0) n = -n\n            while (n > 0) {\n\
    \                sum += n % 10\n                n /= 10\n            }\n     \
    \       if (sum > 0) count += 1\n        }\n        count", "        // Fill up\
    \ this function body\n        // You can add another function as well, if required\n\
    \        0", '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).size',
  "        def sumDigits(n : Long) : Long = {\n            var sum = 0l\n        \
    \    var m = n\n            while (m != 0) {\n                sum += m % 10\n\
    \                m /= 10\n            }\n            sum\n        }\n        arr.filter(n\
    \ => sumDigits(n) > 0).length", '        arr.filter(x => x.toString.map(y => y.asDigit).sum
    > 0).size', '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).size',
  "        def sumDigits(n : Long) : Long = {\n            if (n == 0) 0\n       \
    \     else if (n < 0) -(n % 10) + sumDigits(n / 10)\n            else n % 10 +\
    \ sumDigits(n / 10)\n        }\n        arr.filter(sumDigits(_) > 0).length",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        return 0", '        arr.filter(x => x.toString.map(x
    => x.asDigit).sum > 0).size', "        def sumDigits(n : Long) : Long = {\n  \
    \          var sum = 0l\n            var m = n\n            if (m < 0) m = -m\n\
    \            while (m > 0) {\n                sum += m % 10\n                m\
    \ /= 10\n            }\n            sum\n        }\n        arr.filter(sumDigits(_)\
    \ > 0).length", "        // Fill up this function body\n        // You can add\
    \ another function as well, if required\n        var count = 0l\n        for (i\
    \ <- arr) {\n            var sum = 0l\n            var num = i\n            if\
    \ (num < 0) num = -num\n            while (num > 0) {\n                sum +=\
    \ num % 10\n                num /= 10\n            }\n            if (sum > 0)\
    \ count += 1\n        }\n        count", '        arr.filter(x => x.toString.map(x
    => x.asDigit).sum > 0).size', '        arr.filter(x => x.toString.map(x => x.asDigit).sum
    > 0).size', "        def sumDigits(n : Long) : Long = {\n            var sum =\
    \ 0l\n            var m = n\n            while (m != 0) {\n                sum\
    \ += m % 10\n                m /= 10\n            }\n            sum\n       \
    \ }\n        arr.map(sumDigits(_)).filter(_ > 0).length", "        def sumDigits(n\
    \ : Long) : Long = {\n            var s = 0l\n            var m = n\n        \
    \    if (m < 0) m = -m\n            while (m > 0) {\n                s += m %\
    \ 10\n                m /= 10\n            }\n            return s\n        }\n\
    \        var c = 0l\n        for (i <- arr) {\n            if (sumDigits(i) >\
    \ 0) c += 1\n        }\n        return c", '        arr.filter(x => x.toString.map(x
    => x.asDigit).sum > 0).size', '        arr.filter(x => x.toString.map(x => x.asDigit).sum
    > 0).size', "        def sumDigits(n : Long) : Long = {\n            if (n ==\
    \ 0) 0\n            else (n % 10) + sumDigits(n / 10)\n        }\n        arr.filter(sumDigits(_)\
    \ > 0).length", "        def countNumsHelper(arr : List[Long], acc : Long) : Long\
    \ = {\n            if (arr.isEmpty) acc\n            else {\n                val\
    \ sum = arr.head.abs.toString.map(_.asDigit).sum\n                if (sum > 0)\
    \ countNumsHelper(arr.tail, acc + 1)\n                else countNumsHelper(arr.tail,\
    \ acc)\n            }\n        }\n        countNumsHelper(arr, 0)", '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).size', "        def sumDigits(n : Long)\
    \ : Long = {\n            if (n == 0) 0\n            else if (n < 0) -(n % 10)\
    \ + sumDigits(n / 10)\n            else n % 10 + sumDigits(n / 10)\n        }\n\
    \        arr.filter(n => sumDigits(n) > 0).length", '        arr.filter(x => x.toString.map(x
    => x.asDigit).sum > 0).size', "        def sumDigits(n : Long) : Long = {\n  \
    \          var sum = 0l\n            var m = n\n            while (m != 0) {\n\
    \                sum += abs(m % 10)\n                m /= 10\n            }\n\
    \            sum\n        }\n        arr.filter(sumDigits(_) > 0).length", " \
    \       var count = 0l\n        for (i <- arr) {\n            if (i > 0) {\n \
    \               var sum = 0l\n                var n = i\n                while\
    \ (n > 0) {\n                    sum += n % 10\n                    n /= 10\n\
    \                }\n                if (sum > 0) count += 1\n            } else\
    \ {\n                var sum = 0l\n                var n = -i\n              \
    \  while (n > 0) {\n                    sum += n % 10\n                    n /=\
    \ 10\n                }\n                if (sum > 0) count += 1\n           \
    \ }\n        }\n        return count", "        def countNumsHelper(n : Long)\
    \ : Long = {\n            if (n == 0) 0\n            else (n % 10) + countNumsHelper(n\
    \ / 10)\n        }\n        arr.filter(countNumsHelper(_) > 0).length", "    \
    \    def sumDigits(n : Long) : Long = {\n            var sum = 0l\n          \
    \  var m = abs(n)\n            while (m > 0) {\n                sum += m % 10\n\
    \                m /= 10\n            }\n            return sum\n        }\n \
    \       return arr.filter(sumDigits(_) > 0).length", "        def sumDigits(n\
    \ : Long) : Long = {\n            if (n == 0) 0\n            else if (n < 0) -n\
    \ % 10 + sumDigits(-n / 10)\n            else n % 10 + sumDigits(n / 10)\n   \
    \     }\n        arr.filter(sumDigits(_) > 0).length", "        def sumDigits(n\
    \ : Long) : Long = {\n            if (n == 0) 0\n            else (n % 10) + sumDigits(n\
    \ / 10)\n        }\n        arr.filter(sumDigits(_) > 0).length", '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).size', "        def sumDigits(n : Long)\
    \ : Long = {\n            if (n < 0) {\n                val nn = -n\n        \
    \        if (nn < 10) return -nn\n                return -(nn % 10) + sumDigits(nn\
    \ / 10)\n            }\n            if (n < 10) return n\n            return n\
    \ % 10 + sumDigits(n / 10)\n        }\n        var count = 0l\n        for (n\
    \ <- arr) {\n            if (sumDigits(n) > 0) count += 1\n        }\n       \
    \ return count", "        def sumDigits(n : Long) : Long = {\n            var\
    \ sum = 0l\n            var m = n\n            if (m < 0) m = -m\n           \
    \ while (m > 0) {\n                sum += m % 10\n                m /= 10\n  \
    \          }\n            return sum\n        }\n        var count = 0l\n    \
    \    for (n <- arr) {\n            if (sumDigits(n) > 0) count += 1\n        }\n\
    \        return count", "        // Fill up this function body\n        // You\
    \ can add another function as well, if required\n        var count = 0l\n    \
    \    for (i <- arr) {\n            var sum = 0l\n            var j = i\n     \
    \       if (j < 0) j = -j\n            while (j > 0) {\n                sum +=\
    \ j % 10\n                j /= 10\n            }\n            if (sum > 0) count\
    \ += 1\n        }\n        count", "        def countNumsRec(arr : List[Long],\
    \ acc : Long) : Long = {\n            arr match {\n                case Nil =>\
    \ acc\n                case x :: xs => {\n                    val sum = x.toString.map(x\
    \ => x.asDigit).sum\n                    if (sum > 0) countNumsRec(xs, acc + 1)\n\
    \                    else countNumsRec(xs, acc)\n                }\n         \
    \   }\n        }\n        countNumsRec(arr, 0)", "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ def sumDigits(n : Long) : Long = {\n            var sum = 0l\n            var\
    \ m = n\n            while (m != 0) {\n                sum += (m % 10)\n     \
    \           m /= 10\n            }\n            sum\n        }\n        var count\
    \ = 0l\n        for (i <- arr) {\n            if (sumDigits(i) > 0) count += 1\n\
    \        }\n        count", '        arr.filter(x => x.toString.map(x => x.asDigit).sum
    > 0).size', "        def sumDigits(n : Long) : Long = {\n            if (n ==\
    \ 0) 0\n            else {\n                val absN = abs(n)\n              \
    \  absN % 10 + sumDigits(absN / 10)\n            }\n        }\n        arr.filter(sumDigits(_)\
    \ > 0).length", "        def sumDigits(n : Long) : Long = {\n            if (n\
    \ == 0) 0\n            else {\n                val x = abs(n)\n              \
    \  val d = x % 10\n                d + sumDigits(x / 10)\n            }\n    \
    \    }\n        arr.filter(sumDigits(_) > 0).length", '        arr.filter(x =>
    x.toString.map(x => x.asDigit).sum > 0).size', "        def sumDigits(n : Long)\
    \ : Long = {\n            if (n == 0) 0\n            else abs(n % 10) + sumDigits(n\
    \ / 10)\n        }\n        arr.filter(sumDigits(_) > 0).length", "        //\
    \ Fill up this function body\n        // You can add another function as well,\
    \ if required\n        var count = 0l\n        for (i <- arr) {\n            var\
    \ sum = 0l\n            var n = i\n            if (n < 0) n = -n\n           \
    \ while (n > 0) {\n                sum += n % 10\n                n /= 10\n  \
    \          }\n            if (sum > 0) count += 1\n        }\n        count",
  "        def countNums(arr : List[Long], acc : Long) : Long = {\n            if\
    \ (arr.isEmpty) acc\n            else {\n                val sum = arr.head.abs.toString.map(_.asDigit).sum\n\
    \                if (sum > 0) countNums(arr.tail, acc + 1)\n                else\
    \ countNums(arr.tail, acc)\n            }\n        }\n        countNums(arr, 0)",
  "        var count = 0l\n        for (i <- arr) {\n            if (i < 0) count\
    \ += i.toString.tail.map(_.asDigit).sum\n            else count += i.toString.map(_.asDigit).sum\n\
    \        }\n        count", "        def countNumsHelper(arr : List[Long], acc\
    \ : Long) : Long = {\n            arr match {\n                case Nil => acc\n\
    \                case h :: t => {\n                    val sum = h.toString.map(x\
    \ => x.asDigit).sum\n                    if (sum > 0) countNumsHelper(t, acc +\
    \ 1)\n                    else countNumsHelper(t, acc)\n                }\n  \
    \          }\n        }\n        countNumsHelper(arr, 0)", '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).size', "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ var count = 0\n        for (i <- arr) {\n            var sum = 0\n         \
    \   if (i < 0) {\n                sum += i.toString.charAt(0).toInt - 48\n   \
    \         }\n            for (j <- i.toString) {\n                sum += j.toInt\
    \ - 48\n            }\n            if (sum > 0) {\n                count += 1\n\
    \            }\n        }\n        return count", '        arr.filter(x => x.toString.map(y
    => y.asDigit).sum > 0).size', "        def sumDigits(n : Long) : Long = {\n  \
    \          var sum = 0l\n            var m = n\n            if (m < 0) m = -m\n\
    \            while (m > 0) {\n                sum += m % 10\n                m\
    \ /= 10\n            }\n            sum\n        }\n        var count = 0l\n \
    \       for (n <- arr) if (sumDigits(n) > 0) count += 1\n        count", "   \
    \     def sumDigits(n : Long) : Long = {\n            var sum = 0l\n         \
    \   var nn = n\n            if (nn < 0) nn = -nn\n            while (nn > 0) {\n\
    \                sum += nn % 10\n                nn /= 10\n            }\n   \
    \         sum\n        }\n        arr.filter(sumDigits(_) > 0).length", "    \
    \    def countNumsHelper(arr : List[Long], acc : Long) : Long = {\n          \
    \  arr match {\n                case Nil => acc\n                case x :: xs\
    \ => {\n                    val xAbs = abs(x)\n                    val xAbsDigits\
    \ = xAbs.toString.map(_.asDigit).sum\n                    if (xAbsDigits > 0)\
    \ countNumsHelper(xs, acc + 1)\n                    else countNumsHelper(xs, acc)\n\
    \                }\n            }\n        }\n        countNumsHelper(arr, 0)",
  "        def sumDigits(n : Long) : Long = {\n            var sum = 0l\n        \
    \    var x = n\n            if (x < 0) x = -x\n            while (x > 0) {\n \
    \               sum += x % 10\n                x /= 10\n            }\n      \
    \      sum\n        }\n        arr.filter(sumDigits(_) > 0).length", '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).size', "        def sumDigits(n : Long)\
    \ : Long = {\n            if (n == 0) 0 else n % 10 + sumDigits(n / 10)\n    \
    \    }\n        arr.filter(sumDigits(_) > 0).length", "        var count = 0l\n\
    \        for (i <- arr) {\n            var sum = 0l\n            var n = i\n \
    \           if (n < 0) n = -n\n            while (n > 0) {\n                sum\
    \ += n % 10\n                n /= 10\n            }\n            if (sum > 0)\
    \ count += 1\n        }\n        count", '        arr.filter(x => x.toString.map(y
    => abs(y.asDigit)).sum > 0).size', "        // Fill up this function body\n  \
    \      // You can add another function as well, if required\n        var count\
    \ = 0l\n        for (i <- arr) {\n            if (i > 0) {\n                var\
    \ sum = 0l\n                var temp = i\n                while (temp > 0) {\n\
    \                    sum += temp % 10\n                    temp /= 10\n      \
    \          }\n                if (sum > 0) count += 1\n            }\n       \
    \     else {\n                var sum = 0l\n                var temp = i\n   \
    \             while (temp < 0) {\n                    sum += temp % 10\n     \
    \               temp /= 10\n                }\n                if (sum < 0) count\
    \ += 1\n            }\n        }\n        count", '        arr.count(x => x.toString.map(x
    => x.asDigit).sum > 0)', "        def sumDigits(n : Long) : Long = {\n       \
    \     if (n == 0) 0\n            else abs(n % 10) + sumDigits(n / 10)\n      \
    \  }\n        arr.filter(sumDigits(_) > 0).length", "        var count = 0l\n\
    \        for (i <- arr) {\n            var sum = 0l\n            var num = i\n\
    \            if (num < 0) num = -num\n            while (num > 0) {\n        \
    \        sum += num % 10\n                num /= 10\n            }\n         \
    \   if (sum > 0) count += 1\n        }\n        return count", "        def countNums(arr\
    \ : List[Long], acc : Long) : Long = {\n            if (arr.isEmpty) acc\n   \
    \         else {\n                val n = arr.head\n                val s = n.toString\n\
    \                val sum = s.map(x => x.asDigit).sum\n                countNums(arr.tail,\
    \ if (sum > 0) acc + 1 else acc)\n            }\n        }\n        countNums(arr,\
    \ 0)", '        arr.filter(x => x.toString.map(x => x.asDigit).sum > 0).size',
  "        def sumDigits(n : Long) : Long = {\n            var sum = 0l\n        \
    \    var m = n\n            if (m < 0) m = -m\n            while (m > 0) {\n \
    \               sum += m % 10\n                m /= 10\n            }\n      \
    \      sum\n        }\n        var count = 0l\n        for (n <- arr) {\n    \
    \        if (sumDigits(n) > 0) count += 1\n        }\n        count", "      \
    \  def sumDigits(n : Long) : Long = {\n            if (n == 0) 0\n           \
    \ else {\n                val d = n % 10\n                if (d < 0) d + sumDigits(n\
    \ / 10)\n                else d + sumDigits(n / 10)\n            }\n        }\n\
    \        arr.filter(sumDigits(_) > 0).length", "        def sumDigits(n : Long)\
    \ : Long = {\n            var sum = 0l\n            var m = n\n            while\
    \ (m != 0) {\n                sum += abs(m % 10)\n                m /= 10\n  \
    \          }\n            sum\n        }\n        var count = 0l\n        for\
    \ (n <- arr) {\n            if (sumDigits(n) > 0) count += 1\n        }\n    \
    \    count", "        // Fill up this function body\n        // You can add another\
    \ function as well, if required\n        arr.filter(x => x.toString.map(_.asDigit).sum\
    \ > 0).length", "        var count = 0l\n        for (i <- arr) {\n          \
    \  if (i < 0) {\n                if (i.toString.length == 1) {\n             \
    \       count += 1\n                } else {\n                    var sum = 0\n\
    \                    for (j <- 1 until i.toString.length) {\n                \
    \        sum += i.toString.charAt(j).asDigit\n                    }\n        \
    \            if (sum > 0) count += 1\n                }\n            } else {\n\
    \                var sum = 0\n                for (j <- 0 until i.toString.length)\
    \ {\n                    sum += i.toString.charAt(j).asDigit\n               \
    \ }\n                if (sum > 0) count += 1\n            }\n        }\n     \
    \   count", "        def sumDigits(n : Long) : Long = {\n            var sum =\
    \ 0l\n            var m = n\n            if (m < 0) m = -m\n            while\
    \ (m > 0) {\n                sum += m % 10\n                m /= 10\n        \
    \    }\n            sum\n        }\n        var count = 0l\n        for (n <-\
    \ arr) {\n            if (sumDigits(n) > 0) count += 1\n        }\n        count",
  "        var count = 0l\n        for (i <- arr) {\n            if (i < 0) {\n  \
    \              if (i.toString.substring(1).map(_.asDigit).sum > 0) count += 1\n\
    \            } else {\n                if (i.toString.map(_.asDigit).sum > 0)\
    \ count += 1\n            }\n        }\n        count", '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).size', '        arr.filter(x => x.toString.map(y
    => abs(y.asDigit)).sum > 0).size', '        arr.filter(x => x.toString.map(y =>
    y.asDigit).sum > 0).size', '        arr.filter(x => x.toString.map(x => x.asDigit).sum
    > 0).size', '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).size',
  '        arr.filter(x => x.toString.map(y => abs(y.asDigit)).sum > 0).size', " \
    \       def sumDigits(n : Long) : Long = {\n            var sum = 0l\n       \
    \     var m = n\n            if (m < 0) m = -m\n            while (m > 0) {\n\
    \                sum += m % 10\n                m /= 10\n            }\n     \
    \       sum\n        }\n        arr.filter(sumDigits(_) > 0).length", '        arr.filter(x
    => x.toString.map(y => y.asDigit).sum > 0).size', "        // Fill up this function\
    \ body\n        // `0L` is Scala notation for `0` of type `Long`\n        var\
    \ count = 0L\n        for (i <- arr) {\n            if (i > 0) {\n           \
    \     var sum = 0L\n                var num = i\n                while (num >\
    \ 0) {\n                    sum += num % 10\n                    num /= 10\n \
    \               }\n                if (sum > 0) count += 1\n            } else\
    \ {\n                var sum = 0L\n                var num = -i\n            \
    \    while (num > 0) {\n                    sum += num % 10\n                \
    \    num /= 10\n                }\n                if (sum > 0) count += 1\n \
    \           }\n        }\n        count", "        var count = 0l\n        for\
    \ (i <- arr) {\n            var sum = 0l\n            var num = i\n          \
    \  if (num < 0) num = -num\n            while (num > 0) {\n                sum\
    \ += num % 10\n                num /= 10\n            }\n            if (sum >\
    \ 0) count += 1\n        }\n        return count", '        arr.filter(x => x.toString.map(y
    => y.asDigit).sum > 0).size', '        arr.filter(x => x.toString.map(x => x.asDigit).sum
    > 0).size', '        arr.filter(x => x.toString.map(y => y.asDigit).sum > 0).size',
  "        var count = 0l\n        for (i <- arr) {\n            var sum = 0l\n  \
    \          var n = i\n            if (n < 0) n = -n\n            while (n > 0)\
    \ {\n                sum += n % 10\n                n /= 10\n            }\n \
    \           if (sum > 0) count += 1\n        }\n        count", '        arr.filter(x
    => x.toString.map(x => x.asDigit).sum > 0).size', '        arr.filter(x => x.toString.map(x
    => x.asDigit).sum > 0).size', '        arr.filter(x => x.toString.map(x => x.asDigit).sum
    > 0).size', "        def countNumsHelper(arr : List[Long], acc : Long) : Long\
    \ = {\n            if (arr.isEmpty) acc\n            else {\n                val\
    \ sum = arr.head.abs.toString.map(_.asDigit).sum\n                if (sum > 0)\
    \ countNumsHelper(arr.tail, acc + 1)\n                else countNumsHelper(arr.tail,\
    \ acc)\n            }\n        }\n        countNumsHelper(arr, 0)", '        arr.filter(x
    => x.toString.map(y => y.asDigit).sum > 0).size', '        arr.filter(x => x.toString.map(x
    => x.asDigit).sum > 0).size', "        // Fill up this function body\n       \
    \ // You can add another function as well, if required\n        var count = 0l\n\
    \        for (i <- arr) {\n            if (i > 0) {\n                var sum =\
    \ 0l\n                var temp = i\n                while (temp > 0) {\n     \
    \               sum += temp % 10\n                    temp /= 10\n           \
    \     }\n                if (sum > 0) count += 1\n            }\n            else\
    \ {\n                var sum = 0l\n                var temp = i\n            \
    \    while (temp < 0) {\n                    sum += temp % 10\n              \
    \      temp /= 10\n                }\n                if (sum < 0) count += 1\n\
    \            }\n        }\n        count"]
stop_tokens:
- "\n    }\n"
