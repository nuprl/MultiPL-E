name: HumanEval_17_parse_music
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Input to this function is a string representing musical notes in a special\
  \ ASCII format.\n    // Your task is to parse this string and return list of integers\
  \ corresponding to how many beats does each\n    // not last.\n    // Here is a\
  \ legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts\
  \ two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"\
  o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong,\
  \ 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n\
  \    def parseMusic(music_string : String) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\"\
  )).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
  \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
  \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o\
  \ o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
  \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o|\
  \ o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
  \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
completions: ["        val beats = ListBuffer[Long]()\n        for (note <- music_string.split(\"\
    \ \")) {\n            note match {\n                case \"o\" => beats += 4\n\
    \                case \"o|\" => beats += 2\n                case \".|\" => beats\
    \ += 1\n            }\n        }\n        beats.toList", "        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            note match {\n                case \"o\"\
    \ => beats += 4\n                case \"o|\" => beats += 2\n                case\
    \ \".|\" => beats += 1\n            }\n        }\n        beats.toList", "   \
    \     val notes = music_string.split(\" \")\n        var beats = List[Long]()\n\
    \        for (note <- notes) {\n            if (note == \"o\") beats = beats :+\
    \ 4\n            else if (note == \"o|\") beats = beats :+ 2\n            else\
    \ if (note == \".|\") beats = beats :+ 1\n        }\n        beats", "       \
    \ val beats = new ListBuffer[Long]\n        var current_beat = 0\n        for\
    \ (c <- music_string) {\n            if (c == 'o') {\n                beats +=\
    \ 4\n                current_beat += 4\n            } else if (c == '|') {\n \
    \               beats += current_beat\n                current_beat = 0\n    \
    \        } else if (c == '.') {\n                beats += 1\n                current_beat\
    \ += 1\n            }\n        }\n        beats.toList", "        val beats =\
    \ ListBuffer[Long]()\n        for (i <- 0 until music_string.length) {\n     \
    \       if (music_string(i) == 'o') {\n                if (i + 1 < music_string.length\
    \ && music_string(i + 1) == '|') {\n                    beats += 2\n         \
    \           i += 1\n                } else {\n                    beats += 4\n\
    \                }\n            } else if (music_string(i) == '.') {\n       \
    \         beats += 1\n            }\n        }\n        beats.toList", "     \
    \   val notes = music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n\
    \        for (note <- notes) {\n            if (note == \"o\") beats += 4\n  \
    \          else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList", "        var result = List[Long]()\n\
    \        var i = 0\n        while (i < music_string.length) {\n            if\
    \ (music_string(i) == 'o') {\n                if (i + 1 < music_string.length\
    \ && music_string(i + 1) == '|') {\n                    result = result :+ 2\n\
    \                    i += 2\n                } else {\n                    result\
    \ = result :+ 4\n                    i += 1\n                }\n            }\
    \ else {\n                result = result :+ 1\n                i += 2\n     \
    \       }\n        }\n        result", "        val beats = ListBuffer[Long]()\n\
    \        for (note <- music_string.split(\" \")) {\n            note match {\n\
    \                case \"o\" => beats += 4\n                case \"o|\" => beats\
    \ += 2\n                case \".|\" => beats += 1\n            }\n        }\n\
    \        beats.toList", "        val beats = ListBuffer[Long]()\n        for (note\
    \ <- music_string.split(\" \")) {\n            if (note == \"o\") beats += 4\n\
    \            else if (note == \"o|\") beats += 2\n            else if (note ==\
    \ \".|\") beats += 1\n        }\n        beats.toList", "        val beats = ListBuffer[Long]()\n\
    \        for (i <- 0 until music_string.length) {\n            if (music_string(i)\
    \ == 'o') {\n                if (i + 1 < music_string.length && music_string(i\
    \ + 1) == '|') {\n                    beats += 2\n                    i += 1\n\
    \                } else {\n                    beats += 4\n                }\n\
    \            } else if (music_string(i) == '.') {\n                beats += 1\n\
    \            }\n        }\n        beats.toList", "        val beats = ListBuffer[Long]()\n\
    \        for (c <- music_string) {\n            if (c == 'o') beats += 4\n   \
    \         else if (c == '|') beats += 1\n        }\n        beats.toList", " \
    \       val beats = ListBuffer[Long]()\n        for (note <- music_string.split(\"\
    \ \")) {\n            note match {\n                case \"o\" => beats += 4\n\
    \                case \"o|\" => beats += 2\n                case \".|\" => beats\
    \ += 1\n            }\n        }\n        beats.toList", "        val beats =\
    \ music_string.split(\" \").map(x => x match {\n            case \"o\" => 4\n\
    \            case \"o|\" => 2\n            case \".|\" => 1\n        }).toList\n\
    \        beats", "        var result = List[Long]()\n        var i = 0\n     \
    \   while (i < music_string.length) {\n            if (music_string(i) == 'o')\
    \ {\n                if (i + 1 < music_string.length && music_string(i + 1) ==\
    \ '|') {\n                    result = result :+ 2\n                    i += 2\n\
    \                } else {\n                    result = result :+ 4\n        \
    \            i += 1\n                }\n            } else {\n               \
    \ result = result :+ 1\n                i += 2\n            }\n        }\n   \
    \     result", "        val notes = music_string.split(\" \")\n        val beats\
    \ = notes.map(note => {\n            if (note == \"o\") 4\n            else if\
    \ (note == \"o|\") 2\n            else 1\n        })\n        beats.toList", " \
    \       val map = Map('o' -> 4, '.' -> 1)\n        music_string.split(\" \").map(x\
    \ => map(x(0))).toList", "        // Your code here\n        val beats = ListBuffer[Long]()\n\
    \        for (i <- 0 until music_string.length) {\n            if (music_string(i)\
    \ == 'o') {\n                if (i + 1 < music_string.length && music_string(i\
    \ + 1) == '|') {\n                    beats += 2\n                    i += 1\n\
    \                } else {\n                    beats += 4\n                }\n\
    \            } else if (music_string(i) == '.') {\n                beats += 1\n\
    \            }\n        }\n        beats.toList", "        val beats = ListBuffer[Long]()\n\
    \        for (note <- music_string.split(\" \")) {\n            if (note == \"\
    o\") beats += 4\n            else if (note == \"o|\") beats += 2\n           \
    \ else if (note == \".|\") beats += 1\n        }\n        beats.toList", "   \
    \     // Write your code here\n        val notes = music_string.split(\" \")\n\
    \        notes.map(note => {\n            if (note == \"o\") 4\n            else\
    \ if (note == \"o|\") 2\n            else 1\n        }).toList", "        var\
    \ result = List[Long]()\n        for (i <- 0 until music_string.length) {\n  \
    \          if (music_string(i) == 'o') {\n                if (i + 1 < music_string.length\
    \ && music_string(i + 1) == '|') {\n                    result = result :+ 2\n\
    \                    i += 1\n                } else {\n                    result\
    \ = result :+ 4\n                }\n            } else if (music_string(i) ==\
    \ '.') {\n                if (i + 1 < music_string.length && music_string(i +\
    \ 1) == '|') {\n                    result = result :+ 1\n                   \
    \ i += 1\n                }\n            }\n        }\n        result", "    \
    \    // Fill in your code here.\n        val notes = music_string.split(\" \"\
    )\n        val beats = new ArrayBuffer[Long]\n        for (note <- notes) {\n\
    \            if (note == \"o\") {\n                beats += 4\n            } else\
    \ if (note == \"o|\") {\n                beats += 2\n            } else if (note\
    \ == \".|\") {\n                beats += 1\n            }\n        }\n       \
    \ beats.toList", "        // Write your code here\n        return List()", " \
    \       val beats = ListBuffer[Long]()\n        var i = 0\n        while (i <\
    \ music_string.length) {\n            if (music_string(i) == 'o') {\n        \
    \        if (i + 1 < music_string.length && music_string(i + 1) == '|') {\n  \
    \                  beats += 2\n                    i += 2\n                } else\
    \ {\n                    beats += 4\n                    i += 1\n            \
    \    }\n            } else {\n                beats += 1\n                i +=\
    \ 2\n            }\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \")\n        val beats = new ListBuffer[Long]\n        for (note <- notes) {\n\
    \            if (note == \"o\") beats += 4\n            else if (note == \"o|\"\
    ) beats += 2\n            else if (note == \".|\") beats += 1\n        }\n   \
    \     beats.toList", "        val music_string_split = music_string.split(\" \"\
    )\n        val music_string_split_length = music_string_split.length\n       \
    \ val music_string_split_length_half = music_string_split_length / 2\n       \
    \ val music_string_split_length_quarter = music_string_split_length / 4\n    \
    \    val music_string_split_length_eighth = music_string_split_length / 8\n  \
    \      val music_string_split_length_sixteenth = music_string_split_length / 16\n\
    \        val music_string_split_length_thirtysecond = music_string_split_length\
    \ / 32\n        val music_string_split_length_sixtyfourth = music_string_split_length\
    \ / 64\n        val music_string_split_length_onethirtysecond = music_string_split_length\
    \ / 128\n        val music_string_split_length_twosixtyfourth = music_string_split_length\
    \ / 256\n        val music_string_split_length_fiveseventwentyeighth = music_string_split_length\
    \ / 528\n        val music_string_split_length_tentwofiftysixth = music_string_split_length\
    \ / 1056\n        val music_string_split_length_twentyfivethirteensecond = music_string_split_length\
    \ / 2112\n        val music_string_split_length_fiftytwotwentyfourth = music_string_split_length\
    \ / 4224\n        val music_string_split_length_onetwentyeightfortyeighth = music_string_split_length\
    \ / 8448\n        val music_string_split_length_twofiftysixninetysixth = music_string_split_length\
    \ / 16896\n        val music_string_split_length_fivetwelveonehundredninetysecond\
    \ = music_string_split_length / 33792\n        val music_string_split_length_tentwentytwohundredthirtyeighth\
    \ = music_string_split_length / 67584\n        val music_string_split_length_twentyfoureighthundredseventysixth\
    \ = music_string_split_length / 135168\n        val music_string_split_length_fortyeighthundredf",
  "        var result = List[Long]()\n        var i = 0\n        while (i < music_string.length)\
    \ {\n            if (music_string(i) == 'o') {\n                if (i + 1 < music_string.length\
    \ && music_string(i + 1) == '|') {\n                    result = 2l.toLong ::\
    \ result\n                    i += 2\n                } else {\n             \
    \       result = 4l.toLong :: result\n                    i += 1\n           \
    \     }\n            } else {\n                result = 1l.toLong :: result\n\
    \                i += 2\n            }\n        }\n        result.reverse", " \
    \       val beats = ListBuffer[Long]()\n        for (note <- music_string.split(\"\
    \ \")) {\n            note match {\n                case \"o\" => beats += 4\n\
    \                case \"o|\" => beats += 2\n                case \".|\" => beats\
    \ += 1\n            }\n        }\n        beats.toList", "        val notes =\
    \ music_string.split(\" \")\n        notes.map(note => note match {\n        \
    \    case \"o\" => 4\n            case \"o|\" => 2\n            case \".|\" =>\
    \ 1\n        }).toList", "        val beats = ListBuffer[Long]()\n        for\
    \ (i <- 0 until music_string.length) {\n            if (music_string(i) == 'o')\
    \ {\n                if (i + 1 < music_string.length && music_string(i + 1) ==\
    \ '|') {\n                    beats += 2\n                    i += 1\n       \
    \         } else {\n                    beats += 4\n                }\n      \
    \      } else if (music_string(i) == '.') {\n                beats += 1\n    \
    \        }\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \").toList\n        notes.map(note => {\n            note match {\n        \
    \        case \"o\" => 4\n                case \"o|\" => 2\n                case\
    \ \".|\" => 1\n            }\n        })", "        // Write your code here\n\
    \        var result = List[Long]()\n        var i = 0\n        while (i < music_string.length)\
    \ {\n            if (music_string(i) == 'o') {\n                if (i + 1 < music_string.length\
    \ && music_string(i + 1) == '|') {\n                    result = result :+ 2\n\
    \                    i += 2\n                } else {\n                    result\
    \ = result :+ 4\n                    i += 1\n                }\n            }\
    \ else {\n                result = result :+ 1\n                i += 2\n     \
    \       }\n        }\n        result", "        val beats = ListBuffer[Long]()\n\
    \        for (i <- 0 until music_string.length) {\n            if (music_string(i)\
    \ == 'o') {\n                if (i + 1 < music_string.length && music_string(i\
    \ + 1) == '|') {\n                    beats += 2\n                    i += 1\n\
    \                } else {\n                    beats += 4\n                }\n\
    \            } else if (music_string(i) == '.') {\n                beats += 1\n\
    \            }\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \")\n        val beats = new ListBuffer[Long]\n        for (note <- notes) {\n\
    \            if (note == \"o\") beats += 4\n            else if (note == \"o|\"\
    ) beats += 2\n            else if (note == \".|\") beats += 1\n        }\n   \
    \     beats.toList", "        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            note\
    \ match {\n                case \"o\" => beats += 4\n                case \"o|\"\
    \ => beats += 2\n                case \".|\" => beats += 1\n            }\n  \
    \      }\n        beats.toList", "        var list = List[Long]()\n        var\
    \ i = 0\n        while (i < music_string.length) {\n            if (music_string(i)\
    \ == 'o') {\n                if (i + 1 < music_string.length && music_string(i\
    \ + 1) == '|') {\n                    list = list :+ 2\n                    i\
    \ += 2\n                } else {\n                    list = list :+ 4\n     \
    \               i += 1\n                }\n            } else {\n            \
    \    list = list :+ 1\n                i += 2\n            }\n        }\n    \
    \    list", "        val notes = music_string.split(\" \")\n        val beats\
    \ = new ListBuffer[Long]\n        for (note <- notes) {\n            if (note\
    \ == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n    \
    \        else if (note == \".|\") beats += 1\n        }\n        beats.toList",
  "        music_string.split(\" \").map(x => x match {\n            case \"o\" =>\
    \ 4l\n            case \"o|\" => 2l\n            case \".|\" => 1l\n        }).toList",
  "        val beats = ListBuffer[Long]()\n        for (note <- music_string.split(\"\
    \ \")) {\n            note match {\n                case \"o\" => beats += 4\n\
    \                case \"o|\" => beats += 2\n                case \".|\" => beats\
    \ += 1\n            }\n        }\n        beats.toList", "        var result =\
    \ List[Long]()\n        val notes = music_string.split(\" \")\n        for (note\
    \ <- notes) {\n            if (note == \"o\") result = result :+ 4l\n        \
    \    else if (note == \"o|\") result = result :+ 2l\n            else if (note\
    \ == \".|\") result = result :+ 1l\n        }\n        result", "        val beats\
    \ = ListBuffer[Long]()\n        for (ch <- music_string) {\n            if (ch\
    \ == 'o') beats += 4\n            else if (ch == '|') beats += 1\n        }\n\
    \        beats.toList", "        val notes = music_string.split(\" \")\n     \
    \   val beats = new ListBuffer[Long]\n        for (note <- notes) {\n        \
    \    if (note == \"o\") beats += 4\n            else if (note == \"o|\") beats\
    \ += 2\n            else if (note == \".|\") beats += 1\n        }\n        beats.toList",
  "        music_string.split(\" \").map(x => x match {\n            case \"o\" =>\
    \ 4l\n            case \"o|\" => 2l\n            case \".|\" => 1l\n        }).toList",
  "        var result : List[Long] = List()\n        var notes = music_string.split(\"\
    \ \")\n        for (note <- notes) {\n            if (note == \"o\") {\n     \
    \           result = result :+ 4\n            } else if (note == \"o|\") {\n \
    \               result = result :+ 2\n            } else if (note == \".|\") {\n\
    \                result = result :+ 1\n            }\n        }\n        return\
    \ result", "        // Write your code here\n        var result = List[Long]()\n\
    \        var i = 0\n        while (i < music_string.length) {\n            if\
    \ (music_string(i) == 'o') {\n                if (i + 1 < music_string.length\
    \ && music_string(i + 1) == '|') {\n                    result = result :+ 2\n\
    \                    i += 2\n                } else {\n                    result\
    \ = result :+ 4\n                    i += 1\n                }\n            }\
    \ else {\n                result = result :+ 1\n                i += 2\n     \
    \       }\n        }\n        result", "        // Write your code here\n    \
    \    val notes = music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n\
    \        for (note <- notes) {\n            note match {\n                case\
    \ \"o\" => beats += 4\n                case \"o|\" => beats += 2\n           \
    \     case \".|\" => beats += 1\n            }\n        }\n        beats.toList",
  "        val notes = music_string.split(\" \")\n        notes.map(note => {\n  \
    \          if (note == \"o\") 4\n            else if (note == \"o|\") 2\n    \
    \        else 1\n        }).toList", "        // Your code goes here\n       \
    \ var list = List[Long]()\n        var i = 0\n        while (i < music_string.length())\
    \ {\n            if (music_string(i) == 'o') {\n                if (i + 1 < music_string.length()\
    \ && music_string(i + 1) == '|') {\n                    list = list :+ 2\n   \
    \                 i += 2\n                } else {\n                    list =\
    \ list :+ 4\n                    i += 1\n                }\n            } else\
    \ {\n                list = list :+ 1\n                i += 2\n            }\n\
    \        }\n        list", "        val notes = music_string.split(\" \")\n  \
    \      var result = List[Long]()\n        for (note <- notes) {\n            note\
    \ match {\n                case \"o\" => result = result :+ 4\n              \
    \  case \"o|\" => result = result :+ 2\n                case \".|\" => result\
    \ = result :+ 1\n            }\n        }\n        return result", "        val\
    \ notes = music_string.split(\" \")\n        var beats = List[Long]()\n      \
    \  for (note <- notes) {\n            if (note == \"o\") beats = beats :+ 4\n\
    \            else if (note == \"o|\") beats = beats :+ 2\n            else if\
    \ (note == \".|\") beats = beats :+ 1\n        }\n        beats", "        //\
    \ Write your code here\n        // Return list of integers corresponding to how\
    \ many beats does each not last.\n        // Example:\n        // >>> parseMusic((\"\
    o o| .| o| o| .| .| .| .| o o\"))\n        // (List[Long](4l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong))\n        var result = List[Long]()\n        var temp\
    \ = \"\"\n        for (i <- 0 until music_string.length) {\n            if (music_string(i)\
    \ == ' ') {\n                if (temp == \"o\") {\n                    result\
    \ = result :+ 4\n                } else if (temp == \"o|\") {\n              \
    \      result = result :+ 2\n                } else if (temp == \".|\") {\n  \
    \                  result = result :+ 1\n                }\n                temp\
    \ = \"\"\n            } else {\n                temp = temp + music_string(i)\n\
    \            }\n        }\n        if (temp == \"o\") {\n            result =\
    \ result :+ 4\n        } else if (temp == \"o|\") {\n            result = result\
    \ :+ 2\n        } else if (temp == \".|\") {\n            result = result :+ 1\n\
    \        }\n        result", "        val notes = music_string.split(\" \")\n\
    \        notes.map(note => {\n            if (note == \"o\") 4\n            else\
    \ if (note == \"o|\") 2\n            else 1\n        }).toList", "        // Write\
    \ your code here\n        val l = music_string.split(\" \").toList\n        l.map(x\
    \ => x match {\n            case \"o\" => 4l\n            case \"o|\" => 2l\n\
    \            case \".|\" => 1l\n        })", "        val beats = ListBuffer[Long]()\n\
    \        for (i <- 0 until music_string.length) {\n            if (music_string(i)\
    \ == 'o') {\n                if (i + 1 < music_string.length && music_string(i\
    \ + 1) == '|') {\n                    beats += 2\n                    i += 1\n\
    \                } else {\n                    beats += 4\n                }\n\
    \            } else if (music_string(i) == '.') {\n                beats += 1\n\
    \            }\n        }\n        beats.toList", "        music_string.split(\"\
    \ \").map(x => x match {\n            case \"o\" => 4\n            case \"o|\"\
    \ => 2\n            case \".|\" => 1\n        }).toList", "        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            note match {\n                case \"o\"\
    \ => beats += 4\n                case \"o|\" => beats += 2\n                case\
    \ \".|\" => beats += 1\n            }\n        }\n        beats.toList", "   \
    \     val notes = music_string.split(\" \")\n        var beats = List[Long]()\n\
    \        for (note <- notes) {\n            if (note == \"o\") beats = beats :+\
    \ 4\n            else if (note == \"o|\") beats = beats :+ 2\n            else\
    \ if (note == \".|\") beats = beats :+ 1\n        }\n        beats", "       \
    \ val notes = music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n\
    \        for (note <- notes) {\n            if (note == \"o\") beats += 4\n  \
    \          else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList", "        val beats = new ListBuffer[Long]\n\
    \        var current_beat = 0l\n        for (c <- music_string) {\n          \
    \  if (c == 'o') {\n                beats += 4\n                current_beat +=\
    \ 4\n            }\n            else if (c == '|') {\n                beats +=\
    \ current_beat\n                current_beat = 0\n            }\n            else\
    \ if (c == '.') {\n                beats += 1\n                current_beat +=\
    \ 1\n            }\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \")\n        var beats = List[Long]()\n        for (note <- notes) {\n     \
    \       if (note == \"o\") beats = beats :+ 4\n            else if (note == \"\
    o|\") beats = beats :+ 2\n            else if (note == \".|\") beats = beats :+\
    \ 1\n        }\n        beats", "        val notes = music_string.split(\" \"\
    )\n        var beats = List[Long]()\n        for (note <- notes) {\n         \
    \   if (note == \"o\") beats = beats :+ 4\n            else if (note == \"o|\"\
    ) beats = beats :+ 2\n            else if (note == \".|\") beats = beats :+ 1\n\
    \        }\n        beats", "        var result = List[Long]()\n        for (i\
    \ <- 0 until music_string.length) {\n            if (music_string(i) == 'o') {\n\
    \                if (i + 1 < music_string.length && music_string(i + 1) == '|')\
    \ {\n                    result = result :+ 2\n                    i += 1\n  \
    \              } else {\n                    result = result :+ 4\n          \
    \      }\n            } else if (music_string(i) == '.') {\n                result\
    \ = result :+ 1\n            }\n        }\n        return result", "        val\
    \ map = Map('o' -> 4, '.' -> 1)\n        val result = new ListBuffer[Long]\n \
    \       for (i <- 0 until music_string.length) {\n            if (music_string(i)\
    \ == 'o' || music_string(i) == '.') {\n                result += map(music_string(i))\n\
    \            }\n        }\n        result.toList", "        val beats = ListBuffer[Long]()\n\
    \        for (c <- music_string) {\n            c match {\n                case\
    \ 'o' => beats += 4\n                case 'o' => beats += 2\n                case\
    \ '.' => beats += 1\n            }\n        }\n        beats.toList", "      \
    \  val beats = ListBuffer[Long]()\n        val notes = music_string.split(\" \"\
    )\n        for (note <- notes) {\n            if (note == \"o\") beats += 4\n\
    \            else if (note == \"o|\") beats += 2\n            else if (note ==\
    \ \".|\") beats += 1\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \")\n        val beats = new ListBuffer[Long]\n        for (note <- notes) {\n\
    \            if (note == \"o\") beats += 4\n            else if (note == \"o|\"\
    ) beats += 2\n            else if (note == \".|\") beats += 1\n        }\n   \
    \     beats.toList", "        val beats = ListBuffer[Long]()\n        for (c <-\
    \ music_string) {\n            c match {\n                case 'o' => beats +=\
    \ 4\n                case 'o' => beats += 2\n                case '.' => beats\
    \ += 1\n            }\n        }\n        beats.toList", "        val notes =\
    \ music_string.split(\" \")\n        notes.map(note => note match {\n        \
    \    case \"o\" => 4\n            case \"o|\" => 2\n            case \".|\" =>\
    \ 1\n        }).toList", "        val beats = ListBuffer[Long]()\n        for\
    \ (note <- music_string.split(\" \")) {\n            note match {\n          \
    \      case \"o\" => beats += 4\n                case \"o|\" => beats += 2\n \
    \               case \".|\" => beats += 1\n            }\n        }\n        beats.toList",
  "        val beats = ListBuffer[Long]()\n        for (note <- music_string.split(\"\
    \ \")) {\n            note match {\n                case \"o\" => beats += 4\n\
    \                case \"o|\" => beats += 2\n                case \".|\" => beats\
    \ += 1\n            }\n        }\n        beats.toList", "        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note == \"o\") beats += 4\n        \
    \    else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList", "        val beats = ListBuffer[Long]()\n\
    \        for (note <- music_string.split(\" \")) {\n            note match {\n\
    \                case \"o\" => beats += 4\n                case \"o|\" => beats\
    \ += 2\n                case \".|\" => beats += 1\n            }\n        }\n\
    \        beats.toList", "        val notes = music_string.split(\" \")\n     \
    \   var beats = List[Long]()\n        for (note <- notes) {\n            if (note\
    \ == \"o\") beats = beats :+ 4\n            else if (note == \"o|\") beats = beats\
    \ :+ 2\n            else if (note == \".|\") beats = beats :+ 1\n        }\n \
    \       beats", "        // Your code goes here\n        val beats = ListBuffer[Long]()\n\
    \        val notes = music_string.split(\" \")\n        for (note <- notes) {\n\
    \            if (note == \"o\") beats += 4\n            else if (note == \"o|\"\
    ) beats += 2\n            else if (note == \".|\") beats += 1\n        }\n   \
    \     beats.toList", "        // Write your code here.\n        // Return a list\
    \ of integers corresponding to how many beats does each not last.\n        //\
    \ For example, if the input string is \"o o| .| o| o| .| .| .| .| o o\"\n    \
    \    // then the output list should be (4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong)\n\
    \        // You can assume that the input string is always valid.\n        //\
    \ You can use any programming language you like.\n        // You can use any libraries\
    \ you like.\n        // You can use any data structures you like.\n        //\
    \ You can use any algorithm you like.\n        // You can use any IDE you like.\n\
    \        // You can use any operating system you like.\n        // You can use\
    \ any computer you like.\n        // You can use any compiler you like.\n    \
    \    // You can use any editor you like.\n        // You can use any programming\
    \ style you like.\n        // You can use any programming paradigm you like.\n\
    \        // You can use any programming language you like.\n        // You can\
    \ use any libraries you like.\n        // You can use any data structures you\
    \ like.\n        // You can use any algorithm you like.\n        // You can use\
    \ any IDE you like.\n        // You can use any operating system you like.\n \
    \       // You can use any computer you like.\n        // You can use any compiler\
    \ you like.\n        // You can use any editor you like.\n        // You can use\
    \ any programming style you like.\n        // You can use any programming paradigm\
    \ you like.\n        // You can use any programming language you like.\n     \
    \   // You can use any libraries you like.\n        // You can use any data structures\
    \ you like.\n        // You can use any algorithm you like.\n        // You can\
    \ use any IDE you like.\n        // You can use any operating system you like.\n\
    \        // You can use any computer you like.\n        // You can use any compiler\
    \ you like.\n        // You can use any editor you like.\n        // You can use\
    \ any programming style you", "        // Write your code here\n        var list\
    \ = List[Long]()\n        var i = 0\n        while (i < music_string.length) {\n\
    \            if (music_string(i) == 'o') {\n                if (i + 1 < music_string.length\
    \ && music_string(i + 1) == '|') {\n                    list = list :+ 2\n   \
    \                 i += 2\n                } else {\n                    list =\
    \ list :+ 4\n                    i += 1\n                }\n            } else\
    \ {\n                list = list :+ 1\n                i += 2\n            }\n\
    \        }\n        list", "        val notes = music_string.split(\" \").toList\n\
    \        notes.map(note => {\n            if (note == \"o\") 4\n            else\
    \ if (note == \"o|\") 2\n            else 1\n        })", "        // Your code\
    \ goes here\n        var l = List[Long]()\n        var i = 0\n        while (i\
    \ < music_string.length) {\n            if (music_string(i) == 'o') {\n      \
    \          if (i + 1 < music_string.length && music_string(i + 1) == '|') {\n\
    \                    l = l :+ 2\n                    i += 2\n                }\
    \ else {\n                    l = l :+ 4\n                    i += 1\n       \
    \         }\n            } else {\n                l = l :+ 1\n              \
    \  i += 2\n            }\n        }\n        l", "        // Your code here\n\
    \        val map = Map('o' -> 4, '.' -> 1)\n        val list = music_string.split(\"\
    \ \").toList\n        list.map(x => {\n            if (x.length == 2) {\n    \
    \            map(x(0)) / 2\n            } else {\n                map(x(0))\n\
    \            }\n        })", "        val notes = music_string.split(\" \")\n\
    \        val beats = ListBuffer[Long]()\n        for (note <- notes) {\n     \
    \       if (note == \"o\") beats += 4\n            else if (note == \"o|\") beats\
    \ += 2\n            else if (note == \".|\") beats += 1\n        }\n        beats.toList",
  "        val notes = music_string.split(\" \")\n        notes.map(note => {\n  \
    \          if (note == \"o\") 4\n            else if (note == \"o|\") 2\n    \
    \        else 1\n        }).toList", "        val notes = music_string.split(\"\
    \ \")\n        val beats = new ListBuffer[Long]\n        for (note <- notes) {\n\
    \            note match {\n                case \"o\" => beats += 4\n        \
    \        case \"o|\" => beats += 2\n                case \".|\" => beats += 1\n\
    \            }\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \")\n        val beats = new ListBuffer[Long]\n        for (note <- notes) {\n\
    \            if (note == \"o\") beats += 4\n            else if (note == \"o|\"\
    ) beats += 2\n            else if (note == \".|\") beats += 1\n        }\n   \
    \     beats.toList", "        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n\
    \            else if (note == \".|\") beats += 1\n        }\n        beats.toList",
  "        val notes = music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n\
    \        for (note <- notes) {\n            if (note == \"o\") beats += 4\n  \
    \          else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \")\n        val beats = new ListBuffer[Long]\n        for (note <- notes) {\n\
    \            note match {\n                case \"o\" => beats += 4\n        \
    \        case \"o|\" => beats += 2\n                case \".|\" => beats += 1\n\
    \            }\n        }\n        beats.toList", "        // Write your code\
    \ here\n        return List[Long]()", "        val beats = ListBuffer[Long]()\n\
    \        val notes = music_string.split(\" \")\n        for (note <- notes) {\n\
    \            if (note == \"o\") beats += 4\n            else if (note == \"o|\"\
    ) beats += 2\n            else if (note == \".|\") beats += 1\n        }\n   \
    \     beats.toList", "        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note == \"o\") beats += 4l\n            else if (note == \"o|\") beats += 2l\n\
    \            else if (note == \".|\") beats += 1l\n        }\n        beats.toList",
  "        val beats = ListBuffer[Long]()\n        for (i <- 0 until music_string.length)\
    \ {\n            if (music_string(i) == 'o') {\n                if (i + 1 < music_string.length\
    \ && music_string(i + 1) == '|') {\n                    beats += 2\n         \
    \           i += 1\n                } else {\n                    beats += 4\n\
    \                }\n            } else if (music_string(i) == '.') {\n       \
    \         beats += 1\n            }\n        }\n        beats.toList", "     \
    \   var result = List[Long]()\n        for (c <- music_string) {\n           \
    \ if (c == 'o') result = result :+ 4\n            else if (c == '|') result =\
    \ result :+ 1\n        }\n        result", "        var result : List[Long] =\
    \ List()\n        var i = 0\n        while (i < music_string.length) {\n     \
    \       if (music_string(i) == 'o') {\n                if (i + 1 < music_string.length\
    \ && music_string(i + 1) == '|') {\n                    result = 2l.toLong ::\
    \ result\n                    i += 2\n                } else {\n             \
    \       result = 4l.toLong :: result\n                    i += 1\n           \
    \     }\n            } else {\n                result = 1l.toLong :: result\n\
    \                i += 2\n            }\n        }\n        result.reverse", " \
    \       val beats = ListBuffer[Long]()\n        var current_beat = 0l\n      \
    \  for (i <- 0 until music_string.length) {\n            if (music_string(i) ==\
    \ 'o') {\n                beats += 4l\n                current_beat += 4l\n  \
    \          }\n            else if (music_string(i) == '|') {\n               \
    \ beats += current_beat\n                current_beat = 0l\n            }\n  \
    \      }\n        beats.toList", "        music_string.split(\" \").map(x => x\
    \ match {\n            case \"o\" => 4\n            case \"o|\" => 2\n       \
    \     case \".|\" => 1\n        }).toList", "        val beats = ListBuffer[Long]()\n\
    \        for (i <- 0 until music_string.length) {\n            if (music_string(i)\
    \ == 'o') {\n                if (i + 1 < music_string.length && music_string(i\
    \ + 1) == '|') {\n                    beats += 2\n                    i += 1\n\
    \                } else {\n                    beats += 4\n                }\n\
    \            } else if (music_string(i) == '.') {\n                beats += 1\n\
    \            }\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \")\n        val beats = ListBuffer[Long]()\n        for (note <- notes) {\n\
    \            if (note == \"o\") beats += 4\n            else if (note == \"o|\"\
    ) beats += 2\n            else if (note == \".|\") beats += 1\n        }\n   \
    \     beats.toList", "        val beats = ListBuffer[Long]()\n        for (i <-\
    \ 0 until music_string.length) {\n            if (music_string(i) == 'o') {\n\
    \                if (i + 1 < music_string.length && music_string(i + 1) == '|')\
    \ {\n                    beats += 2\n                    i += 1\n            \
    \    } else {\n                    beats += 4\n                }\n           \
    \ } else if (music_string(i) == '.') {\n                beats += 1\n         \
    \   }\n        }\n        beats.toList", "        val beats = ListBuffer[Long]()\n\
    \        for (note <- music_string.split(\" \")) {\n            if (note == \"\
    o\") beats += 4\n            else if (note == \"o|\") beats += 2\n           \
    \ else if (note == \".|\") beats += 1\n        }\n        beats.toList", "   \
    \     music_string.split(\" \").map(x => x match {\n            case \"o\" =>\
    \ 4\n            case \"o|\" => 2\n            case \".|\" => 1\n        }).toList",
  "        val notes = music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n\
    \        for (note <- notes) {\n            if (note == \"o\") beats += 4\n  \
    \          else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList", "        val beats = ListBuffer[Long]()\n\
    \        for (line <- music_string.split(\" \")) {\n            line match {\n\
    \                case \"o\" => beats += 4\n                case \"o|\" => beats\
    \ += 2\n                case \".|\" => beats += 1\n            }\n        }\n\
    \        beats.toList", "        val notes = music_string.split(\" \")\n     \
    \   val beats = new ListBuffer[Long]\n        for (note <- notes) {\n        \
    \    if (note == \"o\") beats += 4\n            else if (note == \"o|\") beats\
    \ += 2\n            else if (note == \".|\") beats += 1\n        }\n        beats.toList",
  "        val notes = music_string.split(\" \")\n        var result = List[Long]()\n\
    \        for (note <- notes) {\n            if (note == \"o\") result = result\
    \ :+ 4\n            else if (note == \"o|\") result = result :+ 2\n          \
    \  else if (note == \".|\") result = result :+ 1\n        }\n        return result",
  "        val notes = music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n\
    \        for (note <- notes) {\n            if (note == \"o\") beats += 4\n  \
    \          else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \")\n        val beats = new ListBuffer[Long]\n        for (note <- notes) {\n\
    \            note match {\n                case \"o\" => beats += 4\n        \
    \        case \"o|\" => beats += 2\n                case \".|\" => beats += 1\n\
    \            }\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \")\n        val beats = ListBuffer[Long]()\n        for (note <- notes) {\n\
    \            if (note.charAt(0) == 'o') {\n                if (note.length() ==\
    \ 1) beats += 4\n                else beats += 2\n            }\n            else\
    \ beats += 1\n        }\n        beats.toList", "        val beats = ListBuffer[Long]()\n\
    \        for (i <- 0 until music_string.length) {\n            if (music_string(i)\
    \ == 'o') {\n                if (i + 1 < music_string.length && music_string(i\
    \ + 1) == '|') {\n                    beats += 2\n                    i += 1\n\
    \                } else {\n                    beats += 4\n                }\n\
    \            } else if (music_string(i) == '.') {\n                beats += 1\n\
    \            }\n        }\n        beats.toList", "        // Write your code\
    \ here\n        val beats = music_string.split(\" \").map(x => x match {\n   \
    \         case \"o\" => 4\n            case \"o|\" => 2\n            case \".|\"\
    \ => 1\n        })\n        beats.toList", "        val beats = ListBuffer[Long]()\n\
    \        for (c <- music_string) {\n            if (c == 'o') beats += 4\n   \
    \         else if (c == '|') beats += 2\n            else if (c == '.') beats\
    \ += 1\n        }\n        beats.toList", "        val beats = ListBuffer[Long]()\n\
    \        for (c <- music_string) {\n            c match {\n                case\
    \ 'o' => beats += 4\n                case '|' => beats += 2\n                case\
    \ '.' => beats += 1\n                case ' ' =>\n            }\n        }\n \
    \       beats.toList", "        val notes = music_string.split(\" \")\n      \
    \  var beats = List[Long]()\n        for (note <- notes) {\n            if (note\
    \ == \"o\") beats = beats :+ 4\n            else if (note == \"o|\") beats = beats\
    \ :+ 2\n            else if (note == \".|\") beats = beats :+ 1\n        }\n \
    \       beats", "        val beats = ListBuffer[Long]()\n        for (note <-\
    \ music_string.split(\" \")) {\n            note match {\n                case\
    \ \"o\" => beats += 4\n                case \"o|\" => beats += 2\n           \
    \     case \".|\" => beats += 1\n            }\n        }\n        beats.toList",
  "        // Write your code here\n        var result = List[Long]()\n        var\
    \ i = 0\n        while (i < music_string.length) {\n            if (music_string(i)\
    \ == 'o') {\n                if (i + 1 < music_string.length && music_string(i\
    \ + 1) == '|') {\n                    result = result :+ 2\n                 \
    \   i += 2\n                } else {\n                    result = result :+ 4\n\
    \                    i += 1\n                }\n            } else {\n       \
    \         result = result :+ 1\n                i += 2\n            }\n      \
    \  }\n        result", "        // Write your code here\n        val result =\
    \ ListBuffer[Long]()\n        for (i <- 0 until music_string.length) {\n     \
    \       if (music_string(i) == 'o') {\n                if (i + 1 < music_string.length\
    \ && music_string(i + 1) == '|') {\n                    result += 2\n        \
    \            i += 1\n                } else {\n                    result += 4\n\
    \                }\n            } else if (music_string(i) == '.') {\n       \
    \         result += 1\n            }\n        }\n        result.toList", "   \
    \     var list = List[Long]()\n        var i = 0\n        while (i < music_string.length)\
    \ {\n            if (music_string(i) == 'o') {\n                if (i + 1 < music_string.length\
    \ && music_string(i + 1) == '|') {\n                    list = list :+ 2\n   \
    \                 i += 2\n                } else {\n                    list =\
    \ list :+ 4\n                    i += 1\n                }\n            } else\
    \ {\n                list = list :+ 1\n                i += 2\n            }\n\
    \        }\n        list", "        val notes = music_string.split(\" \")\n  \
    \      val beats = new ListBuffer[Long]\n        for (note <- notes) {\n     \
    \       note match {\n                case \"o\" => beats += 4\n             \
    \   case \"o|\" => beats += 2\n                case \".|\" => beats += 1\n   \
    \         }\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \")\n        notes.map(note => note match {\n            case \"o\" => 4l\n\
    \            case \"o|\" => 2l\n            case \".|\" => 1l\n        }).toList",
  "        var result = List[Long]()\n        var i = 0\n        while (i < music_string.length)\
    \ {\n            if (music_string(i) == 'o') {\n                if (i + 1 < music_string.length\
    \ && music_string(i + 1) == '|') {\n                    result = result :+ 2\n\
    \                    i += 2\n                } else {\n                    result\
    \ = result :+ 4\n                    i += 1\n                }\n            }\
    \ else {\n                result = result :+ 1\n                i += 2\n     \
    \       }\n        }\n        return result", "        val beats = ListBuffer[Long]()\n\
    \        for (i <- 0 until music_string.length) {\n            if (music_string(i)\
    \ == 'o') {\n                if (i + 1 < music_string.length && music_string(i\
    \ + 1) == '|') {\n                    beats += 2\n                    i += 1\n\
    \                } else {\n                    beats += 4\n                }\n\
    \            } else if (music_string(i) == '.') {\n                beats += 1\n\
    \            }\n        }\n        beats.toList", "        // Write your code\
    \ here\n        val beats = ListBuffer[Long]()\n        for (i <- 0 until music_string.length)\
    \ {\n            if (music_string(i) == 'o') {\n                if (i + 1 < music_string.length\
    \ && music_string(i + 1) == '|') {\n                    beats += 2\n         \
    \           i += 1\n                } else {\n                    beats += 4\n\
    \                }\n            } else if (music_string(i) == '.') {\n       \
    \         beats += 1\n            }\n        }\n        beats.toList", "     \
    \   val beats = ListBuffer[Long]()\n        for (i <- 0 until music_string.length)\
    \ {\n            if (music_string(i) == 'o') {\n                if (i + 1 < music_string.length\
    \ && music_string(i + 1) == '|') {\n                    beats += 2\n         \
    \           i += 1\n                } else {\n                    beats += 4\n\
    \                }\n            } else if (music_string(i) == '.') {\n       \
    \         beats += 1\n            }\n        }\n        beats.toList", "     \
    \   val beats = ListBuffer[Long]()\n        for (i <- 0 until music_string.length)\
    \ {\n            if (music_string(i) == 'o') {\n                if (i + 1 < music_string.length\
    \ && music_string(i + 1) == '|') {\n                    beats += 2\n         \
    \           i += 1\n                } else {\n                    beats += 4\n\
    \                }\n            } else if (music_string(i) == '.') {\n       \
    \         beats += 1\n            }\n        }\n        beats.toList", "     \
    \   val beats = ListBuffer[Long]()\n        val notes = music_string.split(\"\
    \ \")\n        for (note <- notes) {\n            if (note == \"o\") beats +=\
    \ 4\n            else if (note == \"o|\") beats += 2\n            else if (note\
    \ == \".|\") beats += 1\n        }\n        beats.toList", "        val notes\
    \ = music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n    \
    \    for (note <- notes) {\n            note match {\n                case \"\
    o\" => beats += 4\n                case \"o|\" => beats += 2\n               \
    \ case \".|\" => beats += 1\n            }\n        }\n        beats.toList",
  "        return music_string.split(\" \").map(x => x match {\n            case \"\
    o\" => 4l\n            case \"o|\" => 2l\n            case \".|\" => 1l\n    \
    \    }).toList", "        val notes = music_string.split(\" \")\n        val beats\
    \ = new ListBuffer[Long]\n        for (note <- notes) {\n            if (note\
    \ == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n    \
    \        else if (note == \".|\") beats += 1\n        }\n        beats.toList",
  "        val notes = music_string.split(\" \")\n        var result = List[Long]()\n\
    \        for (note <- notes) {\n            if (note == \"o\") result = result\
    \ :+ 4\n            else if (note == \"o|\") result = result :+ 2\n          \
    \  else if (note == \".|\") result = result :+ 1\n        }\n        return result",
  "        val beats = ListBuffer[Long]()\n        for (i <- 0 until music_string.length)\
    \ {\n            if (music_string(i) == 'o') {\n                if (i + 1 < music_string.length\
    \ && music_string(i + 1) == '|') {\n                    beats += 2\n         \
    \           i += 1\n                } else {\n                    beats += 4\n\
    \                }\n            } else if (music_string(i) == '.') {\n       \
    \         beats += 1\n            }\n        }\n        beats.toList", "     \
    \   val result = new ListBuffer[Long]()\n        for (i <- 0 until music_string.length)\
    \ {\n            if (music_string(i) == 'o') {\n                if (i + 1 < music_string.length\
    \ && music_string(i + 1) == '|') {\n                    result += 2\n        \
    \            i += 1\n                } else {\n                    result += 4\n\
    \                }\n            } else if (music_string(i) == '.') {\n       \
    \         result += 1\n            }\n        }\n        result.toList", "   \
    \     val notes = music_string.split(\" \").toList\n        notes.map(note =>\
    \ {\n            if (note.contains(\"o\")) {\n                if (note.length()\
    \ == 1) 4 else 2\n            } else {\n                1\n            }\n   \
    \     })", "        val notes = music_string.split(\" \")\n        val beats =\
    \ ListBuffer[Long]()\n        for (note <- notes) {\n            if (note == \"\
    o\") beats += 4\n            else if (note == \"o|\") beats += 2\n           \
    \ else if (note == \".|\") beats += 1\n        }\n        beats.toList", "   \
    \     var result = List[Long]()\n        var i = 0\n        while (i < music_string.length)\
    \ {\n            if (music_string(i) == 'o') {\n                if (i + 1 < music_string.length\
    \ && music_string(i + 1) == '|') {\n                    result = result :+ 2\n\
    \                    i += 2\n                } else {\n                    result\
    \ = result :+ 4\n                    i += 1\n                }\n            }\
    \ else {\n                result = result :+ 1\n                i += 2\n     \
    \       }\n        }\n        return result", "        val notes = music_string.split(\"\
    \ \")\n        notes.map(note => {\n            if (note == \"o\") 4\n       \
    \     else if (note == \"o|\") 2\n            else 1\n        }).toList", "  \
    \      val beats = ListBuffer[Long]()\n        for (note <- music_string.split(\"\
    \ \")) {\n            note match {\n                case \"o\" => beats += 4\n\
    \                case \"o|\" => beats += 2\n                case \".|\" => beats\
    \ += 1\n            }\n        }\n        beats.toList", "        val notes =\
    \ music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n      \
    \  for (note <- notes) {\n            if (note == \"o\") beats += 4\n        \
    \    else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList", "        val music_string_list\
    \ = music_string.split(\" \").toList\n        val music_list = music_string_list.map(x\
    \ => x match {\n            case \"o\" => 4\n            case \"o|\" => 2\n  \
    \          case \".|\" => 1\n        })\n        music_list", "        val notes\
    \ = music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n    \
    \    for (note <- notes) {\n            if (note == \"o\") beats += 4\n      \
    \      else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList", "        var result = List[Long]()\n\
    \        for (i <- 0 until music_string.length) {\n            if (music_string(i)\
    \ == 'o') {\n                if (i + 1 < music_string.length && music_string(i\
    \ + 1) == '|') {\n                    result = 2l.toLong :: result\n         \
    \           i += 1\n                } else {\n                    result = 4l.toLong\
    \ :: result\n                }\n            } else if (music_string(i) == '.')\
    \ {\n                result = 1l.toLong :: result\n            }\n        }\n\
    \        result.reverse", "        val beats = ListBuffer[Long]()\n        for\
    \ (i <- 0 until music_string.length) {\n            if (music_string(i) == 'o')\
    \ {\n                if (i + 1 < music_string.length && music_string(i + 1) ==\
    \ '|') {\n                    beats += 2\n                    i += 1\n       \
    \         } else {\n                    beats += 4\n                }\n      \
    \      } else if (music_string(i) == '.') {\n                beats += 1\n    \
    \        }\n        }\n        beats.toList", "        // Your code goes here\n\
    \        val notes = music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n\
    \        for (note <- notes) {\n            if (note == \"o\") beats += 4\n  \
    \          else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \")\n        val beats = ListBuffer[Long]()\n        for (note <- notes) {\n\
    \            if (note == \"o\") beats += 4\n            else if (note == \"o|\"\
    ) beats += 2\n            else if (note == \".|\") beats += 1\n        }\n   \
    \     beats.toList", "        val beats = ListBuffer[Long]()\n        for (note\
    \ <- music_string.split(\" \")) {\n            note match {\n                case\
    \ \"o\" => beats += 4\n                case \"o|\" => beats += 2\n           \
    \     case \".|\" => beats += 1\n            }\n        }\n        beats.toList",
  "        val beats = ListBuffer[Long]()\n        for (c <- music_string) {\n   \
    \         c match {\n                case 'o' => beats += 4\n                case\
    \ 'o' => beats += 2\n                case '.' => beats += 1\n            }\n \
    \       }\n        beats.toList", "        val notes = music_string.split(\" \"\
    )\n        val beats = new ListBuffer[Long]\n        for (note <- notes) {\n \
    \           if (note == \"o\") beats += 4\n            else if (note == \"o|\"\
    ) beats += 2\n            else if (note == \".|\") beats += 1\n        }\n   \
    \     beats.toList", "        // Write your code here\n        return List[Long]()",
  "        val notes = music_string.split(\" \")\n        val beats = ListBuffer[Long]()\n\
    \        for (note <- notes) {\n            if (note == \"o\") beats += 4\n  \
    \          else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \")\n        val beats = new ListBuffer[Long]\n        for (note <- notes) {\n\
    \            if (note == \"o\") beats += 4\n            else if (note == \"o|\"\
    ) beats += 2\n            else if (note == \".|\") beats += 1\n        }\n   \
    \     beats.toList", "        // Fill in the code here\n        val music_string_list\
    \ = music_string.split(\" \")\n        val music_string_list_length = music_string_list.length\n\
    \        var music_string_list_index = 0\n        var music_string_list_result\
    \ : List[Long] = List()\n        while (music_string_list_index < music_string_list_length)\
    \ {\n            if (music_string_list(music_string_list_index) == \"o\") {\n\
    \                music_string_list_result = music_string_list_result :+ 4\n  \
    \          } else if (music_string_list(music_string_list_index) == \"o|\") {\n\
    \                music_string_list_result = music_string_list_result :+ 2\n  \
    \          } else if (music_string_list(music_string_list_index) == \".|\") {\n\
    \                music_string_list_result = music_string_list_result :+ 1\n  \
    \          }\n            music_string_list_index += 1\n        }\n        music_string_list_result",
  "        music_string.split(\" \").map(x => x match {\n            case \"o\" =>\
    \ 4\n            case \"o|\" => 2\n            case \".|\" => 1\n        }).toList",
  "        val notes = music_string.split(\" \")\n        val beats = ListBuffer[Long]()\n\
    \        for (note <- notes) {\n            if (note == \"o\") beats += 4\n  \
    \          else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList", "        var result = List[Long]()\n\
    \        for (i <- 0 until music_string.length) {\n            if (music_string(i)\
    \ == 'o') {\n                if (i + 1 < music_string.length && music_string(i\
    \ + 1) == '|') {\n                    result = 2l.toLong :: result\n         \
    \           i += 1\n                } else {\n                    result = 4l.toLong\
    \ :: result\n                }\n            } else if (music_string(i) == '.')\
    \ {\n                if (i + 1 < music_string.length && music_string(i + 1) ==\
    \ '|') {\n                    result = 1l.toLong :: result\n                 \
    \   i += 1\n                }\n            }\n        }\n        result.reverse",
  "        val notes = music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n\
    \        for (note <- notes) {\n            if (note == \"o\") beats += 4\n  \
    \          else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList", "        val beats = ListBuffer[Long]()\n\
    \        for (i <- 0 until music_string.length) {\n            if (music_string(i)\
    \ == 'o') {\n                if (i + 1 < music_string.length && music_string(i\
    \ + 1) == '|') {\n                    beats += 2\n                    i += 1\n\
    \                } else {\n                    beats += 4\n                }\n\
    \            } else if (music_string(i) == '.') {\n                beats += 1\n\
    \            }\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \")\n        notes.map(note => {\n            if (note == \"o\") 4\n       \
    \     else if (note == \"o|\") 2\n            else 1\n        }).toList", "  \
    \      val notes = music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n\
    \        for (note <- notes) {\n            note match {\n                case\
    \ \"o\" => beats += 4\n                case \"o|\" => beats += 2\n           \
    \     case \".|\" => beats += 1\n            }\n        }\n        beats.toList",
  "        // Write your code here\n        return List[Long]()", "        val notes\
    \ = music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n    \
    \    for (note <- notes) {\n            note match {\n                case \"\
    o\" => beats += 4\n                case \"o|\" => beats += 2\n               \
    \ case \".|\" => beats += 1\n            }\n        }\n        beats.toList",
  "        val beats = ListBuffer[Long]()\n        for (c <- music_string) {\n   \
    \         if (c == 'o') beats += 4\n            else if (c == '|') beats += 2\n\
    \            else if (c == '.') beats += 1\n        }\n        beats.toList",
  "        val beats = ListBuffer[Long]()\n        for (i <- 0 until music_string.length)\
    \ {\n            if (music_string(i) == 'o') {\n                beats += 4\n \
    \           } else if (music_string(i) == '|') {\n                beats += 1\n\
    \            }\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \")\n        notes.map(x => x match {\n            case \"o\" => 4l\n      \
    \      case \"o|\" => 2l\n            case \".|\" => 1l\n        }).toList", " \
    \       val notes = music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n\
    \        for (note <- notes) {\n            if (note == \"o\") beats += 4\n  \
    \          else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList", "        val beats = ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < music_string.length) {\n            if\
    \ (music_string(i) == 'o') {\n                if (i + 1 < music_string.length\
    \ && music_string(i + 1) == '|') {\n                    beats += 2\n         \
    \           i += 2\n                } else {\n                    beats += 4\n\
    \                    i += 1\n                }\n            } else {\n       \
    \         beats += 1\n                i += 2\n            }\n        }\n     \
    \   beats.toList", "        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n\
    \            else if (note == \".|\") beats += 1\n        }\n        beats.toList",
  "        val beats = new ListBuffer[Long]\n        for (i <- 0 until music_string.length)\
    \ {\n            music_string(i) match {\n                case 'o' => beats +=\
    \ 4\n                case '.' => beats += 1\n                case '|' =>\n   \
    \             case _ =>\n            }\n        }\n        beats.toList", "  \
    \      return music_string.split(\" \").map(x => x match {\n            case \"\
    o\" => 4l\n            case \"o|\" => 2l\n            case \".|\" => 1l\n    \
    \    }).toList", "        val notes = music_string.split(\" \")\n        val beats\
    \ = new ListBuffer[Long]\n        for (note <- notes) {\n            note match\
    \ {\n                case \"o\" => beats += 4\n                case \"o|\" =>\
    \ beats += 2\n                case \".|\" => beats += 1\n            }\n     \
    \   }\n        beats.toList", "        val beats = new ListBuffer[Long]\n    \
    \    for (i <- 0 until music_string.length) {\n            if (music_string(i)\
    \ == 'o') {\n                if (i + 1 < music_string.length && music_string(i\
    \ + 1) == '|') {\n                    beats += 2\n                    i += 1\n\
    \                } else {\n                    beats += 4\n                }\n\
    \            } else if (music_string(i) == '.') {\n                beats += 1\n\
    \            }\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \")\n        var beats = List[Long]()\n        for (note <- notes) {\n     \
    \       if (note == \"o\") beats = beats :+ 4\n            else if (note == \"\
    o|\") beats = beats :+ 2\n            else if (note == \".|\") beats = beats :+\
    \ 1\n        }\n        beats", "        val notes = music_string.split(\" \"\
    )\n        val beats = ListBuffer[Long]()\n        for (note <- notes) {\n   \
    \         if (note == \"o\") beats += 4\n            else if (note == \"o|\")\
    \ beats += 2\n            else if (note == \".|\") beats += 1\n        }\n   \
    \     beats.toList", "        // Write your code here\n        val notes = music_string.split(\"\
    \ \")\n        val beats = new ListBuffer[Long]\n        for (note <- notes) {\n\
    \            if (note == \"o\") {\n                beats += 4\n            } else\
    \ if (note == \"o|\") {\n                beats += 2\n            } else if (note\
    \ == \".|\") {\n                beats += 1\n            }\n        }\n       \
    \ beats.toList", "        // Your code goes here\n        val notes = music_string.split(\"\
    \ \")\n        val beats = ListBuffer[Long]()\n        for (note <- notes) {\n\
    \            if (note == \"o\") beats += 4\n            else if (note == \"o|\"\
    ) beats += 2\n            else if (note == \".|\") beats += 1\n        }\n   \
    \     beats.toList", "        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n\
    \            else if (note == \".|\") beats += 1\n        }\n        beats.toList",
  "        var result = List[Long]()\n        var current_note = \"\"\n        for\
    \ (i <- 0 until music_string.length) {\n            if (music_string(i) == ' ')\
    \ {\n                result = result :+ current_note.length\n                current_note\
    \ = \"\"\n            } else {\n                current_note = current_note +\
    \ music_string(i)\n            }\n        }\n        result = result :+ current_note.length\n\
    \        return result", "        val notes = music_string.split(\" \")\n    \
    \    val beats = notes.map(note => {\n            if (note == \"o\") 4\n     \
    \       else if (note == \"o|\") 2\n            else 1\n        })\n        beats.toList",
  "        val notes = music_string.split(\" \")\n        val beats = ListBuffer[Long]()\n\
    \        for (note <- notes) {\n            if (note == \"o\") beats += 4\n  \
    \          else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \")\n        val beats = ListBuffer[Long]()\n        for (note <- notes) {\n\
    \            if (note == \"o\") beats += 4\n            else if (note == \"o|\"\
    ) beats += 2\n            else if (note == \".|\") beats += 1\n        }\n   \
    \     beats.toList", "        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n\
    \            else if (note == \".|\") beats += 1\n        }\n        beats.toList",
  "        val beats = ListBuffer[Long]()\n        for (i <- 0 until music_string.length)\
    \ {\n            if (music_string(i) == 'o') {\n                if (i + 1 < music_string.length\
    \ && music_string(i + 1) == '|') {\n                    beats += 2\n         \
    \           i += 1\n                } else {\n                    beats += 4\n\
    \                }\n            } else if (music_string(i) == '.') {\n       \
    \         beats += 1\n            }\n        }\n        beats.toList", "     \
    \   val notes = music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n\
    \        for (note <- notes) {\n            if (note == \"o\") beats += 4\n  \
    \          else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList", "        // Fill in your code\
    \ here\n        null", "        val beats = ListBuffer[Long]()\n        for (note\
    \ <- music_string.split(\" \")) {\n            if (note == \"o\") beats += 4\n\
    \            else if (note == \"o|\") beats += 2\n            else if (note ==\
    \ \".|\") beats += 1\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \")\n        notes.map(note => {\n            if (note == \"o\") 4\n       \
    \     else if (note == \"o|\") 2\n            else 1\n        }).toList", "  \
    \      val beats = ListBuffer[Long]()\n        for (i <- 0 until music_string.length)\
    \ {\n            if (music_string(i) == 'o') {\n                if (i + 1 < music_string.length\
    \ && music_string(i + 1) == '|') {\n                    beats += 2\n         \
    \           i += 1\n                } else {\n                    beats += 4\n\
    \                }\n            } else if (music_string(i) == '.') {\n       \
    \         beats += 1\n            }\n        }\n        beats.toList", "     \
    \   val notes = music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n\
    \        for (note <- notes) {\n            if (note == \"o\") beats += 4\n  \
    \          else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList", "        val beats = ListBuffer[Long]()\n\
    \        for (note <- music_string.split(\" \")) {\n            note match {\n\
    \                case \"o\" => beats += 4\n                case \"o|\" => beats\
    \ += 2\n                case \".|\" => beats += 1\n            }\n        }\n\
    \        beats.toList", "        var result = List[Long]()\n        var i = 0\n\
    \        while (i < music_string.length) {\n            if (music_string(i) ==\
    \ 'o') {\n                if (i + 1 < music_string.length && music_string(i +\
    \ 1) == '|') {\n                    result = result :+ 2\n                   \
    \ i += 2\n                } else {\n                    result = result :+ 4\n\
    \                    i += 1\n                }\n            } else {\n       \
    \         result = result :+ 1\n                i += 2\n            }\n      \
    \  }\n        result", "        val music_string_split = music_string.split(\"\
    \ \")\n        var result = List[Long]()\n        for (i <- 0 until music_string_split.length)\
    \ {\n            music_string_split(i) match {\n                case \"o\" =>\
    \ result = result :+ 4\n                case \"o|\" => result = result :+ 2\n\
    \                case \".|\" => result = result :+ 1\n            }\n        }\n\
    \        return result", "        val beats = ListBuffer[Long]()\n        for\
    \ (note <- music_string.split(\" \")) {\n            if (note == \"o\") beats\
    \ += 4\n            else if (note == \"o|\") beats += 2\n            else if (note\
    \ == \".|\") beats += 1\n        }\n        beats.toList", "        val notes\
    \ = music_string.split(\" \")\n        val beats = ListBuffer[Long]()\n      \
    \  for (note <- notes) {\n            if (note == \"o\") beats += 4\n        \
    \    else if (note == \"o|\") beats += 2\n            else if (note == \".|\"\
    ) beats += 1\n        }\n        beats.toList", "        val notes = music_string.split(\"\
    \ \")\n        val beats = new ListBuffer[Long]\n        for (note <- notes) {\n\
    \            if (note == \"o\") beats += 4\n            else if (note == \"o|\"\
    ) beats += 2\n            else if (note == \".|\") beats += 1\n        }\n   \
    \     beats.toList", "        // Your code goes here\n        var result = List[Long]()\n\
    \        var i = 0\n        while (i < music_string.length) {\n            if\
    \ (music_string(i) == 'o') {\n                if (i + 1 < music_string.length\
    \ && music_string(i + 1) == '|') {\n                    result = result :+ 2\n\
    \                    i += 2\n                } else {\n                    result\
    \ = result :+ 4\n                    i += 1\n                }\n            }\
    \ else {\n                result = result :+ 1\n                i += 2\n     \
    \       }\n        }\n        result", "        val notes = music_string.split(\"\
    \ \")\n        var beats = List[Long]()\n        for (note <- notes) {\n     \
    \       if (note == \"o\") beats = beats :+ 4\n            else if (note == \"\
    o|\") beats = beats :+ 2\n            else if (note == \".|\") beats = beats :+\
    \ 1\n        }\n        beats", "        val beats = ListBuffer[Long]()\n    \
    \    val notes = music_string.split(\" \")\n        for (note <- notes) {\n  \
    \          if (note == \"o\") beats += 4\n            else if (note == \"o|\"\
    ) beats += 2\n            else if (note == \".|\") beats += 1\n        }\n   \
    \     beats.toList", "        var result = List[Long]()\n        var curr = 0\n\
    \        while (curr < music_string.length) {\n            if (music_string(curr)\
    \ == 'o') {\n                if (curr + 1 < music_string.length && music_string(curr\
    \ + 1) == '|') {\n                    result = result :+ 2\n                 \
    \   curr += 2\n                } else {\n                    result = result :+\
    \ 4\n                    curr += 1\n                }\n            } else {\n\
    \                result = result :+ 1\n                curr += 2\n           \
    \ }\n        }\n        return result", "        val beats = ListBuffer[Long]()\n\
    \        for (c <- music_string) {\n            if (c == 'o') beats += 4\n   \
    \         else if (c == '|') beats += 1\n        }\n        beats.toList", " \
    \       val notes = music_string.split(\" \")\n        val beats = new ListBuffer[Long]\n\
    \        for (note <- notes) {\n            if (note == \"o\") beats += 4\n  \
    \          else if (note == \"o|\") beats += 2\n            else if (note == \"\
    .|\") beats += 1\n        }\n        beats.toList", "        val beats = ListBuffer[Long]()\n\
    \        music_string.split(\" \").foreach(note => {\n            if (note ==\
    \ \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n       \
    \     else if (note == \".|\") beats += 1\n        })\n        beats.toList",
  "        val notes = music_string.split(\" \")\n        notes.map(note => {\n  \
    \          if (note == \"o\") 4\n            else if (note == \"o|\") 2\n    \
    \        else 1\n        }).toList", "        val beats = ListBuffer[Long]()\n\
    \        for (c <- music_string) {\n            c match {\n                case\
    \ 'o' => beats += 4\n                case 'o' => beats += 2\n                case\
    \ '.' => beats += 1\n            }\n        }\n        beats.toList", "      \
    \  val beats = music_string.split(\" \").map(x => x match {\n            case\
    \ \"o\" => 4\n            case \"o|\" => 2\n            case \".|\" => 1\n   \
    \     }).toList\n        beats", "        val notes = music_string.split(\" \"\
    )\n        val beats = new ListBuffer[Long]\n        for (note <- notes) {\n \
    \           if (note == \"o\") beats += 4\n            else if (note == \"o|\"\
    ) beats += 2\n            else if (note == \".|\") beats += 1\n        }\n   \
    \     beats.toList"]
stop_tokens:
- "\n    }\n"
