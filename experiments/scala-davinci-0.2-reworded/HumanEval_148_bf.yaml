name: HumanEval_148_bf
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // There are eight planets in our solar system: the closerst to the Sun \n\
  \    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
  \    // Uranus, Neptune.\n    // Write a function that takes two planet names as\
  \ strings planet1 and planet2. \n    // The function should return a tuple containing\
  \ all planets whose orbits are \n    // located between the orbit of planet1 and\
  \ the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The\
  \ function should return an empty tuple if planet1 or planet2\n    // are not correct\
  \ planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n\
  \    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"\
  ))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n\
  \    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n\
  \    def bf(planet1 : String, planet2 : String) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"),\
  \ (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
  Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
  Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"\
  Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
  Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
  ), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\"\
  )).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n\
  \    }\n\n}\n"
completions: ["        val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val planet1Index\
    \ = planets.indexOf(planet1)\n        val planet2Index = planets.indexOf(planet2)\n\
    \        if (planet1Index == -1 || planet2Index == -1) {\n            List()\n\
    \        } else {\n            val startIndex = min(planet1Index, planet2Index)\n\
    \            val endIndex = max(planet1Index, planet2Index)\n            planets.slice(startIndex\
    \ + 1, endIndex)\n        }", "        val planets = List(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \     val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) {\n            List()\n        } else {\n \
    \           val (min, max) = if (p1 < p2) (p1, p2) else (p2, p1)\n           \
    \ planets.slice(min + 1, max)\n        }", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) {\n            return List()\n        }\n \
    \       if (p1 > p2) {\n            return planets.slice(p2, p1)\n        }\n\
    \        planets.slice(p1, p2)", "        val planets = List(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \     val planet1Index = planets.indexOf(planet1)\n        val planet2Index =\
    \ planets.indexOf(planet2)\n        if (planet1Index == -1 || planet2Index ==\
    \ -1) {\n            List()\n        } else {\n            val start = min(planet1Index,\
    \ planet2Index)\n            val end = max(planet1Index, planet2Index)\n     \
    \       planets.slice(start + 1, end)\n        }", "        val planets = List(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        val (a, b) = if (p1\
    \ < p2) (p1, p2) else (p2, p1)\n        planets.slice(a + 1, b)", "        val\
    \ planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        if (p1 > p2) return planets.slice(p2, p1)\n        else\
    \ return planets.slice(p1, p2)", "        // your code here\n        List[String]()",
  "        val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        if (p1 < p2) planets.slice(p1 + 1, p2)\n        else\
    \ planets.slice(p2 + 1, p1)", "        // your code here\n        val planets\
    \ = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n      \
    \  val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1) {\n  \
    \          return List()\n        }\n        if (p1 < p2) {\n            return\
    \ planets.slice(p1 + 1, p2)\n        } else {\n            return planets.slice(p2\
    \ + 1, p1)\n        }", "        val planets = List(\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n       \
    \ val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        if (p1 < p2) planets.slice(p1\
    \ + 1, p2)\n        else planets.slice(p2 + 1, p1)", "        val planets = List(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) {\n            List()\n        } else {\n \
    \           val (min, max) = if (p1 < p2) (p1, p2) else (p2, p1)\n           \
    \ planets.slice(min + 1, max)\n        }", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) {\n            List()\n        } else {\n \
    \           val min = min(p1, p2)\n            val max = max(p1, p2)\n       \
    \     planets.slice(min + 1, max)\n        }", "        val planets = List(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) {\n            return List()\n        }\n \
    \       if (p1 > p2) {\n            return planets.slice(p2, p1)\n        }\n\
    \        planets.slice(p1, p2)", "        val planets = List(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \     val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) List()\n        else if (p1 < p2) planets.slice(p1\
    \ + 1, p2)\n        else planets.slice(p2 + 1, p1)", "        val planets = List(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n        val planet1Index = planets.indexOf(planet1)\n        val\
    \ planet2Index = planets.indexOf(planet2)\n        if (planet1Index == -1 || planet2Index\
    \ == -1) return List()\n        if (planet1Index < planet2Index) return planets.slice(planet1Index\
    \ + 1, planet2Index)\n        else return planets.slice(planet2Index + 1, planet1Index)",
  "        val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        val (min, max) = if (p1 < p2) (p1, p2) else (p2, p1)\n\
    \        planets.slice(min + 1, max)", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) return List()\n        if (p1 < p2) planets.slice(p1\
    \ + 1, p2)\n        else planets.slice(p2 + 1, p1)", "        val planets = List(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) {\n            List()\n        } else {\n \
    \           if (p1 < p2) {\n                planets.slice(p1 + 1, p2)\n      \
    \      } else {\n                planets.slice(p2 + 1, p1)\n            }\n  \
    \      }", "        val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val p1 = planets.indexOf(planet1)\n\
    \        val p2 = planets.indexOf(planet2)\n        if (p1 == -1 || p2 == -1)\
    \ return List()\n        val min = min(p1, p2)\n        val max = max(p1, p2)\n\
    \        planets.slice(min + 1, max)", "        val planets = List(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n        val p1 = planets.indexOf(planet1)\n        val p2 = planets.indexOf(planet2)\n\
    \        if (p1 == -1 || p2 == -1) List()\n        else if (p1 < p2) planets.slice(p1\
    \ + 1, p2)\n        else planets.slice(p2 + 1, p1)"]
stop_tokens:
- "\n    }\n"
