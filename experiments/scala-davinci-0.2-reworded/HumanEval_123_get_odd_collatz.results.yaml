language: scala
name: HumanEval_123_get_odd_collatz
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var num = n\n   \
    \     while (num != 1) {\n            if (num % 2 == 1) result = num :: result\n\
    \            num = if (num % 2 == 0) num / 2 else 3 * num + 1\n        }\n   \
    \     result = 1 :: result\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1le27mw5.scala:28)\n\tat Problem.main(tmp1le27mw5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) {\n                result =\
    \ m :: result\n            }\n            m = if (m % 2 == 0) m / 2 else m * 3\
    \ + 1\n        }\n        result = 1 :: result\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo29rwf28.scala:30)\n\tat Problem.main(tmpo29rwf28.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = List[Long]()\n        var m = n\n    \
    \    while (m != 1) {\n            collatz = collatz :+ m\n            if (m %\
    \ 2 == 0) m = m / 2\n            else m = 3 * m + 1\n        }\n        collatz\
    \ = collatz :+ 1\n        collatz.filter(x => x % 2 == 1).sorted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var current = n\n\
    \        while (current != 1) {\n            if (current % 2 == 1) result = current\
    \ :: result\n            current = if (current % 2 == 0) current / 2 else current\
    \ * 3 + 1\n        }\n        result = 1 :: result\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmoqgi57.scala:28)\n\tat Problem.main(tmphmoqgi57.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = new ListBuffer[Long]()\n        collatz\
    \ += n\n        while (n != 1) {\n            if (n % 2 == 0) n /= 2\n       \
    \     else n = n * 3 + 1\n            collatz += n\n        }\n        collatz.filter(_\
    \ % 2 == 1).toList\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfk8g_fe3.scala:21:30 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (n % \e[31m2\e[0m == \e[31m0\e\
    [0m) n /= \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                            ^^^^\e\
    [0m\n\e[31m   |\e[0m                   value /= is not a member of Long - did\
    \ you mean n.!=?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpfk8g_fe3.scala:22:19\
    \ -----------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33melse\e\
    [0m n = n * \e[31m3\e[0m + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m               \
    \  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 Reassignment to val n\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797500
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var curr = n\n  \
    \      while (curr != 1) {\n            if (curr % 2 == 1) result = result :+\
    \ curr\n            curr = if (curr % 2 == 0) curr / 2 else curr * 3 + 1\n   \
    \     }\n        result = result :+ 1\n        result.sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var lst = List[Long]()\n        var m = n\n        while\
    \ (m != 1) {\n            if (m % 2 == 1) {\n                lst = lst :+ m\n\
    \            }\n            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n       \
    \ }\n        lst = lst :+ 1\n        lst\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcraf4anr.scala:30)\n\tat Problem.main(tmpcraf4anr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797500
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var x = n\n     \
    \   while (x != 1) {\n            if (x % 2 == 1) result = x :: result\n     \
    \       x = if (x % 2 == 0) x / 2 else 3 * x + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgm0c_h31.scala:28)\n\tat Problem.main(tmpgm0c_h31.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797500
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = List[Long]()\n        var i = n\n    \
    \    while (i != 1) {\n            if (i % 2 == 1) collatz = i :: collatz\n  \
    \          i = if (i % 2 == 0) i / 2 else 3 * i + 1\n        }\n        collatz\
    \ = 1 :: collatz\n        collatz.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_6ldkmp1.scala:28)\n\tat Problem.main(tmp_6ldkmp1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        def getOddCollatzHelper(n : Long, l : List[Long]) :\
    \ List[Long] = {\n            if (n == 1) l\n            else if (n % 2 == 0)\
    \ getOddCollatzHelper(n / 2, l)\n            else getOddCollatzHelper(3 * n +\
    \ 1, n :: l)\n        }\n        getOddCollatzHelper(n, List[Long]()).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1c6mphlx.scala:26)\n\tat Problem.main(tmp1c6mphlx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797500
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var lst = ListBuffer[Long]()\n        var m = n\n  \
    \      while (m != 1) {\n            if (m % 2 == 1) lst += m\n            m =\
    \ if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        lst += 1\n        lst.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7djeuifp.scala:28)\n\tat Problem.main(tmp7djeuifp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var current = n\n\
    \        while (current != 1) {\n            if (current % 2 == 1) result = current\
    \ :: result\n            current = if (current % 2 == 0) current / 2 else current\
    \ * 3 + 1\n        }\n        result = 1 :: result\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmoqgi57.scala:28)\n\tat Problem.main(tmphmoqgi57.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = List[Long]()\n        var m = n\n    \
    \    while (m != 1) {\n            if (m % 2 == 1) collatz = m :: collatz\n  \
    \          m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        collatz\
    \ = 1 :: collatz\n        collatz.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbjkkf2xw.scala:28)\n\tat Problem.main(tmpbjkkf2xw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        if (n == 1) return List(1)\n        var result = ListBuffer[Long]()\n\
    \        var curr = n\n        while (curr != 1) {\n            if (curr % 2 ==\
    \ 1) result += curr\n            curr = if (curr % 2 == 0) curr / 2 else curr\
    \ * 3 + 1\n        }\n        result += 1\n        result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvncrb39g.scala:29)\n\tat Problem.main(tmpvncrb39g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = new ListBuffer[Long]()\n        var num\
    \ = n\n        while (num != 1) {\n            collatz += num\n            if\
    \ (num % 2 == 0) num /= 2\n            else num = 3 * num + 1\n        }\n   \
    \     collatz += 1\n        collatz.filter(_ % 2 == 1).toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe6ch5e_g.scala:29)\n\tat Problem.main(tmpe6ch5e_g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var current = n\n\
    \        while (current != 1) {\n            if (current % 2 == 1) result = current\
    \ :: result\n            current = if (current % 2 == 0) current / 2 else current\
    \ * 3 + 1\n        }\n        result = 1 :: result\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmoqgi57.scala:28)\n\tat Problem.main(tmphmoqgi57.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        val result = new ListBuffer[Long]\n        var current\
    \ = n\n        while (current != 1) {\n            if (current % 2 == 1) result\
    \ += current\n            current = if (current % 2 == 0) current / 2 else current\
    \ * 3 + 1\n        }\n        result += 1\n        result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv6_hq7ff.scala:28)\n\tat Problem.main(tmpv6_hq7ff.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797500
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = new ListBuffer[Long]()\n        var m\
    \ = n\n        while (m != 1) {\n            if (m % 2 == 1) collatz += m\n  \
    \          m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        collatz\
    \ += 1\n        collatz.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ab6g0jl.scala:28)\n\tat Problem.main(tmp2ab6g0jl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var current = n\n\
    \        while (current != 1) {\n            result = result :+ current\n    \
    \        if (current % 2 == 0) current /= 2\n            else current = current\
    \ * 3 + 1\n        }\n        result = result :+ 1\n        result.filter(x =>\
    \ x % 2 == 1).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = new ListBuffer[Long]\n        var current\
    \ = n\n        while (current != 1) {\n            collatz += current\n      \
    \      if (current % 2 == 0) current /= 2\n            else current = current\
    \ * 3 + 1\n        }\n        collatz += 1\n        collatz.filter(_ % 2 == 1).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8z7_05t2.scala:29)\n\tat Problem.main(tmp8z7_05t2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = result :+ m\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ result :+ 1\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptzcbjzt_.scala:28)\n\tat Problem.main(tmptzcbjzt_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797500
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var current = n\n\
    \        while (current != 1) {\n            if (current % 2 == 1) result = current\
    \ :: result\n            current = if (current % 2 == 0) current / 2 else current\
    \ * 3 + 1\n        }\n        result = 1 :: result\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmoqgi57.scala:28)\n\tat Problem.main(tmphmoqgi57.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = ListBuffer[Long]()\n        var m = n\n\
    \        while (m != 1) {\n            if (m % 2 == 1) result += m\n         \
    \   m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result += 1\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4lnfbfln.scala:28)\n\tat Problem.main(tmp4lnfbfln.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797500
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = List[Long]()\n        var m = n\n    \
    \    while (m != 1) {\n            if (m % 2 == 1) collatz = m :: collatz\n  \
    \          m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        collatz\
    \ = 1 :: collatz\n        collatz.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbjkkf2xw.scala:28)\n\tat Problem.main(tmpbjkkf2xw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var current = n\n\
    \        while (current != 1) {\n            if (current % 2 == 1) result = current\
    \ :: result\n            current = if (current % 2 == 0) current / 2 else current\
    \ * 3 + 1\n        }\n        result = 1 :: result\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmoqgi57.scala:28)\n\tat Problem.main(tmphmoqgi57.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        if (n == 1) return List(1)\n        var result = List[Long]()\n\
    \        var current = n\n        while (current != 1) {\n            if (current\
    \ % 2 == 1) result = current :: result\n            current = if (current % 2\
    \ == 0) current / 2 else 3 * current + 1\n        }\n        result = 1 :: result\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzf1y_1hk.scala:29)\n\tat Problem.main(tmpzf1y_1hk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797500
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var current = n\n\
    \        while (current != 1) {\n            if (current % 2 == 1) result = current\
    \ :: result\n            current = if (current % 2 == 0) current / 2 else current\
    \ * 3 + 1\n        }\n        result = 1 :: result\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmoqgi57.scala:28)\n\tat Problem.main(tmphmoqgi57.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var current = n\n\
    \        while (current != 1) {\n            if (current % 2 == 1) result = current\
    \ :: result\n            current = if (current % 2 == 0) current / 2 else current\
    \ * 3 + 1\n        }\n        result = 1 :: result\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmoqgi57.scala:28)\n\tat Problem.main(tmphmoqgi57.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = result :+ m\n     \
    \       m = if (m % 2 == 0) m / 2 else m * 3 + 1\n        }\n        result =\
    \ result :+ 1\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4bj2ir2b.scala:28)\n\tat Problem.main(tmp4bj2ir2b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797500
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var cur = n\n   \
    \     while (cur != 1) {\n            if (cur % 2 == 1) result = result :+ cur\n\
    \            cur = if (cur % 2 == 0) cur / 2 else cur * 3 + 1\n        }\n   \
    \     result = result :+ 1\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptsosa5qq.scala:28)\n\tat Problem.main(tmptsosa5qq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = result :+ m\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ result :+ 1\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptzcbjzt_.scala:28)\n\tat Problem.main(tmptzcbjzt_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797500
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        def getOddCollatzHelper(n : Long, l : List[Long]) :\
    \ List[Long] = {\n            if (n == 1) l\n            else if (n % 2 == 0)\
    \ getOddCollatzHelper(n / 2, l)\n            else getOddCollatzHelper(3 * n +\
    \ 1, n :: l)\n        }\n        getOddCollatzHelper(n, List[Long]()).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1c6mphlx.scala:26)\n\tat Problem.main(tmp1c6mphlx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797500
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        def getOddCollatzHelper(n : Long, acc : List[Long])\
    \ : List[Long] = {\n            if (n == 1) acc\n            else if (n % 2 ==\
    \ 0) getOddCollatzHelper(n / 2, acc)\n            else getOddCollatzHelper(3 *\
    \ n + 1, n :: acc)\n        }\n        getOddCollatzHelper(n, List()).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg6t7hh8f.scala:26)\n\tat Problem.main(tmpg6t7hh8f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) {\n                result =\
    \ m :: result\n            }\n            m = if (m % 2 == 0) m / 2 else 3 * m\
    \ + 1\n        }\n        result = 1 :: result\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq_qdez6z.scala:30)\n\tat Problem.main(tmpq_qdez6z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var l = List[Long]()\n        var m = n\n        while\
    \ (m != 1) {\n            l = m :: l\n            if (m % 2 == 0) m /= 2\n   \
    \         else m = 3 * m + 1\n        }\n        l = 1 :: l\n        l.filter(x\
    \ => x % 2 == 1).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var num = n\n   \
    \     while (num != 1) {\n            if (num % 2 == 1) result = num :: result\n\
    \            num = if (num % 2 == 0) num / 2 else num * 3 + 1\n        }\n   \
    \     result = 1 :: result\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeclildy_.scala:28)\n\tat Problem.main(tmpeclildy_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797510
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var current = n\n\
    \        while (current != 1) {\n            if (current % 2 == 1) {\n       \
    \         result = result :+ current\n            }\n            current = if\
    \ (current % 2 == 0) current / 2 else current * 3 + 1\n        }\n        result\
    \ = result :+ 1\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9iazp0zf.scala:30)\n\tat Problem.main(tmp9iazp0zf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = List[Long]()\n        var curr = n\n \
    \       while (curr != 1) {\n            if (curr % 2 == 1) collatz = curr ::\
    \ collatz\n            curr = if (curr % 2 == 0) curr / 2 else 3 * curr + 1\n\
    \        }\n        collatz = 1 :: collatz\n        collatz.reverse\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4qo8vhvs.scala:28)\n\tat Problem.main(tmp4qo8vhvs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var current = n\n\
    \        while (current != 1) {\n            if (current % 2 == 1) result = current\
    \ :: result\n            current = if (current % 2 == 0) current / 2 else current\
    \ * 3 + 1\n        }\n        result = 1 :: result\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmoqgi57.scala:28)\n\tat Problem.main(tmphmoqgi57.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else m * 3 + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp13euc00s.scala:28)\n\tat Problem.main(tmp13euc00s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else m * 3 + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp13euc00s.scala:28)\n\tat Problem.main(tmp13euc00s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var current = n\n\
    \        while (current != 1) {\n            if (current % 2 == 1) result = current\
    \ :: result\n            current = if (current % 2 == 0) current / 2 else current\
    \ * 3 + 1\n        }\n        result = 1 :: result\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmoqgi57.scala:28)\n\tat Problem.main(tmphmoqgi57.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var x = n\n     \
    \   while (x != 1) {\n            if (x % 2 == 1) result = x :: result\n     \
    \       x = if (x % 2 == 0) x / 2 else 3 * x + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgm0c_h31.scala:28)\n\tat Problem.main(tmpgm0c_h31.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797500
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else m * 3 + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp13euc00s.scala:28)\n\tat Problem.main(tmp13euc00s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var l = List[Long]()\n        var m = n\n        while\
    \ (m != 1) {\n            if (m % 2 == 1) l = l :+ m\n            m = if (m %\
    \ 2 == 0) m / 2 else 3 * m + 1\n        }\n        l = l :+ 1\n        l\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0n6n9ipf.scala:28)\n\tat Problem.main(tmp0n6n9ipf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        def getOddCollatzHelper(n : Long, acc : List[Long])\
    \ : List[Long] = {\n            if (n == 1) acc\n            else if (n % 2 ==\
    \ 0) getOddCollatzHelper(n / 2, acc)\n            else getOddCollatzHelper(3 *\
    \ n + 1, n :: acc)\n        }\n        getOddCollatzHelper(n, List()).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7qnq3_or.scala:26)\n\tat Problem.main(tmp7qnq3_or.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var current = n\n\
    \        while (current != 1) {\n            if (current % 2 == 1) result = current\
    \ :: result\n            current = if (current % 2 == 0) current / 2 else current\
    \ * 3 + 1\n        }\n        result = 1 :: result\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmoqgi57.scala:28)\n\tat Problem.main(tmphmoqgi57.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else m * 3 + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp13euc00s.scala:28)\n\tat Problem.main(tmp13euc00s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = List[Long]()\n        var x = n\n    \
    \    while (x != 1) {\n            collatz = collatz :+ x\n            if (x %\
    \ 2 == 0) x = x / 2\n            else x = 3 * x + 1\n        }\n        collatz\
    \ = collatz :+ 1\n        collatz.filter(x => x % 2 == 1).sorted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var list = ListBuffer[Long]()\n        var x = n\n \
    \       while (x != 1) {\n            if (x % 2 == 1) list += x\n            x\
    \ = if (x % 2 == 0) x / 2 else 3 * x + 1\n        }\n        list += 1\n     \
    \   list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk0aoda37.scala:28)\n\tat Problem.main(tmpk0aoda37.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = result :+ m\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ result :+ 1\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptzcbjzt_.scala:28)\n\tat Problem.main(tmptzcbjzt_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797500
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = List[Long]()\n        var m = n\n    \
    \    while (m != 1) {\n            if (m % 2 == 1) collatz = m :: collatz\n  \
    \          m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        collatz\
    \ = 1 :: collatz\n        collatz.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbjkkf2xw.scala:28)\n\tat Problem.main(tmpbjkkf2xw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = List[Long]()\n        var m = n\n    \
    \    while (m != 1) {\n            if (m % 2 == 1) collatz = collatz :+ m\n  \
    \          m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        collatz\
    \ = collatz :+ 1\n        collatz\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp8le9a_p.scala:28)\n\tat Problem.main(tmpp8le9a_p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        if (n == 1) return List(1)\n        var result = List[Long]()\n\
    \        var m = n\n        while (m != 1) {\n            if (m % 2 == 1) result\
    \ = m :: result\n            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n      \
    \  }\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd3o4coog.scala:28)\n\tat Problem.main(tmpd3o4coog.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = new ListBuffer[Long]()\n        var num\
    \ = n\n        while (num != 1) {\n            collatz += num\n            if\
    \ (num % 2 == 0) num /= 2\n            else num = num * 3 + 1\n        }\n   \
    \     collatz += 1\n        collatz.filter(_ % 2 == 1).toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn0ie3cku.scala:29)\n\tat Problem.main(tmpn0ie3cku.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var current = n\n\
    \        while (current != 1) {\n            if (current % 2 == 1) result = current\
    \ :: result\n            current = if (current % 2 == 0) current / 2 else 3 *\
    \ current + 1\n        }\n        result = 1 :: result\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjmgencfg.scala:28)\n\tat Problem.main(tmpjmgencfg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        if (n == 1) return List(1)\n        var num = n\n  \
    \      var result = List[Long]()\n        while (num != 1) {\n            if (num\
    \ % 2 == 1) result = num :: result\n            num = if (num % 2 == 0) num /\
    \ 2 else 3 * num + 1\n        }\n        result.sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvdx_3a9u.scala:28)\n\tat Problem.main(tmpvdx_3a9u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var l = List[Long]()\n        var m = n\n        while\
    \ (m != 1) {\n            if (m % 2 == 1) l = m :: l\n            m = if (m %\
    \ 2 == 0) m / 2 else 3 * m + 1\n        }\n        l = 1 :: l\n        l.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzpmae_ie.scala:28)\n\tat Problem.main(tmpzpmae_ie.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var oddCollatz = List[Long]()\n        var curr = n\n\
    \        while (curr != 1) {\n            if (curr % 2 == 1) oddCollatz = oddCollatz\
    \ :+ curr\n            curr = if (curr % 2 == 0) curr / 2 else 3 * curr + 1\n\
    \        }\n        oddCollatz = oddCollatz :+ 1\n        oddCollatz.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = List[Long]()\n        var m = n\n    \
    \    while (m != 1) {\n            collatz = m :: collatz\n            if (m %\
    \ 2 == 0) m = m / 2\n            else m = 3 * m + 1\n        }\n        collatz\
    \ = 1 :: collatz\n        collatz.filter(x => x % 2 == 1).sorted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) {\n                result =\
    \ m :: result\n            }\n            m = if (m % 2 == 0) m / 2 else m * 3\
    \ + 1\n        }\n        result = 1 :: result\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo29rwf28.scala:30)\n\tat Problem.main(tmpo29rwf28.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else m * 3 + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp13euc00s.scala:28)\n\tat Problem.main(tmp13euc00s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else m * 3 + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp13euc00s.scala:28)\n\tat Problem.main(tmp13euc00s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var current = n\n\
    \        while (current != 1) {\n            if (current % 2 == 1) result = current\
    \ :: result\n            current = if (current % 2 == 0) current / 2 else current\
    \ * 3 + 1\n        }\n        result = 1 :: result\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmoqgi57.scala:28)\n\tat Problem.main(tmphmoqgi57.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = new ListBuffer[Long]()\n        var m\
    \ = n\n        while (m != 1) {\n            collatz += m\n            if (m %\
    \ 2 == 0) m /= 2\n            else m = 3 * m + 1\n        }\n        collatz +=\
    \ 1\n        collatz.toList.filter(x => x % 2 == 1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkdnys508.scala:29)\n\tat Problem.main(tmpkdnys508.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var current = n\n\
    \        while (current != 1) {\n            if (current % 2 == 1) result = current\
    \ :: result\n            current = if (current % 2 == 0) current / 2 else current\
    \ * 3 + 1\n        }\n        result = 1 :: result\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmoqgi57.scala:28)\n\tat Problem.main(tmphmoqgi57.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = List[Long]()\n        var i = n\n    \
    \    while (i != 1) {\n            collatz = i :: collatz\n            if (i %\
    \ 2 == 0) i /= 2\n            else i = 3 * i + 1\n        }\n        collatz =\
    \ 1 :: collatz\n        collatz.filter(_ % 2 == 1).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = List[Long]()\n        var m = n\n    \
    \    while (m != 1) {\n            collatz = m :: collatz\n            if (m %\
    \ 2 == 0) m = m / 2\n            else m = 3 * m + 1\n        }\n        collatz\
    \ = 1 :: collatz\n        collatz.filter(_ % 2 == 1).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = List[Long]()\n        var m = n\n    \
    \    while (m != 1) {\n            if (m % 2 == 1) collatz = m :: collatz\n  \
    \          m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        collatz\
    \ = 1 :: collatz\n        collatz.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbjkkf2xw.scala:28)\n\tat Problem.main(tmpbjkkf2xw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = result :+ m\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ result :+ 1\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptzcbjzt_.scala:28)\n\tat Problem.main(tmptzcbjzt_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797500
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var list = List[Long]()\n        var m = n\n       \
    \ while (m != 1) {\n            if (m % 2 == 1) {\n                list = list\
    \ :+ m\n            }\n            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n\
    \        }\n        list = list :+ 1\n        list\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv7plxt10.scala:30)\n\tat Problem.main(tmpv7plxt10.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797521
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var l = List[Long]()\n        var m = n\n        while\
    \ (m != 1) {\n            if (m % 2 == 1) l = m :: l\n            m = if (m %\
    \ 2 == 0) m / 2 else 3 * m + 1\n        }\n        l = 1 :: l\n        l\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpai8ajevx.scala:28)\n\tat Problem.main(tmpai8ajevx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797521
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var num = n\n   \
    \     while (num != 1) {\n            if (num % 2 == 1) result = result :+ num\n\
    \            num = if (num % 2 == 0) num / 2 else num * 3 + 1\n        }\n   \
    \     result = result :+ 1\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf5zqigzz.scala:28)\n\tat Problem.main(tmpf5zqigzz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797521
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var current = n\n\
    \        while (current != 1) {\n            if (current % 2 == 1) result = current\
    \ :: result\n            current = if (current % 2 == 0) current / 2 else current\
    \ * 3 + 1\n        }\n        result = 1 :: result\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmoqgi57.scala:28)\n\tat Problem.main(tmphmoqgi57.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) {\n                result =\
    \ result :+ m\n            }\n            m = if (m % 2 == 0) m / 2 else 3 * m\
    \ + 1\n        }\n        result = result :+ 1\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_zqo27n1.scala:30)\n\tat Problem.main(tmp_zqo27n1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797521
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var curr = n\n  \
    \      while (curr != 1) {\n            if (curr % 2 == 1) result = curr :: result\n\
    \            curr = if (curr % 2 == 0) curr / 2 else curr * 3 + 1\n        }\n\
    \        result = 1 :: result\n        result.sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797521
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var current = n\n\
    \        while (current != 1) {\n            if (current % 2 == 1) result = current\
    \ :: result\n            current = if (current % 2 == 0) current / 2 else current\
    \ * 3 + 1\n        }\n        result = 1 :: result\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmoqgi57.scala:28)\n\tat Problem.main(tmphmoqgi57.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var cur = n\n   \
    \     while (cur != 1) {\n            if (cur % 2 == 1) result = result :+ cur\n\
    \            cur = if (cur % 2 == 0) cur / 2 else cur * 3 + 1\n        }\n   \
    \     result = result :+ 1\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptsosa5qq.scala:28)\n\tat Problem.main(tmptsosa5qq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var lst = List[Long]()\n        var m = n\n        while\
    \ (m != 1) {\n            if (m % 2 == 1) {\n                lst = lst :+ m\n\
    \            }\n            m = if (m % 2 == 0) m / 2 else 3 * m + 1\n       \
    \ }\n        lst = lst :+ 1\n        lst\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcraf4anr.scala:30)\n\tat Problem.main(tmpcraf4anr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797500
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var curr = n\n  \
    \      while (curr != 1) {\n            if (curr % 2 == 1) result = result :+\
    \ curr\n            curr = if (curr % 2 == 0) curr / 2 else curr * 3 + 1\n   \
    \     }\n        result = result :+ 1\n        result.sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        def getOddCollatzHelper(n : Long, acc : List[Long])\
    \ : List[Long] = {\n            if (n == 1) acc\n            else if (n % 2 ==\
    \ 0) getOddCollatzHelper(n / 2, acc)\n            else getOddCollatzHelper(3 *\
    \ n + 1, n :: acc)\n        }\n        getOddCollatzHelper(n, List()).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7qnq3_or.scala:26)\n\tat Problem.main(tmp7qnq3_or.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = new ListBuffer[Long]()\n        var num\
    \ = n\n        while (num != 1) {\n            collatz += num\n            if\
    \ (num % 2 == 0) num /= 2\n            else num = num * 3 + 1\n        }\n   \
    \     collatz += 1\n        collatz.filter(x => x % 2 == 1).toList\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfchsikvh.scala:29)\n\tat Problem.main(tmpfchsikvh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797522
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = new ListBuffer[Long]()\n        var num\
    \ = n\n        while (num != 1) {\n            if (num % 2 == 1) collatz += num\n\
    \            num = if (num % 2 == 0) num / 2 else num * 3 + 1\n        }\n   \
    \     collatz += 1\n        collatz.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa7ke7fjw.scala:28)\n\tat Problem.main(tmpa7ke7fjw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797521
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var current = n\n\
    \        while (current != 1) {\n            if (current % 2 == 1) result = current\
    \ :: result\n            current = if (current % 2 == 0) current / 2 else current\
    \ * 3 + 1\n        }\n        result = 1 :: result\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmoqgi57.scala:28)\n\tat Problem.main(tmphmoqgi57.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = List[Long]()\n        var m = n\n    \
    \    while (m != 1) {\n            collatz = m :: collatz\n            if (m %\
    \ 2 == 0) m = m / 2\n            else m = 3 * m + 1\n        }\n        collatz\
    \ = 1 :: collatz\n        collatz.filter(x => x % 2 == 1).sorted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var l = List[Long]()\n        var m = n\n        while\
    \ (m != 1) {\n            if (m % 2 == 1) l = m :: l\n            m = if (m %\
    \ 2 == 0) m / 2 else 3 * m + 1\n        }\n        l = 1 :: l\n        l\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpai8ajevx.scala:28)\n\tat Problem.main(tmpai8ajevx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797521
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = result :+ m\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ result :+ 1\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptzcbjzt_.scala:28)\n\tat Problem.main(tmptzcbjzt_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797500
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var current = n\n\
    \        while (current != 1) {\n            if (current % 2 == 1) result = current\
    \ :: result\n            current = if (current % 2 == 0) current / 2 else current\
    \ * 3 + 1\n        }\n        result = 1 :: result\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmoqgi57.scala:28)\n\tat Problem.main(tmphmoqgi57.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var current = n\n\
    \        while (current != 1) {\n            if (current % 2 == 1) result = current\
    \ :: result\n            current = if (current % 2 == 0) current / 2 else current\
    \ * 3 + 1\n        }\n        result = 1 :: result\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmoqgi57.scala:28)\n\tat Problem.main(tmphmoqgi57.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var current = n\n\
    \        while (current != 1) {\n            if (current % 2 == 1) result = current\
    \ :: result\n            current = if (current % 2 == 0) current / 2 else current\
    \ * 3 + 1\n        }\n        result = 1 :: result\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmoqgi57.scala:28)\n\tat Problem.main(tmphmoqgi57.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = List[Long]()\n        var m = n\n    \
    \    while (m != 1) {\n            collatz = m :: collatz\n            if (m %\
    \ 2 == 0) m = m / 2\n            else m = 3 * m + 1\n        }\n        collatz\
    \ = 1 :: collatz\n        collatz.filter(x => x % 2 == 1).sorted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var list = List[Long]()\n        var m = n\n       \
    \ while (m != 1) {\n            if (m % 2 == 1) list = list :+ m\n           \
    \ m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        list = list :+\
    \ 1\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvhhbvuff.scala:28)\n\tat Problem.main(tmpvhhbvuff.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797521
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else m * 3 + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp13euc00s.scala:28)\n\tat Problem.main(tmp13euc00s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var current = n\n\
    \        while (current != 1) {\n            if (current % 2 == 1) result = current\
    \ :: result\n            current = if (current % 2 == 0) current / 2 else current\
    \ * 3 + 1\n        }\n        result = 1 :: result\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmoqgi57.scala:28)\n\tat Problem.main(tmphmoqgi57.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = result :+ m\n     \
    \       m = if (m % 2 == 0) m / 2 else m * 3 + 1\n        }\n        result =\
    \ result :+ 1\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4bj2ir2b.scala:28)\n\tat Problem.main(tmp4bj2ir2b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797500
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) {\n                result =\
    \ result :+ m\n            }\n            m = if (m % 2 == 0) m / 2 else 3 * m\
    \ + 1\n        }\n        result = result :+ 1\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_zqo27n1.scala:30)\n\tat Problem.main(tmp_zqo27n1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797521
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var x = n\n     \
    \   while (x != 1) {\n            if (x % 2 == 1) result = x :: result\n     \
    \       x = if (x % 2 == 0) x / 2 else 3 * x + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgm0c_h31.scala:28)\n\tat Problem.main(tmpgm0c_h31.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797500
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else m * 3 + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp13euc00s.scala:28)\n\tat Problem.main(tmp13euc00s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = new ListBuffer[Long]()\n        var i\
    \ = n\n        while (i != 1) {\n            collatz += i\n            if (i %\
    \ 2 == 0) i /= 2\n            else i = 3 * i + 1\n        }\n        collatz +=\
    \ 1\n        collatz.filter(_ % 2 == 1).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe0vt_7bo.scala:29)\n\tat Problem.main(tmpe0vt_7bo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797522
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1l :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3lle04cn.scala:28)\n\tat Problem.main(tmp3lle04cn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797522
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var current = n\n\
    \        while (current != 1) {\n            if (current % 2 == 1) result = current\
    \ :: result\n            current = if (current % 2 == 0) current / 2 else current\
    \ * 3 + 1\n        }\n        result = 1 :: result\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmoqgi57.scala:28)\n\tat Problem.main(tmphmoqgi57.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = List[Long]()\n        var x = n\n    \
    \    while (x != 1) {\n            if (x % 2 == 1) {\n                collatz\
    \ = collatz :+ x\n            }\n            x = if (x % 2 == 0) x / 2 else 3\
    \ * x + 1\n        }\n        collatz = collatz :+ 1\n        collatz.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797521
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var current = n\n\
    \        while (current != 1) {\n            if (current % 2 == 1) result = current\
    \ :: result\n            current = if (current % 2 == 0) current / 2 else current\
    \ * 3 + 1\n        }\n        result = 1 :: result\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmoqgi57.scala:28)\n\tat Problem.main(tmphmoqgi57.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = List[Long]()\n        var m = n\n    \
    \    while (m != 1) {\n            if (m % 2 == 1) collatz = m :: collatz\n  \
    \          m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        collatz\
    \ = 1 :: collatz\n        collatz.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbjkkf2xw.scala:28)\n\tat Problem.main(tmpbjkkf2xw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var current = n\n\
    \        while (current != 1) {\n            if (current % 2 == 1) result = current\
    \ :: result\n            current = if (current % 2 == 0) current / 2 else current\
    \ * 3 + 1\n        }\n        result = 1 :: result\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmoqgi57.scala:28)\n\tat Problem.main(tmphmoqgi57.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var list = List[Long]()\n        var m = n\n       \
    \ while (m != 1) {\n            if (m % 2 == 1) list = list :+ m\n           \
    \ m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        list = list :+\
    \ 1\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvhhbvuff.scala:28)\n\tat Problem.main(tmpvhhbvuff.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797521
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = List[Long]()\n        var m = n\n    \
    \    while (m != 1) {\n            if (m % 2 == 1) collatz = m :: collatz\n  \
    \          m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        collatz\
    \ = 1 :: collatz\n        collatz.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbjkkf2xw.scala:28)\n\tat Problem.main(tmpbjkkf2xw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = result :+ m\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ result :+ 1\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptzcbjzt_.scala:28)\n\tat Problem.main(tmptzcbjzt_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797500
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = new ListBuffer[Long]()\n        collatz\
    \ += n\n        while (n != 1) {\n            if (n % 2 == 0) n /= 2\n       \
    \     else n = 3 * n + 1\n            collatz += n\n        }\n        collatz.toList.filter(_\
    \ % 2 == 1).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt_ki61mg.scala:21:30 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (n % \e[31m2\e[0m == \e[31m0\e\
    [0m) n /= \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                            ^^^^\e\
    [0m\n\e[31m   |\e[0m                   value /= is not a member of Long - did\
    \ you mean n.!=?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpt_ki61mg.scala:22:19\
    \ -----------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33melse\e\
    [0m n = \e[31m3\e[0m * n + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m               \
    \  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 Reassignment to val n\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797521
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = result :+ m\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ result :+ 1\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptzcbjzt_.scala:28)\n\tat Problem.main(tmptzcbjzt_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797500
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            result = m :: result\n            if (m % 2\
    \ == 0) m /= 2\n            else m = 3 * m + 1\n        }\n        result = 1\
    \ :: result\n        result.filter(x => x % 2 == 1).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797522
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = result :+ m\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ result :+ 1\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptzcbjzt_.scala:28)\n\tat Problem.main(tmptzcbjzt_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797500
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = new ListBuffer[Long]()\n        collatz\
    \ += n\n        while (n != 1) {\n            if (n % 2 == 0) n /= 2\n       \
    \     else n = n * 3 + 1\n            collatz += n\n        }\n        collatz.toList.filter(_\
    \ % 2 == 1).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb5d2uawt.scala:21:30 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (n % \e[31m2\e[0m == \e[31m0\e\
    [0m) n /= \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                            ^^^^\e\
    [0m\n\e[31m   |\e[0m                   value /= is not a member of Long - did\
    \ you mean n.!=?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpb5d2uawt.scala:22:19\
    \ -----------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33melse\e\
    [0m n = n * \e[31m3\e[0m + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m               \
    \  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 Reassignment to val n\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797521
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = result :+ m\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ result :+ 1\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptzcbjzt_.scala:28)\n\tat Problem.main(tmptzcbjzt_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797500
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var list = List[Long]()\n        var m = n\n       \
    \ while (m != 1) {\n            if (m % 2 == 1) list = list :+ m\n           \
    \ m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        list = list :+\
    \ 1\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvhhbvuff.scala:28)\n\tat Problem.main(tmpvhhbvuff.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797521
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = List[Long]()\n        var m = n\n    \
    \    while (m != 1) {\n            if (m % 2 == 1) {\n                collatz\
    \ = m :: collatz\n            }\n            m = if (m % 2 == 0) m / 2 else 3\
    \ * m + 1\n        }\n        collatz = 1 :: collatz\n        collatz.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_az1xitd.scala:30)\n\tat Problem.main(tmp_az1xitd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797522
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = result :+ m\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ result :+ 1\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptzcbjzt_.scala:28)\n\tat Problem.main(tmptzcbjzt_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797500
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = result :+ m\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ result :+ 1\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptzcbjzt_.scala:28)\n\tat Problem.main(tmptzcbjzt_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797500
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var current = n\n\
    \        while (current != 1) {\n            if (current % 2 == 1) result = current\
    \ :: result\n            current = if (current % 2 == 0) current / 2 else current\
    \ * 3 + 1\n        }\n        result = 1 :: result\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmoqgi57.scala:28)\n\tat Problem.main(tmphmoqgi57.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = new ListBuffer[Long]()\n        collatz\
    \ += n\n        while (n != 1) {\n            if (n % 2 == 0) n /= 2\n       \
    \     else n = 3 * n + 1\n            collatz += n\n        }\n        collatz.toList.filter(_\
    \ % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzhahv45d.scala:21:30 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (n % \e[31m2\e[0m == \e[31m0\e\
    [0m) n /= \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                            ^^^^\e\
    [0m\n\e[31m   |\e[0m                   value /= is not a member of Long - did\
    \ you mean n.!=?\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpzhahv45d.scala:22:19\
    \ -----------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33melse\e\
    [0m n = \e[31m3\e[0m * n + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m               \
    \  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 Reassignment to val n\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797521
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var collatz = n\n\
    \        while (collatz != 1) {\n            if (collatz % 2 == 1) result = collatz\
    \ :: result\n            collatz = if (collatz % 2 == 0) collatz / 2 else collatz\
    \ * 3 + 1\n        }\n        result = 1 :: result\n        result.reverse\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzt5fek77.scala:28)\n\tat Problem.main(tmpzt5fek77.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797522
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else m * 3 + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp13euc00s.scala:28)\n\tat Problem.main(tmp13euc00s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = new ListBuffer[Long]\n        var m =\
    \ n\n        while (m != 1) {\n            collatz += m\n            if (m % 2\
    \ == 0) m /= 2\n            else m = 3 * m + 1\n        }\n        collatz +=\
    \ 1\n        collatz.filter(_ % 2 == 1).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6qh85rdq.scala:29)\n\tat Problem.main(tmp6qh85rdq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797522
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = result :+ m\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ result :+ 1\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptzcbjzt_.scala:28)\n\tat Problem.main(tmptzcbjzt_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797500
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else m * 3 + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp13euc00s.scala:28)\n\tat Problem.main(tmp13euc00s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var curr = n\n  \
    \      while (curr != 1) {\n            if (curr % 2 == 1) result = curr :: result\n\
    \            curr = if (curr % 2 == 0) curr / 2 else curr * 3 + 1\n        }\n\
    \        result = 1 :: result\n        result.sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797521
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var current = n\n\
    \        while (current != 1) {\n            if (current % 2 == 1) {\n       \
    \         result = result :+ current\n            }\n            current = if\
    \ (current % 2 == 0) current / 2 else current * 3 + 1\n        }\n        result\
    \ = result :+ 1\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9iazp0zf.scala:30)\n\tat Problem.main(tmp9iazp0zf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = new ListBuffer[Long]\n        var curr\
    \ = n\n        while (curr != 1) {\n            collatz += curr\n            if\
    \ (curr % 2 == 0) curr /= 2\n            else curr = 3 * curr + 1\n        }\n\
    \        collatz += 1\n        collatz.filter(_ % 2 == 1).toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpelz0cyf4.scala:29)\n\tat Problem.main(tmpelz0cyf4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797522
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var list = List[Long]()\n        var x = n\n       \
    \ while (x != 1) {\n            if (x % 2 == 1) list = list :+ x\n           \
    \ x = if (x % 2 == 0) x / 2 else 3 * x + 1\n        }\n        list = list :+\
    \ 1\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkq0ug8uu.scala:28)\n\tat Problem.main(tmpkq0ug8uu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797522
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var current = n\n\
    \        while (current != 1) {\n            if (current % 2 == 1) result = current\
    \ :: result\n            current = if (current % 2 == 0) current / 2 else current\
    \ * 3 + 1\n        }\n        result = 1 :: result\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmoqgi57.scala:28)\n\tat Problem.main(tmphmoqgi57.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = new ListBuffer[Long]()\n        var current\
    \ = n\n        while (current != 1) {\n            collatz += current\n      \
    \      if (current % 2 == 0) current /= 2\n            else current = 3 * current\
    \ + 1\n        }\n        collatz += 1\n        collatz.filter(_ % 2 == 1).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf9d3mmwd.scala:29)\n\tat Problem.main(tmpf9d3mmwd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797522
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        def getOddCollatzHelper(n : Long, acc : List[Long])\
    \ : List[Long] = {\n            if (n == 1) acc\n            else {\n        \
    \        if (n % 2 == 0) getOddCollatzHelper(n / 2, acc)\n                else\
    \ getOddCollatzHelper(3 * n + 1, n :: acc)\n            }\n        }\n       \
    \ getOddCollatzHelper(n, List()).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz2z8prwi.scala:28)\n\tat Problem.main(tmpz2z8prwi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797522
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = new ListBuffer[Long]\n        var x =\
    \ n\n        while (x != 1) {\n            collatz += x\n            if (x % 2\
    \ == 0) x /= 2\n            else x = 3 * x + 1\n        }\n        collatz +=\
    \ 1\n        collatz.filter(_ % 2 == 1).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjoq_l47u.scala:29)\n\tat Problem.main(tmpjoq_l47u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797522
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var current = n\n\
    \        while (current != 1) {\n            if (current % 2 == 1) result = current\
    \ :: result\n            current = if (current % 2 == 0) current / 2 else current\
    \ * 3 + 1\n        }\n        result = 1 :: result\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmoqgi57.scala:28)\n\tat Problem.main(tmphmoqgi57.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) {\n                result =\
    \ m :: result\n            }\n            m = if (m % 2 == 0) m / 2 else m * 3\
    \ + 1\n        }\n        result = 1 :: result\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo29rwf28.scala:30)\n\tat Problem.main(tmpo29rwf28.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = new ListBuffer[Long]\n        var num\
    \ = n\n        while (num != 1) {\n            collatz += num\n            if\
    \ (num % 2 == 0) num /= 2\n            else num = num * 3 + 1\n        }\n   \
    \     collatz += 1\n        collatz.filter(_ % 2 == 1).toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmposhbor2d.scala:29)\n\tat Problem.main(tmposhbor2d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797526
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = result :+ m\n     \
    \       m = if (m % 2 == 0) m / 2 else m * 3 + 1\n        }\n        result =\
    \ result :+ 1\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4bj2ir2b.scala:28)\n\tat Problem.main(tmp4bj2ir2b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797500
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var current = n\n\
    \        while (current != 1) {\n            if (current % 2 == 1) result = current\
    \ :: result\n            current = if (current % 2 == 0) current / 2 else current\
    \ * 3 + 1\n        }\n        result = 1 :: result\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmoqgi57.scala:28)\n\tat Problem.main(tmphmoqgi57.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var cur = n\n   \
    \     while (cur != 1) {\n            if (cur % 2 == 1) result = result :+ cur\n\
    \            cur = if (cur % 2 == 0) cur / 2 else cur * 3 + 1\n        }\n   \
    \     result = result :+ 1\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptsosa5qq.scala:28)\n\tat Problem.main(tmptsosa5qq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = new ListBuffer[Long]()\n        var m\
    \ = n\n        while (m != 1) {\n            if (m % 2 == 1) collatz += m\n  \
    \          m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        collatz\
    \ += 1\n        collatz.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ab6g0jl.scala:28)\n\tat Problem.main(tmp2ab6g0jl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var current = n\n\
    \        while (current != 1) {\n            if (current % 2 == 1) result = current\
    \ :: result\n            current = if (current % 2 == 0) current / 2 else 3 *\
    \ current + 1\n        }\n        result = 1l :: result\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqfzisubn.scala:28)\n\tat Problem.main(tmpqfzisubn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797526
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = result :+ m\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ result :+ 1\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptzcbjzt_.scala:28)\n\tat Problem.main(tmptzcbjzt_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797500
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var current = n\n\
    \        while (current != 1) {\n            if (current % 2 == 1) result = current\
    \ :: result\n            current = if (current % 2 == 0) current / 2 else current\
    \ * 3 + 1\n        }\n        result = 1 :: result\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmoqgi57.scala:28)\n\tat Problem.main(tmphmoqgi57.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        if (n == 1) return List(1)\n        var list = List[Long]()\n\
    \        var num = n\n        while (num != 1) {\n            if (num % 2 == 1)\
    \ list = list :+ num\n            num = if (num % 2 == 0) num / 2 else num * 3\
    \ + 1\n        }\n        list = list :+ 1\n        list.sorted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659797526
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = List[Long]()\n        var m = n\n    \
    \    while (m != 1) {\n            if (m % 2 == 1) collatz = m :: collatz\n  \
    \          m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        collatz\
    \ = 1 :: collatz\n        collatz.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbjkkf2xw.scala:28)\n\tat Problem.main(tmpbjkkf2xw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var current = n\n\
    \        while (current != 1) {\n            if (current % 2 == 1) {\n       \
    \         result = result :+ current\n            }\n            current = if\
    \ (current % 2 == 0) current / 2 else 3 * current + 1\n        }\n        result\
    \ = result :+ 1\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp96zlgcuv.scala:30)\n\tat Problem.main(tmp96zlgcuv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797526
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = result :+ m\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ result :+ 1\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptzcbjzt_.scala:28)\n\tat Problem.main(tmptzcbjzt_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797500
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var current = n\n\
    \        while (current != 1) {\n            if (current % 2 == 1) {\n       \
    \         result = result :+ current\n            }\n            current = if\
    \ (current % 2 == 0) current / 2 else current * 3 + 1\n        }\n        result\
    \ = result :+ 1\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9iazp0zf.scala:30)\n\tat Problem.main(tmp9iazp0zf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797511
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var current = n\n\
    \        while (current != 1) {\n            if (current % 2 == 1) result = current\
    \ :: result\n            current = if (current % 2 == 0) current / 2 else current\
    \ * 3 + 1\n        }\n        result = 1 :: result\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmoqgi57.scala:28)\n\tat Problem.main(tmphmoqgi57.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = new ListBuffer[Long]()\n        var m\
    \ = n\n        while (m != 1) {\n            if (m % 2 == 1) collatz += m\n  \
    \          m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        collatz\
    \ += 1\n        collatz.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ab6g0jl.scala:28)\n\tat Problem.main(tmp2ab6g0jl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var lst = List[Long]()\n        var num = n\n      \
    \  while (num != 1) {\n            if (num % 2 == 1) {\n                lst =\
    \ lst :+ num\n            }\n            num = if (num % 2 == 0) num / 2 else\
    \ num * 3 + 1\n        }\n        lst = lst :+ 1\n        lst\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsjexyqab.scala:30)\n\tat Problem.main(tmpsjexyqab.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797526
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        def getOddCollatzIter(n : Long, acc : List[Long]) :\
    \ List[Long] = {\n            if (n == 1) acc\n            else if (n % 2 == 0)\
    \ getOddCollatzIter(n / 2, acc)\n            else getOddCollatzIter(3 * n + 1,\
    \ n :: acc)\n        }\n        getOddCollatzIter(n, List()).reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyfyse6sy.scala:26)\n\tat Problem.main(tmpyfyse6sy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797526
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = new ListBuffer[Long]\n        var m =\
    \ n\n        while (m != 1) {\n            if (m % 2 == 1) collatz += m\n    \
    \        m = if (m % 2 == 0) m / 2 else m * 3 + 1\n        }\n        collatz\
    \ += 1\n        collatz.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt4kkcqgv.scala:28)\n\tat Problem.main(tmpt4kkcqgv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797526
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = new ListBuffer[Long]()\n        var m\
    \ = n\n        while (m != 1) {\n            if (m % 2 == 1) collatz += m\n  \
    \          m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        collatz\
    \ += 1\n        collatz.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ab6g0jl.scala:28)\n\tat Problem.main(tmp2ab6g0jl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var temp = n\n  \
    \      while (temp != 1) {\n            if (temp % 2 == 1) result = result :+\
    \ temp\n            temp = if (temp % 2 == 0) temp / 2 else temp * 3 + 1\n   \
    \     }\n        result = result :+ 1\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbueqepvr.scala:28)\n\tat Problem.main(tmpbueqepvr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797526
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var num = n\n   \
    \     while (num != 1) {\n            if (num % 2 == 1) {\n                result\
    \ = result :+ num\n            }\n            num = if (num % 2 == 0) num / 2\
    \ else 3 * num + 1\n        }\n        result = result :+ 1\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp396ex8hq.scala:30)\n\tat Problem.main(tmp396ex8hq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797526
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var collatz = List[Long]()\n        var m = n\n    \
    \    while (m != 1) {\n            if (m % 2 == 1) collatz = m :: collatz\n  \
    \          m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        collatz\
    \ = 1 :: collatz\n        collatz.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbjkkf2xw.scala:28)\n\tat Problem.main(tmpbjkkf2xw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return a sorted list that has the odd\
    \ numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
    \ in mathematics that concerns a sequence defined\n    // as follows: start with\
    \ any positive integer n. Then each term is obtained from the \n    // previous\
    \ term as follows: if the previous term is even, the next term is one half of\
    \ \n    // the previous term. If the previous term is odd, the next term is 3\
    \ times the previous\n    // term plus 1. The conjecture is that no matter what\
    \ value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1)\
    \ is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
    \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5,\
    \ 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n\
    \    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) :\
    \ List[Long] = {\n        var result = List[Long]()\n        var m = n\n     \
    \   while (m != 1) {\n            if (m % 2 == 1) result = m :: result\n     \
    \       m = if (m % 2 == 0) m / 2 else 3 * m + 1\n        }\n        result =\
    \ 1 :: result\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong,\
    \ 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
    \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvnxq73n.scala:28)\n\tat Problem.main(tmpqvnxq73n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797501
