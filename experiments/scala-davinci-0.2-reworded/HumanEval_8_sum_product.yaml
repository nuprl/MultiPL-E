name: HumanEval_8_sum_product
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // For a given list of integers, return a tuple consisting of a sum and a product\
  \ of all the integers in a list.\n    // Empty sum should be equal to 0 and empty\
  \ product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l,\
  \ 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n\
  \    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
  \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
  \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
  \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
  \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
  \    }\n\n}\n"
completions: ["        var sum = 0l\n        var product = 1l\n        for (i <- numbers)\
    \ {\n            sum += i\n            product *= i\n        }\n        (sum,\
    \ product)", "        var sum = 0l\n        var product = 1l\n        for (number\
    \ <- numbers) {\n            sum += number\n            product *= number\n  \
    \      }\n        (sum, product)", "        var sum = 0l\n        var product\
    \ = 1l\n        for (number <- numbers) {\n            sum += number\n       \
    \     product *= number\n        }\n        (sum, product)", "        var sum\
    \ = 0l\n        var product = 1l\n        for (number <- numbers) {\n        \
    \    sum += number\n            product *= number\n        }\n        (sum, product)",
  "        val sum = numbers.foldLeft(0l)(_ + _)\n        val product = numbers.foldLeft(1l)(_\
    \ * _)\n        (sum, product)", '        numbers.foldLeft((0l, 1l))((a, b) =>
    (a._1 + b, a._2 * b))', "        var sum = 0l\n        var product = 1l\n    \
    \    for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)", "        if (numbers.isEmpty)\
    \ return (0, 1)\n        val sum = numbers.reduceLeft(_ + _)\n        val product\
    \ = numbers.reduceLeft(_ * _)\n        (sum, product)", '        numbers.foldLeft((0l,
    1l))((acc, x) => (acc._1 + x, acc._2 * x))', "        var sum = 0l\n        var\
    \ product = 1l\n        for (number <- numbers) {\n            sum += number\n\
    \            product *= number\n        }\n        (sum, product)", "        var\
    \ sum : Long = 0\n        var product : Long = 1\n        for (number <- numbers)\
    \ {\n            sum += number\n            product *= number\n        }\n   \
    \     (sum, product)", "        var sum = 0l\n        var product = 1l\n     \
    \   for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)", "        var sum : Long = 0\n\
    \        var product : Long = 1\n        for (number <- numbers) {\n         \
    \   sum += number\n            product *= number\n        }\n        (sum, product)",
  "        var sum = 0l\n        var product = 1l\n        for (number <- numbers)\
    \ {\n            sum += number\n            product *= number\n        }\n   \
    \     (sum, product)", "        var sum = 0l\n        var product = 1l\n     \
    \   for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)", "        var sum = 0l\n     \
    \   var product = 1l\n        for (number <- numbers) {\n            sum += number\n\
    \            product *= number\n        }\n        (sum, product)", "        var\
    \ sum = 0l\n        var product = 1l\n        for (number <- numbers) {\n    \
    \        sum += number\n            product *= number\n        }\n        (sum,\
    \ product)", "        var sum = 0l\n        var product = 1l\n        for (n <-\
    \ numbers) {\n            sum += n\n            product *= n\n        }\n    \
    \    (sum, product)", "        var sum = 0l\n        var product = 1l\n      \
    \  for (number <- numbers) {\n            sum += number\n            product *=\
    \ number\n        }\n        (sum, product)", "        var sum = 0l\n        var\
    \ product = 1l\n        for (number <- numbers) {\n            sum += number\n\
    \            product *= number\n        }\n        (sum, product)"]
stop_tokens:
- "\n    }\n"
