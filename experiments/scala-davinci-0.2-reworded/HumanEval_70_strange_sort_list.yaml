name: HumanEval_70_strange_sort_list
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given list of integers, return list in strange order.\n    // Strange sorting,\
  \ is when you start with the minimum value,\n    // then maximum of the remaining\
  \ integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
  \ 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
  \ 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong))\n\
  \    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n    def strangeSortList(lst\
  \ : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
  \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
  \ 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
  \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
  \ 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong, 2l.toLong, 4l.toLong,\
  \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
  \ 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 9l.toLong, 5l.toLong,\
  \ 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
  \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
  \ 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
  \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
  \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 8l.toLong,\
  \ 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long](0l.toLong,\
  \ 2l.toLong, 2l.toLong, 2l.toLong, 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
  \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
  \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
  \    }\n\n}\n"
completions: ["        if (lst.length == 0) return lst\n        var lst2 = lst.sortWith(_\
    \ < _)\n        var lst3 = List[Long]()\n        var i = 0\n        while (i <\
    \ lst2.length) {\n            if (i % 2 == 0) {\n                lst3 = lst3 :+\
    \ lst2(i)\n            } else {\n                lst3 = lst3 :+ lst2(lst2.length\
    \ - 1 - i)\n            }\n            i += 1\n        }\n        return lst3",
  "        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n        var i =\
    \ 0\n        while (i < lst2.length) {\n            if (i % 2 == 0) {\n      \
    \          lst3 = lst3 :+ lst2(i)\n            } else {\n                lst3\
    \ = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n            i += 1\n   \
    \     }\n        return lst3", "        if (lst.isEmpty) {\n            return\
    \ lst\n        }\n        val sorted = lst.sorted\n        val min = sorted.head\n\
    \        val max = sorted.last\n        val mid = sorted.slice(1, sorted.length\
    \ - 1)\n        val midSorted = mid.sorted.reverse\n        val result = ListBuffer[Long]()\n\
    \        result += min\n        for (i <- 0 until midSorted.length) {\n      \
    \      if (i % 2 == 0) {\n                result += midSorted(i)\n           \
    \ } else {\n                result.insert(1, midSorted(i))\n            }\n  \
    \      }\n        result += max\n        return result.toList", "        var lst2\
    \ = lst.sorted\n        var lst3 = List[Long]()\n        while (lst2.length >\
    \ 0) {\n            lst3 = lst3 :+ lst2.head\n            lst2 = lst2.tail\n \
    \           if (lst2.length > 0) {\n                lst3 = lst3 :+ lst2.last\n\
    \                lst2 = lst2.dropRight(1)\n            }\n        }\n        return\
    \ lst3", "        // Fill up this function body\n        // `lst` is a list of\
    \ integers\n        // You have to return a list of integers in strange order\n\
    \        // You can write auxiliary functions\n        // You can use standard\
    \ library functions\n        // You can use `lst.sortWith(_ < _)` to sort a list\n\
    \        // You can use `lst.min` to get the minimum value\n        // You can\
    \ use `lst.max` to get the maximum value\n        // You can use `lst.filter(x\
    \ => x != y)` to remove all elements `y` from list `lst`\n        // You can use\
    \ `lst.filterNot(x => x == y)` to remove all elements `y` from list `lst`\n  \
    \      // You can use `lst.filterNot(x => x == y)` to remove all elements `y`\
    \ from list `lst`\n        // You can use `lst.partition(x => x < y)` to partition\
    \ a list into two lists\n        // You can use `lst.partition(x => x > y)` to\
    \ partition a list into two lists\n        // You can use `lst.partition(x =>\
    \ x == y)` to partition a list into two lists\n        // You can use `lst.partition(x\
    \ => x != y)` to partition a list into two lists\n        // You can use `lst.partition(x\
    \ => x <= y)` to partition a list into two lists\n        // You can use `lst.partition(x\
    \ => x >= y)` to partition a list into two lists\n        // You can use `lst.partition(x\
    \ => x < y)` to partition a list into two lists\n        // You can use `lst.partition(x\
    \ => x > y)` to partition a list into two lists\n        // You can use `lst.partition(x\
    \ => x == y)` to partition a list into two lists\n        // You can use `lst.partition(x\
    \ => x != y)` to partition a list into two lists\n        // You can use `lst.partition(x\
    \ => x <= y)` to partition a list into two lists\n        // You can use `lst.part",
  "        // Fill up this function body\n        // `lst` is a list of integers\n\
    \        // You have to return a list of integers in strange order\n        //\
    \ You can create new lists, mutate existing lists\n        // You can also define\
    \ auxiliary functions to solve this problem\n        var lst1 = lst.sorted\n \
    \       var lst2 = lst1.reverse\n        var lst3 = List[Long]()\n        var\
    \ i = 0\n        while (i < lst1.length) {\n            if (i % 2 == 0) {\n  \
    \              lst3 = lst3 :+ lst1(i)\n            } else {\n                lst3\
    \ = lst3 :+ lst2(i)\n            }\n            i += 1\n        }\n        return\
    \ lst3", "        if (lst.isEmpty) {\n            return List[Long]()\n      \
    \  }\n        var lst2 = lst.sortWith(_ < _)\n        var lst3 = List[Long]()\n\
    \        var i = 0\n        while (i < lst2.length) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n       \
    \         lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n          \
    \  i += 1\n        }\n        return lst3", "        // Fill up this function\
    \ body\n        // 'lst' is a list of integers\n        // 'return' a list of\
    \ integers in strange order\n        if (lst.isEmpty) {\n            return List[Long]()\n\
    \        }\n        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n \
    \       var i = 0\n        while (i < lst2.length) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n       \
    \         lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n          \
    \  i += 1\n        }\n        return lst3", "        var lst1 = lst.sorted\n \
    \       var lst2 = lst1.reverse\n        var lst3 = List[Long]()\n        var\
    \ i = 0\n        while (i < lst1.length) {\n            lst3 = lst3 :+ lst1(i)\n\
    \            if (i < lst2.length) lst3 = lst3 :+ lst2(i)\n            i += 1\n\
    \        }\n        lst3", "        // Fill up this function body\n        //\
    \ `lst` is a list of integers\n        // You have to return a list of integers\
    \ in strange order\n        // You can write helper functions\n        // You\
    \ can write multiple sub-solutions\n        // You can store intermediate results\
    \ in variables\n        // You can use any programming language construct\n  \
    \      // You can use any data structure\n        // You can use any algorithm\n\
    \        // You can use any library function\n        // You can use any library\
    \ data structure\n        // You can use any library algorithm\n        // You\
    \ can use any library\n        // You can use any language\n        // You can\
    \ use any paradigm\n        // You can use any technique\n        // You can use\
    \ any tool\n        // You can use any library\n        // You can use any framework\n\
    \        // You can use any library\n        // You can use any platform\n   \
    \     // You can use any library\n        // You can use any library\n       \
    \ // You can use any library\n        // You can use any library\n        // You\
    \ can use any library\n        // You can use any library\n        // You can\
    \ use any library\n        // You can use any library\n        // You can use\
    \ any library\n        // You can use any library\n        // You can use any\
    \ library\n        // You can use any library\n        // You can use any library\n\
    \        // You can use any library\n        // You can use any library\n    \
    \    // You can use any library\n        // You can use any library\n        //\
    \ You can use any library\n        // You can use any library\n        // You\
    \ can use any library\n        // You can use any library\n        // You can\
    \ use any library\n        // You can use any library\n        // You can use\
    \ any library\n        // You can use any library\n        // You can use any\
    \ library\n        // You can use any library\n        // You can use any library\n\
    \        // You can use any library\n        // You can use any library\n    \
    \    // You can use any library\n        // You can use any library\n        //\
    \ You can use any library\n        // You can use any library\n        // You\
    \ can use any library\n        // You can use any library\n        // You can\
    \ use any library\n        // You can use any library\n        // You can use\
    \ any library\n        // You can use any library\n       ", "        if (lst.length\
    \ == 0) return lst\n        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n\
    \        var i = 0\n        while (i < lst2.length) {\n            if (i % 2 ==\
    \ 0) lst3 = lst3 :+ lst2(i)\n            else lst3 = lst3 :+ lst2(lst2.length\
    \ - 1 - i)\n            i += 1\n        }\n        return lst3", "        if (lst.length\
    \ == 0) return lst\n        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n\
    \        var i = 0\n        while (i < lst2.length) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n       \
    \         lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n          \
    \  i += 1\n        }\n        return lst3", "        var lst2 = lst.sorted\n \
    \       var lst3 = List[Long]()\n        while (lst2.length > 0) {\n         \
    \   lst3 = lst3 :+ lst2.head\n            lst2 = lst2.tail\n            if (lst2.length\
    \ > 0) {\n                lst3 = lst3 :+ lst2.last\n                lst2 = lst2.dropRight(1)\n\
    \            }\n        }\n        return lst3", "        var lst2 = lst.sortWith(_\
    \ < _)\n        var lst3 = List[Long]()\n        while (lst2.length > 0) {\n \
    \           lst3 = lst3 :+ lst2.head\n            lst2 = lst2.tail\n         \
    \   if (lst2.length > 0) {\n                lst3 = lst3 :+ lst2.last\n       \
    \         lst2 = lst2.dropRight(1)\n            }\n        }\n        return lst3",
  "        val lst2 = lst.sorted\n        val lst3 = lst2.reverse\n        val lst4\
    \ = lst3.zipWithIndex.map(x => (x._1, x._2 % 2))\n        val lst5 = lst4.sortBy(x\
    \ => x._2)\n        lst5.map(x => x._1)", "        var lst2 = lst.sorted\n   \
    \     var lst3 = List[Long]()\n        var i = 0\n        while (i < lst2.length)\
    \ {\n            if (i % 2 == 0) {\n                lst3 = lst3 :+ lst2(i)\n \
    \           } else {\n                lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n\
    \            }\n            i += 1\n        }\n        return lst3", "       \
    \ // Fill up this function body\n        // 'lst' is a list of integers\n    \
    \    // 'return' a list of integers in strange order\n        var result = List[Long]()\n\
    \        var lst2 = lst.sorted\n        var lst3 = lst2.reverse\n        var lst4\
    \ = lst2 ++ lst3\n        var lst5 = lst4.distinct\n        var lst6 = lst5.sorted\n\
    \        var lst7 = lst6.reverse\n        var lst8 = lst6 ++ lst7\n        var\
    \ lst9 = lst8.distinct\n        var lst10 = lst9.sorted\n        var lst11 = lst10.reverse\n\
    \        var lst12 = lst10 ++ lst11\n        var lst13 = lst12.distinct\n    \
    \    var lst14 = lst13.sorted\n        var lst15 = lst14.reverse\n        var\
    \ lst16 = lst14 ++ lst15\n        var lst17 = lst16.distinct\n        var lst18\
    \ = lst17.sorted\n        var lst19 = lst18.reverse\n        var lst20 = lst18\
    \ ++ lst19\n        var lst21 = lst20.distinct\n        var lst22 = lst21.sorted\n\
    \        var lst23 = lst22.reverse\n        var lst24 = lst22 ++ lst23\n     \
    \   var lst25 = lst24.distinct\n        var lst26 = lst25.sorted\n        var\
    \ lst27 = lst26.reverse\n        var lst28 = lst26 ++ lst27\n        var lst29\
    \ = lst28.distinct\n        var lst30 = lst29.sorted\n        var lst31 = lst30.reverse\n\
    \        var lst32 = lst30 ++ lst31\n        var lst33 = lst32.distinct\n    \
    \    var lst34 = lst33.sorted\n        var lst35 = lst34.reverse\n        var\
    \ lst36 = lst34 ++ lst35\n        var lst37 = lst36.distinct\n       ", "    \
    \    var lst2 = lst.sorted\n        var lst3 = List[Long]()\n        var i = 0\n\
    \        while (i < lst2.length) {\n            if (i % 2 == 0) {\n          \
    \      lst3 = lst3 :+ lst2(i)\n            } else {\n                lst3 = lst3\
    \ :+ lst2(lst2.length - 1 - i)\n            }\n            i += 1\n        }\n\
    \        return lst3", "        // Fill up this function body\n        // 'lst'\
    \ is the list of integers\n        // 'return' the list of integers in strange\
    \ order\n        lst", "        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n\
    \        var i = 0\n        while (i < lst2.length) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n       \
    \         lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n          \
    \  i += 1\n        }\n        lst3"]
stop_tokens:
- "\n    }\n"
