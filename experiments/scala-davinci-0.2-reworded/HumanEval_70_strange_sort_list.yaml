name: HumanEval_70_strange_sort_list
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given list of integers, return list in strange order.\n    // Strange sorting,\
  \ is when you start with the minimum value,\n    // then maximum of the remaining\
  \ integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
  \ 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
  \ 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong))\n\
  \    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n    def strangeSortList(lst\
  \ : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
  \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
  \ 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
  \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
  \ 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong, 2l.toLong, 4l.toLong,\
  \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
  \ 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 9l.toLong, 5l.toLong,\
  \ 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
  \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
  \ 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
  \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
  \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 8l.toLong,\
  \ 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long](0l.toLong,\
  \ 2l.toLong, 2l.toLong, 2l.toLong, 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
  \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
  \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
  \    }\n\n}\n"
completions: ["        if (lst.length == 0) return lst\n        var lst2 = lst.sortWith(_\
    \ < _)\n        var lst3 = List[Long]()\n        var i = 0\n        while (i <\
    \ lst2.length) {\n            if (i % 2 == 0) {\n                lst3 = lst3 :+\
    \ lst2(i)\n            } else {\n                lst3 = lst3 :+ lst2(lst2.length\
    \ - 1 - i)\n            }\n            i += 1\n        }\n        return lst3",
  "        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n        var i =\
    \ 0\n        while (i < lst2.length) {\n            if (i % 2 == 0) {\n      \
    \          lst3 = lst3 :+ lst2(i)\n            } else {\n                lst3\
    \ = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n            i += 1\n   \
    \     }\n        return lst3", "        if (lst.isEmpty) {\n            return\
    \ lst\n        }\n        val sorted = lst.sorted\n        val min = sorted.head\n\
    \        val max = sorted.last\n        val mid = sorted.slice(1, sorted.length\
    \ - 1)\n        val midSorted = mid.sorted.reverse\n        val result = ListBuffer[Long]()\n\
    \        result += min\n        for (i <- 0 until midSorted.length) {\n      \
    \      if (i % 2 == 0) {\n                result += midSorted(i)\n           \
    \ } else {\n                result.insert(1, midSorted(i))\n            }\n  \
    \      }\n        result += max\n        return result.toList", "        var lst2\
    \ = lst.sorted\n        var lst3 = List[Long]()\n        while (lst2.length >\
    \ 0) {\n            lst3 = lst3 :+ lst2.head\n            lst2 = lst2.tail\n \
    \           if (lst2.length > 0) {\n                lst3 = lst3 :+ lst2.last\n\
    \                lst2 = lst2.dropRight(1)\n            }\n        }\n        return\
    \ lst3", "        // Fill up this function body\n        // `lst` is a list of\
    \ integers\n        // You have to return a list of integers in strange order\n\
    \        // You can write auxiliary functions\n        // You can use standard\
    \ library functions\n        // You can use `lst.sortWith(_ < _)` to sort a list\n\
    \        // You can use `lst.min` to get the minimum value\n        // You can\
    \ use `lst.max` to get the maximum value\n        // You can use `lst.filter(x\
    \ => x != y)` to remove all elements `y` from list `lst`\n        // You can use\
    \ `lst.filterNot(x => x == y)` to remove all elements `y` from list `lst`\n  \
    \      // You can use `lst.filterNot(x => x == y)` to remove all elements `y`\
    \ from list `lst`\n        // You can use `lst.partition(x => x < y)` to partition\
    \ a list into two lists\n        // You can use `lst.partition(x => x > y)` to\
    \ partition a list into two lists\n        // You can use `lst.partition(x =>\
    \ x == y)` to partition a list into two lists\n        // You can use `lst.partition(x\
    \ => x != y)` to partition a list into two lists\n        // You can use `lst.partition(x\
    \ => x <= y)` to partition a list into two lists\n        // You can use `lst.partition(x\
    \ => x >= y)` to partition a list into two lists\n        // You can use `lst.partition(x\
    \ => x < y)` to partition a list into two lists\n        // You can use `lst.partition(x\
    \ => x > y)` to partition a list into two lists\n        // You can use `lst.partition(x\
    \ => x == y)` to partition a list into two lists\n        // You can use `lst.partition(x\
    \ => x != y)` to partition a list into two lists\n        // You can use `lst.partition(x\
    \ => x <= y)` to partition a list into two lists\n        // You can use `lst.part",
  "        // Fill up this function body\n        // `lst` is a list of integers\n\
    \        // You have to return a list of integers in strange order\n        //\
    \ You can create new lists, mutate existing lists\n        // You can also define\
    \ auxiliary functions to solve this problem\n        var lst1 = lst.sorted\n \
    \       var lst2 = lst1.reverse\n        var lst3 = List[Long]()\n        var\
    \ i = 0\n        while (i < lst1.length) {\n            if (i % 2 == 0) {\n  \
    \              lst3 = lst3 :+ lst1(i)\n            } else {\n                lst3\
    \ = lst3 :+ lst2(i)\n            }\n            i += 1\n        }\n        return\
    \ lst3", "        if (lst.isEmpty) {\n            return List[Long]()\n      \
    \  }\n        var lst2 = lst.sortWith(_ < _)\n        var lst3 = List[Long]()\n\
    \        var i = 0\n        while (i < lst2.length) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n       \
    \         lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n          \
    \  i += 1\n        }\n        return lst3", "        // Fill up this function\
    \ body\n        // 'lst' is a list of integers\n        // 'return' a list of\
    \ integers in strange order\n        if (lst.isEmpty) {\n            return List[Long]()\n\
    \        }\n        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n \
    \       var i = 0\n        while (i < lst2.length) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n       \
    \         lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n          \
    \  i += 1\n        }\n        return lst3", "        var lst1 = lst.sorted\n \
    \       var lst2 = lst1.reverse\n        var lst3 = List[Long]()\n        var\
    \ i = 0\n        while (i < lst1.length) {\n            lst3 = lst3 :+ lst1(i)\n\
    \            if (i < lst2.length) lst3 = lst3 :+ lst2(i)\n            i += 1\n\
    \        }\n        lst3", "        // Fill up this function body\n        //\
    \ `lst` is a list of integers\n        // You have to return a list of integers\
    \ in strange order\n        // You can write helper functions\n        // You\
    \ can write multiple sub-solutions\n        // You can store intermediate results\
    \ in variables\n        // You can use any programming language construct\n  \
    \      // You can use any data structure\n        // You can use any algorithm\n\
    \        // You can use any library function\n        // You can use any library\
    \ data structure\n        // You can use any library algorithm\n        // You\
    \ can use any library\n        // You can use any language\n        // You can\
    \ use any paradigm\n        // You can use any technique\n        // You can use\
    \ any tool\n        // You can use any library\n        // You can use any framework\n\
    \        // You can use any library\n        // You can use any platform\n   \
    \     // You can use any library\n        // You can use any library\n       \
    \ // You can use any library\n        // You can use any library\n        // You\
    \ can use any library\n        // You can use any library\n        // You can\
    \ use any library\n        // You can use any library\n        // You can use\
    \ any library\n        // You can use any library\n        // You can use any\
    \ library\n        // You can use any library\n        // You can use any library\n\
    \        // You can use any library\n        // You can use any library\n    \
    \    // You can use any library\n        // You can use any library\n        //\
    \ You can use any library\n        // You can use any library\n        // You\
    \ can use any library\n        // You can use any library\n        // You can\
    \ use any library\n        // You can use any library\n        // You can use\
    \ any library\n        // You can use any library\n        // You can use any\
    \ library\n        // You can use any library\n        // You can use any library\n\
    \        // You can use any library\n        // You can use any library\n    \
    \    // You can use any library\n        // You can use any library\n        //\
    \ You can use any library\n        // You can use any library\n        // You\
    \ can use any library\n        // You can use any library\n        // You can\
    \ use any library\n        // You can use any library\n        // You can use\
    \ any library\n        // You can use any library\n       ", "        if (lst.length\
    \ == 0) return lst\n        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n\
    \        var i = 0\n        while (i < lst2.length) {\n            if (i % 2 ==\
    \ 0) lst3 = lst3 :+ lst2(i)\n            else lst3 = lst3 :+ lst2(lst2.length\
    \ - 1 - i)\n            i += 1\n        }\n        return lst3", "        if (lst.length\
    \ == 0) return lst\n        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n\
    \        var i = 0\n        while (i < lst2.length) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n       \
    \         lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n          \
    \  i += 1\n        }\n        return lst3", "        var lst2 = lst.sorted\n \
    \       var lst3 = List[Long]()\n        while (lst2.length > 0) {\n         \
    \   lst3 = lst3 :+ lst2.head\n            lst2 = lst2.tail\n            if (lst2.length\
    \ > 0) {\n                lst3 = lst3 :+ lst2.last\n                lst2 = lst2.dropRight(1)\n\
    \            }\n        }\n        return lst3", "        var lst2 = lst.sortWith(_\
    \ < _)\n        var lst3 = List[Long]()\n        while (lst2.length > 0) {\n \
    \           lst3 = lst3 :+ lst2.head\n            lst2 = lst2.tail\n         \
    \   if (lst2.length > 0) {\n                lst3 = lst3 :+ lst2.last\n       \
    \         lst2 = lst2.dropRight(1)\n            }\n        }\n        return lst3",
  "        val lst2 = lst.sorted\n        val lst3 = lst2.reverse\n        val lst4\
    \ = lst3.zipWithIndex.map(x => (x._1, x._2 % 2))\n        val lst5 = lst4.sortBy(x\
    \ => x._2)\n        lst5.map(x => x._1)", "        var lst2 = lst.sorted\n   \
    \     var lst3 = List[Long]()\n        var i = 0\n        while (i < lst2.length)\
    \ {\n            if (i % 2 == 0) {\n                lst3 = lst3 :+ lst2(i)\n \
    \           } else {\n                lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n\
    \            }\n            i += 1\n        }\n        return lst3", "       \
    \ // Fill up this function body\n        // 'lst' is a list of integers\n    \
    \    // 'return' a list of integers in strange order\n        var result = List[Long]()\n\
    \        var lst2 = lst.sorted\n        var lst3 = lst2.reverse\n        var lst4\
    \ = lst2 ++ lst3\n        var lst5 = lst4.distinct\n        var lst6 = lst5.sorted\n\
    \        var lst7 = lst6.reverse\n        var lst8 = lst6 ++ lst7\n        var\
    \ lst9 = lst8.distinct\n        var lst10 = lst9.sorted\n        var lst11 = lst10.reverse\n\
    \        var lst12 = lst10 ++ lst11\n        var lst13 = lst12.distinct\n    \
    \    var lst14 = lst13.sorted\n        var lst15 = lst14.reverse\n        var\
    \ lst16 = lst14 ++ lst15\n        var lst17 = lst16.distinct\n        var lst18\
    \ = lst17.sorted\n        var lst19 = lst18.reverse\n        var lst20 = lst18\
    \ ++ lst19\n        var lst21 = lst20.distinct\n        var lst22 = lst21.sorted\n\
    \        var lst23 = lst22.reverse\n        var lst24 = lst22 ++ lst23\n     \
    \   var lst25 = lst24.distinct\n        var lst26 = lst25.sorted\n        var\
    \ lst27 = lst26.reverse\n        var lst28 = lst26 ++ lst27\n        var lst29\
    \ = lst28.distinct\n        var lst30 = lst29.sorted\n        var lst31 = lst30.reverse\n\
    \        var lst32 = lst30 ++ lst31\n        var lst33 = lst32.distinct\n    \
    \    var lst34 = lst33.sorted\n        var lst35 = lst34.reverse\n        var\
    \ lst36 = lst34 ++ lst35\n        var lst37 = lst36.distinct\n       ", "    \
    \    var lst2 = lst.sorted\n        var lst3 = List[Long]()\n        var i = 0\n\
    \        while (i < lst2.length) {\n            if (i % 2 == 0) {\n          \
    \      lst3 = lst3 :+ lst2(i)\n            } else {\n                lst3 = lst3\
    \ :+ lst2(lst2.length - 1 - i)\n            }\n            i += 1\n        }\n\
    \        return lst3", "        // Fill up this function body\n        // 'lst'\
    \ is the list of integers\n        // 'return' the list of integers in strange\
    \ order\n        lst", "        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n\
    \        var i = 0\n        while (i < lst2.length) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n       \
    \         lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n          \
    \  i += 1\n        }\n        lst3", "        // Fill up this function body\n\
    \        // 'lst' is a list of integers\n        // 'return' a list of integers\
    \ in strange order\n        var result = List[Long]()\n        var lst2 = lst.sorted\n\
    \        var lst3 = lst2.reverse\n        var i = 0\n        while (i < lst.length)\
    \ {\n            if (i % 2 == 0) {\n                result = result :+ lst2(i)\n\
    \            } else {\n                result = result :+ lst3(i)\n          \
    \  }\n            i += 1\n        }\n        result", "        var result = List[Long]()\n\
    \        var lst2 = lst.sorted\n        var lst3 = lst2.reverse\n        var i\
    \ = 0\n        while (i < lst.length) {\n            if (i % 2 == 0) {\n     \
    \           result = result :+ lst2(i / 2)\n            } else {\n           \
    \     result = result :+ lst3(i / 2)\n            }\n            i += 1\n    \
    \    }\n        return result", "        // Fill up this function body\n     \
    \   // `lst` is the list of integers\n        // You need to return the list of\
    \ integers in strange order\n        val lst2 = lst.sorted\n        val lst3 =\
    \ lst2.reverse\n        val lst4 = lst3.zipWithIndex\n        val lst5 = lst4.map(x\
    \ => (x._1, x._2 % 2))\n        val lst6 = lst5.sortBy(x => x._2)\n        val\
    \ lst7 = lst6.map(x => x._1)\n        lst7", "        var result = List[Long]()\n\
    \        var lst2 = lst.sortWith(_ < _)\n        var lst3 = lst.sortWith(_ > _)\n\
    \        var i = 0\n        while (i < lst.length) {\n            if (i % 2 ==\
    \ 0) {\n                result = result :+ lst2.head\n                lst2 = lst2.tail\n\
    \            } else {\n                result = result :+ lst3.head\n        \
    \        lst3 = lst3.tail\n            }\n            i += 1\n        }\n    \
    \    result", "        // Fill up this function body\n        // 'lst' is a list\
    \ of integers\n        // 'return' a list of integers in strange order\n     \
    \   var lst2 = lst.sorted\n        var lst3 = lst2.reverse\n        var lst4 =\
    \ List[Long]()\n        var lst5 = List[Long]()\n        var lst6 = List[Long]()\n\
    \        var lst7 = List[Long]()\n        var lst8 = List[Long]()\n        var\
    \ lst9 = List[Long]()\n        var lst10 = List[Long]()\n        var lst11 = List[Long]()\n\
    \        var lst12 = List[Long]()\n        var lst13 = List[Long]()\n        var\
    \ lst14 = List[Long]()\n        var lst15 = List[Long]()\n        var lst16 =\
    \ List[Long]()\n        var lst17 = List[Long]()\n        var lst18 = List[Long]()\n\
    \        var lst19 = List[Long]()\n        var lst20 = List[Long]()\n        var\
    \ lst21 = List[Long]()\n        var lst22 = List[Long]()\n        var lst23 =\
    \ List[Long]()\n        var lst24 = List[Long]()\n        var lst25 = List[Long]()\n\
    \        var lst26 = List[Long]()\n        var lst27 = List[Long]()\n        var\
    \ lst28 = List[Long]()\n        var lst29 = List[Long]()\n        var lst30 =\
    \ List[Long]()\n        var lst31 = List[Long]()\n        var lst32 = List[Long]()\n\
    \        var lst33 = List[Long]()\n        var lst34 = List[Long]()\n        var\
    \ lst35 = List[Long]()\n        var lst36 = List[Long]()\n        var lst37 =\
    \ List[Long]()\n        var lst38 = List[Long]()\n        var lst39 = List[Long]()\n\
    \        var lst40 = List[Long]()\n        var lst41 = List[Long]", "        //\
    \ Fill up this function body\n        // 'lst' is a list of integers\n       \
    \ // 'lst' has to be sorted in a strange way\n        // Return the sorted list\n\
    \        if (lst.length == 0) {\n            return lst\n        }\n        var\
    \ lst2 = lst.sorted\n        var lst3 = ListBuffer[Long]()\n        var i = 0\n\
    \        while (i < lst2.length) {\n            if (i % 2 == 0) {\n          \
    \      lst3 += lst2(i)\n            } else {\n                lst3 += lst2(lst2.length\
    \ - 1 - i)\n            }\n            i += 1\n        }\n        return lst3.toList",
  "        // Fill up this function body\n        // 'lst' is a list of integers\n\
    \        // 'lst' has to be returned in a strange order\n        // Remove the\
    \ line below and start your implementation\n        lst", "        // Fill up\
    \ this function body\n        // `lst` is a list of integers\n        // You need\
    \ to return a list of integers in strange order\n        lst.sorted", "      \
    \  // Fill up this function body\n        // 'lst' is a list of integers\n   \
    \     // 'return' a list of integers in strange order\n        val lst2 = lst.sorted\n\
    \        val lst3 = lst2.reverse\n        val lst4 = lst3.zipWithIndex\n     \
    \   val lst5 = lst4.map(x => if (x._2 % 2 == 0) lst2(x._2) else lst3(x._2))\n\
    \        lst5", "        if (lst.isEmpty) return lst\n        var lst1 = lst.sortWith(_\
    \ < _)\n        var lst2 = lst1.sortWith(_ > _)\n        var lst3 = List[Long]()\n\
    \        for (i <- 0 until lst1.length) {\n            if (i % 2 == 0) lst3 =\
    \ lst3 :+ lst1(i)\n            else lst3 = lst3 :+ lst2(i)\n        }\n      \
    \  return lst3", "        if (lst.length == 0) return lst\n        var lst2 =\
    \ lst.sorted\n        var lst3 = List[Long]()\n        var i = 0\n        while\
    \ (i < lst2.length) {\n            if (i % 2 == 0) {\n                lst3 = lst3\
    \ :+ lst2(i)\n            } else {\n                lst3 = lst3 :+ lst2(lst2.length\
    \ - 1 - i)\n            }\n            i += 1\n        }\n        return lst3",
  "        if (lst.length == 0) return List[Long]()\n        var lst2 = lst.sorted\n\
    \        var lst3 = List[Long]()\n        var i = 0\n        while (i < lst2.length)\
    \ {\n            if (i % 2 == 0) {\n                lst3 = lst3 :+ lst2(i)\n \
    \           } else {\n                lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n\
    \            }\n            i += 1\n        }\n        return lst3", "       \
    \ // Fill up this function body\n        // 'lst' is a list of integers\n    \
    \    // 'return' a list of integers in strange order\n        var lst2 = lst.sorted\n\
    \        var lst3 = List[Long]()\n        var lst4 = List[Long]()\n        var\
    \ lst5 = List[Long]()\n        var lst6 = List[Long]()\n        var lst7 = List[Long]()\n\
    \        var lst8 = List[Long]()\n        var lst9 = List[Long]()\n        var\
    \ lst10 = List[Long]()\n        var lst11 = List[Long]()\n        var lst12 =\
    \ List[Long]()\n        var lst13 = List[Long]()\n        var lst14 = List[Long]()\n\
    \        var lst15 = List[Long]()\n        var lst16 = List[Long]()\n        var\
    \ lst17 = List[Long]()\n        var lst18 = List[Long]()\n        var lst19 =\
    \ List[Long]()\n        var lst20 = List[Long]()\n        var lst21 = List[Long]()\n\
    \        var lst22 = List[Long]()\n        var lst23 = List[Long]()\n        var\
    \ lst24 = List[Long]()\n        var lst25 = List[Long]()\n        var lst26 =\
    \ List[Long]()\n        var lst27 = List[Long]()\n        var lst28 = List[Long]()\n\
    \        var lst29 = List[Long]()\n        var lst30 = List[Long]()\n        var\
    \ lst31 = List[Long]()\n        var lst32 = List[Long]()\n        var lst33 =\
    \ List[Long]()\n        var lst34 = List[Long]()\n        var lst35 = List[Long]()\n\
    \        var lst36 = List[Long]()\n        var lst37 = List[Long]()\n        var\
    \ lst38 = List[Long]()\n        var lst39 = List[Long]()\n        var lst40 =\
    \ List[Long]()\n        var lst41 = List[Long]", "        // Fill up this function\
    \ body\n        // `lst` is a list of integers\n        // You have to return\
    \ a list of integers in strange order\n        // You can use any number of lines\n\
    \        // You can use any number of helper functions\n        // You can use\
    \ any number of loops\n        // You can use any number of conditionals\n   \
    \     // You can use any number of variables\n        // You can use any number\
    \ of data structures\n        // You can use any number of built-in functions\n\
    \        // You can use any number of built-in methods\n        // You can use\
    \ any number of built-in classes\n        // You can use any number of built-in\
    \ traits\n        // You can use any number of built-in objects\n        // You\
    \ can use any number of built-in packages\n        // You can use any number of\
    \ built-in libraries\n        // You can use any number of built-in frameworks\n\
    \        // You can use any number of built-in languages\n        // You can use\
    \ any number of built-in platforms\n        // You can use any number of built-in\
    \ technologies\n        // You can use any number of built-in tools\n        //\
    \ You can use any number of built-in utilities\n        // You can use any number\
    \ of built-in features\n        // You can use any number of built-in components\n\
    \        // You can use any number of built-in modules\n        // You can use\
    \ any number of built-in libraries\n        // You can use any number of built-in\
    \ frameworks\n        // You can use any number of built-in languages\n      \
    \  // You can use any number of built-in platforms\n        // You can use any\
    \ number of built-in technologies\n        // You can use any number of built-in\
    \ tools\n        // You can use any number of built-in utilities\n        // You\
    \ can use any number of built-in features\n        // You can use any number of\
    \ built-in components\n        // You can use any number of built-in modules\n\
    \        // You can use any number of built-in libraries\n        // You can use\
    \ any number of built-in frameworks\n        // You can use any number of built-in\
    \ languages\n        // You can use any number of built-in platforms\n       \
    \ // You can use any number of built-in technologies\n        // You can use any\
    \ number of built-in", "        // Fill up this function body\n        // 'lst'\
    \ is a list of integers\n        // 'lst.length' is the length of the list\n \
    \       // 'lst(i)' is the ith element of the list\n        // 'lst.min' is the\
    \ minimum element of the list\n        // 'lst.max' is the maximum element of\
    \ the list\n        // 'lst.sum' is the sum of all elements of the list\n    \
    \    // 'lst.product' is the product of all elements of the list\n        // 'lst.sorted'\
    \ is the sorted list\n        // 'lst.reverse' is the reversed list\n        //\
    \ 'lst.head' is the first element of the list\n        // 'lst.tail' is the list\
    \ without the first element\n        // 'lst.last' is the last element of the\
    \ list\n        // 'lst.init' is the list without the last element\n        //\
    \ 'lst.count(f)' is the number of elements that satisfy the predicate f\n    \
    \    // 'lst.exists(f)' is true if there exists an element that satisfies the\
    \ predicate f\n        // 'lst.filter(f)' is the list of elements that satisfy\
    \ the predicate f\n        // 'lst.forall(f)' is true if all elements satisfy\
    \ the predicate f\n        // 'lst.foreach(f)' applies the function f to all elements\n\
    \        // 'lst.map(f)' is the list after applying the function f to all elements\n\
    \        // 'lst.mkString(s)' is the list elements joined by the string s\n  \
    \      // 'lst.take(n)' is the first n elements of the list\n        // 'lst.drop(n)'\
    \ is the list without the first n elements\n        // 'lst.takeRight(n)' is the\
    \ last n elements of the list\n        // 'lst.dropRight(n)' is the list without\
    \ the last n elements\n        // 'lst.splitAt(n)' is a pair of lists, the first\
    \ has the first n elements\n        // 'lst.reverseIterator' is an iterator that\
    \ goes through the list in reverse order\n        // 'lst.startsWith(prefix)'\
    \ is true if the list starts with the prefix\n        // 'lst", "        // Fill\
    \ up this function body\n        // 'lst' is a list of integers\n        // 'return'\
    \ a list of integers in strange order\n        if (lst.length == 0) return lst\n\
    \        var lst2 = lst.sorted\n        var lst3 = ListBuffer[Long]()\n      \
    \  var i = 0\n        while (i < lst2.length) {\n            if (i % 2 == 0) {\n\
    \                lst3 += lst2(i)\n            } else {\n                lst3 +=\
    \ lst2(lst2.length - 1 - i)\n            }\n            i += 1\n        }\n  \
    \      return lst3.toList", "        var lst2 = lst.sorted\n        var lst3 =\
    \ List[Long]()\n        while (lst2.length > 0) {\n            lst3 = lst3 :+\
    \ lst2.head\n            lst2 = lst2.tail\n            if (lst2.length > 0) {\n\
    \                lst3 = lst3 :+ lst2.last\n                lst2 = lst2.init\n\
    \            }\n        }\n        lst3", "        var lst2 = lst.sorted\n   \
    \     var lst3 = List[Long]()\n        var i = 0\n        while (i < lst2.length)\
    \ {\n            if (i % 2 == 0) {\n                lst3 = lst3 :+ lst2(i)\n \
    \           } else {\n                lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n\
    \            }\n            i += 1\n        }\n        return lst3", "       \
    \ var lst2 = lst.sorted\n        var lst3 = List[Long]()\n        var i = 0\n\
    \        while (i < lst2.length) {\n            if (i % 2 == 0) {\n          \
    \      lst3 = lst3 :+ lst2(i)\n            } else {\n                lst3 = lst3\
    \ :+ lst2(lst2.length - 1 - i)\n            }\n            i += 1\n        }\n\
    \        lst3", "        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n\
    \        var i = 0\n        while (i < lst2.length) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n       \
    \         lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n          \
    \  i += 1\n        }\n        lst3", "        val sorted = lst.sorted\n      \
    \  val result = ListBuffer[Long]()\n        var i = 0\n        var j = sorted.length\
    \ - 1\n        while (i <= j) {\n            result += sorted(i)\n           \
    \ if (i != j) result += sorted(j)\n            i += 1\n            j -= 1\n  \
    \      }\n        result.toList", "        val sorted = lst.sorted\n        val\
    \ min = sorted.head\n        val max = sorted.last\n        val mid = sorted.slice(1,\
    \ sorted.length - 1)\n        var result = List[Long]()\n        var i = 0\n \
    \       while (i < mid.length) {\n            if (i % 2 == 0) {\n            \
    \    result = result :+ mid(i)\n            } else {\n                result =\
    \ result :+ mid(mid.length - 1 - i)\n            }\n            i += 1\n     \
    \   }\n        if (lst.length % 2 == 0) {\n            result = result :+ max\n\
    \        } else {\n            result = result :+ min\n        }\n        result",
  "        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n        var i =\
    \ 0\n        while (i < lst2.length) {\n            if (i % 2 == 0) lst3 = lst3\
    \ :+ lst2(i)\n            else lst3 = lst3 :+ lst2(lst2.length - i / 2 - 1)\n\
    \            i += 1\n        }\n        lst3", "        var lst2 = lst.sorted\n\
    \        var lst3 = List[Long]()\n        var i = 0\n        while (i < lst2.length)\
    \ {\n            if (i % 2 == 0) {\n                lst3 = lst3 :+ lst2(i)\n \
    \           } else {\n                lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n\
    \            }\n            i += 1\n        }\n        lst3", "        var result\
    \ = List[Long]()\n        var lst2 = lst.sorted\n        var lst3 = lst2.reverse\n\
    \        var lst4 = lst2 ++ lst3\n        var lst5 = lst4.distinct\n        var\
    \ lst6 = lst5.sorted\n        var lst7 = lst6.reverse\n        var lst8 = lst6\
    \ ++ lst7\n        var lst9 = lst8.distinct\n        var lst10 = lst9.sorted\n\
    \        var lst11 = lst10.reverse\n        var lst12 = lst10 ++ lst11\n     \
    \   var lst13 = lst12.distinct\n        var lst14 = lst13.sorted\n        var\
    \ lst15 = lst14.reverse\n        var lst16 = lst14 ++ lst15\n        var lst17\
    \ = lst16.distinct\n        var lst18 = lst17.sorted\n        var lst19 = lst18.reverse\n\
    \        var lst20 = lst18 ++ lst19\n        var lst21 = lst20.distinct\n    \
    \    var lst22 = lst21.sorted\n        var lst23 = lst22.reverse\n        var\
    \ lst24 = lst22 ++ lst23\n        var lst25 = lst24.distinct\n        var lst26\
    \ = lst25.sorted\n        var lst27 = lst26.reverse\n        var lst28 = lst26\
    \ ++ lst27\n        var lst29 = lst28.distinct\n        var lst30 = lst29.sorted\n\
    \        var lst31 = lst30.reverse\n        var lst32 = lst30 ++ lst31\n     \
    \   var lst33 = lst32.distinct\n        var lst34 = lst33.sorted\n        var\
    \ lst35 = lst34.reverse\n        var lst36 = lst34 ++ lst35\n        var lst37\
    \ = lst36.distinct\n        var lst38 = lst37.sorted\n        var lst39 = lst38.reverse\n\
    \        var lst40 = lst38", "        val lst2 = lst.sorted\n        val lst3\
    \ = lst2.reverse\n        val lst4 = lst2 ++ lst3\n        val lst5 = lst4.dropRight(1)\n\
    \        val lst6 = lst5.drop(1)\n        val lst7 = lst6.grouped(2).toList\n\
    \        val lst8 = lst7.map(x => x.reverse)\n        val lst9 = lst8.flatten\n\
    \        val lst10 = lst9 ++ List(lst4.last)\n        lst10", "        var lst2\
    \ = lst.sorted\n        var lst3 = List[Long]()\n        var i = 0\n        while\
    \ (i < lst2.length) {\n            if (i % 2 == 0) {\n                lst3 = lst3\
    \ :+ lst2(i)\n            } else {\n                lst3 = lst3 :+ lst2(lst2.length\
    \ - 1 - i)\n            }\n            i += 1\n        }\n        return lst3",
  "        var result = List[Long]()\n        var lst2 = lst.sortWith(_ < _)\n   \
    \     var lst3 = lst.sortWith(_ > _)\n        var i = 0\n        while (i < lst.length)\
    \ {\n            if (i % 2 == 0) {\n                result = result :+ lst2.head\n\
    \                lst2 = lst2.tail\n            } else {\n                result\
    \ = result :+ lst3.head\n                lst3 = lst3.tail\n            }\n   \
    \         i += 1\n        }\n        result", "        // Fill up this function\
    \ body\n        // 'lst' is a list of integers\n        // 'return' a list of\
    \ integers in strange order\n        var lst1 = lst.sorted\n        var lst2 =\
    \ lst1.reverse\n        var lst3 = List[Long]()\n        var i = 0\n        while\
    \ (i < lst1.length) {\n            if (i % 2 == 0) {\n                lst3 = lst3\
    \ :+ lst1(i)\n            } else {\n                lst3 = lst3 :+ lst2(i)\n \
    \           }\n            i += 1\n        }\n        lst3", "        var lst2\
    \ = lst.sorted\n        var lst3 = List[Long]()\n        var i = 0\n        while\
    \ (i < lst2.length) {\n            if (i % 2 == 0) {\n                lst3 = lst3\
    \ :+ lst2(i)\n            } else {\n                lst3 = lst3 :+ lst2(lst2.length\
    \ - i / 2 - 1)\n            }\n            i += 1\n        }\n        lst3", " \
    \       // Fill up this function body\n        // `lst` is a list of integers\n\
    \        // You have to return a list of integers in strange order\n        List[Long]()",
  "        // Fill up this function body\n        // 'lst' is a list of integers\n\
    \        // 'return' a list of integers in strange order\n        var result =\
    \ List[Long]()\n        var lst2 = lst.sorted\n        var lst3 = lst2.reverse\n\
    \        var i = 0\n        while (i < lst.length) {\n            if (i % 2 ==\
    \ 0) {\n                result = result :+ lst2(i)\n            } else {\n   \
    \             result = result :+ lst3(i)\n            }\n            i += 1\n\
    \        }\n        result", "        // Fill up this function body\n        //\
    \ 'lst' is a list of integers\n        // 'return' a list of integers in strange\
    \ order\n        var result = List[Long]()\n        var lst2 = lst.sortWith(_\
    \ < _)\n        var lst3 = lst.sortWith(_ > _)\n        var i = 0\n        while\
    \ (i < lst.length) {\n            if (i % 2 == 0) {\n                result =\
    \ result :+ lst2(0)\n                lst2 = lst2.drop(1)\n            } else {\n\
    \                result = result :+ lst3(0)\n                lst3 = lst3.drop(1)\n\
    \            }\n            i += 1\n        }\n        result", "        // Fill\
    \ up this function body\n        // 'lst' is a list of integers\n        // 'return'\
    \ a list of integers in strange order\n        var lst2 = lst.sorted\n       \
    \ var lst3 = ListBuffer[Long]()\n        var lst4 = ListBuffer[Long]()\n     \
    \   var lst5 = ListBuffer[Long]()\n        var lst6 = ListBuffer[Long]()\n   \
    \     var lst7 = ListBuffer[Long]()\n        var lst8 = ListBuffer[Long]()\n \
    \       var lst9 = ListBuffer[Long]()\n        var lst10 = ListBuffer[Long]()\n\
    \        var lst11 = ListBuffer[Long]()\n        var lst12 = ListBuffer[Long]()\n\
    \        var lst13 = ListBuffer[Long]()\n        var lst14 = ListBuffer[Long]()\n\
    \        var lst15 = ListBuffer[Long]()\n        var lst16 = ListBuffer[Long]()\n\
    \        var lst17 = ListBuffer[Long]()\n        var lst18 = ListBuffer[Long]()\n\
    \        var lst19 = ListBuffer[Long]()\n        var lst20 = ListBuffer[Long]()\n\
    \        var lst21 = ListBuffer[Long]()\n        var lst22 = ListBuffer[Long]()\n\
    \        var lst23 = ListBuffer[Long]()\n        var lst24 = ListBuffer[Long]()\n\
    \        var lst25 = ListBuffer[Long]()\n        var lst26 = ListBuffer[Long]()\n\
    \        var lst27 = ListBuffer[Long]()\n        var lst28 = ListBuffer[Long]()\n\
    \        var lst29 = ListBuffer[Long]()\n        var lst30 = ListBuffer[Long]()\n\
    \        var lst31 = ListBuffer[Long]()\n        var lst32 = ListBuffer[Long]()\n\
    \        var lst33 = ListBuffer[Long]()\n        var lst34 = ListBuffer[Long]()\n\
    \        var lst35 = ListBuffer[Long]()\n        var lst36 = ListBuffer[Long]()\n\
    \        var lst37 = ListBuffer[Long]()\n        var lst38 = ListBuffer[Long]",
  "        // Fill up this function body\n        // `lst` is a list of integers\n\
    \        // You need to return a list of integers in strange order\n        //\
    \ You can change the function signature as you wish\n        // You can write\
    \ auxillary functions\n        // You can use standard scala libraries\n     \
    \   // But, you are not supposed to use mutable data structures\n        // You\
    \ are not supposed to use arrays\n        // You are not supposed to use loops\n\
    \        // You are not supposed to use recursion\n        // You are not supposed\
    \ to use any mutable data structure\n        // You are not supposed to use any\
    \ mutable data structure\n        // You are not supposed to use any mutable data\
    \ structure\n        // You are not supposed to use any mutable data structure\n\
    \        // You are not supposed to use any mutable data structure\n        //\
    \ You are not supposed to use any mutable data structure\n        // You are not\
    \ supposed to use any mutable data structure\n        // You are not supposed\
    \ to use any mutable data structure\n        // You are not supposed to use any\
    \ mutable data structure\n        // You are not supposed to use any mutable data\
    \ structure\n        // You are not supposed to use any mutable data structure\n\
    \        // You are not supposed to use any mutable data structure\n        //\
    \ You are not supposed to use any mutable data structure\n        // You are not\
    \ supposed to use any mutable data structure\n        // You are not supposed\
    \ to use any mutable data structure\n        // You are not supposed to use any\
    \ mutable data structure\n        // You are not supposed to use any mutable data\
    \ structure\n        // You are not supposed to use any mutable data structure\n\
    \        // You are not supposed to use any mutable data structure\n        //\
    \ You are not supposed to use any mutable data structure\n        // You are not\
    \ supposed to use any mutable data structure\n        // You are not supposed\
    \ to use any mutable data structure\n        // You are not supposed to use any\
    \ mutable data structure\n        // You are not supposed to use any mutable data\
    \ structure\n        // You are not supposed to use any mutable data structure\n\
    \        // You are not supposed to use any mutable data structure\n        //\
    \ You are not supposed to use any mutable data structure\n        // You are not\
    \ supposed to use any mutable data structure\n        // You are not supposed\
    \ to use", "        var lst2 = lst.sorted\n        var lst3 = lst2.reverse\n \
    \       var lst4 = List[Long]()\n        for (i <- 0 until lst.length) {\n   \
    \         if (i % 2 == 0) lst4 = lst4 :+ lst2(i)\n            else lst4 = lst4\
    \ :+ lst3(i)\n        }\n        lst4", "        // Fill up this function body\n\
    \        // 'lst' is a list of integers\n        // 'return' a list of integers\
    \ in strange order\n        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n\
    \        var lst4 = List[Long]()\n        var lst5 = List[Long]()\n        var\
    \ lst6 = List[Long]()\n        var lst7 = List[Long]()\n        var lst8 = List[Long]()\n\
    \        var lst9 = List[Long]()\n        var lst10 = List[Long]()\n        var\
    \ lst11 = List[Long]()\n        var lst12 = List[Long]()\n        var lst13 =\
    \ List[Long]()\n        var lst14 = List[Long]()\n        var lst15 = List[Long]()\n\
    \        var lst16 = List[Long]()\n        var lst17 = List[Long]()\n        var\
    \ lst18 = List[Long]()\n        var lst19 = List[Long]()\n        var lst20 =\
    \ List[Long]()\n        var lst21 = List[Long]()\n        var lst22 = List[Long]()\n\
    \        var lst23 = List[Long]()\n        var lst24 = List[Long]()\n        var\
    \ lst25 = List[Long]()\n        var lst26 = List[Long]()\n        var lst27 =\
    \ List[Long]()\n        var lst28 = List[Long]()\n        var lst29 = List[Long]()\n\
    \        var lst30 = List[Long]()\n        var lst31 = List[Long]()\n        var\
    \ lst32 = List[Long]()\n        var lst33 = List[Long]()\n        var lst34 =\
    \ List[Long]()\n        var lst35 = List[Long]()\n        var lst36 = List[Long]()\n\
    \        var lst37 = List[Long]()\n        var lst38 = List[Long]()\n        var\
    \ lst39 = List[Long]()\n        var lst40 = List[Long]()\n        var lst41 =\
    \ List[Long]", "        // Fill up this function body\n        // 'lst' is a list\
    \ of integers\n        // 'return' a list of integers in strange order\n     \
    \   var lst1 = lst.sorted\n        var lst2 = lst1.reverse\n        var lst3 =\
    \ List[Long]()\n        var i = 0\n        while (i < lst1.length) {\n       \
    \     if (i % 2 == 0) {\n                lst3 = lst3 :+ lst1(i)\n            }\
    \ else {\n                lst3 = lst3 :+ lst2(i)\n            }\n            i\
    \ += 1\n        }\n        lst3", "        var result = List[Long]()\n       \
    \ var lst2 = lst.sorted\n        var lst3 = lst2.reverse\n        var lst4 = lst2\
    \ ++ lst3\n        var lst5 = lst4.distinct\n        var lst6 = lst5.sorted\n\
    \        var lst7 = lst6.reverse\n        var lst8 = lst6 ++ lst7\n        var\
    \ lst9 = lst8.distinct\n        var lst10 = lst9.sorted\n        var lst11 = lst10.reverse\n\
    \        var lst12 = lst10 ++ lst11\n        var lst13 = lst12.distinct\n    \
    \    var lst14 = lst13.sorted\n        var lst15 = lst14.reverse\n        var\
    \ lst16 = lst14 ++ lst15\n        var lst17 = lst16.distinct\n        var lst18\
    \ = lst17.sorted\n        var lst19 = lst18.reverse\n        var lst20 = lst18\
    \ ++ lst19\n        var lst21 = lst20.distinct\n        var lst22 = lst21.sorted\n\
    \        var lst23 = lst22.reverse\n        var lst24 = lst22 ++ lst23\n     \
    \   var lst25 = lst24.distinct\n        var lst26 = lst25.sorted\n        var\
    \ lst27 = lst26.reverse\n        var lst28 = lst26 ++ lst27\n        var lst29\
    \ = lst28.distinct\n        var lst30 = lst29.sorted\n        var lst31 = lst30.reverse\n\
    \        var lst32 = lst30 ++ lst31\n        var lst33 = lst32.distinct\n    \
    \    var lst34 = lst33.sorted\n        var lst35 = lst34.reverse\n        var\
    \ lst36 = lst34 ++ lst35\n        var lst37 = lst36.distinct\n        var lst38\
    \ = lst37.sorted\n        var lst39 = lst38.reverse\n        var lst40 = lst38",
  "        // Fill up this function body\n        // `lst` is a list of integers\n\
    \        // You need to return a list of integers in strange order\n        var\
    \ lst1 = lst.sorted\n        var lst2 = lst1.reverse\n        var lst3 = List[Long]()\n\
    \        var i = 0\n        while (i < lst1.length) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 = lst3 :+ lst1(i)\n            } else {\n       \
    \         lst3 = lst3 :+ lst2(i)\n            }\n            i += 1\n        }\n\
    \        lst3", "        var lst2 = lst.sortWith(_ < _)\n        var lst3 = List[Long]()\n\
    \        var i = 0\n        while (i < lst2.length) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n       \
    \         lst3 = lst3 :+ lst2(lst2.length - i / 2 - 1)\n            }\n      \
    \      i += 1\n        }\n        lst3", "        if (lst.isEmpty) return lst\n\
    \        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n        var i\
    \ = 0\n        while (i < lst2.length) {\n            if (i % 2 == 0) {\n    \
    \            lst3 = lst3 :+ lst2(i)\n            } else {\n                lst3\
    \ = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n            i += 1\n   \
    \     }\n        return lst3", "        // Fill up this function body\n      \
    \  // 'lst' is a list of integers\n        // 'return' a list of integers in strange\
    \ order\n        var result = List[Long]()\n        var lst2 = lst.sortWith(_\
    \ < _)\n        var lst3 = lst.sortWith(_ > _)\n        var i = 0\n        while\
    \ (i < lst.length) {\n            if (i % 2 == 0) {\n                result =\
    \ result :+ lst2(0)\n                lst2 = lst2.drop(1)\n            } else {\n\
    \                result = result :+ lst3(0)\n                lst3 = lst3.drop(1)\n\
    \            }\n            i += 1\n        }\n        result", "        var lst2\
    \ = lst.sorted\n        var lst3 = List[Long]()\n        var i = 0\n        while\
    \ (i < lst2.length) {\n            if (i % 2 == 0) {\n                lst3 = lst3\
    \ :+ lst2(i)\n            } else {\n                lst3 = lst3 :+ lst2(lst2.length\
    \ - i / 2 - 1)\n            }\n            i += 1\n        }\n        return lst3",
  "        // Fill up this function body\n        // 'lst' is a list of integers\n\
    \        // 'lst' has to be returned in a strange order\n        // Remove the\
    \ line below and start coding\n        lst", "        if (lst.length == 0) return\
    \ lst\n        var lst2 = lst.sortWith(_ < _)\n        var lst3 = List[Long]()\n\
    \        while (lst2.length > 0) {\n            lst3 = lst3 :+ lst2.head\n   \
    \         lst2 = lst2.tail\n            if (lst2.length > 0) {\n             \
    \   lst3 = lst3 :+ lst2.last\n                lst2 = lst2.init\n            }\n\
    \        }\n        return lst3", "        // Fill up this function body\n   \
    \     // `lst` is a list of integers\n        // You have to return the list in\
    \ strange order\n        // You can use other functions as you wish\n        //\
    \ You can create new lists\n        // You can use tuples\n        // You can\
    \ use for loops\n        // You can use while loops\n        // You can use if\
    \ statements\n        // You can use pattern matching\n        // You can use\
    \ any other language construct you want\n        // But you cannot use any mutable\
    \ data structures\n        // You cannot use any mutable variables\n        //\
    \ You cannot use any mutable fields\n        // You cannot use any mutable objects\n\
    \        // You cannot use any mutable classes\n        // You cannot use any\
    \ mutable traits\n        // You cannot use any mutable functions\n        //\
    \ You cannot use any mutable methods\n        // You cannot use any mutable closures\n\
    \        // You cannot use any mutable anonymous functions\n        // You cannot\
    \ use any mutable anonymous methods\n        // You cannot use any mutable anonymous\
    \ closures\n        // You cannot use any mutable anonymous classes\n        //\
    \ You cannot use any mutable anonymous traits\n        // You cannot use any mutable\
    \ anonymous objects\n        // You cannot use any mutable anonymous functions\n\
    \        // You cannot use any mutable anonymous methods\n        // You cannot\
    \ use any mutable anonymous closures\n        // You cannot use any mutable anonymous\
    \ classes\n        // You cannot use any mutable anonymous traits\n        //\
    \ You cannot use any mutable anonymous objects\n        // You cannot use any\
    \ mutable anonymous functions\n        // You cannot use any mutable anonymous\
    \ methods\n        // You cannot use any mutable anonymous closures\n        //\
    \ You cannot use any mutable anonymous classes\n        // You cannot use any\
    \ mutable anonymous traits\n        // You cannot use any mutable anonymous objects\n\
    \        // You cannot use any mutable anonymous functions\n        // You cannot\
    \ use any mutable anonymous methods\n        // You cannot use any mutable anonymous\
    \ closures\n        // You cannot use any mutable anonymous classes\n        //\
    \ You cannot use any mutable anonymous traits\n        // You cannot use any mutable\
    \ anonymous objects\n        // You cannot use any mutable anonymous functions\n\
    \        // You cannot use any mutable anonymous methods\n        // You cannot\
    \ use any mutable anonymous closures\n        // You cannot use any mutable anonymous\
    \ classes\n        // You cannot use any mutable", "        if (lst.length ==\
    \ 0) return lst\n        var lst2 = lst.sorted\n        var lst3 = ListBuffer[Long]()\n\
    \        var i = 0\n        while (lst2.length > 0) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 += lst2.head\n                lst2 = lst2.tail\n\
    \            } else {\n                lst3 += lst2.last\n                lst2\
    \ = lst2.dropRight(1)\n            }\n            i += 1\n        }\n        return\
    \ lst3.toList", "        // Fill in the code here.\n        var lst2 = lst.sorted\n\
    \        var lst3 = List[Long]()\n        var i = 0\n        while (i < lst2.length)\
    \ {\n            if (i % 2 == 0) {\n                lst3 = lst3 :+ lst2(i)\n \
    \           } else {\n                lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n\
    \            }\n            i += 1\n        }\n        return lst3", "       \
    \ val lst2 = lst.sorted\n        val lst3 = lst2.reverse\n        val lst4 = lst3.zipWithIndex\n\
    \        val lst5 = lst4.map(x => (x._1, x._2 % 2))\n        val lst6 = lst5.sortBy(x\
    \ => x._2)\n        val lst7 = lst6.map(x => x._1)\n        return lst7", "  \
    \      var result = List[Long]()\n        var lst_copy = lst.sorted\n        while\
    \ (lst_copy.length > 0) {\n            result = result :+ lst_copy.head\n    \
    \        lst_copy = lst_copy.tail\n            if (lst_copy.length > 0) {\n  \
    \              result = result :+ lst_copy.last\n                lst_copy = lst_copy.init\n\
    \            }\n        }\n        return result", "        var lst2 = lst.sorted\n\
    \        var lst3 = List[Long]()\n        var i = 0\n        while (i < lst2.length)\
    \ {\n            if (i % 2 == 0) {\n                lst3 = lst3 :+ lst2(i)\n \
    \           } else {\n                lst3 = lst3 :+ lst2(lst2.length - i / 2\
    \ - 1)\n            }\n            i += 1\n        }\n        return lst3", " \
    \       if (lst.length == 0) return lst\n        var lst1 = lst.sorted\n     \
    \   var lst2 = lst1.reverse\n        var lst3 = ListBuffer[Long]()\n        var\
    \ i = 0\n        while (i < lst1.length) {\n            if (i % 2 == 0) lst3 +=\
    \ lst1(i)\n            else lst3 += lst2(i)\n            i += 1\n        }\n \
    \       return lst3.toList", "        if (lst.isEmpty) return lst\n        var\
    \ sorted = lst.sorted\n        var result = ListBuffer[Long]()\n        var i\
    \ = 0\n        while (sorted.length > 0) {\n            if (i % 2 == 0) {\n  \
    \              result += sorted.head\n                sorted = sorted.tail\n \
    \           } else {\n                result += sorted.last\n                sorted\
    \ = sorted.dropRight(1)\n            }\n            i += 1\n        }\n      \
    \  return result.toList", "        if (lst.isEmpty) return lst\n        var lst2\
    \ = lst.sorted\n        var lst3 = ListBuffer[Long]()\n        var i = 0\n   \
    \     while (i < lst2.length) {\n            if (i % 2 == 0) {\n             \
    \   lst3 += lst2(i)\n            } else {\n                lst3 += lst2(lst2.length\
    \ - 1 - i)\n            }\n            i += 1\n        }\n        return lst3.toList",
  "        // Fill up this function body\n        // 'lst' is a list of integers\n\
    \        // 'return' the list in strange order\n        var lst2 = lst.sorted\n\
    \        var lst3 = List[Long]()\n        var i = 0\n        while (i < lst2.length)\
    \ {\n            if (i % 2 == 0) lst3 = lst3 :+ lst2(i)\n            else lst3\
    \ = lst3 :+ lst2(lst2.length - i - 1)\n            i += 1\n        }\n       \
    \ lst3", "        val lst2 = lst.sorted\n        val lst3 = lst2.reverse\n   \
    \     val lst4 = lst2 ++ lst3\n        val lst5 = lst4.tail.tail\n        val\
    \ lst6 = lst4.head :: lst5\n        val lst7 = lst6.tail.tail\n        val lst8\
    \ = lst6.head :: lst7\n        val lst9 = lst8.tail.tail\n        val lst10 =\
    \ lst8.head :: lst9\n        val lst11 = lst10.tail.tail\n        val lst12 =\
    \ lst10.head :: lst11\n        val lst13 = lst12.tail.tail\n        val lst14\
    \ = lst12.head :: lst13\n        val lst15 = lst14.tail.tail\n        val lst16\
    \ = lst14.head :: lst15\n        val lst17 = lst16.tail.tail\n        val lst18\
    \ = lst16.head :: lst17\n        val lst19 = lst18.tail.tail\n        val lst20\
    \ = lst18.head :: lst19\n        val lst21 = lst20.tail.tail\n        val lst22\
    \ = lst20.head :: lst21\n        val lst23 = lst22.tail.tail\n        val lst24\
    \ = lst22.head :: lst23\n        val lst25 = lst24.tail.tail\n        val lst26\
    \ = lst24.head :: lst25\n        val lst27 = lst26.tail.tail\n        val lst28\
    \ = lst26.head :: lst27\n        val lst29 = lst28.tail.tail\n        val lst30\
    \ = lst28.head :: lst29\n        val lst31 = lst30.tail.tail\n        val lst32\
    \ = lst30.head :: lst31\n        val lst33 = lst32.tail.tail\n        val lst34\
    \ = lst32.head :: lst33\n        val lst35 = lst34.tail.tail\n        val lst36\
    \ = lst34", "        // Fill up this function body\n        // 'lst' is a list\
    \ of integers\n        // 'return' a list of integers in strange order\n     \
    \   var lst2 = lst.sorted\n        var lst3 = ListBuffer[Long]()\n        var\
    \ i = 0\n        while (i < lst2.length) {\n            if (i % 2 == 0) {\n  \
    \              lst3 += lst2(i)\n            } else {\n                lst3 +=\
    \ lst2(lst2.length - 1 - i)\n            }\n            i += 1\n        }\n  \
    \      lst3.toList", "        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n\
    \        var i = 0\n        while (i < lst2.length) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n       \
    \         lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n          \
    \  i += 1\n        }\n        lst3", "        // Fill up this function body\n\
    \        // 'lst' is a list of integers\n        // 'return' a list of integers\
    \ in strange order\n        lst.sortWith(_ < _)", "        if (lst.isEmpty) return\
    \ lst\n        var result = List[Long]()\n        var lst2 = lst.sortWith(_ <\
    \ _)\n        var lst3 = lst.sortWith(_ > _)\n        while (!lst2.isEmpty) {\n\
    \            result = result :+ lst2.head\n            lst2 = lst2.tail\n    \
    \        if (!lst3.isEmpty) {\n                result = result :+ lst3.head\n\
    \                lst3 = lst3.tail\n            }\n        }\n        return result",
  "        // Fill up this function body\n        // 'lst' is a list of integers\n\
    \        // 'return' a list of integers in strange order\n        var lst1 = lst.sortWith(_\
    \ < _)\n        var lst2 = lst.sortWith(_ > _)\n        var lst3 = List[Long]()\n\
    \        var i = 0\n        while (i < lst.length) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 = lst3 :+ lst1(0)\n                lst1 = lst1.drop(1)\n\
    \            } else {\n                lst3 = lst3 :+ lst2(0)\n              \
    \  lst2 = lst2.drop(1)\n            }\n            i += 1\n        }\n       \
    \ lst3", "        // Fill up this function body\n        // 'lst' is a list of\
    \ integers\n        // 'return' a list of integers in strange order\n        var\
    \ lst2 = lst.sorted\n        var lst3 = ListBuffer[Long]()\n        var i = 0\n\
    \        while (i < lst2.length) {\n            if (i % 2 == 0) {\n          \
    \      lst3 += lst2(i)\n            } else {\n                lst3 += lst2(lst2.length\
    \ - 1 - i)\n            }\n            i += 1\n        }\n        return lst3.toList",
  "        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n        var i =\
    \ 0\n        while (i < lst2.length) {\n            if (i % 2 == 0) {\n      \
    \          lst3 = lst3 :+ lst2(i)\n            } else {\n                lst3\
    \ = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n            i += 1\n   \
    \     }\n        lst3", "        val sorted = lst.sorted\n        val min = sorted.head\n\
    \        val max = sorted.last\n        val mid = sorted.slice(1, sorted.length\
    \ - 1)\n        val mid1 = mid.slice(0, mid.length / 2)\n        val mid2 = mid.slice(mid.length\
    \ / 2, mid.length)\n        val mid2Rev = mid2.reverse\n        val result = min\
    \ :: max :: (mid1 ++ mid2Rev)\n        result", "        var lst2 = lst.sorted\n\
    \        var lst3 = List[Long]()\n        var lst4 = List[Long]()\n        var\
    \ lst5 = List[Long]()\n        var lst6 = List[Long]()\n        var lst7 = List[Long]()\n\
    \        var lst8 = List[Long]()\n        var lst9 = List[Long]()\n        var\
    \ lst10 = List[Long]()\n        var lst11 = List[Long]()\n        var lst12 =\
    \ List[Long]()\n        var lst13 = List[Long]()\n        var lst14 = List[Long]()\n\
    \        var lst15 = List[Long]()\n        var lst16 = List[Long]()\n        var\
    \ lst17 = List[Long]()\n        var lst18 = List[Long]()\n        var lst19 =\
    \ List[Long]()\n        var lst20 = List[Long]()\n        var lst21 = List[Long]()\n\
    \        var lst22 = List[Long]()\n        var lst23 = List[Long]()\n        var\
    \ lst24 = List[Long]()\n        var lst25 = List[Long]()\n        var lst26 =\
    \ List[Long]()\n        var lst27 = List[Long]()\n        var lst28 = List[Long]()\n\
    \        var lst29 = List[Long]()\n        var lst30 = List[Long]()\n        var\
    \ lst31 = List[Long]()\n        var lst32 = List[Long]()\n        var lst33 =\
    \ List[Long]()\n        var lst34 = List[Long]()\n        var lst35 = List[Long]()\n\
    \        var lst36 = List[Long]()\n        var lst37 = List[Long]()\n        var\
    \ lst38 = List[Long]()\n        var lst39 = List[Long]()\n        var lst40 =\
    \ List[Long]()\n        var lst41 = List[Long]()\n        var lst42 = List[Long]()\n\
    \        var lst43 = List[Long]()\n        var lst44 = List", "        // Fill\
    \ up this function body\n        // 'lst' is a list of integers\n        // 'return'\
    \ a list of integers in strange order\n        var sorted = lst.sorted\n     \
    \   var result = List[Long]()\n        var i = 0\n        while (i < sorted.length)\
    \ {\n            if (i % 2 == 0) {\n                result = result :+ sorted(i)\n\
    \            } else {\n                result = result :+ sorted(sorted.length\
    \ - 1 - i)\n            }\n            i += 1\n        }\n        result", " \
    \       var lst1 = lst.sorted\n        var lst2 = lst1.reverse\n        var lst3\
    \ = List[Long]()\n        for (i <- 0 until lst1.length) {\n            if (i\
    \ % 2 == 0) lst3 = lst3 :+ lst1(i)\n            else lst3 = lst3 :+ lst2(i)\n\
    \        }\n        lst3", "        // Fill up this function body\n        //\
    \ `lst` is a list of integers\n        // You have to return a list of integers\
    \ in strange order\n        // You can write auxiliary functions\n        // You\
    \ can use standard library functions\n        if (lst.length == 0) {\n       \
    \     return List[Long]()\n        }\n        var lst1 = lst.sorted\n        var\
    \ lst2 = lst1.reverse\n        var lst3 = List[Long]()\n        var i = 0\n  \
    \      while (i < lst1.length) {\n            if (i % 2 == 0) {\n            \
    \    lst3 = lst3 :+ lst1(i)\n            } else {\n                lst3 = lst3\
    \ :+ lst2(i)\n            }\n            i += 1\n        }\n        return lst3",
  "        // Fill up this function body\n        // 'lst' is a list of integers\n\
    \        // 'return' a list of integers in strange order\n        var lst2 = lst.sorted\n\
    \        var lst3 = List[Long]()\n        var i = 0\n        while (i < lst2.length)\
    \ {\n            if (i % 2 == 0) {\n                lst3 = lst3 :+ lst2(i)\n \
    \           } else {\n                lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n\
    \            }\n            i += 1\n        }\n        lst3", "        val sorted\
    \ = lst.sorted\n        var result = List[Long]()\n        var i = 0\n       \
    \ while (i < sorted.length) {\n            if (i % 2 == 0) result = result :+\
    \ sorted(i)\n            else result = sorted(i) +: result\n            i += 1\n\
    \        }\n        result", "        if (lst.length == 0) return lst\n      \
    \  val sorted = lst.sorted\n        val min = sorted.head\n        val max = sorted.last\n\
    \        val minIndex = lst.indexOf(min)\n        val maxIndex = lst.indexOf(max)\n\
    \        val minIndex2 = sorted.indexOf(min)\n        val maxIndex2 = sorted.indexOf(max)\n\
    \        val minIndex3 = lst.indexOf(min)\n        val maxIndex3 = lst.indexOf(max)\n\
    \        val minIndex4 = sorted.indexOf(min)\n        val maxIndex4 = sorted.indexOf(max)\n\
    \        val minIndex5 = lst.indexOf(min)\n        val maxIndex5 = lst.indexOf(max)\n\
    \        val minIndex6 = sorted.indexOf(min)\n        val maxIndex6 = sorted.indexOf(max)\n\
    \        val minIndex7 = lst.indexOf(min)\n        val maxIndex7 = lst.indexOf(max)\n\
    \        val minIndex8 = sorted.indexOf(min)\n        val maxIndex8 = sorted.indexOf(max)\n\
    \        val minIndex9 = lst.indexOf(min)\n        val maxIndex9 = lst.indexOf(max)\n\
    \        val minIndex10 = sorted.indexOf(min)\n        val maxIndex10 = sorted.indexOf(max)\n\
    \        val minIndex11 = lst.indexOf(min)\n        val maxIndex11 = lst.indexOf(max)\n\
    \        val minIndex12 = sorted.indexOf(min)\n        val maxIndex12 = sorted.indexOf(max)\n\
    \        val minIndex13 = lst.indexOf(min)\n        val maxIndex13 = lst.indexOf(max)\n\
    \        val minIndex14 = sorted.indexOf(min)\n        val maxIndex14 = sorted.indexOf(max)\n\
    \        val minIndex15 = lst.indexOf(min)\n        val maxIndex15 = lst.indexOf(max)\n\
    \        val minIndex16 = sorted.indexOf(min)\n        val maxIndex16 = sorted.indexOf(max)\n\
    \        val minIndex17 = lst.", "        var result = List[Long]()\n        var\
    \ lst2 = lst.sortWith(_ < _)\n        var lst3 = lst.sortWith(_ > _)\n       \
    \ var i = 0\n        while (i < lst.length) {\n            if (i % 2 == 0) {\n\
    \                result = result :+ lst2.head\n                lst2 = lst2.tail\n\
    \            } else {\n                result = result :+ lst3.head\n        \
    \        lst3 = lst3.tail\n            }\n            i += 1\n        }\n    \
    \    result", "        // Fill up this function body\n        // `lst` is a list\
    \ of integers\n        // You need to return a list of integers in strange order\n\
    \        // You can create new lists, but don't mutate the input list\n      \
    \  // You can also define auxiliary functions to solve this problem\n        def\
    \ strangeSortListHelper(lst : List[Long], acc : List[Long]) : List[Long] = {\n\
    \            if (lst.isEmpty) acc\n            else {\n                val min\
    \ = lst.min\n                val max = lst.max\n                val lst1 = lst.filter(x\
    \ => x != min && x != max)\n                strangeSortListHelper(lst1, acc :+\
    \ min :+ max)\n            }\n        }\n        strangeSortListHelper(lst, List())",
  "        // Fill up this function body\n        // 'lst' is a list of integers\n\
    \        // 'return' a list of integers in strange order\n        val lst2 = lst.sorted\n\
    \        val lst3 = lst2.reverse\n        val lst4 = lst3.zipWithIndex\n     \
    \   val lst5 = lst4.map(x => (x._1, x._2 % 2))\n        val lst6 = lst5.sortBy(x\
    \ => x._2)\n        val lst7 = lst6.map(x => x._1)\n        lst7", "        //\
    \ Fill up this function body\n        // 'lst' is a list of integers\n       \
    \ // 'return' a list of integers in strange order\n        var lst2 = lst.sorted\n\
    \        var lst3 = List[Long]()\n        var i = 0\n        while (i < lst2.length)\
    \ {\n            if (i % 2 == 0) {\n                lst3 = lst3 :+ lst2(i)\n \
    \           } else {\n                lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n\
    \            }\n            i += 1\n        }\n        lst3", "        if (lst.length\
    \ == 0) return lst\n        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n\
    \        var i = 0\n        while (i < lst2.length) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n       \
    \         lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n          \
    \  i += 1\n        }\n        return lst3", "        // Fill up this function\
    \ body\n        // 'lst' is a list of integers\n        // 'return' a list of\
    \ integers in strange order\n        var lst2 = lst.sorted\n        var lst3 =\
    \ lst2.reverse\n        var lst4 = List[Long]()\n        var lst5 = List[Long]()\n\
    \        var lst6 = List[Long]()\n        var lst7 = List[Long]()\n        var\
    \ lst8 = List[Long]()\n        var lst9 = List[Long]()\n        var lst10 = List[Long]()\n\
    \        var lst11 = List[Long]()\n        var lst12 = List[Long]()\n        var\
    \ lst13 = List[Long]()\n        var lst14 = List[Long]()\n        var lst15 =\
    \ List[Long]()\n        var lst16 = List[Long]()\n        var lst17 = List[Long]()\n\
    \        var lst18 = List[Long]()\n        var lst19 = List[Long]()\n        var\
    \ lst20 = List[Long]()\n        var lst21 = List[Long]()\n        var lst22 =\
    \ List[Long]()\n        var lst23 = List[Long]()\n        var lst24 = List[Long]()\n\
    \        var lst25 = List[Long]()\n        var lst26 = List[Long]()\n        var\
    \ lst27 = List[Long]()\n        var lst28 = List[Long]()\n        var lst29 =\
    \ List[Long]()\n        var lst30 = List[Long]()\n        var lst31 = List[Long]()\n\
    \        var lst32 = List[Long]()\n        var lst33 = List[Long]()\n        var\
    \ lst34 = List[Long]()\n        var lst35 = List[Long]()\n        var lst36 =\
    \ List[Long]()\n        var lst37 = List[Long]()\n        var lst38 = List[Long]()\n\
    \        var lst39 = List[Long]()\n        var lst40 = List[Long]()\n        var\
    \ lst41 = List[Long]", "        // Fill up this function body\n        // You\
    \ can add another function as well, if required\n        var result = List[Long]()\n\
    \        var lst2 = lst.sortWith(_ < _)\n        var lst3 = lst.sortWith(_ > _)\n\
    \        var i = 0\n        while(i < lst.length) {\n            if(i % 2 == 0)\
    \ {\n                result = result :+ lst2(0)\n                lst2 = lst2.drop(1)\n\
    \            } else {\n                result = result :+ lst3(0)\n          \
    \      lst3 = lst3.drop(1)\n            }\n            i += 1\n        }\n   \
    \     result", "        // Fill up this function body\n        // 'lst' is a list\
    \ of integers\n        // 'lst.length' is the length of the list\n        // 'lst(i)'\
    \ is the integer at index 'i'\n        // 'lst.min' is the minimum value in the\
    \ list\n        // 'lst.max' is the maximum value in the list\n        // 'lst.sorted'\
    \ is the sorted list\n        // 'lst.sorted.reverse' is the reverse sorted list\n\
    \        // 'lst.distinct' is the list with duplicates removed\n        // 'lst.sum'\
    \ is the sum of all elements in the list\n        // 'lst.product' is the product\
    \ of all elements in the list\n        // 'lst.head' is the first element of the\
    \ list\n        // 'lst.tail' is the list without the first element\n        //\
    \ 'lst.last' is the last element of the list\n        // 'lst.init' is the list\
    \ without the last element\n        // 'lst.reverse' is the list in reverse order\n\
    \        // 'lst.take(n)' is the first 'n' elements of the list\n        // 'lst.drop(n)'\
    \ is the list without the first 'n' elements\n        // 'lst.splitAt(n)' is a\
    \ pair of lists, the first list has the first 'n' elements\n        // 'lst.indices'\
    \ is a list of all valid indices of the list\n        // 'lst.indices.reverse'\
    \ is a list of all valid indices of the list in reverse order\n        // 'lst.indices.reverse.map(i\
    \ => lst(i))' is the list in reverse order\n        // 'lst.updated(i, x)' is\
    \ the list with element at index 'i' replaced by 'x'\n        // 'lst.zip(lst2)'\
    \ is a list of pairs '(x, y)' where 'x' is from 'lst' and 'y' is from 'lst2'\n\
    \        // 'lst.zipWithIndex' is a list of pairs '(x, i)' where 'x' is from 'lst'\
    \ and 'i' is the index\n        // 'lst.zipWithIndex.max", "        // Fill in\
    \ the code here.\n        // You can add more functions as needed.\n        def\
    \ strangeSortListHelper(lst : List[Long], acc : List[Long]) : List[Long] = {\n\
    \            if (lst.isEmpty) acc\n            else {\n                val min\
    \ = lst.min\n                val max = lst.max\n                val minIndex =\
    \ lst.indexOf(min)\n                val maxIndex = lst.indexOf(max)\n        \
    \        if (minIndex < maxIndex) strangeSortListHelper(lst.slice(minIndex + 1,\
    \ maxIndex) ++ lst.slice(maxIndex + 1, lst.length), acc :+ min :+ max)\n     \
    \           else strangeSortListHelper(lst.slice(maxIndex + 1, minIndex) ++ lst.slice(minIndex\
    \ + 1, lst.length), acc :+ max :+ min)\n            }\n        }\n        strangeSortListHelper(lst,\
    \ List[Long]())", "        var result = List[Long]()\n        var lst2 = lst.sorted\n\
    \        var lst3 = lst2.reverse\n        var lst4 = lst2 ++ lst3\n        var\
    \ lst5 = lst4.distinct\n        var lst6 = lst5.sorted\n        var lst7 = lst6.reverse\n\
    \        var lst8 = lst7.distinct\n        var lst9 = lst8.sorted\n        var\
    \ lst10 = lst9.reverse\n        var lst11 = lst10.distinct\n        var lst12\
    \ = lst11.sorted\n        var lst13 = lst12.reverse\n        var lst14 = lst13.distinct\n\
    \        var lst15 = lst14.sorted\n        var lst16 = lst15.reverse\n       \
    \ var lst17 = lst16.distinct\n        var lst18 = lst17.sorted\n        var lst19\
    \ = lst18.reverse\n        var lst20 = lst19.distinct\n        var lst21 = lst20.sorted\n\
    \        var lst22 = lst21.reverse\n        var lst23 = lst22.distinct\n     \
    \   var lst24 = lst23.sorted\n        var lst25 = lst24.reverse\n        var lst26\
    \ = lst25.distinct\n        var lst27 = lst26.sorted\n        var lst28 = lst27.reverse\n\
    \        var lst29 = lst28.distinct\n        var lst30 = lst29.sorted\n      \
    \  var lst31 = lst30.reverse\n        var lst32 = lst31.distinct\n        var\
    \ lst33 = lst32.sorted\n        var lst34 = lst33.reverse\n        var lst35 =\
    \ lst34.distinct\n        var lst36 = lst35.sorted\n        var lst37 = lst36.reverse\n\
    \        var lst38 = lst37.distinct\n        var lst39 = lst38.sorted\n      \
    \  var lst40 = lst39.reverse\n        var lst41 = l", "        // Fill up this\
    \ function body\n        // 'lst' is a list of integers\n        // 'return' a\
    \ list of integers in strange order\n        var lst2 = lst.sorted\n        var\
    \ lst3 = lst2.reverse\n        var lst4 = List[Long]()\n        var lst5 = List[Long]()\n\
    \        var lst6 = List[Long]()\n        var lst7 = List[Long]()\n        var\
    \ lst8 = List[Long]()\n        var lst9 = List[Long]()\n        var lst10 = List[Long]()\n\
    \        var lst11 = List[Long]()\n        var lst12 = List[Long]()\n        var\
    \ lst13 = List[Long]()\n        var lst14 = List[Long]()\n        var lst15 =\
    \ List[Long]()\n        var lst16 = List[Long]()\n        var lst17 = List[Long]()\n\
    \        var lst18 = List[Long]()\n        var lst19 = List[Long]()\n        var\
    \ lst20 = List[Long]()\n        var lst21 = List[Long]()\n        var lst22 =\
    \ List[Long]()\n        var lst23 = List[Long]()\n        var lst24 = List[Long]()\n\
    \        var lst25 = List[Long]()\n        var lst26 = List[Long]()\n        var\
    \ lst27 = List[Long]()\n        var lst28 = List[Long]()\n        var lst29 =\
    \ List[Long]()\n        var lst30 = List[Long]()\n        var lst31 = List[Long]()\n\
    \        var lst32 = List[Long]()\n        var lst33 = List[Long]()\n        var\
    \ lst34 = List[Long]()\n        var lst35 = List[Long]()\n        var lst36 =\
    \ List[Long]()\n        var lst37 = List[Long]()\n        var lst38 = List[Long]()\n\
    \        var lst39 = List[Long]()\n        var lst40 = List[Long]()\n        var\
    \ lst41 = List[Long]", "        // Fill up this function body\n        // 'lst'\
    \ is a list of integers\n        // 'return' a list of integers in strange order\n\
    \        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n        var i\
    \ = 0\n        while (i < lst2.length) {\n            if (i % 2 == 0) {\n    \
    \            lst3 = lst3 :+ lst2(i)\n            } else {\n                lst3\
    \ = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n            i += 1\n   \
    \     }\n        lst3", "        // Fill up this function body\n        // 'lst'\
    \ is a list of integers\n        // 'return' a list of integers in strange order\n\
    \        var lst1 = lst.sorted\n        var lst2 = lst1.reverse\n        var lst3\
    \ = List[Long]()\n        var lst4 = List[Long]()\n        var lst5 = List[Long]()\n\
    \        var lst6 = List[Long]()\n        var lst7 = List[Long]()\n        var\
    \ lst8 = List[Long]()\n        var lst9 = List[Long]()\n        var lst10 = List[Long]()\n\
    \        var lst11 = List[Long]()\n        var lst12 = List[Long]()\n        var\
    \ lst13 = List[Long]()\n        var lst14 = List[Long]()\n        var lst15 =\
    \ List[Long]()\n        var lst16 = List[Long]()\n        var lst17 = List[Long]()\n\
    \        var lst18 = List[Long]()\n        var lst19 = List[Long]()\n        var\
    \ lst20 = List[Long]()\n        var lst21 = List[Long]()\n        var lst22 =\
    \ List[Long]()\n        var lst23 = List[Long]()\n        var lst24 = List[Long]()\n\
    \        var lst25 = List[Long]()\n        var lst26 = List[Long]()\n        var\
    \ lst27 = List[Long]()\n        var lst28 = List[Long]()\n        var lst29 =\
    \ List[Long]()\n        var lst30 = List[Long]()\n        var lst31 = List[Long]()\n\
    \        var lst32 = List[Long]()\n        var lst33 = List[Long]()\n        var\
    \ lst34 = List[Long]()\n        var lst35 = List[Long]()\n        var lst36 =\
    \ List[Long]()\n        var lst37 = List[Long]()\n        var lst38 = List[Long]()\n\
    \        var lst39 = List[Long]()\n        var lst40 = List[Long]", "        //\
    \ Fill up this function body\n        // 'lst' is a list of integers\n       \
    \ // 'return' a list of integers in strange order\n        var lst2 = lst.sorted\n\
    \        var lst3 = ListBuffer[Long]()\n        var i = 0\n        while (i <\
    \ lst2.length) {\n            if (i % 2 == 0) {\n                lst3 += lst2(i)\n\
    \            } else {\n                lst3 += lst2(lst2.length - 1 - i)\n   \
    \         }\n            i += 1\n        }\n        lst3.toList", "        //\
    \ Fill up this function body\n        // 'lst' is a list of integers\n       \
    \ // 'return' a list of integers in strange order\n        var lst2 = lst.sortWith(_\
    \ < _)\n        var lst3 = List[Long]()\n        var i = 0\n        while (i <\
    \ lst2.length) {\n            if (i % 2 == 0) {\n                lst3 = lst3 :+\
    \ lst2(i)\n            } else {\n                lst3 = lst3 :+ lst2(lst2.length\
    \ - 1 - i)\n            }\n            i += 1\n        }\n        lst3", "   \
    \     // Fill up this function body\n        // 'lst' is a list of integers\n\
    \        // 'return' a list of integers in strange order\n        lst.sorted",
  "        var lst2 = lst.sortWith(_ < _)\n        var lst3 = List[Long]()\n     \
    \   while (lst2.length > 0) {\n            lst3 = lst3 :+ lst2.head\n        \
    \    lst2 = lst2.tail\n            if (lst2.length > 0) {\n                lst3\
    \ = lst3 :+ lst2.last\n                lst2 = lst2.dropRight(1)\n            }\n\
    \        }\n        return lst3", "        var lst2 = lst.sortWith(_ < _)\n  \
    \      var lst3 = List[Long]()\n        while (lst2.length > 0) {\n          \
    \  lst3 = lst3 :+ lst2.head\n            lst2 = lst2.tail\n            if (lst2.length\
    \ > 0) {\n                lst3 = lst3 :+ lst2.last\n                lst2 = lst2.init\n\
    \            }\n        }\n        lst3", "        // Fill up this function body\n\
    \        // 'lst' is a list of integers\n        // 'return' a list of integers\
    \ in strange order\n        var lst2 = lst.sorted\n        var lst3 = ListBuffer[Long]()\n\
    \        var lst4 = ListBuffer[Long]()\n        var lst5 = ListBuffer[Long]()\n\
    \        var lst6 = ListBuffer[Long]()\n        var i = 0\n        while (i <\
    \ lst2.length) {\n            if (i % 2 == 0) {\n                lst3 += lst2(i)\n\
    \            } else {\n                lst4 += lst2(i)\n            }\n      \
    \      i += 1\n        }\n        lst4 = lst4.reverse\n        i = 0\n       \
    \ while (i < lst3.length) {\n            lst5 += lst3(i)\n            if (i <\
    \ lst4.length) {\n                lst5 += lst4(i)\n            }\n           \
    \ i += 1\n        }\n        lst5.toList", "        // Fill up this function body\n\
    \        // 'lst' is a list of integers\n        // 'return' a list of integers\
    \ in strange order\n        lst.sortWith(_ < _)", "        // Fill up this function\
    \ body\n        // 'lst' is a list of integers\n        // 'return' a list of\
    \ integers in strange order\n        var lst2 = lst.sorted\n        var lst3 =\
    \ lst2.reverse\n        var lst4 = List[Long]()\n        var lst5 = List[Long]()\n\
    \        var lst6 = List[Long]()\n        var lst7 = List[Long]()\n        var\
    \ lst8 = List[Long]()\n        var lst9 = List[Long]()\n        var lst10 = List[Long]()\n\
    \        var lst11 = List[Long]()\n        var lst12 = List[Long]()\n        var\
    \ lst13 = List[Long]()\n        var lst14 = List[Long]()\n        var lst15 =\
    \ List[Long]()\n        var lst16 = List[Long]()\n        var lst17 = List[Long]()\n\
    \        var lst18 = List[Long]()\n        var lst19 = List[Long]()\n        var\
    \ lst20 = List[Long]()\n        var lst21 = List[Long]()\n        var lst22 =\
    \ List[Long]()\n        var lst23 = List[Long]()\n        var lst24 = List[Long]()\n\
    \        var lst25 = List[Long]()\n        var lst26 = List[Long]()\n        var\
    \ lst27 = List[Long]()\n        var lst28 = List[Long]()\n        var lst29 =\
    \ List[Long]()\n        var lst30 = List[Long]()\n        var lst31 = List[Long]()\n\
    \        var lst32 = List[Long]()\n        var lst33 = List[Long]()\n        var\
    \ lst34 = List[Long]()\n        var lst35 = List[Long]()\n        var lst36 =\
    \ List[Long]()\n        var lst37 = List[Long]()\n        var lst38 = List[Long]()\n\
    \        var lst39 = List[Long]()\n        var lst40 = List[Long]()\n        var\
    \ lst41 = List[Long]", "        val sorted = lst.sorted\n        val min = sorted.head\n\
    \        val max = sorted.last\n        val mid = sorted.drop(1).dropRight(1)\n\
    \        val minList = min :: mid.reverse\n        val maxList = max :: mid\n\
    \        val minMaxList = minList.zip(maxList)\n        minMaxList.flatMap(x =>\
    \ List(x._1, x._2))", "        // Fill up this function body\n        // 'lst'\
    \ is a list of integers\n        // 'return' a list of integers in strange order\n\
    \        var lst2 = lst.sorted\n        var lst3 = ListBuffer[Long]()\n      \
    \  while (lst2.length > 0) {\n            lst3 += lst2.head\n            lst2\
    \ = lst2.tail\n            if (lst2.length > 0) {\n                lst3 += lst2.last\n\
    \                lst2 = lst2.dropRight(1)\n            }\n        }\n        lst3.toList",
  "        // Fill up this function body\n        // 'lst' is a list of integers\n\
    \        // 'return' a list of integers in strange order\n        var lst2 = lst.sorted\n\
    \        var lst3 = List[Long]()\n        var i = 0\n        while (i < lst2.length)\
    \ {\n            if (i % 2 == 0) {\n                lst3 = lst3 :+ lst2(i)\n \
    \           } else {\n                lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n\
    \            }\n            i += 1\n        }\n        lst3", "        // Fill\
    \ up this function body\n        // 'lst' is a list of integers\n        // 'return'\
    \ a list of integers in strange order\n        var lst2 = lst.sorted\n       \
    \ var lst3 = List[Long]()\n        var lst4 = List[Long]()\n        var lst5 =\
    \ List[Long]()\n        var lst6 = List[Long]()\n        var lst7 = List[Long]()\n\
    \        var lst8 = List[Long]()\n        var lst9 = List[Long]()\n        var\
    \ lst10 = List[Long]()\n        var lst11 = List[Long]()\n        var lst12 =\
    \ List[Long]()\n        var lst13 = List[Long]()\n        var lst14 = List[Long]()\n\
    \        var lst15 = List[Long]()\n        var lst16 = List[Long]()\n        var\
    \ lst17 = List[Long]()\n        var lst18 = List[Long]()\n        var lst19 =\
    \ List[Long]()\n        var lst20 = List[Long]()\n        var lst21 = List[Long]()\n\
    \        var lst22 = List[Long]()\n        var lst23 = List[Long]()\n        var\
    \ lst24 = List[Long]()\n        var lst25 = List[Long]()\n        var lst26 =\
    \ List[Long]()\n        var lst27 = List[Long]()\n        var lst28 = List[Long]()\n\
    \        var lst29 = List[Long]()\n        var lst30 = List[Long]()\n        var\
    \ lst31 = List[Long]()\n        var lst32 = List[Long]()\n        var lst33 =\
    \ List[Long]()\n        var lst34 = List[Long]()\n        var lst35 = List[Long]()\n\
    \        var lst36 = List[Long]()\n        var lst37 = List[Long]()\n        var\
    \ lst38 = List[Long]()\n        var lst39 = List[Long]()\n        var lst40 =\
    \ List[Long]()\n        var lst41 = List[Long]", "        if (lst.length == 0)\
    \ {\n            return lst\n        }\n        var lst2 = lst.sorted\n      \
    \  var lst3 = ListBuffer[Long]()\n        var i = 0\n        while (i < lst2.length)\
    \ {\n            if (i % 2 == 0) {\n                lst3 += lst2(i)\n        \
    \    } else {\n                lst3 += lst2(lst2.length - 1 - i)\n           \
    \ }\n            i += 1\n        }\n        return lst3.toList", "        var\
    \ lst2 = lst.sorted\n        var lst3 = List[Long]()\n        var i = 0\n    \
    \    while (i < lst2.length) {\n            if (i % 2 == 0) {\n              \
    \  lst3 = lst3 :+ lst2(i)\n            } else {\n                lst3 = lst3 :+\
    \ lst2(lst2.length - 1 - i)\n            }\n            i += 1\n        }\n  \
    \      return lst3", "        val sorted = lst.sorted\n        val min = sorted.head\n\
    \        val max = sorted.last\n        val minIndex = lst.indexOf(min)\n    \
    \    val maxIndex = lst.indexOf(max)\n        val minIndexes = lst.zipWithIndex.filter(_._1\
    \ == min).map(_._2)\n        val maxIndexes = lst.zipWithIndex.filter(_._1 ==\
    \ max).map(_._2)\n        val minIndexesSorted = minIndexes.sorted\n        val\
    \ maxIndexesSorted = maxIndexes.sorted\n        val minIndexesSortedReversed =\
    \ minIndexesSorted.reverse\n        val maxIndexesSortedReversed = maxIndexesSorted.reverse\n\
    \        val minIndexesSortedReversedTail = minIndexesSortedReversed.tail\n  \
    \      val maxIndexesSortedReversedTail = maxIndexesSortedReversed.tail\n    \
    \    val minIndexesSortedReversedTailTail = minIndexesSortedReversedTail.tail\n\
    \        val maxIndexesSortedReversedTailTail = maxIndexesSortedReversedTail.tail\n\
    \        val minIndexesSortedReversedTailTailTail = minIndexesSortedReversedTailTail.tail\n\
    \        val maxIndexesSortedReversedTailTailTail = maxIndexesSortedReversedTailTail.tail\n\
    \        val minIndexesSortedReversedTailTailTailTail = minIndexesSortedReversedTailTailTail.tail\n\
    \        val maxIndexesSortedReversedTailTailTailTail = maxIndexesSortedReversedTailTailTail.tail\n\
    \        val minIndexesSortedReversedTailTailTailTailTail = minIndexesSortedReversedTailTailTailTail.tail\n\
    \        val maxIndexesSortedReversedTailTailTailTailTail = maxIndexesSortedReversedTailTailTailTail.tail\n\
    \        val minIndexesSortedReversedTailTailTailT", "        if (lst.isEmpty)\
    \ return lst\n        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n\
    \        while (!lst2.isEmpty) {\n            lst3 = lst3 :+ lst2.head\n     \
    \       lst2 = lst2.tail\n            if (!lst2.isEmpty) {\n                lst3\
    \ = lst3 :+ lst2.last\n                lst2 = lst2.init\n            }\n     \
    \   }\n        return lst3", "        def strangeSortListHelper(lst : List[Long],\
    \ acc : List[Long]) : List[Long] = {\n            if (lst.isEmpty) acc\n     \
    \       else {\n                val min = lst.min\n                val max = lst.max\n\
    \                val lst1 = lst.filter(x => x != min && x != max)\n          \
    \      strangeSortListHelper(lst1, acc :+ min :+ max)\n            }\n       \
    \ }\n        strangeSortListHelper(lst, List[Long]())", "        var result =\
    \ List[Long]()\n        var lst2 = lst.sorted\n        var i = 0\n        while\
    \ (i < lst2.length) {\n            if (i % 2 == 0) {\n                result =\
    \ result :+ lst2(i)\n            } else {\n                result = result :+\
    \ lst2(lst2.length - 1 - i)\n            }\n            i += 1\n        }\n  \
    \      return result", "        val sorted = lst.sorted\n        val min = sorted.head\n\
    \        val max = sorted.last\n        val mid = sorted.slice(1, sorted.length\
    \ - 1)\n        val midSorted = mid.sorted.reverse\n        val result = ListBuffer[Long]()\n\
    \        result += min\n        for (i <- 0 until midSorted.length) {\n      \
    \      if (i % 2 == 0) result += midSorted(i)\n            else result.insert(0,\
    \ midSorted(i))\n        }\n        result += max\n        result.toList", " \
    \       // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var lst1 = lst.sorted\n        var lst2 = lst1.reverse\n\
    \        var lst3 = ListBuffer[Long]()\n        var i = 0\n        while (i <\
    \ lst1.length) {\n            if (i % 2 == 0) {\n                lst3 += lst1(i)\n\
    \            } else {\n                lst3 += lst2(i)\n            }\n      \
    \      i += 1\n        }\n        return lst3.toList", "        // Fill up this\
    \ function body\n        // 'lst' is a list of integers\n        // 'result' is\
    \ a list of integers\n        var result : List[Long] = List[Long]()\n       \
    \ // Write your code here\n        var lst2 = lst.sorted\n        var lst3 = lst2.reverse\n\
    \        var lst4 = lst2 ++ lst3\n        var lst5 = lst4.distinct\n        var\
    \ lst6 = lst5.sorted\n        var lst7 = lst6.reverse\n        var lst8 = lst6\
    \ ++ lst7\n        var lst9 = lst8.distinct\n        var lst10 = lst9.sorted\n\
    \        var lst11 = lst10.reverse\n        var lst12 = lst10 ++ lst11\n     \
    \   var lst13 = lst12.distinct\n        var lst14 = lst13.sorted\n        var\
    \ lst15 = lst14.reverse\n        var lst16 = lst14 ++ lst15\n        var lst17\
    \ = lst16.distinct\n        var lst18 = lst17.sorted\n        var lst19 = lst18.reverse\n\
    \        var lst20 = lst18 ++ lst19\n        var lst21 = lst20.distinct\n    \
    \    var lst22 = lst21.sorted\n        var lst23 = lst22.reverse\n        var\
    \ lst24 = lst22 ++ lst23\n        var lst25 = lst24.distinct\n        var lst26\
    \ = lst25.sorted\n        var lst27 = lst26.reverse\n        var lst28 = lst26\
    \ ++ lst27\n        var lst29 = lst28.distinct\n        var lst30 = lst29.sorted\n\
    \        var lst31 = lst30.reverse\n        var lst32 = lst30 ++ lst31\n     \
    \   var lst33 = lst32.distinct\n        var lst34 = lst33.sorted\n        var\
    \ lst35 = lst34.reverse\n        var lst36 = lst34 ++ lst35\n        var lst",
  "        // Fill up this function body\n        // 'lst' is a list of integers\n\
    \        // 'lst.sorted' will give you a sorted list of integers\n        // 'lst.min'\
    \ will give you minimum element of list\n        // 'lst.max' will give you maximum\
    \ element of list\n        // 'lst.filter' will give you a new list after removing\
    \ an element\n        // You can also use list functions like '::', ':::', '++'\
    \ etc.\n        // You can also create new lists\n        var lst1 = lst.sorted\n\
    \        var lst2 = List[Long]()\n        var lst3 = List[Long]()\n        var\
    \ lst4 = List[Long]()\n        var lst5 = List[Long]()\n        var lst6 = List[Long]()\n\
    \        var lst7 = List[Long]()\n        var lst8 = List[Long]()\n        var\
    \ lst9 = List[Long]()\n        var lst10 = List[Long]()\n        var lst11 = List[Long]()\n\
    \        var lst12 = List[Long]()\n        var lst13 = List[Long]()\n        var\
    \ lst14 = List[Long]()\n        var lst15 = List[Long]()\n        var lst16 =\
    \ List[Long]()\n        var lst17 = List[Long]()\n        var lst18 = List[Long]()\n\
    \        var lst19 = List[Long]()\n        var lst20 = List[Long]()\n        var\
    \ lst21 = List[Long]()\n        var lst22 = List[Long]()\n        var lst23 =\
    \ List[Long]()\n        var lst24 = List[Long]()\n        var lst25 = List[Long]()\n\
    \        var lst26 = List[Long]()\n        var lst27 = List[Long]()\n        var\
    \ lst28 = List[Long]()\n        var lst29 = List[Long]()\n        var lst30 =\
    \ List[Long]()\n        var lst31 = List[Long]()\n        var lst32 = List[Long]()\n\
    \        var lst33 = List", "        if (lst.isEmpty) return lst\n        val\
    \ sorted = lst.sorted\n        val min = sorted.head\n        val max = sorted.last\n\
    \        val mid = sorted.slice(1, sorted.length - 1)\n        val minMax = (min\
    \ :: max :: Nil).sorted\n        val minMaxMid = minMax ++ mid\n        val minMaxMidSorted\
    \ = minMaxMid.sorted\n        val minMaxMidSortedReversed = minMaxMidSorted.reverse\n\
    \        val minMaxMidSortedReversedSorted = minMaxMidSortedReversed.sorted\n\
    \        val minMaxMidSortedReversedSortedReversed = minMaxMidSortedReversedSorted.reverse\n\
    \        val minMaxMidSortedReversedSortedReversedSorted = minMaxMidSortedReversedSortedReversed.sorted\n\
    \        val minMaxMidSortedReversedSortedReversedSortedReversed = minMaxMidSortedReversedSortedReversedSorted.reverse\n\
    \        val minMaxMidSortedReversedSortedReversedSortedReversedSorted = minMaxMidSortedReversedSortedReversedSortedReversed.sorted\n\
    \        val minMaxMidSortedReversedSortedReversedSortedReversedSortedReversed\
    \ = minMaxMidSortedReversedSortedReversedSortedReversedSorted.reverse\n      \
    \  val minMaxMidSortedReversedSortedReversedSortedReversedSortedReversedSorted\
    \ = minMaxMidSortedReversedSortedReversedSortedReversedSortedReversed.sorted\n\
    \        val minMaxMidSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed\
    \ = minMaxMidSortedReversedSortedReversedSortedReversedSortedReversedSorted.reverse\n\
    \        val minMaxMidSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSorted\
    \ = minMaxMidSortedReversedSortedReversedSortedReversedSortedReversedSortedRe",
  "        if (lst.length == 0) return lst\n        var result = List[Long]()\n  \
    \      var lst2 = lst.sorted\n        var i = 0\n        while (i < lst2.length)\
    \ {\n            if (i % 2 == 0) result = result :+ lst2(i)\n            else\
    \ result = result :+ lst2(lst2.length - 1 - i)\n            i += 1\n        }\n\
    \        return result", "        // Fill up this function body\n        // 'lst'\
    \ is a list of integers\n        // 'lst' has to be returned in the strange order\n\
    \        // If the list is empty, return empty list\n        if (lst.isEmpty)\
    \ lst\n        else {\n            val sorted = lst.sorted\n            val (min,\
    \ max) = (sorted.head, sorted.last)\n            val (minLst, maxLst) = (sorted.tail.filter(_\
    \ != max), sorted.init.filter(_ != min))\n            val (minLstSorted, maxLstSorted)\
    \ = (minLst.sorted, maxLst.sorted)\n            val (minLstSortedReversed, maxLstSortedReversed)\
    \ = (minLstSorted.reverse, maxLstSorted.reverse)\n            val (minLstSortedReversedPadded,\
    \ maxLstSortedReversedPadded) = (minLstSortedReversed ++ List(max), maxLstSortedReversed\
    \ ++ List(min))\n            val (minLstSortedReversedPaddedZipped, maxLstSortedReversedPaddedZipped)\
    \ = (minLstSortedReversedPadded.zip(maxLstSortedReversedPadded), maxLstSortedReversedPadded.zip(minLstSortedReversedPadded))\n\
    \            val (minLstSortedReversedPaddedZippedFlattened, maxLstSortedReversedPaddedZippedFlattened)\
    \ = (minLstSortedReversedPaddedZipped.flatten, maxLstSortedReversedPaddedZipped.flatten)\n\
    \            val (minLstSortedReversedPaddedZippedFlattenedSorted, maxLstSortedReversedPaddedZippedFlattenedSorted)\
    \ = (minLstSortedReversedPaddedZippedFlattened.sorted, maxLstSortedReversedPaddedZippedFlattened.sorted)\n\
    \            val (minLstSortedReversedPaddedZippedFlattenedSortedReversed, maxLstSortedRe",
  "        if (lst.length == 0) return List[Long]()\n        var lst2 = lst.sorted\n\
    \        var lst3 = List[Long]()\n        var i = 0\n        while (i < lst2.length)\
    \ {\n            if (i % 2 == 0) lst3 = lst3 :+ lst2(i)\n            else lst3\
    \ = lst3 :+ lst2(lst2.length - 1 - i)\n            i += 1\n        }\n       \
    \ return lst3", "        // Fill up this function body\n        // 'lst' is a\
    \ list of integers\n        // 'return' a list of integers in strange order\n\
    \        lst.sortWith(_ < _)", "        var lst2 = lst.sorted\n        var lst3\
    \ = List[Long]()\n        var i = 0\n        while (i < lst2.length) {\n     \
    \       if (i % 2 == 0) lst3 = lst3 :+ lst2(i)\n            else lst3 = lst3 :+\
    \ lst2(lst2.length - i - 1)\n            i += 1\n        }\n        lst3", " \
    \       // Fill up this function body\n        // 'lst' is a list of integers\n\
    \        // 'return' a list of integers in strange order\n        var lst2 = lst.sortWith(_\
    \ < _)\n        var lst3 = lst2.sortWith(_ > _)\n        var lst4 = lst3.sortWith(_\
    \ < _)\n        var lst5 = lst4.sortWith(_ > _)\n        var lst6 = lst5.sortWith(_\
    \ < _)\n        var lst7 = lst6.sortWith(_ > _)\n        var lst8 = lst7.sortWith(_\
    \ < _)\n        var lst9 = lst8.sortWith(_ > _)\n        var lst10 = lst9.sortWith(_\
    \ < _)\n        var lst11 = lst10.sortWith(_ > _)\n        var lst12 = lst11.sortWith(_\
    \ < _)\n        var lst13 = lst12.sortWith(_ > _)\n        var lst14 = lst13.sortWith(_\
    \ < _)\n        var lst15 = lst14.sortWith(_ > _)\n        var lst16 = lst15.sortWith(_\
    \ < _)\n        var lst17 = lst16.sortWith(_ > _)\n        var lst18 = lst17.sortWith(_\
    \ < _)\n        var lst19 = lst18.sortWith(_ > _)\n        var lst20 = lst19.sortWith(_\
    \ < _)\n        var lst21 = lst20.sortWith(_ > _)\n        var lst22 = lst21.sortWith(_\
    \ < _)\n        var lst23 = lst22.sortWith(_ > _)\n        var lst24 = lst23.sortWith(_\
    \ < _)\n        var lst25 = lst24.sortWith(_ > _)\n        var lst26 = lst25.sortWith(_\
    \ < _)\n        var lst27 = lst26.sortWith(_ > _)\n        var lst28 = lst27.sortWith(_\
    \ < _)\n        var lst29 = lst28.sortWith(_ > _)\n        var l", "        var\
    \ lst2 = lst.sorted\n        var lst3 = List[Long]()\n        var lst4 = List[Long]()\n\
    \        var lst5 = List[Long]()\n        var lst6 = List[Long]()\n        var\
    \ lst7 = List[Long]()\n        var lst8 = List[Long]()\n        var lst9 = List[Long]()\n\
    \        var lst10 = List[Long]()\n        var lst11 = List[Long]()\n        var\
    \ lst12 = List[Long]()\n        var lst13 = List[Long]()\n        var lst14 =\
    \ List[Long]()\n        var lst15 = List[Long]()\n        var lst16 = List[Long]()\n\
    \        var lst17 = List[Long]()\n        var lst18 = List[Long]()\n        var\
    \ lst19 = List[Long]()\n        var lst20 = List[Long]()\n        var lst21 =\
    \ List[Long]()\n        var lst22 = List[Long]()\n        var lst23 = List[Long]()\n\
    \        var lst24 = List[Long]()\n        var lst25 = List[Long]()\n        var\
    \ lst26 = List[Long]()\n        var lst27 = List[Long]()\n        var lst28 =\
    \ List[Long]()\n        var lst29 = List[Long]()\n        var lst30 = List[Long]()\n\
    \        var lst31 = List[Long]()\n        var lst32 = List[Long]()\n        var\
    \ lst33 = List[Long]()\n        var lst34 = List[Long]()\n        var lst35 =\
    \ List[Long]()\n        var lst36 = List[Long]()\n        var lst37 = List[Long]()\n\
    \        var lst38 = List[Long]()\n        var lst39 = List[Long]()\n        var\
    \ lst40 = List[Long]()\n        var lst41 = List[Long]()\n        var lst42 =\
    \ List[Long]()\n        var lst43 = List[Long]()\n        var lst44 = List", " \
    \       // Fill in the code here.\n        // You can add helper functions as\
    \ needed.\n        def strangeSortListHelper(lst : List[Long], acc : List[Long])\
    \ : List[Long] = {\n            if (lst.isEmpty) acc\n            else {\n   \
    \             val min = lst.min\n                val max = lst.max\n         \
    \       val minIndex = lst.indexOf(min)\n                val maxIndex = lst.indexOf(max)\n\
    \                val newLst = lst.patch(minIndex, Nil, 1).patch(maxIndex - 1,\
    \ Nil, 1)\n                strangeSortListHelper(newLst, acc :+ min :+ max)\n\
    \            }\n        }\n        strangeSortListHelper(lst, List[Long]())",
  "        // Fill up this function body\n        // 'lst' is a list of integers\n\
    \        // 'return' a list of integers in strange order\n        if (lst.isEmpty)\
    \ return lst\n        var lst2 = lst.sorted\n        var lst3 = ListBuffer[Long]()\n\
    \        var i = 0\n        var j = lst2.length - 1\n        while (i <= j) {\n\
    \            if (i == j) {\n                lst3 += lst2(i)\n                i\
    \ += 1\n            } else {\n                lst3 += lst2(i)\n              \
    \  lst3 += lst2(j)\n                i += 1\n                j -= 1\n         \
    \   }\n        }\n        return lst3.toList", "        // Fill up this function\
    \ body\n        // 'lst' is a list of integers\n        // 'return' a list of\
    \ integers in strange order\n        var lst2 = lst.sorted\n        var lst3 =\
    \ List[Long]()\n        var i = 0\n        while (i < lst2.length) {\n       \
    \     if (i % 2 == 0) {\n                lst3 = lst3 :+ lst2(i)\n            }\
    \ else {\n                lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n         \
    \   }\n            i += 1\n        }\n        lst3", "        // Fill up this\
    \ function body\n        // 'lst' is a list of integers\n        // 'lst' has\
    \ to be sorted in strange order\n        // and returned\n        lst.sortWith((x,\
    \ y) => x < y)", "        // Fill up this function body\n        // 'lst' is a\
    \ list of integers\n        // 'return' a list of integers in strange order\n\
    \        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n        var i\
    \ = 0\n        while (i < lst2.length) {\n            if (i % 2 == 0) {\n    \
    \            lst3 = lst3 :+ lst2(i)\n            } else {\n                lst3\
    \ = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n            i += 1\n   \
    \     }\n        lst3", "        // Fill up this function body\n        // 'lst'\
    \ is a list of integers\n        // 'result' is a list of integers\n        var\
    \ result : List[Long] = List[Long]()\n        var lst2 = lst.sortWith(_ < _)\n\
    \        var lst3 = lst.sortWith(_ > _)\n        var i = 0\n        while (i <\
    \ lst.length) {\n            if (i % 2 == 0) {\n                result = result\
    \ :+ lst2(0)\n                lst2 = lst2.tail\n            } else {\n       \
    \         result = result :+ lst3(0)\n                lst3 = lst3.tail\n     \
    \       }\n            i += 1\n        }\n        result", "        // Fill in\
    \ the code here.\n        val lst2 = lst.sortWith(_ < _)\n        val lst3 = lst.sortWith(_\
    \ > _)\n        val lst4 = lst2.zip(lst3)\n        val lst5 = lst4.flatMap(x =>\
    \ List(x._1, x._2))\n        val lst6 = lst5.dropRight(1)\n        lst6", "  \
    \      var lst2 = lst.sorted\n        var lst3 = List[Long]()\n        var i =\
    \ 0\n        while (i < lst2.length) {\n            if (i % 2 == 0) {\n      \
    \          lst3 = lst3 :+ lst2(i)\n            } else {\n                lst3\
    \ = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n            i += 1\n   \
    \     }\n        return lst3", "        var lst2 = lst.sorted\n        var lst3\
    \ = List[Long]()\n        var i = 0\n        while (i < lst2.length) {\n     \
    \       if (i % 2 == 0) {\n                lst3 = lst3 :+ lst2(i)\n          \
    \  } else {\n                lst3 = lst3 :+ lst2(lst2.length - i / 2 - 1)\n  \
    \          }\n            i += 1\n        }\n        lst3", "        val sorted\
    \ = lst.sorted\n        val min = sorted.head\n        val max = sorted.last\n\
    \        val minIndex = lst.indexOf(min)\n        val maxIndex = lst.indexOf(max)\n\
    \        val minIndex2 = lst.lastIndexOf(min)\n        val maxIndex2 = lst.lastIndexOf(max)\n\
    \        val minIndex3 = if (minIndex == minIndex2) -1 else minIndex2\n      \
    \  val maxIndex3 = if (maxIndex == maxIndex2) -1 else maxIndex2\n        val minIndex4\
    \ = if (minIndex3 == -1) minIndex else minIndex3\n        val maxIndex4 = if (maxIndex3\
    \ == -1) maxIndex else maxIndex3\n        val minIndex5 = if (minIndex4 == maxIndex4)\
    \ minIndex else minIndex4\n        val maxIndex5 = if (minIndex4 == maxIndex4)\
    \ maxIndex2 else maxIndex4\n        val minIndex6 = if (minIndex5 == maxIndex5)\
    \ minIndex2 else minIndex5\n        val maxIndex6 = if (minIndex5 == maxIndex5)\
    \ maxIndex3 else maxIndex5\n        val minIndex7 = if (minIndex6 == maxIndex6)\
    \ minIndex3 else minIndex6\n        val maxIndex7 = if (minIndex6 == maxIndex6)\
    \ maxIndex4 else maxIndex6\n        val minIndex8 = if (minIndex7 == maxIndex7)\
    \ minIndex4 else minIndex7\n        val maxIndex8 = if (minIndex7 == maxIndex7)\
    \ maxIndex5 else maxIndex7\n        val minIndex9 = if (minIndex8 == maxIndex8)\
    \ minIndex5 else minIndex8\n        val maxIndex9 = if (minIndex8 == maxIndex8)\
    \ maxIndex6 else maxIndex8\n        val minIndex10 = if (minIndex9 == maxIndex9)\
    \ minIndex6 else minIndex9\n        val maxIndex10 = if (minIndex9 == maxIndex9)\
    \ maxIndex7 else maxIndex9\n        val minIndex11 = if (minIndex10 == maxIndex10)\
    \ minIndex7 else minIndex10\n        val maxIndex11 = if (minIndex10 == maxIndex10)\
    \ maxIndex8 else maxIndex10\n        val", "        // Fill up this function body\n\
    \        // 'lst' is a list of integers\n        // 'lst' is not empty\n     \
    \   // 'lst' is sorted in ascending order\n        // Return the list in strange\
    \ order\n        var lst1 = lst.sorted\n        var lst2 = ListBuffer[Long]()\n\
    \        var lst3 = ListBuffer[Long]()\n        var lst4 = ListBuffer[Long]()\n\
    \        var lst5 = ListBuffer[Long]()\n        var lst6 = ListBuffer[Long]()\n\
    \        var lst7 = ListBuffer[Long]()\n        var lst8 = ListBuffer[Long]()\n\
    \        var lst9 = ListBuffer[Long]()\n        var lst10 = ListBuffer[Long]()\n\
    \        var lst11 = ListBuffer[Long]()\n        var lst12 = ListBuffer[Long]()\n\
    \        var lst13 = ListBuffer[Long]()\n        var lst14 = ListBuffer[Long]()\n\
    \        var lst15 = ListBuffer[Long]()\n        var lst16 = ListBuffer[Long]()\n\
    \        var lst17 = ListBuffer[Long]()\n        var lst18 = ListBuffer[Long]()\n\
    \        var lst19 = ListBuffer[Long]()\n        var lst20 = ListBuffer[Long]()\n\
    \        var lst21 = ListBuffer[Long]()\n        var lst22 = ListBuffer[Long]()\n\
    \        var lst23 = ListBuffer[Long]()\n        var lst24 = ListBuffer[Long]()\n\
    \        var lst25 = ListBuffer[Long]()\n        var lst26 = ListBuffer[Long]()\n\
    \        var lst27 = ListBuffer[Long]()\n        var lst28 = ListBuffer[Long]()\n\
    \        var lst29 = ListBuffer[Long]()\n        var lst30 = ListBuffer[Long]()\n\
    \        var lst31 = ListBuffer[Long]()\n        var lst32 = ListBuffer[Long]()\n\
    \        var lst33 = ListBuffer[Long]()\n        var lst34 = ListBuffer[Long]()\n\
    \        var lst35 = ListBuffer[Long]()\n        var lst36 =", "        if (lst.isEmpty)\
    \ return lst\n        var result = new ListBuffer[Long]\n        var remaining\
    \ = lst.sortWith(_ < _)\n        while (!remaining.isEmpty) {\n            result\
    \ += remaining.head\n            remaining = remaining.tail\n            if (!remaining.isEmpty)\
    \ {\n                result += remaining.last\n                remaining = remaining.dropRight(1)\n\
    \            }\n        }\n        return result.toList", "        // Fill up\
    \ this function body\n        // `lst` is a list of integers\n        // You have\
    \ to return a list of integers in strange order\n        // You can create new\
    \ lists, mutate existing lists\n        // You can use functions we have already\
    \ written\n        // You can use functions from Scala standard library\n    \
    \    // You can write new functions\n        // You can test your functions by\
    \ executing `bin/repl.sh`\n        // Your code will not be tested, only type\
    \ checked\n        // You can use any function from Scala standard library\n \
    \       // You can use any function we have already written\n        // You can\
    \ write new functions\n        // You can test your functions by executing `bin/repl.sh`\n\
    \        // Your code will not be tested, only type checked\n        lst", " \
    \       if (lst.isEmpty) return lst\n        val sorted = lst.sorted\n       \
    \ val min = sorted.head\n        val max = sorted.last\n        val minIndex =\
    \ lst.indexOf(min)\n        val maxIndex = lst.indexOf(max)\n        val newLst\
    \ = lst.updated(minIndex, max).updated(maxIndex, min)\n        List(min) ::: strangeSortList(newLst.filter(x\
    \ => x != min && x != max))", "        // Fill up this function body\n       \
    \ // 'lst' is a list of integers\n        // 'lst' has to be returned in a strange\
    \ order\n        // Example:\n        // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n        // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n        // >>> strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong)))\n        // (List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))\n        // >>> strangeSortList((List[Long]()))\n   \
    \     // (List[Long]())\n        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n\
    \        var i = 0\n        while (i < lst2.length) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n       \
    \         lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n          \
    \  i += 1\n        }\n        lst3", "        var lst2 = lst.sorted\n        var\
    \ lst3 = List[Long]()\n        while (lst2.length > 0) {\n            lst3 = lst3\
    \ :+ lst2.head\n            lst2 = lst2.tail\n            if (lst2.length > 0)\
    \ {\n                lst3 = lst3 :+ lst2.last\n                lst2 = lst2.init\n\
    \            }\n        }\n        lst3", "        def strangeSortListHelper(lst\
    \ : List[Long], acc : List[Long]) : List[Long] = {\n            if (lst.isEmpty)\
    \ acc\n            else {\n                val min = lst.min\n               \
    \ val max = lst.max\n                val minIndex = lst.indexOf(min)\n       \
    \         val maxIndex = lst.indexOf(max)\n                if (minIndex < maxIndex)\
    \ strangeSortListHelper(lst.slice(1, maxIndex) ++ lst.slice(maxIndex + 1, lst.length),\
    \ acc :+ min :+ max)\n                else strangeSortListHelper(lst.slice(1,\
    \ minIndex) ++ lst.slice(minIndex + 1, lst.length), acc :+ max :+ min)\n     \
    \       }\n        }\n        strangeSortListHelper(lst, List())", "        //\
    \ Fill in the code here\n        return lst", "        // Fill up this function\
    \ body\n        // 'lst' is a list of integers\n        // 'return' a list of\
    \ integers in strange order\n        var lst2 = lst.sorted\n        var lst3 =\
    \ ListBuffer[Long]()\n        var i = 0\n        while (i < lst2.length) {\n \
    \           if (i % 2 == 0) lst3 += lst2(i)\n            else lst3 += lst2(lst2.length\
    \ - 1 - i)\n            i += 1\n        }\n        lst3.toList", "        // Fill\
    \ up this function body\n        // 'lst' is a list of integers\n        // 'lst'\
    \ has to be returned in strange order\n        // Example:\n        // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n        // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n        lst", "        val sorted = lst.sorted\n   \
    \     val result = new ListBuffer[Long]\n        var i = 0\n        while (i <\
    \ sorted.length) {\n            if (i % 2 == 0) {\n                result += sorted(i)\n\
    \            } else {\n                result += sorted(sorted.length - 1 - i)\n\
    \            }\n            i += 1\n        }\n        result.toList", "     \
    \   // Fill up this function body\n        // 'lst' is a list of integers\n  \
    \      // 'return' a list of integers in strange order\n        var lst2 = lst.sorted\n\
    \        var lst3 = ListBuffer[Long]()\n        var i = 0\n        while (i <\
    \ lst2.length) {\n            if (i % 2 == 0) {\n                lst3 += lst2(i)\n\
    \            } else {\n                lst3 += lst2(lst2.length - 1 - i)\n   \
    \         }\n            i += 1\n        }\n        lst3.toList", "        if\
    \ (lst.isEmpty) return lst\n        var lst2 = lst.sorted\n        var lst3 =\
    \ ListBuffer[Long]()\n        var i = 0\n        while (i < lst2.length) {\n \
    \           if (i % 2 == 0) lst3 += lst2(i)\n            else lst3 += lst2(lst2.length\
    \ - 1 - i)\n            i += 1\n        }\n        return lst3.toList", "    \
    \    val sorted = lst.sorted\n        val min = sorted.head\n        val max =\
    \ sorted.last\n        val minIndex = lst.indexOf(min)\n        val maxIndex =\
    \ lst.indexOf(max)\n        val lst1 = lst.take(minIndex) ++ lst.drop(minIndex\
    \ + 1)\n        val lst2 = lst1.take(maxIndex - 1) ++ lst1.drop(maxIndex)\n  \
    \      val lst3 = lst2.take(minIndex) ++ List(max) ++ lst2.drop(minIndex)\n  \
    \      val lst4 = lst3.take(maxIndex - 1) ++ List(min) ++ lst3.drop(maxIndex -\
    \ 1)\n        val lst5 = lst4.take(minIndex) ++ lst4.drop(minIndex + 1)\n    \
    \    val lst6 = lst5.take(maxIndex - 2) ++ lst5.drop(maxIndex - 1)\n        val\
    \ lst7 = lst6.take(minIndex) ++ List(max) ++ lst6.drop(minIndex)\n        val\
    \ lst8 = lst7.take(maxIndex - 2) ++ List(min) ++ lst7.drop(maxIndex - 2)\n   \
    \     val lst9 = lst8.take(minIndex) ++ lst8.drop(minIndex + 1)\n        val lst10\
    \ = lst9.take(maxIndex - 3) ++ lst9.drop(maxIndex - 2)\n        val lst11 = lst10.take(minIndex)\
    \ ++ List(max) ++ lst10.drop(minIndex)\n        val lst12 = lst11.take(maxIndex\
    \ - 3) ++ List(min) ++ lst11.drop(maxIndex - 3)\n        val lst13 = lst12.take(minIndex)\
    \ ++ lst12.drop(minIndex + 1)\n        val lst14 = lst13.take(maxIndex - 4) ++\
    \ lst13.drop(maxIndex - 3)\n        val lst15 = lst14.take(minIndex) ++ List(max)\
    \ ++ lst14.drop(minIndex)\n", "        // Fill up this function body\n       \
    \ // 'lst' is a list of integers\n        // 'return' a list of integers in strange\
    \ order\n        var lst2 = lst.sortWith(_ < _)\n        var lst3 = lst2.sortWith(_\
    \ > _)\n        var lst4 = List[Long]()\n        var i = 0\n        while (i <\
    \ lst2.length) {\n            lst4 = lst4 :+ lst2(i)\n            lst4 = lst4\
    \ :+ lst3(i)\n            i += 1\n        }\n        return lst4", "        if\
    \ (lst.isEmpty) return lst\n        var sorted = lst.sorted\n        var result\
    \ = ListBuffer[Long]()\n        var i = 0\n        while (i < sorted.length) {\n\
    \            if (i % 2 == 0) {\n                result += sorted(i)\n        \
    \    } else {\n                result += sorted(sorted.length - 1 - i)\n     \
    \       }\n            i += 1\n        }\n        return result.toList", "   \
    \     val sorted = lst.sorted\n        val result = new ListBuffer[Long]\n   \
    \     var i = 0\n        var j = sorted.length - 1\n        while (i <= j) {\n\
    \            result += sorted(i)\n            if (i != j) result += sorted(j)\n\
    \            i += 1\n            j -= 1\n        }\n        result.toList", " \
    \       // Fill up this function body\n        // 'lst' is a list of integers\n\
    \        // 'return' the list in strange order\n        var l = lst.sorted\n \
    \       var r = List[Long]()\n        var i = 0\n        while (i < l.length)\
    \ {\n            if (i % 2 == 0) {\n                r = r :+ l(i)\n          \
    \  } else {\n                r = r :+ l(l.length - i / 2 - 1)\n            }\n\
    \            i += 1\n        }\n        return r", "        // Fill in the code\
    \ here.\n        var lst1 = lst.sorted\n        var lst2 = lst1.reverse\n    \
    \    var lst3 = List[Long]()\n        var i = 0\n        while (i < lst1.length)\
    \ {\n            if (i % 2 == 0) {\n                lst3 = lst3 :+ lst1(i)\n \
    \           } else {\n                lst3 = lst3 :+ lst2(i)\n            }\n\
    \            i += 1\n        }\n        return lst3", "        var lst2 = lst.sorted\n\
    \        var lst3 = List[Long]()\n        var i = 0\n        while (i < lst2.length)\
    \ {\n            if (i % 2 == 0) {\n                lst3 = lst3 :+ lst2(i)\n \
    \           } else {\n                lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n\
    \            }\n            i += 1\n        }\n        lst3", "        // Fill\
    \ up this function body\n        // 'lst' is the list of integers\n        //\
    \ Return the list in strange order\n        var lst1 = lst.sorted\n        var\
    \ lst2 = lst1.reverse\n        var lst3 = List[Long]()\n        var i = 0\n  \
    \      while (i < lst1.length) {\n            lst3 = lst3 :+ lst1(i)\n       \
    \     if (i < lst2.length) {\n                lst3 = lst3 :+ lst2(i)\n       \
    \     }\n            i += 1\n        }\n        lst3", "        // Fill up this\
    \ function body\n        // 'lst' is a list of integers\n        // 'return' a\
    \ list of integers in strange order\n        if (lst.length == 0) {\n        \
    \    return List[Long]()\n        }\n        var lst2 = lst.sorted\n        var\
    \ lst3 = List[Long]()\n        var i = 0\n        while (i < lst2.length) {\n\
    \            if (i % 2 == 0) {\n                lst3 = lst3 :+ lst2(i)\n     \
    \       } else {\n                lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n \
    \           }\n            i += 1\n        }\n        return lst3", "        var\
    \ lst2 = lst.sorted\n        var lst3 = List[Long]()\n        var i = 0\n    \
    \    while (i < lst2.length) {\n            if (i % 2 == 0) {\n              \
    \  lst3 = lst3 :+ lst2(i)\n            } else {\n                lst3 = lst3 :+\
    \ lst2(lst2.length - i / 2 - 1)\n            }\n            i += 1\n        }\n\
    \        return lst3", "        // Fill up this function body\n        // 'lst'\
    \ is a list of integers\n        // 'return' a list of integers in strange order\n\
    \        var lst2 = lst.sortWith(_ < _)\n        var lst3 = List[Long]()\n   \
    \     var i = 0\n        while (i < lst2.length) {\n            if (i % 2 == 0)\
    \ {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n          \
    \      lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n            i\
    \ += 1\n        }\n        lst3", "        // Fill up this function body\n   \
    \     // 'lst' is a list of integers\n        // 'return' a list of integers in\
    \ strange order\n        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n\
    \        var i = 0\n        while (i < lst2.length) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n       \
    \         lst3 = lst3 :+ lst2(lst2.length - i - 1)\n            }\n          \
    \  i += 1\n        }\n        lst3", "        // Fill up this function body\n\
    \        // 'lst' is a list of integers\n        // 'return' a list of integers\
    \ in strange order\n        var lst1 = lst.sorted\n        var lst2 = lst1.reverse\n\
    \        var lst3 = List[Long]()\n        var i = 0\n        while (i < lst1.length)\
    \ {\n            if (i % 2 == 0) {\n                lst3 = lst3 :+ lst1(i)\n \
    \           } else {\n                lst3 = lst3 :+ lst2(i)\n            }\n\
    \            i += 1\n        }\n        return lst3", "        // Fill up this\
    \ function body\n        // 'lst' is a list of integers\n        // 'return' a\
    \ list of integers in strange order\n        var lst2 = lst.sorted\n        var\
    \ lst3 = List[Long]()\n        var i = 0\n        while (i < lst2.length) {\n\
    \            if (i % 2 == 0) {\n                lst3 = lst3 :+ lst2(i)\n     \
    \       } else {\n                lst3 = lst3 :+ lst2(lst2.length - i / 2 - 1)\n\
    \            }\n            i += 1\n        }\n        lst3", "        // Fill\
    \ up this function body\n        // 'lst' is a list of integers\n        // 'return'\
    \ a list of integers in strange order\n        var lst2 = lst.sorted\n       \
    \ var lst3 = List[Long]()\n        var lst4 = List[Long]()\n        var lst5 =\
    \ List[Long]()\n        var lst6 = List[Long]()\n        var lst7 = List[Long]()\n\
    \        var lst8 = List[Long]()\n        var lst9 = List[Long]()\n        var\
    \ lst10 = List[Long]()\n        var lst11 = List[Long]()\n        var lst12 =\
    \ List[Long]()\n        var lst13 = List[Long]()\n        var lst14 = List[Long]()\n\
    \        var lst15 = List[Long]()\n        var lst16 = List[Long]()\n        var\
    \ lst17 = List[Long]()\n        var lst18 = List[Long]()\n        var lst19 =\
    \ List[Long]()\n        var lst20 = List[Long]()\n        var lst21 = List[Long]()\n\
    \        var lst22 = List[Long]()\n        var lst23 = List[Long]()\n        var\
    \ lst24 = List[Long]()\n        var lst25 = List[Long]()\n        var lst26 =\
    \ List[Long]()\n        var lst27 = List[Long]()\n        var lst28 = List[Long]()\n\
    \        var lst29 = List[Long]()\n        var lst30 = List[Long]()\n        var\
    \ lst31 = List[Long]()\n        var lst32 = List[Long]()\n        var lst33 =\
    \ List[Long]()\n        var lst34 = List[Long]()\n        var lst35 = List[Long]()\n\
    \        var lst36 = List[Long]()\n        var lst37 = List[Long]()\n        var\
    \ lst38 = List[Long]()\n        var lst39 = List[Long]()\n        var lst40 =\
    \ List[Long]()\n        var lst41 = List[Long]", "        // Fill up this function\
    \ body\n        // `lst` is a list of integers\n        // You have to return\
    \ a list of integers in strange order\n        // You can use the functions `min`\
    \ and `max`\n        // You can use the function `List.sortWith`\n        // You\
    \ can use the function `List.reverse`\n        // You can use the function `List.filter`\n\
    \        // You can use the function `List.map`\n        // You can use the function\
    \ `List.::`\n        // You can use the function `List.tail`\n        // You can\
    \ use the function `List.head`\n        // You can use the function `List.isEmpty`\n\
    \        // You can use the function `List.length`\n        // You can use the\
    \ function `List.:::`\n        // You can use the function `List.drop`\n     \
    \   // You can use the function `List.take`\n        // You can use the function\
    \ `List.::`\n        // You can use the function `List.reverse`\n        // You\
    \ can use the function `List.sortWith`\n        // You can use the function `List.filter`\n\
    \        // You can use the function `List.map`\n        // You can use the function\
    \ `List.::`\n        // You can use the function `List.tail`\n        // You can\
    \ use the function `List.head`\n        // You can use the function `List.isEmpty`\n\
    \        // You can use the function `List.length`\n        // You can use the\
    \ function `List.:::`\n        // You can use the function `List.drop`\n     \
    \   // You can use the function `List.take`\n        // You can use the function\
    \ `List.::`\n        // You can use the function `List.reverse`\n        // You\
    \ can use the function `List.sortWith`\n        // You can use the function `List.filter`\n\
    \        // You can use the function `List.map`\n        // You can use the function\
    \ `List.::`\n        // You can use the function `List.tail`\n        // You can\
    \ use the function `List.head`\n        // You can use the function `List.isEmpty`\n\
    \        // You can use the function `List.length`", "        // Fill up this\
    \ function body\n        // 'lst' is a list of integers\n        // 'return' a\
    \ list of integers in strange order\n        var lst2 = lst.sorted\n        var\
    \ lst3 = List[Long]()\n        var i = 0\n        while (i < lst2.length) {\n\
    \            if (i % 2 == 0) {\n                lst3 = lst3 :+ lst2(i)\n     \
    \       } else {\n                lst3 = lst3 :+ lst2(lst2.length - i / 2 - 1)\n\
    \            }\n            i += 1\n        }\n        lst3", "        // Fill\
    \ up this function body\n        // 'lst' is a list of integers\n        // 'return'\
    \ a list of integers in strange order\n        var lst1 = lst.sortWith(_ < _)\n\
    \        var lst2 = lst.sortWith(_ > _)\n        var lst3 = List[Long]()\n   \
    \     var i = 0\n        while (i < lst.length) {\n            if (i % 2 == 0)\
    \ {\n                lst3 = lst3 :+ lst1(0)\n                lst1 = lst1.drop(1)\n\
    \            } else {\n                lst3 = lst3 :+ lst2(0)\n              \
    \  lst2 = lst2.drop(1)\n            }\n            i += 1\n        }\n       \
    \ lst3", "        // Fill up this function body\n        // 'lst' is a list of\
    \ integers\n        // 'return' a list of integers in strange order\n        var\
    \ lst1 = lst.sorted\n        var lst2 = lst1.reverse\n        var lst3 = List[Long]()\n\
    \        var i = 0\n        while (i < lst1.length) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 = lst3 :+ lst1(i)\n            } else {\n       \
    \         lst3 = lst3 :+ lst2(i)\n            }\n            i += 1\n        }\n\
    \        return lst3", "        if (lst.isEmpty) return lst\n        var lst2\
    \ = lst.sorted\n        var lst3 = List[Long]()\n        var i = 0\n        while\
    \ (i < lst2.length) {\n            if (i % 2 == 0) {\n                lst3 = lst3\
    \ :+ lst2(i)\n            } else {\n                lst3 = lst3 :+ lst2(lst2.length\
    \ - 1 - i)\n            }\n            i += 1\n        }\n        return lst3",
  "        // Fill up this function body\n        // `lst` is a list of integers\n\
    \        // You have to return a list of integers in strange order\n        //\
    \ You can write auxiliary functions if you want\n        // You can use standard\
    \ library functions if you want\n        // You can write import statements if\
    \ you want\n        // You can write your own classes if you want\n        //\
    \ You can create new lists if you want\n        // You can modify `lst` if you\
    \ want\n        // You can return any value if you want\n        // You can return\
    \ tuple if you want\n        // You can return List[List[Int]] if you want\n \
    \       // You can return List[String] if you want\n        // You can return\
    \ List[Char] if you want\n        // You can return List[List[String]] if you\
    \ want\n        // You can return List[List[Char]] if you want\n        // You\
    \ can return List[List[List[Int]]] if you want\n        // You can return List[List[List[String]]]\
    \ if you want\n        // You can return List[List[List[Char]]] if you want\n\
    \        // You can return List[List[List[List[Int]]]] if you want\n        //\
    \ You can return List[List[List[List[String]]]] if you want\n        // You can\
    \ return List[List[List[List[Char]]]] if you want\n        // You can return List[List[List[List[List[Int]]]]]\
    \ if you want\n        // You can return List[List[List[List[List[String]]]]]\
    \ if you want\n        // You can return List[List[List[List[List[Char]]]]] if\
    \ you want\n        // You can return List[List[List[List[List[List[Int]]]]]]\
    \ if you want\n        // You can return List[List[List[List[List[List[String]]]]]]\
    \ if you want\n        // You can return List[List[List[List[List[List[Char]]]]]]\
    \ if you want\n        // You can return List[List[List[List[List[List[List[Int]]]]]]]\
    \ if you want\n        // You can return List[List[List[List[List[List[List[String]]]]]]]\
    \ if you want\n       ", "        // Fill up this function body\n        // 'lst'\
    \ is a list of integers\n        // 'lst' has to be sorted in strange order\n\
    \        // and returned\n        var lst2 = lst.sortWith(_<_)\n        var lst3\
    \ = lst.sortWith(_>_)\n        var lst4 = List[Long]()\n        var i = 0\n  \
    \      while (i < lst.length) {\n            lst4 = lst4 :+ lst2(i)\n        \
    \    if (i < lst.length - 1) {\n                lst4 = lst4 :+ lst3(i)\n     \
    \       }\n            i += 1\n        }\n        lst4", "        // Fill up this\
    \ function body\n        // 'lst' is a list of integers\n        // 'return' a\
    \ list of integers in strange order\n        var lst1 = lst.sorted\n        var\
    \ lst2 = lst1.reverse\n        var lst3 = List[Long]()\n        var i = 0\n  \
    \      while (i < lst1.length) {\n            if (i % 2 == 0) {\n            \
    \    lst3 = lst3 :+ lst1(i)\n            } else {\n                lst3 = lst3\
    \ :+ lst2(i)\n            }\n            i += 1\n        }\n        lst3", " \
    \       // Fill up this function body\n        // `lst` is a list of integers\n\
    \        // You have to return a list of integers in strange order\n        //\
    \ You can create new lists, but don't mutate the input list\n        // You can\
    \ also define new functions\n        var lst1 = lst.sorted\n        var lst2 =\
    \ lst1.reverse\n        var lst3 = ListBuffer[Long]()\n        var lst4 = ListBuffer[Long]()\n\
    \        var lst5 = ListBuffer[Long]()\n        var lst6 = ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < lst1.length) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 += lst1(i)\n            } else {\n              \
    \  lst4 += lst1(i)\n            }\n            i += 1\n        }\n        i =\
    \ 0\n        while (i < lst2.length) {\n            if (i % 2 == 0) {\n      \
    \          lst5 += lst2(i)\n            } else {\n                lst6 += lst2(i)\n\
    \            }\n            i += 1\n        }\n        var lst7 = lst3.toList\
    \ ++ lst6.toList ++ lst4.toList ++ lst5.toList\n        lst7", "        if (lst.length\
    \ == 0) return lst\n        var lst2 = lst.sorted\n        var lst3 = ListBuffer[Long]()\n\
    \        var i = 0\n        while (lst2.length > 0) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 += lst2.head\n                lst2 = lst2.tail\n\
    \            } else {\n                lst3 += lst2.last\n                lst2\
    \ = lst2.dropRight(1)\n            }\n            i += 1\n        }\n        return\
    \ lst3.toList", "        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n\
    \        var i = 0\n        while (i < lst2.length) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n       \
    \         lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n          \
    \  i += 1\n        }\n        return lst3", "        if (lst.isEmpty) return lst\n\
    \        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n        while\
    \ (!lst2.isEmpty) {\n            lst3 = lst3 :+ lst2.head\n            lst2 =\
    \ lst2.tail\n            if (!lst2.isEmpty) {\n                lst3 = lst3 :+\
    \ lst2.last\n                lst2 = lst2.init\n            }\n        }\n    \
    \    return lst3", "        // Fill up this function body\n        // `lst` is\
    \ a list of integers\n        // You have to return a list of integers in strange\
    \ order\n        // You can use any data structure provided in standard library\n\
    \        // You can write auxiliary functions\n        // You can write auxiliary\
    \ classes\n        // You can create objects of auxiliary classes\n        //\
    \ You can write any code you want\n        // You can import any library you want\n\
    \        // You can import any Scala library you want\n        // You can import\
    \ any Java library you want\n        // You can import any Python library you\
    \ want\n        // You can import any Ruby library you want\n        // You can\
    \ import any C library you want\n        // You can import any C++ library you\
    \ want\n        // You can import any Objective-C library you want\n        //\
    \ You can import any Haskell library you want\n        // You can import any Erlang\
    \ library you want\n        // You can import any Lisp library you want\n    \
    \    // You can import any Clojure library you want\n        // You can import\
    \ any JavaScript library you want\n        // You can import any CoffeeScript\
    \ library you want\n        // You can import any Dart library you want\n    \
    \    // You can import any Julia library you want\n        // You can import any\
    \ Go library you want\n        // You can import any Rust library you want\n \
    \       // You can import any OCaml library you want\n        // You can import\
    \ any F# library you want\n        // You can import any Groovy library you want\n\
    \        // You can import any Scala.js library you want\n        // You can import\
    \ any Dart.js library you want\n        // You can import any TypeScript library\
    \ you want\n        // You can import any CoffeeScript.js library you want\n \
    \       // You can import any Haxe library you want\n        // You can import\
    \ any Elm library you want\n        // You can import any PureScript library you\
    \ want\n        // You can import any Idris library you want\n        // You can\
    \ import any Agda library you want\n        // You can import any Coq library\
    \ you want\n        // You can import any Isabelle/HOL library you want\n    \
    \    // You can import any Lean library you want\n        // You can import any\
    \ SMT-LIB library you want\n        // You can import any Z3 library you want\n\
    \        // You can import any SMT-COMP library you want", "        var lst2 =\
    \ lst.sorted\n        var lst3 = List[Long]()\n        var i = 0\n        while\
    \ (i < lst2.length) {\n            if (i % 2 == 0) {\n                lst3 = lst3\
    \ :+ lst2(i)\n            } else {\n                lst3 = lst3 :+ lst2(lst2.length\
    \ - 1 - i)\n            }\n            i += 1\n        }\n        return lst3",
  "        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n        var i =\
    \ 0\n        while (i < lst2.length) {\n            if (i % 2 == 0) {\n      \
    \          lst3 = lst3 :+ lst2(i)\n            } else {\n                lst3\
    \ = lst3 :+ lst2(lst2.length - i / 2 - 1)\n            }\n            i += 1\n\
    \        }\n        return lst3", "        // Fill up this function body\n   \
    \     // `lst` is a list of integers\n        // You have to return a list of\
    \ integers in strange order\n        // You can use any data structure provided\
    \ in scala library\n        // You can write auxiliary functions\n        // You\
    \ can write auxiliary classes\n        // You can write any helper code you want\n\
    \        // You can modify the function signature\n        // You can add more\
    \ input parameters\n        // You can change return type\n        // You can\
    \ write complete new function\n        // You can do anything you want\n     \
    \   // But your code should not throw any exception\n        // Your code should\
    \ not have any side effects\n        // Your code should be pure\n        // Your\
    \ code should be fast\n        // Your code should be short\n        // Your code\
    \ should be readable\n        // Your code should be maintainable\n        //\
    \ Your code should be beautiful\n        // Your code should be awesome\n    \
    \    // Your code should be the best\n        // Your code should be the only\
    \ one\n        // Your code should be the last one\n        // Your code should\
    \ be the only way\n        // Your code should be the last hope\n        // Your\
    \ code should be the only truth\n        // Your code should be the last truth\n\
    \        // Your code should be the only light\n        // Your code should be\
    \ the last light\n        // Your code should be the only life\n        // Your\
    \ code should be the last life\n        // Your code should be the only dream\n\
    \        // Your code should be the last dream\n        // Your code should be\
    \ the only hope\n        // Your code should be the last hope\n        // Your\
    \ code should be the only love\n        // Your code should be the last love\n\
    \        // Your code should be the only faith\n        // Your code should be\
    \ the last faith\n        // Your code should be the only way\n        // Your\
    \ code should be the last way\n        // Your code should be the only answer\n\
    \        // Your code should be the last answer\n        // Your code should be\
    \ the only question\n        // Your code should be the last question\n      \
    \  // Your code should be the only key\n        // Your code should be the last\
    \ key\n        // Your code should be the only lock\n        // Your code should\
    \ be the last lock\n        // Your code should be the only door\n        // Your\
    \ code should be the last door\n        // Your code", "        // Fill up this\
    \ function body\n        // 'lst' is a list of integers\n        // 'lst' has\
    \ to be sorted in strange order\n        // and returned\n        var lst1 = lst.sorted\n\
    \        var lst2 = lst1.reverse\n        var lst3 = List[Long]()\n        var\
    \ i = 0\n        while (i < lst1.length) {\n            if (i % 2 == 0) {\n  \
    \              lst3 = lst3 :+ lst1(i)\n            } else {\n                lst3\
    \ = lst3 :+ lst2(i)\n            }\n            i += 1\n        }\n        return\
    \ lst3", "        if (lst.length == 0) {\n            return lst\n        }\n\
    \        var lst2 = lst.sortWith(_ < _)\n        var lst3 = List[Long]()\n   \
    \     var i = 0\n        while (i < lst2.length) {\n            if (i % 2 == 0)\
    \ {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n          \
    \      lst3 = lst3 :+ lst2(lst2.length - i / 2 - 1)\n            }\n         \
    \   i += 1\n        }\n        return lst3", "        var result : List[Long]\
    \ = List[Long]()\n        var lst2 : List[Long] = lst\n        while (lst2.length\
    \ > 0) {\n            result = result :+ lst2.min\n            lst2 = lst2.filter(_\
    \ != lst2.min)\n            if (lst2.length > 0) {\n                result = result\
    \ :+ lst2.max\n                lst2 = lst2.filter(_ != lst2.max)\n           \
    \ }\n        }\n        return result", "        // Fill up this function body\n\
    \        // 'lst' is a list of integers\n        // 'return' a list of integers\
    \ in strange order\n        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n\
    \        var i = 0\n        while (i < lst2.length) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n       \
    \         lst3 = lst3 :+ lst2(lst2.length - i - 1)\n            }\n          \
    \  i += 1\n        }\n        lst3", "        val sorted = lst.sorted\n      \
    \  val min = sorted.head\n        val max = sorted.last\n        val mid = sorted.slice(1,\
    \ sorted.length - 1)\n        val midSorted = mid.sorted.reverse\n        val\
    \ result = ListBuffer[Long]()\n        result += min\n        for (i <- 0 until\
    \ midSorted.length) {\n            if (i % 2 == 0) result += midSorted(i)\n  \
    \          else result.insert(1, midSorted(i))\n        }\n        result += max\n\
    \        result.toList", "        if (lst.length == 0) return lst\n        val\
    \ sorted = lst.sorted\n        val min = sorted.head\n        val max = sorted.last\n\
    \        val minIndex = lst.indexOf(min)\n        val maxIndex = lst.indexOf(max)\n\
    \        val newLst = lst.updated(minIndex, max).updated(maxIndex, min)\n    \
    \    return min :: strangeSortList(newLst.slice(1, newLst.length))", "       \
    \ // Fill up this function body\n        // `lst` is a list of integers\n    \
    \    // You have to return a list of integers in strange order\n        // You\
    \ can use the functions `min` and `max`\n        // You can use the function `sortWith`\n\
    \        // You can use the function `reverse`\n        // You can use the function\
    \ `::`\n        // You can use the function `:+`\n        // You can use the function\
    \ `++`\n        // You can use the function `drop`\n        // You can use the\
    \ function `take`\n        // You can use the function `filter`\n        // You\
    \ can use the function `map`\n        // You can use the function `zip`\n    \
    \    // You can use the function `unzip`\n        // You can use the function\
    \ `:::`\n        // You can use the function `reverse`\n        // You can use\
    \ the function `::`\n        // You can use the function `:+`\n        // You\
    \ can use the function `++`\n        // You can use the function `drop`\n    \
    \    // You can use the function `take`\n        // You can use the function `filter`\n\
    \        // You can use the function `map`\n        // You can use the function\
    \ `zip`\n        // You can use the function `unzip`\n        // You can use the\
    \ function `:::`\n        // You can use the function `reverse`\n        // You\
    \ can use the function `::`\n        // You can use the function `:+`\n      \
    \  // You can use the function `++`\n        // You can use the function `drop`\n\
    \        // You can use the function `take`\n        // You can use the function\
    \ `filter`\n        // You can use the function `map`\n        // You can use\
    \ the function `zip`\n        // You can use the function `unzip`\n        //\
    \ You can use the function `:::`\n        // You can use the function `reverse`\n\
    \        // You can use the function `::`\n        // You can use the function\
    \ `:+`\n        // You can use the function `++`\n        // You can use the function\
    \ `drop`\n        // You can use the function `take`\n        // You can use the\
    \ function `filter`\n", "        val l = lst.sorted\n        val n = l.length\n\
    \        val m = if (n % 2 == 0) n / 2 else n / 2 + 1\n        val a = l.take(m)\n\
    \        val b = l.drop(m)\n        val c = a.zip(b).flatMap(x => List(x._1, x._2))\n\
    \        if (n % 2 == 0) c else c :+ a.last", "        // Fill up this function\
    \ body\n        // 'lst' is a list of integers\n        // 'return' a list of\
    \ integers in strange order\n        lst.sorted", "        if (lst.length == 0)\
    \ return lst\n        var lst2 = lst.sorted\n        var lst3 = ListBuffer[Long]()\n\
    \        var i = 0\n        while (lst2.length > 0) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 += lst2.head\n                lst2 = lst2.tail\n\
    \            } else {\n                lst3 += lst2.last\n                lst2\
    \ = lst2.dropRight(1)\n            }\n            i += 1\n        }\n        return\
    \ lst3.toList", "        // Fill up this function body\n        // 'lst' is a\
    \ list of integers\n        // 'return' a list of integers\n        return List[Long]()"]
stop_tokens:
- "\n    }\n"
