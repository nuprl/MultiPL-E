language: scala
name: HumanEval_125_split_words
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                val count = txt.toLowerCase.toList.map(c\
    \ => (c - 'a')).filter(i => i % 2 == 0).length\n                Right(count)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdzzjw2qm.scala:27)\n\tat Problem.main(tmpdzzjw2qm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toLowerCase.toList.filter(c => c >= 'a' && c <= 'z').map(c =>\
    \ (c - 'a') % 2).count(_ == 1))\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9ucmr4of.scala:24)\n\tat Problem.main(tmp9ucmr4of.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                val count = txt.toList.filter(c\
    \ => c.isLower && (c - 'a') % 2 == 0).length\n                Right(count)\n \
    \           }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeyyqg29m.scala:27)\n\tat Problem.main(tmpeyyqg29m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0l\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcmmfd_tw.scala:30)\n\tat Problem.main(tmpcmmfd_tw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) {\n                Left(words.toList)\n            } else {\n         \
    \       val count = txt.filter(c => c >= 'a' && c <= 'z').map(c => ord(c) % 2).sum\n\
    \                Right(count)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp69zt0cnz.scala:23:75 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mval\e[0m \e[36mcount\e[0m = txt.filter(\e\
    [36mc\e[0m => c >= \e[31m'a'\e[0m && c <= \e[31m'z'\e[0m).map(\e[36mc\e[0m =>\
    \ ord(c) % \e[31m2\e[0m).sum\n\e[31m\e[31m   |\e[0m                          \
    \                                                 ^^^\e[0m\n\e[31m   |\e[0m  \
    \                                                        Not found: ord\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        Right(txt.filter(c => c.isLower && (c - 'a') % 2 == 0).length)\n    \
    \        }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1sw2szg6.scala:28)\n\tat Problem.main(tmp1sw2szg6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        ???\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.splitWords(tmp6dr3fi3y.scala:15)\n\tat Problem$.main(tmp6dr3fi3y.scala:18)\n\
    \tat Problem.main(tmp6dr3fi3y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmprvqx0mzq.scala:19)\n\
    \tat Problem.main(tmprvqx0mzq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toLowerCase.map(c => (c - 'a') % 2).count(_ == 1))\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps9ptabvq.scala:24)\n\tat Problem.main(tmps9ptabvq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmprvqx0mzq.scala:19)\n\
    \tat Problem.main(tmprvqx0mzq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val chars = txt.split(\",\")\n            if (chars.length\
    \ > 1) {\n                Left(chars.toList)\n            } else {\n         \
    \       Right(chars.head.filter(c => c.isLower && c.toInt % 2 == 1).length)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6slmsw4r.scala:28)\n\tat Problem.main(tmp6slmsw4r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toLowerCase.toList.zipWithIndex.filter(x => x._2 % 2 == 0).map(x\
    \ => x._1.toInt - 'a'.toInt).sum)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5u9ui5px.scala:24)\n\tat Problem.main(tmp5u9ui5px.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ - 'a' >= 0 && txt(i) - 'a' < 26 && (txt(i) - 'a') % 2 == 1) count += 1\n   \
    \             }\n                Right(count)\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn3v8tvly.scala:30)\n\tat Problem.main(tmpn3v8tvly.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // TODO:\
    \ Implement\n        ???\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.splitWords(tmpen8b2vun.scala:16)\n\tat Problem$.main(tmpen8b2vun.scala:19)\n\
    \tat Problem.main(tmpen8b2vun.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val chars = txt.split(\",\")\n            if (chars.length\
    \ > 1) {\n                Left(chars.toList)\n            } else {\n         \
    \       Right(chars.map(c => c.toLowerCase).map(c => c.toCharArray.map(c => c.toInt\
    \ - ord('a'))).map(c => c.filter(c => c % 2 == 1)).map(c => c.length).sum)\n \
    \           }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp82eia_ds.scala:23:94 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                Right(chars.map(\e[36mc\e[0m => c.toLowerCase).map(\e\
    [36mc\e[0m => c.toCharArray.map(\e[36mc\e[0m => c.toInt - ord(\e[31m'a'\e[0m))).map(\e\
    [36mc\e[0m => c.filter(\e[36mc\e[0m => c % \e[31m2\e[0m == \e[31m1\e[0m)).map(\e\
    [36mc\e[0m => c.length).sum)\n\e[31m\e[31m   |\e[0m                          \
    \                                                                    ^^^\e[0m\n\
    \e[31m   |\e[0m                                                          Not found:\
    \ ord\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp82eia_ds.scala:23:103 ----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                Right(chars.map(\e[36mc\e[0m => c.toLowerCase).map(\e\
    [36mc\e[0m => c.toCharArray.map(\e[36mc\e[0m => c.toInt - ord(\e[31m'a'\e[0m))).map(\e\
    [36mc\e[0m => c.filter(\e[36mc\e[0m => c % \e[31m2\e[0m == \e[31m1\e[0m)).map(\e\
    [36mc\e[0m => c.length).sum)\n\e[31m\e[31m   |\e[0m                          \
    \                                                                            \
    \ ^\e[0m\n\e[31m   |\e[0m                                          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                          \
    \                where:    B is a type variable\n\e[31m\e[31m-- Error: /tmp/tmp82eia_ds.scala:23:104\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \
    \        Right(chars.map(\e[36mc\e[0m => c.toLowerCase).map(\e[36mc\e[0m => c.toCharArray.map(\e\
    [36mc\e[0m => c.toInt - ord(\e[31m'a'\e[0m))).map(\e[36mc\e[0m => c.filter(\e\
    [36mc\e[0m => c % \e[31m2\e[0m == \e[31m1\e[0m)).map(\e[36mc\e[0m => c.length).sum)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                ^\e[0m\n\e[31m   |\e[0m     \
    \                                 No ClassTag available for Array[B]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m                                      where:    B is\
    \ a type variable\n3 errors found\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0l\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcmmfd_tw.scala:30)\n\tat Problem.main(tmpcmmfd_tw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps4ieewxh.scala:30)\n\tat Problem.main(tmps4ieewxh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // TODO:\
    \ Implement this method\n        null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmpkx2dzw87.scala:19)\n\
    \tat Problem.main(tmpkx2dzw87.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // TODO:\
    \ Implement me!\n        Left(List(\"Hello\", \"world!\"))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd6_ohfcv.scala:19)\n\tat Problem.main(tmpd6_ohfcv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmprvqx0mzq.scala:19)\n\
    \tat Problem.main(tmprvqx0mzq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Write\
    \ your code here\n        null\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmptebw9nfr.scala:19)\n\
    \tat Problem.main(tmptebw9nfr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n     \
    \   else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0l\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ - 'a' >= 0 && txt(i) - 'a' < 26 && (txt(i) - 'a') % 2 == 1) count += 1\n   \
    \             }\n                Right(count)\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnpurc40t.scala:30)\n\tat Problem.main(tmpnpurc40t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val chars = txt.split(\",\")\n            if (chars.length\
    \ > 1) {\n                Left(chars.toList)\n            } else {\n         \
    \       Right(txt.toList.filter(c => c >= 'a' && c <= 'z').map(c => (c - 'a')\
    \ % 2).filter(b => b == 1).length)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5ces7o5y.scala:28)\n\tat Problem.main(tmp5ces7o5y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val chars = txt.split(\",\")\n            if (chars.length\
    \ > 1) {\n                Left(chars.toList)\n            } else {\n         \
    \       Right(txt.toLowerCase.filter(c => (c - 'a') % 2 == 0).length)\n      \
    \      }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp95oxys68.scala:28)\n\tat Problem.main(tmp95oxys68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmprvqx0mzq.scala:19)\n\
    \tat Problem.main(tmprvqx0mzq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // TODO:\
    \ Implement me\n        null\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmplbhh9nvi.scala:19)\n\
    \tat Problem.main(tmplbhh9nvi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmprvqx0mzq.scala:19)\n\
    \tat Problem.main(tmprvqx0mzq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if (txt.contains(\"\
    \ \")) Left(txt.split(\" \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\"\
    ,\").toList)\n        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1).length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplsaxjedg.scala:20)\n\tat Problem.main(tmplsaxjedg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        val words = txt.split(\" \")\n        if (words.length > 1) {\n\
    \            Left(words.toList)\n        } else {\n            val words = txt.split(\"\
    ,\")\n            if (words.length > 1) {\n                Left(words.toList)\n\
    \            } else {\n                val count = txt.toList.filter(x => x.toInt\
    \ % 2 == 1).length\n                Right(count)\n            }\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm5hnbuii.scala:30)\n\tat Problem.main(tmpm5hnbuii.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        var split = txt.split(\" \")\n        if (split.length > 1) {\n\
    \            Left(split.toList)\n        } else {\n            split = txt.split(\"\
    ,\")\n            if (split.length > 1) {\n                Left(split.toList)\n\
    \            } else {\n                var count = 0\n                for (i <-\
    \ 0 until txt.length) {\n                    if (txt(i) - 'a' % 2 == 1) {\n  \
    \                      count += 1\n                    }\n                }\n\
    \                Right(count)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0upe7tau.scala:35)\n\tat Problem.main(tmp0upe7tau.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toLowerCase.map(c => (c - 'a') % 2).filter(_ == 1).length)\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4uwi41mn.scala:24)\n\tat Problem.main(tmp4uwi41mn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Write\
    \ your code here\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ > 1) {\n            Left(words.toList)\n        } else {\n            val chars\
    \ = txt.split(\",\")\n            if (chars.length > 1) {\n                Left(chars.toList)\n\
    \            } else {\n                Right(txt.toLowerCase.toList.filter(c =>\
    \ c.toInt % 2 == 1).length)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5bgw95xz.scala:29)\n\tat Problem.main(tmp5bgw95xz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toLowerCase.map(c => (c - 'a') % 2).count(_ == 1))\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps9ptabvq.scala:24)\n\tat Problem.main(tmps9ptabvq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0l\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && (txt(i) - 'a') % 2 == 0) count += 1\n           \
    \     }\n                Right(count)\n            }\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnx7sb7sk.scala:30)\n\tat Problem.main(tmpnx7sb7sk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toLowerCase.toList.filter(c => c >= 'a' && c <= 'z').map(c =>\
    \ (c - 'a') % 2).filter(x => x == 1).length)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbzab2f8e.scala:24)\n\tat Problem.main(tmpbzab2f8e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps4ieewxh.scala:30)\n\tat Problem.main(tmps4ieewxh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmprvqx0mzq.scala:19)\n\
    \tat Problem.main(tmprvqx0mzq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // TODO:\
    \ Implement this method\n        null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmpkx2dzw87.scala:19)\n\
    \tat Problem.main(tmpkx2dzw87.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val lst =\
    \ txt.split(\" \")\n        if (lst.length > 1) {\n            Left(lst.toList)\n\
    \        } else {\n            val lst2 = txt.split(\",\")\n            if (lst2.length\
    \ > 1) {\n                Left(lst2.toList)\n            } else {\n          \
    \      val lst3 = txt.toList\n                val lst4 = lst3.filter(x => x.isLower)\n\
    \                val lst5 = lst4.filter(x => (x.toInt - 97) % 2 == 0)\n      \
    \          Right(lst5.length)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7tlviypk.scala:31)\n\tat Problem.main(tmp7tlviypk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val chars = txt.split(\",\")\n            if (chars.length\
    \ > 1) {\n                Left(chars.toList)\n            } else {\n         \
    \       Right(chars.map(c => c.toLowerCase.toInt - ord('a')).filter(i => i % 2\
    \ == 1).length)\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfxzuisyl.scala:23:59 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                Right(chars.map(\e[36mc\e[0m => c.toLowerCase.toInt\
    \ - ord(\e[31m'a'\e[0m)).filter(\e[36mi\e[0m => i % \e[31m2\e[0m == \e[31m1\e\
    [0m).length)\n\e[31m\e[31m   |\e[0m                                          \
    \                 ^^^\e[0m\n\e[31m   |\e[0m                                  \
    \                        Not found: ord\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpfxzuisyl.scala:23:68 -----------------------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m                Right(chars.map(\e[36mc\e[0m => c.toLowerCase.toInt\
    \ - ord(\e[31m'a'\e[0m)).filter(\e[36mi\e[0m => i % \e[31m2\e[0m == \e[31m1\e\
    [0m).length)\n\e[31m\e[31m   |\e[0m                                          \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \               No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \                                          where:    B is a type variable\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toLowerCase.toList.map(x => x.toInt - 'a'.toInt).filter(x => x\
    \ % 2 == 1).length)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4fswraih.scala:24)\n\tat Problem.main(tmp4fswraih.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        Right(txt.toLowerCase.filter(c => c >= 'a' && c <= 'z').zipWithIndex.filter(p\
    \ => p._2 % 2 == 0).map(p => p._1).length)\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpch7kndxo.scala:28)\n\tat Problem.main(tmpch7kndxo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0l\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ - 'a' % 2 == 1) count += 1\n                }\n                Right(count)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu_ws7rav.scala:30)\n\tat Problem.main(tmpu_ws7rav.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val chars = txt.split(\",\")\n            if (chars.length\
    \ > 1) {\n                Left(chars.toList)\n            } else {\n         \
    \       val count = txt.toList.filter(c => c.isLower && (c - 'a') % 2 == 0).length\n\
    \                Right(count)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb7kfqwvu.scala:29)\n\tat Problem.main(tmpb7kfqwvu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmprvqx0mzq.scala:19)\n\
    \tat Problem.main(tmprvqx0mzq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) {\n                Left(words.toList)\n            } else {\n         \
    \       Right(txt.toLowerCase.toList.filter(c => c >= 'a' && c <= 'z').zipWithIndex.filter(p\
    \ => p._2 % 2 == 0).map(p => p._1 - 'a').sum)\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj8xuzp96.scala:28)\n\tat Problem.main(tmpj8xuzp96.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps4ieewxh.scala:30)\n\tat Problem.main(tmps4ieewxh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // TODO:\
    \ Implement\n        return null\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmpzgfxf5v8.scala:19)\n\
    \tat Problem.main(tmpzgfxf5v8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        if (txt.contains(\" \")) {\n            Left(txt.split(\" \").toList)\n\
    \        } else if (txt.contains(\",\")) {\n            Left(txt.split(\",\").toList)\n\
    \        } else {\n            Right(txt.toList.map(x => x.toInt - 'a'.toInt).filter(x\
    \ => x % 2 == 1).length)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo2msx1sc.scala:25)\n\tat Problem.main(tmpo2msx1sc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        var count = 0\n                for (i <- 0 until txt.length) {\n    \
    \                if (txt(i) - 'a' % 2 == 1) {\n                        count +=\
    \ 1\n                    }\n                }\n                Right(count)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiykz7r50.scala:34)\n\tat Problem.main(tmpiykz7r50.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmprvqx0mzq.scala:19)\n\
    \tat Problem.main(tmprvqx0mzq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // YOUR CODE\
    \ HERE\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmp9_yz1174.scala:19)\n\
    \tat Problem.main(tmp9_yz1174.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // YOUR CODE\
    \ HERE\n        ???\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.splitWords(tmpyi1gf8t2.scala:16)\n\tat Problem$.main(tmpyi1gf8t2.scala:19)\n\
    \tat Problem.main(tmpyi1gf8t2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        val words = txt.split(\" \")\n        if (words.length > 1) {\n\
    \            Left(words.toList)\n        } else {\n            val letters = txt.split(\"\
    ,\")\n            if (letters.length > 1) {\n                Left(letters.toList)\n\
    \            } else {\n                var count = 0\n                for (i <-\
    \ 0 until letters(0).length) {\n                    if (letters(0)(i) - 'a' %\
    \ 2 == 1) {\n                        count += 1\n                    }\n     \
    \           }\n                Right(count)\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8o9nmy1s.scala:35)\n\tat Problem.main(tmp8o9nmy1s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // TODO:\
    \ Implement me!\n        ???\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.splitWords(tmpj8q6mzbw.scala:16)\n\tat Problem$.main(tmpj8q6mzbw.scala:19)\n\
    \tat Problem.main(tmpj8q6mzbw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Write\
    \ your code here\n        ???\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.splitWords(tmp0j3qs0i4.scala:16)\n\tat Problem$.main(tmp0j3qs0i4.scala:19)\n\
    \tat Problem.main(tmp0j3qs0i4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toLowerCase.toList.filter(c => (c - 'a') % 2 == 0).length)\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk8r94wv_.scala:24)\n\tat Problem.main(tmpk8r94wv_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // TODO:\
    \ Implement me\n        return Left(List())\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1i9tze3h.scala:19)\n\tat Problem.main(tmp1i9tze3h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ - 'a' % 2 == 1) count += 1\n                }\n                Right(count)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0af0k0q7.scala:30)\n\tat Problem.main(tmp0af0k0q7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799940
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        val words = txt.split(\" \")\n        if (words.length > 1) {\n\
    \            Left(words.toList)\n        } else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) {\n                Left(commas.toList)\n\
    \            } else {\n                Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1).filter(x => x >= 'a' && x <= 'z').length)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc0zg_57x.scala:29)\n\tat Problem.main(tmpc0zg_57x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799941
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toLowerCase.map(c => (c - 'a') % 2).filter(_ == 1).size)\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg72okqe2.scala:24)\n\tat Problem.main(tmpg72okqe2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799941
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        val words = txt.split(\" \")\n        if (words.length > 1) {\n\
    \            Left(words.toList)\n        } else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) {\n                Left(commas.toList)\n\
    \            } else {\n                Right(txt.toLowerCase.toList.filter(c =>\
    \ c.toInt % 2 == 1).length)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptaj8hm0h.scala:29)\n\tat Problem.main(tmptaj8hm0h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799941
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmprvqx0mzq.scala:19)\n\
    \tat Problem.main(tmprvqx0mzq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val chars = txt.split(\",\")\n            if (chars.length\
    \ > 1) {\n                Left(chars.toList)\n            } else {\n         \
    \       Right(chars.head.toList.filter(c => c.toInt % 2 == 1).length)\n      \
    \      }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw4r_qqa7.scala:28)\n\tat Problem.main(tmpw4r_qqa7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799941
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // TODO:\
    \ Implement\n        return null\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmpzgfxf5v8.scala:19)\n\
    \tat Problem.main(tmpzgfxf5v8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        val words = txt.split(\" \")\n        if (words.length > 1) {\n\
    \            Left(words.toList)\n        } else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) {\n                Left(commas.toList)\n\
    \            } else {\n                val count = txt.toLowerCase.toList.filter(x\
    \ => x.toInt - 'a'.toInt % 2 == 1).length\n                Right(count)\n    \
    \        }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpesij23q0.scala:30)\n\tat Problem.main(tmpesij23q0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799941
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        if (txt.contains(\" \")) {\n            Left(txt.split(\" \").toList)\n\
    \        } else if (txt.contains(\",\")) {\n            Left(txt.split(\",\").toList)\n\
    \        } else {\n            Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1).map(x => x.toInt - 97).filter(x => x % 2 ==\
    \ 1).length)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphddhd1ql.scala:25)\n\tat Problem.main(tmphddhd1ql.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799941
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        ???\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.splitWords(tmp6dr3fi3y.scala:15)\n\tat Problem$.main(tmp6dr3fi3y.scala:18)\n\
    \tat Problem.main(tmp6dr3fi3y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        ???\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.splitWords(tmp89hftr56.scala:16)\n\tat Problem$.main(tmp89hftr56.scala:19)\n\
    \tat Problem.main(tmp89hftr56.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799941
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // TODO:\
    \ Implement\n        Left(List(\"Hello\", \"world!\"))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzvoas_ai.scala:19)\n\tat Problem.main(tmpzvoas_ai.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799941
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmprvqx0mzq.scala:19)\n\
    \tat Problem.main(tmprvqx0mzq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // TODO:\
    \ implement me\n        ???\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.splitWords(tmpttc_tw1r.scala:16)\n\tat Problem$.main(tmpttc_tw1r.scala:19)\n\
    \tat Problem.main(tmpttc_tw1r.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799941
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) {\n                Left(words.toList)\n            } else {\n         \
    \       Right(txt.filter(c => c >= 'a' && c <= 'z').map(c => c - 'a').filter(i\
    \ => i % 2 == 0).length)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1pgo3rsr.scala:28)\n\tat Problem.main(tmp1pgo3rsr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799941
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0l\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && (txt(i) - 'a') % 2 == 0) count += 1\n           \
    \     }\n                Right(count)\n            }\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnx7sb7sk.scala:30)\n\tat Problem.main(tmpnx7sb7sk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val chars = txt.split(\",\")\n            if (chars.length\
    \ > 1) {\n                Left(chars.toList)\n            } else {\n         \
    \       Right(chars.flatMap(_.toLowerCase.toCharArray).filter(c => c - 'a' % 2\
    \ == 0).length)\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptj0jic8b.scala:28)\n\tat Problem.main(tmptj0jic8b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799942
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // your code\
    \ here\n        val words = txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_7vyenj8.scala:31)\n\tat Problem.main(tmp_7vyenj8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799942
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toLowerCase.toList.filter(c => c >= 'a' && c <= 'z').zipWithIndex.filter(p\
    \ => p._2 % 2 == 0).map(p => p._1 - 'a').sum)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnu4ckw1a.scala:24)\n\tat Problem.main(tmpnu4ckw1a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799942
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        val words = txt.split(\" \")\n        if (words.length > 1) {\n\
    \            Left(words.toList)\n        } else {\n            val chars = txt.split(\"\
    ,\")\n            if (chars.length > 1) {\n                Left(chars.toList)\n\
    \            } else {\n                val count = txt.toList.filter(c => c.toInt\
    \ % 2 == 1).length\n                Right(count)\n            }\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo4s3xkk7.scala:30)\n\tat Problem.main(tmpo4s3xkk7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799941
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ goes here\n        val words = txt.split(\" \")\n        if (words.length >\
    \ 1) {\n            Left(words.toList)\n        } else {\n            val commas\
    \ = txt.split(\",\")\n            if (commas.length > 1) {\n                Left(commas.toList)\n\
    \            } else {\n                Right(txt.filter(c => c.isLower).zipWithIndex.filter(p\
    \ => p._2 % 2 == 0).map(p => p._1).length)\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgrw6bb18.scala:29)\n\tat Problem.main(tmpgrw6bb18.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799942
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // TODO:\
    \ Implement me!\n        null\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmpe6alqihh.scala:19)\n\
    \tat Problem.main(tmpe6alqihh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799941
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmprvqx0mzq.scala:19)\n\
    \tat Problem.main(tmprvqx0mzq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n     \
    \   else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0l\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsoygtqlr.scala:30)\n\tat Problem.main(tmpsoygtqlr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799942
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmprvqx0mzq.scala:19)\n\
    \tat Problem.main(tmprvqx0mzq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val chars = txt.split(\",\")\n            if (chars.length\
    \ > 1) {\n                Left(chars.toList)\n            } else {\n         \
    \       Right(chars.map(c => c.toCharArray.map(x => x.toInt - ord('a')).filter(x\
    \ => x % 2 == 1).length).sum)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpafp4w1xd.scala:23:70 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                Right(chars.map(\e[36mc\e[0m => c.toCharArray.map(\e\
    [36mx\e[0m => x.toInt - ord(\e[31m'a'\e[0m)).filter(\e[36mx\e[0m => x % \e[31m2\e\
    [0m == \e[31m1\e[0m).length).sum)\n\e[31m\e[31m   |\e[0m                     \
    \                                                 ^^^\e[0m\n\e[31m   |\e[0m  \
    \                                                        Not found: ord\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmpafp4w1xd.scala:23:79 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                Right(chars.map(\e[36mc\e[0m => c.toCharArray.map(\e\
    [36mx\e[0m => x.toInt - ord(\e[31m'a'\e[0m)).filter(\e[36mx\e[0m => x % \e[31m2\e\
    [0m == \e[31m1\e[0m).length).sum)\n\e[31m\e[31m   |\e[0m                     \
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0m                                          No ClassTag available for B\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m                                          where:  \
    \  B is a type variable\n\e[31m\e[31m-- Error: /tmp/tmpafp4w1xd.scala:23:111 ----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                Right(chars.map(\e[36mc\e[0m => c.toCharArray.map(\e\
    [36mx\e[0m => x.toInt - ord(\e[31m'a'\e[0m)).filter(\e[36mx\e[0m => x % \e[31m2\e\
    [0m == \e[31m1\e[0m).length).sum)\n\e[31m\e[31m   |\e[0m                     \
    \                                                                            \
    \              ^\e[0m\n\e[31m   |\e[0m                                       \
    \   No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m            \
    \                              where:    B is a type variable\n3 errors found\n"
  stdout: ''
  timestamp: 1659799941
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) {\n                Left(words.toList)\n            } else {\n         \
    \       val count = txt.toLowerCase.toList.map(x => x.toInt - 'a'.toInt).filter(x\
    \ => x % 2 == 1).length\n                Right(count)\n            }\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn3kxswx1.scala:29)\n\tat Problem.main(tmpn3kxswx1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799942
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // TODO:\
    \ Implement me\n        Right(0)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp85yoixd.scala:19)\n\tat Problem.main(tmpp85yoixd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799942
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toList.filter(x => x.toInt % 2 == 1).length)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphtaoxd2u.scala:24)\n\tat Problem.main(tmphtaoxd2u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799942
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toLowerCase.map(c => (c - 'a') % 2).count(_ == 1))\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps9ptabvq.scala:24)\n\tat Problem.main(tmps9ptabvq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmprvqx0mzq.scala:19)\n\
    \tat Problem.main(tmprvqx0mzq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        Right(txt.toLowerCase.toList.filter(c => c >= 'a' && c <= 'z').zipWithIndex.filter(p\
    \ => p._2 % 2 == 0).map(p => p._1).length)\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy2ijgvex.scala:28)\n\tat Problem.main(tmpy2ijgvex.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799942
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmprvqx0mzq.scala:19)\n\
    \tat Problem.main(tmprvqx0mzq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        val words = txt.split(\" \")\n        if (words.length > 1) {\n\
    \            Left(words.toList)\n        } else {\n            val words2 = txt.split(\"\
    ,\")\n            if (words2.length > 1) {\n                Left(words2.toList)\n\
    \            } else {\n                val count = txt.toList.filter(x => x.toInt\
    \ % 2 == 1).length\n                Right(count)\n            }\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp53tpnnra.scala:30)\n\tat Problem.main(tmp53tpnnra.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n     \
    \   else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7sa10xrj.scala:30)\n\tat Problem.main(tmp7sa10xrj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n     \
    \   else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0l\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ - 'a' % 2 == 1) count += 1\n                }\n                Right(count)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkb9l1rgs.scala:30)\n\tat Problem.main(tmpkb9l1rgs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) {\n                Left(words.toList)\n            } else {\n         \
    \       Right(txt.toLowerCase.map(c => ord(c) % 2).filter(x => x == 1).length)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptfql3t63.scala:23:47 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                Right(txt.toLowerCase.map(\e[36mc\e[0m\
    \ => ord(c) % \e[31m2\e[0m).filter(\e[36mx\e[0m => x == \e[31m1\e[0m).length)\n\
    \e[31m\e[31m   |\e[0m                                               ^^^\e[0m\n\
    \e[31m   |\e[0m                                               Not found: ord\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799948
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                Right(txt.toList.filter(c\
    \ => c.isLower && c.toInt % 2 == 1).length)\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8mih7zuo.scala:26)\n\tat Problem.main(tmp8mih7zuo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // TODO:\
    \ Implement this method\n        Left(List())\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_bzrw37p.scala:19)\n\tat Problem.main(tmp_bzrw37p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Write\
    \ your code here\n        val words = txt.split(\" \")\n        if (words.length\
    \ > 1) {\n            Left(words.toList)\n        } else {\n            val letters\
    \ = txt.split(\",\")\n            if (letters.length > 1) {\n                Left(letters.toList)\n\
    \            } else {\n                Right(letters(0).filter(c => c >= 'a' &&\
    \ c <= 'z').map(c => c - 'a').filter(i => i % 2 == 0).length)\n            }\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3iw7tsu8.scala:29)\n\tat Problem.main(tmp3iw7tsu8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmprvqx0mzq.scala:19)\n\
    \tat Problem.main(tmprvqx0mzq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps4ieewxh.scala:30)\n\tat Problem.main(tmps4ieewxh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // TODO:\
    \ Implement this method\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmpd1hxdk4x.scala:19)\n\
    \tat Problem.main(tmpd1hxdk4x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        if (txt.contains(\" \")) {\n            Left(txt.split(\" \").toList)\n\
    \        } else if (txt.contains(\",\")) {\n            Left(txt.split(\",\").toList)\n\
    \        } else {\n            var count = 0\n            for (i <- 0 until txt.length)\
    \ {\n                if (txt(i) - 'a' % 2 == 1) {\n                    count +=\
    \ 1\n                }\n            }\n            Right(count)\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgqtxzmvj.scala:31)\n\tat Problem.main(tmpgqtxzmvj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val chars = txt.split(\",\")\n            if (chars.length\
    \ > 1) {\n                Left(chars.toList)\n            } else {\n         \
    \       Right(chars.head.toList.filter(c => c.toInt % 2 == 1).length)\n      \
    \      }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw4r_qqa7.scala:28)\n\tat Problem.main(tmpw4r_qqa7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799941
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Write\
    \ your code here\n        null\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmptebw9nfr.scala:19)\n\
    \tat Problem.main(tmptebw9nfr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val chars = txt.split(\",\")\n            if (chars.length\
    \ > 1) {\n                Left(chars.toList)\n            } else {\n         \
    \       Right(chars.flatMap(_.toLowerCase.toList).filter(c => c.toInt - ord('a')\
    \ % 2 == 1).length)\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7a8gey72.scala:23:80 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                Right(chars.flatMap(_.toLowerCase.toList).filter(\e\
    [36mc\e[0m => c.toInt - ord(\e[31m'a'\e[0m) % \e[31m2\e[0m == \e[31m1\e[0m).length)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                        ^^^\e[0m\n\e[31m   |\e[0m                           \
    \                               Not found: ord\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toLowerCase.zipWithIndex.filter(x => x._2 % 2 == 0).map(x => x._1\
    \ - 'a').sum)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw2aivo96.scala:24)\n\tat Problem.main(tmpw2aivo96.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val chars = txt.split(\",\")\n            if (chars.length\
    \ > 1) {\n                Left(chars.toList)\n            } else {\n         \
    \       Right(chars.head.toLowerCase.zipWithIndex.filter(x => x._2 % 2 == 0).count(x\
    \ => x._1.toInt - 'a'.toInt % 2 == 1))\n            }\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyxeqdplh.scala:28)\n\tat Problem.main(tmpyxeqdplh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmprvqx0mzq.scala:19)\n\
    \tat Problem.main(tmprvqx0mzq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // TODO:\
    \ Implement this function\n        null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmpqado35oc.scala:19)\n\
    \tat Problem.main(tmpqado35oc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmprvqx0mzq.scala:19)\n\
    \tat Problem.main(tmprvqx0mzq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        ???\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.splitWords(tmp6dr3fi3y.scala:15)\n\tat Problem$.main(tmp6dr3fi3y.scala:18)\n\
    \tat Problem.main(tmp6dr3fi3y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Write\
    \ your code here\n        null\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmptebw9nfr.scala:19)\n\
    \tat Problem.main(tmptebw9nfr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0l\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcmmfd_tw.scala:30)\n\tat Problem.main(tmpcmmfd_tw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        Right(txt.toLowerCase.filter(c => c >= 'a' && c <= 'z').zipWithIndex.filter(p\
    \ => p._2 % 2 == 0).map(p => p._1).length)\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpch7kndxo.scala:28)\n\tat Problem.main(tmpch7kndxo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // TODO:\
    \ Implement me!\n        ???\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.splitWords(tmpj8q6mzbw.scala:16)\n\tat Problem$.main(tmpj8q6mzbw.scala:19)\n\
    \tat Problem.main(tmpj8q6mzbw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmprvqx0mzq.scala:19)\n\
    \tat Problem.main(tmprvqx0mzq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // your code\
    \ here\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmpxygv_f7e.scala:19)\n\
    \tat Problem.main(tmpxygv_f7e.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0l\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcmmfd_tw.scala:30)\n\tat Problem.main(tmpcmmfd_tw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmprvqx0mzq.scala:19)\n\
    \tat Problem.main(tmprvqx0mzq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.filter(_.isLower).map(x => x.toInt - 'a').filter(_ % 2 == 1).length)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_7p2319x.scala:24)\n\tat Problem.main(tmp_7p2319x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // TODO:\
    \ Implement this function\n        val words = txt.split(\" \")\n        if (words.length\
    \ > 1) {\n            Left(words.toList)\n        } else {\n            val letters\
    \ = txt.split(\",\")\n            if (letters.length > 1) {\n                Left(letters.toList)\n\
    \            } else {\n                val count = txt.toList.filter(x => x.toInt\
    \ % 2 == 1).length\n                Right(count)\n            }\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0pkunmmf.scala:30)\n\tat Problem.main(tmp0pkunmmf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        Right(txt.toList.filter(c => c >= 'a' && c <= 'z').map(c => c - 'a').filter(i\
    \ => i % 2 == 0).length)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1gtjsn8z.scala:28)\n\tat Problem.main(tmp1gtjsn8z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        Right(txt.toList.filter(c => c.isLower && (c.toInt - 'a'.toInt) % 2 ==\
    \ 1).length)\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp06zks948.scala:28)\n\tat Problem.main(tmp06zks948.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // TODO:\
    \ Implement me!\n        ???\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.splitWords(tmpj8q6mzbw.scala:16)\n\tat Problem$.main(tmpj8q6mzbw.scala:19)\n\
    \tat Problem.main(tmpj8q6mzbw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        val words = txt.split(\" \")\n        if (words.length > 1) {\n\
    \            Left(words.toList)\n        } else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) {\n                Left(commas.toList)\n\
    \            } else {\n                val chars = txt.toCharArray\n         \
    \       var count = 0\n                for (i <- 0 until chars.length) {\n   \
    \                 if (chars(i) >= 'a' && chars(i) <= 'z' && i % 2 == 0) {\n  \
    \                      count += 1\n                    }\n                }\n\
    \                Right(count)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2rldc6yd.scala:36)\n\tat Problem.main(tmp2rldc6yd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        Right(txt.toLowerCase.filter(c => c >= 'a' && c <= 'z').zipWithIndex.filter(p\
    \ => p._2 % 2 == 0).map(p => p._1).length)\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpch7kndxo.scala:28)\n\tat Problem.main(tmpch7kndxo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        Right(txt.toLowerCase.toList.filter(x => x.toInt % 2 == 1).length)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph_jsoqp5.scala:28)\n\tat Problem.main(tmph_jsoqp5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmprvqx0mzq.scala:19)\n\
    \tat Problem.main(tmprvqx0mzq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toLowerCase.filter(x => x - 'a' % 2 == 0).length)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv22iccnl.scala:24)\n\tat Problem.main(tmpv22iccnl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n     \
    \   else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0l\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsoygtqlr.scala:30)\n\tat Problem.main(tmpsoygtqlr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799942
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // your code\
    \ here\n        ???\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.splitWords(tmp9k8stbxz.scala:16)\n\tat Problem$.main(tmp9k8stbxz.scala:19)\n\
    \tat Problem.main(tmp9k8stbxz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // your code\
    \ here\n        val s = txt.split(\" \")\n        if (s.length > 1) {\n      \
    \      Left(s.toList)\n        } else {\n            val s2 = txt.split(\",\"\
    )\n            if (s2.length > 1) {\n                Left(s2.toList)\n       \
    \     } else {\n                Right(txt.filter(x => x.isLower).zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).length)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpium0f797.scala:29)\n\tat Problem.main(tmpium0f797.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799954
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmprvqx0mzq.scala:19)\n\
    \tat Problem.main(tmprvqx0mzq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        var list = List[String]()\n        var count = 0\n        var\
    \ flag = false\n        var flag2 = false\n        for (i <- 0 until txt.length)\
    \ {\n            if (txt(i) == ' ') {\n                flag = true\n         \
    \       list = list :+ txt.substring(count, i)\n                count = i + 1\n\
    \            }\n            if (txt(i) == ',') {\n                flag2 = true\n\
    \                list = list :+ txt.substring(count, i)\n                count\
    \ = i + 1\n            }\n        }\n        if (flag) {\n            Left(list\
    \ :+ txt.substring(count, txt.length))\n        } else if (flag2) {\n        \
    \    Left(list :+ txt.substring(count, txt.length))\n        } else {\n      \
    \      var count2 = 0\n            for (i <- 0 until txt.length) {\n         \
    \       if (txt(i) % 2 == 1) {\n                    count2 += 1\n            \
    \    }\n            }\n            Right(count2)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt4trol65.scala:47)\n\tat Problem.main(tmpt4trol65.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        Right(txt.filter(_.isLower).zipWithIndex.filter(x => x._2 % 2 == 0).map(x\
    \ => x._1).length)\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsajkb0u1.scala:28)\n\tat Problem.main(tmpsajkb0u1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmprvqx0mzq.scala:19)\n\
    \tat Problem.main(tmprvqx0mzq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // YOUR CODE\
    \ HERE\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmp9_yz1174.scala:19)\n\
    \tat Problem.main(tmp9_yz1174.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                Right(txt.filter(c\
    \ => c.isLower).zipWithIndex.filter(p => p._2 % 2 == 0).map(p => p._1).length)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi_jhuoih.scala:26)\n\tat Problem.main(tmpi_jhuoih.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        Right(txt.toLowerCase.toList.filter(c => c >= 'a' && c <= 'z').zipWithIndex.filter(p\
    \ => p._2 % 2 == 0).map(p => p._1).length)\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy2ijgvex.scala:28)\n\tat Problem.main(tmpy2ijgvex.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799942
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // TODO:\
    \ Implement this function\n        null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmpqado35oc.scala:19)\n\
    \tat Problem.main(tmpqado35oc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // your code\
    \ here\n        val words = txt.split(\"\\\\s+\")\n        if (words.length >\
    \ 1) Left(words.toList)\n        else {\n            val words = txt.split(\"\
    ,\")\n            if (words.length > 1) Left(words.toList)\n            else {\n\
    \                var count = 0\n                for (i <- 0 until txt.length)\
    \ {\n                    if (txt(i) - 'a' >= 0 && txt(i) - 'a' < 26 && (txt(i)\
    \ - 'a') % 2 == 1) count += 1\n                }\n                Right(count)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpekucfa0p.scala:31)\n\tat Problem.main(tmpekucfa0p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799964
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n     \
    \   else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                val count = txt.filter(c\
    \ => c >= 'a' && c <= 'z').map(c => c - 'a').filter(i => i % 2 == 0).length\n\
    \                Right(count)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpthib8amx.scala:27)\n\tat Problem.main(tmpthib8amx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799963
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmprvqx0mzq.scala:19)\n\
    \tat Problem.main(tmprvqx0mzq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmprvqx0mzq.scala:19)\n\
    \tat Problem.main(tmprvqx0mzq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0l\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcmmfd_tw.scala:30)\n\tat Problem.main(tmpcmmfd_tw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val chars = txt.split(\",\")\n            if (chars.length\
    \ > 1) {\n                Left(chars.toList)\n            } else {\n         \
    \       Right(chars.flatMap(_.toLowerCase.toList).filter(c => (c - 'a') % 2 ==\
    \ 0).length)\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5x6iry1l.scala:28)\n\tat Problem.main(tmp5x6iry1l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799963
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmprvqx0mzq.scala:19)\n\
    \tat Problem.main(tmprvqx0mzq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toLowerCase.toList.map(x => x.toInt - 'a'.toInt).filter(x => x\
    \ % 2 == 1).length)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4fswraih.scala:24)\n\tat Problem.main(tmp4fswraih.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0l\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcmmfd_tw.scala:30)\n\tat Problem.main(tmpcmmfd_tw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        val words = txt.split(\" \")\n        if (words.length > 1) {\n\
    \            Left(words.toList)\n        } else {\n            val letters = txt.split(\"\
    ,\")\n            if (letters.length > 1) {\n                Left(letters.toList)\n\
    \            } else {\n                val odd = txt.filter(x => x.toInt % 2 ==\
    \ 1).length\n                Right(odd)\n            }\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprfuwasvi.scala:30)\n\tat Problem.main(tmprfuwasvi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799963
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n     \
    \   else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7sa10xrj.scala:30)\n\tat Problem.main(tmp7sa10xrj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        Right(txt.filter(c => c >= 'a' && c <= 'z').map(c => (c - 'a') % 2).filter(x\
    \ => x == 1).length)\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps1eng2ck.scala:28)\n\tat Problem.main(tmps1eng2ck.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799963
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // your code\
    \ here\n        val l = txt.split(\" \")\n        if (l.length > 1) Left(l.toList)\n\
    \        else {\n            val l2 = txt.split(\",\")\n            if (l2.length\
    \ > 1) Left(l2.toList)\n            else {\n                var count = 0\n  \
    \              for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ - 'a' % 2 == 1) count += 1\n                }\n                Right(count)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptq6td8ta.scala:31)\n\tat Problem.main(tmptq6td8ta.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799964
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0l\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && (txt(i) - 'a') % 2 == 0) count += 1\n           \
    \     }\n                Right(count)\n            }\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnx7sb7sk.scala:30)\n\tat Problem.main(tmpnx7sb7sk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmprvqx0mzq.scala:19)\n\
    \tat Problem.main(tmprvqx0mzq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0l\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcmmfd_tw.scala:30)\n\tat Problem.main(tmpcmmfd_tw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        val words = txt.split(\"\\\\s+\")\n        if (words.length >\
    \ 1) {\n            Left(words.toList)\n        } else {\n            val chars\
    \ = txt.split(\",\")\n            if (chars.length > 1) {\n                Left(chars.toList)\n\
    \            } else {\n                Right(chars.flatMap(_.toLowerCase.toList).zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1).count(x => x.toInt % 2 == 1))\n           \
    \ }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp__k7hkt2.scala:29)\n\tat Problem.main(tmp__k7hkt2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799964
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmprvqx0mzq.scala:19)\n\
    \tat Problem.main(tmprvqx0mzq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        Right(txt.toLowerCase.toList.filter(x => x.toInt % 2 == 1).length)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph_jsoqp5.scala:28)\n\tat Problem.main(tmph_jsoqp5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // YOUR CODE\
    \ HERE\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmp9_yz1174.scala:19)\n\
    \tat Problem.main(tmp9_yz1174.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmprvqx0mzq.scala:19)\n\
    \tat Problem.main(tmprvqx0mzq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // TODO:\
    \ Implement this method\n        Left(List(\"Hello\", \"world!\"))\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3e7z7rbw.scala:19)\n\tat Problem.main(tmp3e7z7rbw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799963
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmprvqx0mzq.scala:19)\n\
    \tat Problem.main(tmprvqx0mzq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toList.map(c => c.toLong - 'a'.toLong).filter(i => i % 2 == 1).length)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp19asxreo.scala:24)\n\tat Problem.main(tmp19asxreo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799964
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps4ieewxh.scala:30)\n\tat Problem.main(tmps4ieewxh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmprvqx0mzq.scala:19)\n\
    \tat Problem.main(tmprvqx0mzq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // TODO:\
    \ Implement this method\n        null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmpkx2dzw87.scala:19)\n\
    \tat Problem.main(tmpkx2dzw87.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        Right(txt.toLowerCase.zipWithIndex.filter(x => x._2 % 2 == 0).map(x =>\
    \ x._1.toInt - 'a'.toInt).sum)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgac7h2ob.scala:28)\n\tat Problem.main(tmpgac7h2ob.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799964
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        if (txt.contains(\" \")) {\n            Left(txt.split(\" \").toList)\n\
    \        } else if (txt.contains(\",\")) {\n            Left(txt.split(\",\").toList)\n\
    \        } else {\n            var count = 0\n            for (i <- 0 until txt.length)\
    \ {\n                if (txt(i) - 'a' % 2 == 1) {\n                    count +=\
    \ 1\n                }\n            }\n            Right(count)\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgqtxzmvj.scala:31)\n\tat Problem.main(tmpgqtxzmvj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        val words = txt.split(\" \")\n        if (words.length > 1) {\n\
    \            Left(words.toList)\n        } else {\n            val words = txt.split(\"\
    ,\")\n            if (words.length > 1) {\n                Left(words.toList)\n\
    \            } else {\n                val count = txt.toLowerCase.toList.filter(x\
    \ => x.toInt % 2 == 1).length\n                Right(count)\n            }\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkipei_mu.scala:30)\n\tat Problem.main(tmpkipei_mu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799964
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // TODO:\
    \ Implement me\n        Left(List(\"Hello\", \"world!\"))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcuz92d0l.scala:19)\n\tat Problem.main(tmpcuz92d0l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799963
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0l\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcmmfd_tw.scala:30)\n\tat Problem.main(tmpcmmfd_tw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ - 'a' >= 0 && txt(i) - 'a' < 26 && (txt(i) - 'a') % 2 == 1) count += 1\n   \
    \             }\n                Right(count)\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn3v8tvly.scala:30)\n\tat Problem.main(tmpn3v8tvly.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        Right(txt.toLowerCase.filter(c => c >= 'a' && c <= 'z').zipWithIndex.filter(t\
    \ => t._2 % 2 == 0).map(t => t._1).length)\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps8uw_0wp.scala:28)\n\tat Problem.main(tmps8uw_0wp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799964
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        Right(txt.toLowerCase.filter(c => c >= 'a' && c <= 'z').zipWithIndex.filter(p\
    \ => p._2 % 2 == 0).map(p => p._1).length)\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpch7kndxo.scala:28)\n\tat Problem.main(tmpch7kndxo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // TODO:\
    \ Implement this method\n        Left(List())\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_bzrw37p.scala:19)\n\tat Problem.main(tmp_bzrw37p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // TODO:\
    \ Implement this function\n        Right(0l)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplubzh9t8.scala:19)\n\tat Problem.main(tmplubzh9t8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799964
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n     \
    \   else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0l\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsoygtqlr.scala:30)\n\tat Problem.main(tmpsoygtqlr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799942
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmprvqx0mzq.scala:19)\n\
    \tat Problem.main(tmprvqx0mzq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length > 1)\n            Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1)\n                Left(words.toList)\n            else {\n             \
    \   val count = txt.toLowerCase.toCharArray.filter(c => c >= 'a' && c <= 'z').map(c\
    \ => (c - 'a') % 2).count(b => b == 1)\n                Right(count)\n       \
    \     }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph2epp1cg.scala:29)\n\tat Problem.main(tmph2epp1cg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799964
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        ???\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.splitWords(tmp89hftr56.scala:16)\n\tat Problem$.main(tmp89hftr56.scala:19)\n\
    \tat Problem.main(tmp89hftr56.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799941
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        val words = txt.split(\" \")\n        if (words.length > 1) {\n\
    \            Left(words.toList)\n        } else {\n            val letters = txt.split(\"\
    ,\")\n            if (letters.length > 1) {\n                Left(letters.toList)\n\
    \            } else {\n                Right(letters.head.count(c => c - 'a' %\
    \ 2 == 1))\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5s2tbw_7.scala:29)\n\tat Problem.main(tmp5s2tbw_7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799964
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // TODO:\
    \ Implement me\n        null\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmplbhh9nvi.scala:19)\n\
    \tat Problem.main(tmplbhh9nvi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        val words = txt.split(\" \")\n        if (words.length > 1) {\n\
    \            Left(words.toList)\n        } else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) {\n                Left(commas.toList)\n\
    \            } else {\n                val count = txt.toLowerCase.toList.filter(x\
    \ => x.toInt % 2 == 1).length\n                Right(count)\n            }\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwsn7az24.scala:30)\n\tat Problem.main(tmpwsn7az24.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799964
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        Right(txt.toLowerCase.filter(c => c >= 'a' && c <= 'z').zipWithIndex.filter(p\
    \ => p._2 % 2 == 0).map(p => p._1).length)\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpch7kndxo.scala:28)\n\tat Problem.main(tmpch7kndxo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmprvqx0mzq.scala:19)\n\
    \tat Problem.main(tmprvqx0mzq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        Right(txt.toLowerCase.filter(c => c >= 'a' && c <= 'z').zipWithIndex.filter(p\
    \ => p._2 % 2 == 0).map(p => p._1).length)\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpch7kndxo.scala:28)\n\tat Problem.main(tmpch7kndxo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Write\
    \ your code here\n        null\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmptebw9nfr.scala:19)\n\
    \tat Problem.main(tmptebw9nfr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmprvqx0mzq.scala:19)\n\
    \tat Problem.main(tmprvqx0mzq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmprvqx0mzq.scala:19)\n\
    \tat Problem.main(tmprvqx0mzq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        Right(txt.toLowerCase.toCharArray.filter(x => (x - 'a') % 2 == 0).length)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnttng6ew.scala:28)\n\tat Problem.main(tmpnttng6ew.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799964
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val chars = txt.split(\",\")\n            if (chars.length\
    \ > 1) {\n                Left(chars.toList)\n            } else {\n         \
    \       Right(chars.head.toLowerCase.zipWithIndex.filter(x => x._2 % 2 == 0).map(x\
    \ => x._1 - 'a').sum)\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjsloyvdq.scala:28)\n\tat Problem.main(tmpjsloyvdq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799964
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        Right(txt.filter(c => c.isLower && c.toInt % 2 == 1).length)\n      \
    \      }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8lyjwv45.scala:28)\n\tat Problem.main(tmp8lyjwv45.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799965
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        val words = txt.split(\"\\\\s+\")\n        if (words.length >\
    \ 1) {\n            Left(words.toList)\n        } else {\n            val chars\
    \ = txt.split(\",\")\n            if (chars.length > 1) {\n                Left(chars.toList)\n\
    \            } else {\n                Right(chars.map(c => c.toLowerCase.toList.map(x\
    \ => x.toInt - ord('a'))).flatten.filter(x => x % 2 == 1).length)\n          \
    \  }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl50cqdvb.scala:24:77 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                Right(chars.map(\e[36mc\e[0m => c.toLowerCase.toList.map(\e\
    [36mx\e[0m => x.toInt - ord(\e[31m'a'\e[0m))).flatten.filter(\e[36mx\e[0m => x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m).length)\n\e[31m\e[31m   |\e[0m             \
    \                                                                ^^^\e[0m\n\e\
    [31m   |\e[0m                                                          Not found:\
    \ ord\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpl50cqdvb.scala:24:95 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                Right(chars.map(\e[36mc\e[0m => c.toLowerCase.toList.map(\e\
    [36mx\e[0m => x.toInt - ord(\e[31m'a'\e[0m))).flatten.filter(\e[36mx\e[0m => x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m).length)\n\e[31m\e[31m   |\e[0m             \
    \                                                                            \
    \      ^\e[0m\n\e[31m   |\e[0m                                          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                          \
    \                where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659799965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // TODO:\
    \ Implement me!\n        null\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmpe6alqihh.scala:19)\n\
    \tat Problem.main(tmpe6alqihh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799941
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0l\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && (txt(i) - 'a') % 2 == 1) count += 1\n           \
    \     }\n                Right(count)\n            }\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa5_tr3z6.scala:30)\n\tat Problem.main(tmpa5_tr3z6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799966
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // TODO:\
    \ Implement\n        Left(List(\"Hello\", \"world!\"))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzvoas_ai.scala:19)\n\tat Problem.main(tmpzvoas_ai.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799941
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toLowerCase.map(c => c - 'a').filter(i => i % 2 == 1).length)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi_ca93lu.scala:24)\n\tat Problem.main(tmpi_ca93lu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799967
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        Right(txt.toLowerCase.toList.filter(c => c.toInt % 2 == 1).length)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplpkl35qv.scala:28)\n\tat Problem.main(tmplpkl35qv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799967
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
    Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def\
    \ splitWords(txt : String) : Either[List[String], Long] = {\n        // Your code\
    \ here\n        null\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.util.Either.equals(Object)\"\
    \ because the return value of \"Problem$.splitWords(String)\" is null\n\tat Problem$.main(tmprvqx0mzq.scala:19)\n\
    \tat Problem.main(tmprvqx0mzq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799919
