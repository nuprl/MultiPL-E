language: scala
name: HumanEval_106_f
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var list = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) {\n                list = list :+ (1 to i).product\n          \
    \  } else {\n                list = list :+ (1 to i).sum\n            }\n    \
    \    }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803658
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n           \
    \ if (i % 2 == 0) result = result :+ (1 to i).foldLeft(1l)(_ * _)\n          \
    \  else result = result :+ (1 to i).foldLeft(0l)(_ + _)\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = new ListBuffer[Long]\n        for (i <- 1 to n.toInt) {\n        \
    \    if (i % 2 == 0) l += factorial(i)\n            else l += sum(i)\n       \
    \ }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm8gafmbb.scala:16:33 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l += factorial(i)\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not found: factorial\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm8gafmbb.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33melse\e\
    [0m l += sum(i)\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803654
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var result = List[Long]()\n   \
    \     for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result = result :+\
    \ factorial(i)\n            else result = result :+ sum(i)\n        }\n      \
    \  result\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgeg7huu3.scala:15:47 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) result = result :+ factorial(i)\n\e[31m\e[31m   |\e[0m                  \
    \                             ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                               Not found: factorial\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpgeg7huu3.scala:16:36 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e[0m result = result :+ sum(i)\n\
    \e[31m\e[31m   |\e[0m                                    ^^^\e[0m\n\e[31m   |\e\
    [0m                                    Not found: sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659803655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var result = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result += factorial(i)\n\
    \            else result += sum(i)\n        }\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp19ojjsny.scala:15:38 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) result += factorial(i)\n\e[31m\e[31m   |\e[0m                           \
    \           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \    Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp19ojjsny.scala:16:27 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            \e[33melse\e[0m result += sum(i)\n\e[31m\e[31m   |\e[0m       \
    \                    ^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n           \
    \ if (i % 2 == 0) result = result :+ factorial(i)\n            else result = result\
    \ :+ sum(i)\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjp2vb23z.scala:16:47 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) result = result :+ factorial(i)\n\e[31m\e[31m   |\e[0m                  \
    \                             ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                               Not found: factorial\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpjp2vb23z.scala:17:36 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33melse\e[0m result = result :+ sum(i)\n\
    \e[31m\e[31m   |\e[0m                                    ^^^\e[0m\n\e[31m   |\e\
    [0m                                    Not found: sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659803654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n           \
    \ if (i % 2 == 0) {\n                var factorial = 1\n                for (j\
    \ <- 1 to i) {\n                    factorial *= j\n                }\n      \
    \          result = result :+ factorial\n            } else {\n              \
    \  var sum = 0\n                for (j <- 1 to i) {\n                    sum +=\
    \ j\n                }\n                result = result :+ sum\n            }\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803658
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n           \
    \ if (i % 2 == 0) {\n                result = result :+ (1 to i).product\n   \
    \         } else {\n                result = result :+ (1 to i).sum\n        \
    \    }\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        val l = new ListBuffer[Long]\n\
    \        for (i <- 1l to n) {\n            if (i % 2 == 0) l += factorial(i)\n\
    \            else l += sum(i)\n        }\n        l.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmznfiqs0.scala:15:33 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l += factorial(i)\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not found: factorial\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmznfiqs0.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e\
    [0m l += sum(i)\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   return List[Long]()\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmn1bavcj.scala:17)\n\tat Problem.main(tmpmn1bavcj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803658
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var result = new ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n \
    \           if (i % 2 == 0) {\n                result += (1 to i).product\n  \
    \          } else {\n                result += (1 to i).sum\n            }\n \
    \       }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = new ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n      \
    \      if (i % 2 == 0) l += factorial(i)\n            else l += sum(i)\n     \
    \   }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpovvsdix3.scala:16:33 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l += factorial(i)\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not found: factorial\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpovvsdix3.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33melse\e\
    [0m l += sum(i)\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var result = List[Long]()\n   \
    \     for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result = result :+\
    \ factorial(i)\n            else result = result :+ sum(i)\n        }\n      \
    \  result\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgeg7huu3.scala:15:47 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) result = result :+ factorial(i)\n\e[31m\e[31m   |\e[0m                  \
    \                             ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                               Not found: factorial\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpgeg7huu3.scala:16:36 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e[0m result = result :+ sum(i)\n\
    \e[31m\e[31m   |\e[0m                                    ^^^\e[0m\n\e[31m   |\e\
    [0m                                    Not found: sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659803655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var l = List[Long]()\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l = l :+ factorial(i)\n \
    \           else l = l :+ sum(i)\n        }\n        l\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp7azpgzy.scala:15:37 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l = l :+ factorial(i)\n\e[31m\e[31m   |\e[0m                            \
    \         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \ Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp7azpgzy.scala:16:26\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e\
    [0m l = l :+ sum(i)\n\e[31m\e[31m   |\e[0m                          ^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659803655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n           \
    \ if (i % 2 == 0) result = result :+ factorial(i)\n            else result = result\
    \ :+ sum(i)\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjp2vb23z.scala:16:47 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) result = result :+ factorial(i)\n\e[31m\e[31m   |\e[0m                  \
    \                             ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                               Not found: factorial\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpjp2vb23z.scala:17:36 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33melse\e[0m result = result :+ sum(i)\n\
    \e[31m\e[31m   |\e[0m                                    ^^^\e[0m\n\e[31m   |\e\
    [0m                                    Not found: sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659803654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) {\n                l = l :+ (1 to i).reduceLeft(_ * _)\n         \
    \   } else {\n                l = l :+ (1 to i).reduceLeft(_ + _)\n          \
    \  }\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803658
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n           \
    \ if (i % 2 == 0) {\n                var factorial = 1\n                for (j\
    \ <- 1 to i) {\n                    factorial *= j\n                }\n      \
    \          result = result :+ factorial\n            } else {\n              \
    \  var sum = 0\n                for (j <- 1 to i) {\n                    sum +=\
    \ j\n                }\n                result = result :+ sum\n            }\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803658
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) {\n                l = l :+ (1l to i.toLong).product\n           \
    \ } else {\n                l = l :+ (1l to i.toLong).sum\n            }\n   \
    \     }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var list = ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n       \
    \     if (i % 2 == 0) list += factorial(i)\n            else list += sum(i)\n\
    \        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdjs87g0w.scala:16:36 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) list += factorial(i)\n\e[31m\e[31m   |\e[0m                             \
    \       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    Not\
    \ found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdjs87g0w.scala:17:25\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33melse\e\
    [0m list += sum(i)\n\e[31m\e[31m   |\e[0m                         ^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659803654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var l = List[Long]()\n        for\
    \ (i <- 1l to n) {\n            if (i % 2 == 0) {\n                var f = 1l\n\
    \                for (j <- 1l to i) f *= j\n                l = l :+ f\n     \
    \       } else {\n                var s = 0l\n                for (j <- 1l to\
    \ i) s += j\n                l = l :+ s\n            }\n        }\n        l\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803658
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var list = List[Long]()\n     \
    \   for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n               \
    \ var factorial = 1\n                for (j <- 1 to i) {\n                   \
    \ factorial *= j\n                }\n                list = list :+ factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ list = list :+ sum\n            }\n        }\n        list\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803658
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var list = List[Long]()\n     \
    \   for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n               \
    \ var factorial = 1l\n                for (j <- 1 to i) {\n                  \
    \  factorial *= j\n                }\n                list = list :+ factorial\n\
    \            } else {\n                var sum = 0l\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ list = list :+ sum\n            }\n        }\n        list\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var result = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result += factorial(i)\n\
    \            else result += sum(i)\n        }\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp19ojjsny.scala:15:38 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) result += factorial(i)\n\e[31m\e[31m   |\e[0m                           \
    \           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \    Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp19ojjsny.scala:16:27 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            \e[33melse\e[0m result += sum(i)\n\e[31m\e[31m   |\e[0m       \
    \                    ^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var l = List[Long]()\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l = l :+ (1 to i).product\n\
    \            else l = l :+ (1 to i).sum\n        }\n        l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n          \
    \  if (i % 2 == 0) l += factorial(i)\n            else l += sum(i)\n        }\n\
    \        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8jj_8eob.scala:16:33 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l += factorial(i)\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not found: factorial\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8jj_8eob.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33melse\e\
    [0m l += sum(i)\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) {\n                var factorial = 1\n                for (j <- 1\
    \ to i) {\n                    factorial *= j\n                }\n           \
    \     l = l :+ factorial\n            } else {\n                var sum = 0\n\
    \                for (j <- 1 to i) {\n                    sum += j\n         \
    \       }\n                l = l :+ sum\n            }\n        }\n        return\
    \ l\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803658
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var result = new ListBuffer[Long]\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      result += (1 to i).product\n            } else {\n                result\
    \ += (1 to i).sum\n            }\n        }\n        result.toList\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var result = List[Long]()\n   \
    \     for (i <- 1l to n) {\n            if (i % 2 == 0) result = result :+ factorial(i)\n\
    \            else result = result :+ sum(i)\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpig14xbx0.scala:15:47 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) result = result :+ factorial(i)\n\e[31m\e[31m   |\e[0m                  \
    \                             ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                               Not found: factorial\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpig14xbx0.scala:16:36 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e[0m result = result :+ sum(i)\n\
    \e[31m\e[31m   |\e[0m                                    ^^^\e[0m\n\e[31m   |\e\
    [0m                                    Not found: sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659803660
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var result = new ListBuffer[Long]()\n\
    \        for (i <- 1l to n) {\n            if (i % 2 == 0) {\n               \
    \ result += (1l to i).product\n            } else {\n                result +=\
    \ (1l to i).sum\n            }\n        }\n        result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803667
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var result = List[Long]()\n   \
    \     for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result = result :+\
    \ factorial(i)\n            else result = result :+ sum(i)\n        }\n      \
    \  result\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgeg7huu3.scala:15:47 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) result = result :+ factorial(i)\n\e[31m\e[31m   |\e[0m                  \
    \                             ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                               Not found: factorial\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpgeg7huu3.scala:16:36 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e[0m result = result :+ sum(i)\n\
    \e[31m\e[31m   |\e[0m                                    ^^^\e[0m\n\e[31m   |\e\
    [0m                                    Not found: sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659803655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var result = ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                result += factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ result += sum\n            }\n        }\n        result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var l = List[Long]()\n        for\
    \ (i <- 1l to n) {\n            if (i % 2 == 0) {\n                var factorial\
    \ = 1l\n                for (j <- 1l to i) {\n                    factorial *=\
    \ j\n                }\n                l = l :+ factorial\n            } else\
    \ {\n                var sum = 0l\n                for (j <- 1l to i) {\n    \
    \                sum += j\n                }\n                l = l :+ sum\n \
    \           }\n        }\n        return l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803666
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   val list = new ListBuffer[Long]\n        for (i <- 1 to n.toInt) {\n     \
    \       if (i % 2 == 0) {\n                list += factorial(i)\n            }\
    \ else {\n                list += sum(i)\n            }\n        }\n        list.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppymljzfi.scala:17:24 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                list += factorial(i)\n\e[31m\e[31m  \
    \ |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \          Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmppymljzfi.scala:19:24 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m                list += sum(i)\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^\e[0m\n\e[31m   |\e[0m                        Not found: sum\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659803661
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var l = List[Long]()\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                l = l\
    \ :+ factorial(i)\n            } else {\n                l = l :+ sum(i)\n   \
    \         }\n        }\n        l\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvpiieobl.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                l = l :+ factorial(i)\n\e[31m\e[31m \
    \  |\e[0m                         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \             Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpvpiieobl.scala:18:25 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m                l = l :+ sum(i)\n\e[31m\e[31m   |\e[0m                    \
    \     ^^^\e[0m\n\e[31m   |\e[0m                         Not found: sum\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659803661
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var list = List[Long]()\n     \
    \   for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n               \
    \ list = list :+ factorial(i)\n            } else {\n                list = list\
    \ :+ sum(i)\n            }\n        }\n        list\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi_akpp7c.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                list = list :+ factorial(i)\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                             Not found: factorial\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpi_akpp7c.scala:18:31 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                list = list :+ sum(i)\n\e[31m\e[31m \
    \  |\e[0m                               ^^^\e[0m\n\e[31m   |\e[0m            \
    \                   Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803662
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var l = List[Long]()\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l = l :+ factorial(i)\n \
    \           else l = l :+ sum(i)\n        }\n        l\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp7azpgzy.scala:15:37 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l = l :+ factorial(i)\n\e[31m\e[31m   |\e[0m                            \
    \         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \ Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp7azpgzy.scala:16:26\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e\
    [0m l = l :+ sum(i)\n\e[31m\e[31m   |\e[0m                          ^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659803655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) {\n                l = l :+ (1 to i).product\n            } else {\n\
    \                l = l :+ (1 to i).sum\n            }\n        }\n        l\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803666
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var l = List[Long]()\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l = l :+ (1 to i).product\n\
    \            else l = l :+ (1 to i).sum\n        }\n        l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803659
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) {\n                var f = 1\n                for (j <- 1 to i) {\n\
    \                    f *= j\n                }\n                l = l :+ f.toLong\n\
    \            } else {\n                var s = 0\n                for (j <- 1\
    \ to i) {\n                    s += j\n                }\n                l =\
    \ l :+ s.toLong\n            }\n        }\n        return l\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803666
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var list = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) {\n                list = list :+ (1 to i).foldLeft(1L)(_ * _)\n\
    \            } else {\n                list = list :+ (1 to i).sum\n         \
    \   }\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803669
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var result = List[Long]()\n   \
    \     for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result = result :+\
    \ factorial(i)\n            else result = result :+ sum(i)\n        }\n      \
    \  result\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgeg7huu3.scala:15:47 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) result = result :+ factorial(i)\n\e[31m\e[31m   |\e[0m                  \
    \                             ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                               Not found: factorial\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpgeg7huu3.scala:16:36 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e[0m result = result :+ sum(i)\n\
    \e[31m\e[31m   |\e[0m                                    ^^^\e[0m\n\e[31m   |\e\
    [0m                                    Not found: sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659803655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        val l = new ListBuffer[Long]\n\
    \        for (i <- 1l to n) {\n            if (i % 2 == 0) l += factorial(i)\n\
    \            else l += sum(i)\n        }\n        l.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmznfiqs0.scala:15:33 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l += factorial(i)\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not found: factorial\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmznfiqs0.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e\
    [0m l += sum(i)\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var l = List[Long]()\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                var f\
    \ = 1\n                for (j <- 1 to i) f *= j\n                l = l :+ f.toLong\n\
    \            } else {\n                var s = 0\n                for (j <- 1\
    \ to i) s += j\n                l = l :+ s.toLong\n            }\n        }\n\
    \        l\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803668
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n          \
    \  if (i % 2 == 0) {\n                l += (1 to i).product\n            } else\
    \ {\n                l += (1 to i).sum\n            }\n        }\n        l.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803669
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var result = new ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n \
    \           if (i % 2 == 0) {\n                var factorial = 1\n           \
    \     for (j <- 1 to i) {\n                    factorial *= j\n              \
    \  }\n                result += factorial\n            } else {\n            \
    \    var sum = 0\n                for (j <- 1 to i) {\n                    sum\
    \ += j\n                }\n                result += sum\n            }\n    \
    \    }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803669
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n           \
    \ if (i % 2 == 0) {\n                var factorial = 1\n                for (j\
    \ <- 1 to i) {\n                    factorial *= j\n                }\n      \
    \          result = result :+ factorial\n            } else {\n              \
    \  var sum = 0\n                for (j <- 1 to i) {\n                    sum +=\
    \ j\n                }\n                result = result :+ sum\n            }\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803658
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var result = List[Long]()\n   \
    \     for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n             \
    \   result = result :+ (1 to i).product\n            } else {\n              \
    \  result = result :+ (1 to i).sum\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803668
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n           \
    \ if (i % 2 == 0) {\n                result = result :+ (1 to i).product\n   \
    \         } else {\n                result = result :+ (1 to i).sum\n        \
    \    }\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803658
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        val list = new ListBuffer[Long]\n\
    \        for (i <- 1l to n) {\n            if (i % 2 == 0) {\n               \
    \ var factorial = 1l\n                for (j <- 1l to i) factorial *= j\n    \
    \            list += factorial\n            }\n            else {\n          \
    \      var sum = 0l\n                for (j <- 1l to i) sum += j\n           \
    \     list += sum\n            }\n        }\n        list.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803669
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n           \
    \ if (i % 2 == 0) {\n                result = result :+ (1 to i).product\n   \
    \         } else {\n                result = result :+ (1 to i).sum\n        \
    \    }\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var result = List[Long]()\n   \
    \     for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result = result :+\
    \ factorial(i)\n            else result = result :+ sum(i)\n        }\n      \
    \  result\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgeg7huu3.scala:15:47 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) result = result :+ factorial(i)\n\e[31m\e[31m   |\e[0m                  \
    \                             ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                               Not found: factorial\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpgeg7huu3.scala:16:36 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e[0m result = result :+ sum(i)\n\
    \e[31m\e[31m   |\e[0m                                    ^^^\e[0m\n\e[31m   |\e\
    [0m                                    Not found: sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659803655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var list = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) {\n                var factorial = 1\n                for (j <-\
    \ 1 to i) {\n                    factorial *= j\n                }\n         \
    \       list = list :+ factorial\n            } else {\n                var sum\
    \ = 0\n                for (j <- 1 to i) {\n                    sum += j\n   \
    \             }\n                list = list :+ sum\n            }\n        }\n\
    \        return list\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803669
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var l = List[Long]()\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l = l :+ (1 to i).product\n\
    \            else l = l :+ (1 to i).sum\n        }\n        l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803659
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var lst = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) {\n                var fact = 1\n                for (j <- 1 to\
    \ i) {\n                    fact *= j\n                }\n                lst\
    \ = lst :+ fact.toLong\n            } else {\n                var sum = 0\n  \
    \              for (j <- 1 to i) {\n                    sum += j\n           \
    \     }\n                lst = lst :+ sum.toLong\n            }\n        }\n \
    \       return lst\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803669
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var result = List[Long]()\n   \
    \     for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result = result :+\
    \ factorial(i)\n            else result = result :+ sum(i)\n        }\n      \
    \  result\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgeg7huu3.scala:15:47 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) result = result :+ factorial(i)\n\e[31m\e[31m   |\e[0m                  \
    \                             ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                               Not found: factorial\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpgeg7huu3.scala:16:36 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e[0m result = result :+ sum(i)\n\
    \e[31m\e[31m   |\e[0m                                    ^^^\e[0m\n\e[31m   |\e\
    [0m                                    Not found: sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659803655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = new ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n      \
    \      if (i % 2 == 0) l += factorial(i)\n            else l += sum(i)\n     \
    \   }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpovvsdix3.scala:16:33 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l += factorial(i)\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not found: factorial\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpovvsdix3.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33melse\e\
    [0m l += sum(i)\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   val list = ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n       \
    \     if (i % 2 == 0) {\n                list += factorial(i)\n            } else\
    \ {\n                list += sum(i)\n            }\n        }\n        list.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9guud4zn.scala:17:24 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                list += factorial(i)\n\e[31m\e[31m  \
    \ |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \          Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp9guud4zn.scala:19:24 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m                list += sum(i)\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^\e[0m\n\e[31m   |\e[0m                        Not found: sum\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659803666
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var l = List[Long]()\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l = l :+ (1 to i).product\n\
    \            else l = l :+ (1 to i).sum\n        }\n        l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803659
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) {\n                var fact = 1\n                for (j <- 1 to i)\
    \ {\n                    fact *= j\n                }\n                l = l :+\
    \ fact\n            } else {\n                var sum = 0\n                for\
    \ (j <- 1 to i) {\n                    sum += j\n                }\n         \
    \       l = l :+ sum\n            }\n        }\n        return l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803669
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) {\n                var fact = 1\n                for (j <- 1 to i)\
    \ {\n                    fact *= j\n                }\n                l = l :+\
    \ fact\n            } else {\n                var sum = 0\n                for\
    \ (j <- 1 to i) {\n                    sum += j\n                }\n         \
    \       l = l :+ sum\n            }\n        }\n        return l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803669
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var l = List[Long]()\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l = l :+ factorial(i)\n \
    \           else l = l :+ sum(i)\n        }\n        l\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp7azpgzy.scala:15:37 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l = l :+ factorial(i)\n\e[31m\e[31m   |\e[0m                            \
    \         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \ Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp7azpgzy.scala:16:26\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e\
    [0m l = l :+ sum(i)\n\e[31m\e[31m   |\e[0m                          ^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659803655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var l = List[Long]()\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l = l :+ (1 to i).product\n\
    \            else l = l :+ (1 to i).sum\n        }\n        l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803659
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var l = List[Long]()\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l = l :+ (1l to i.toLong).product\n\
    \            else l = l :+ (1l to i.toLong).sum\n        }\n        l\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803669
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var result = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                result += factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ result += sum\n            }\n        }\n        result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803669
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var l = List[Long]()\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                var fact\
    \ = 1\n                for (j <- 1 to i) fact *= j\n                l = l :+ fact\n\
    \            }\n            else {\n                var sum = 0\n            \
    \    for (j <- 1 to i) sum += j\n                l = l :+ sum\n            }\n\
    \        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803669
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var result = ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n     \
    \       if (i % 2 == 0) {\n                var factorial = 1\n               \
    \ for (j <- 1 to i) {\n                    factorial *= j\n                }\n\
    \                result += factorial\n            } else {\n                var\
    \ sum = 0\n                for (j <- 1 to i) {\n                    sum += j\n\
    \                }\n                result += sum\n            }\n        }\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803669
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var l = List[Long]()\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l = l :+ factorial(i)\n \
    \           else l = l :+ sum(i)\n        }\n        l\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp7azpgzy.scala:15:37 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l = l :+ factorial(i)\n\e[31m\e[31m   |\e[0m                            \
    \         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \ Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp7azpgzy.scala:16:26\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e\
    [0m l = l :+ sum(i)\n\e[31m\e[31m   |\e[0m                          ^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659803655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var result = new ListBuffer[Long]\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result += factorial(i)\n\
    \            else result += sum(i)\n        }\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj1ml0wt0.scala:15:38 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) result += factorial(i)\n\e[31m\e[31m   |\e[0m                           \
    \           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \    Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpj1ml0wt0.scala:16:27 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            \e[33melse\e[0m result += sum(i)\n\e[31m\e[31m   |\e[0m       \
    \                    ^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803668
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        val l = new ListBuffer[Long]\n\
    \        for (i <- 1l to n) {\n            if (i % 2 == 0) l += factorial(i)\n\
    \            else l += sum(i)\n        }\n        l.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmznfiqs0.scala:15:33 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l += factorial(i)\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not found: factorial\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmznfiqs0.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e\
    [0m l += sum(i)\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var list = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) {\n                var factorial = 1\n                for (j <-\
    \ 1 to i) {\n                    factorial *= j\n                }\n         \
    \       list = list :+ factorial\n            } else {\n                var sum\
    \ = 0\n                for (j <- 1 to i) {\n                    sum += j\n   \
    \             }\n                list = list :+ sum\n            }\n        }\n\
    \        list\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var result = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result += factorial(i)\n\
    \            else result += sum(i)\n        }\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp19ojjsny.scala:15:38 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) result += factorial(i)\n\e[31m\e[31m   |\e[0m                           \
    \           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \    Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp19ojjsny.scala:16:27 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            \e[33melse\e[0m result += sum(i)\n\e[31m\e[31m   |\e[0m       \
    \                    ^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var result = ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n     \
    \       if (i % 2 == 0) {\n                result += (1 to i).product\n      \
    \      } else {\n                result += (1 to i).sum\n            }\n     \
    \   }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803673
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var result = List[Long]()\n        for (i <- 1l to n) {\n            if (i\
    \ % 2 == 0) {\n                result = result :+ (1l to i).product\n        \
    \    } else {\n                result = result :+ (1l to i).sum\n            }\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803674
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var l = List[Long]()\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                var fact\
    \ = 1l\n                for (j <- 1 to i) {\n                    fact *= j\n \
    \               }\n                l = l :+ fact\n            } else {\n     \
    \           var sum = 0l\n                for (j <- 1 to i) {\n              \
    \      sum += j\n                }\n                l = l :+ sum\n           \
    \ }\n        }\n        return l\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803676
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var l = ListBuffer[Long]()\n  \
    \      for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l += factorial(i)\n\
    \            else l += sum(i)\n        }\n        l.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgbngo3vf.scala:15:33 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l += factorial(i)\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not found: factorial\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgbngo3vf.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e\
    [0m l += sum(i)\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803671
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) l = l :+ factorial(i)\n            else l = l :+ sum(i)\n        }\n\
    \        l\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf8gm50m2.scala:16:37 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l = l :+ factorial(i)\n\e[31m\e[31m   |\e[0m                            \
    \         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \ Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf8gm50m2.scala:17:26\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33melse\e\
    [0m l = l :+ sum(i)\n\e[31m\e[31m   |\e[0m                          ^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659803672
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var l = List[Long]()\n        for\
    \ (i <- 1l to n) {\n            if (i % 2 == 0) {\n                l = l :+ (1l\
    \ to i).product\n            } else {\n                l = l :+ (1l to i).sum\n\
    \            }\n        }\n        l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803677
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   val list = new ListBuffer[Long]\n        for (i <- 1 to n.toInt) {\n     \
    \       if (i % 2 == 0) {\n                list += (1 to i).product\n        \
    \    } else {\n                list += (1 to i).sum\n            }\n        }\n\
    \        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803677
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var result = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result += (1l\
    \ to i).product\n            else result += (1l to i).sum\n        }\n       \
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803678
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n           \
    \ if (i % 2 == 0) {\n                var factorial = 1l\n                for (j\
    \ <- 1 to i) {\n                    factorial *= j\n                }\n      \
    \          result = result :+ factorial\n            } else {\n              \
    \  var sum = 0l\n                for (j <- 1 to i) {\n                    sum\
    \ += j\n                }\n                result = result :+ sum\n          \
    \  }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var list = new ListBuffer[Long]\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) list += factorial(i)\n\
    \            else list += sum(i)\n        }\n        list.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbxa7c3vj.scala:15:36 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) list += factorial(i)\n\e[31m\e[31m   |\e[0m                             \
    \       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    Not\
    \ found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbxa7c3vj.scala:16:25\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e\
    [0m list += sum(i)\n\e[31m\e[31m   |\e[0m                         ^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659803675
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        val l = ListBuffer[Long]()\n  \
    \      for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l += factorial(i)\n\
    \            else l += sum(i)\n        }\n        l.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkh78xb_6.scala:15:33 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l += factorial(i)\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not found: factorial\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkh78xb_6.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e\
    [0m l += sum(i)\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) l = l :+ (1 to i).product\n            else l = l :+ (1 to i).sum\n\
    \        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803679
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var result = List[Long]()\n   \
    \     for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result = result :+\
    \ (1 to i).product\n            else result = result :+ (1 to i).sum\n       \
    \ }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803679
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = new ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n      \
    \      if (i % 2 == 0) l += factorial(i)\n            else l += sum(i)\n     \
    \   }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpovvsdix3.scala:16:33 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l += factorial(i)\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not found: factorial\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpovvsdix3.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33melse\e\
    [0m l += sum(i)\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   // Return the list of Long\n        var result = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result += factorial(i)\n\
    \            else result += sum(i)\n        }\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4w19r3yl.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) result += factorial(i)\n\e[31m\e[31m   |\e[0m                           \
    \           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \    Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp4w19r3yl.scala:18:27 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            \e[33melse\e[0m result += sum(i)\n\e[31m\e[31m   |\e[0m       \
    \                    ^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n          \
    \  if (i % 2 == 0) {\n                var p = 1\n                for (j <- 1 to\
    \ i) {\n                    p *= j\n                }\n                l += p\n\
    \            } else {\n                var p = 0\n                for (j <- 1\
    \ to i) {\n                    p += j\n                }\n                l +=\
    \ p\n            }\n        }\n        l.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803679
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var l = List[Long]()\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l = l :+ factorial(i)\n \
    \           else l = l :+ sum(i)\n        }\n        l\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp7azpgzy.scala:15:37 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l = l :+ factorial(i)\n\e[31m\e[31m   |\e[0m                            \
    \         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \ Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp7azpgzy.scala:16:26\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e\
    [0m l = l :+ sum(i)\n\e[31m\e[31m   |\e[0m                          ^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659803655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var l = ListBuffer[Long]()\n  \
    \      for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l += factorial(i)\n\
    \            else l += sum(i)\n        }\n        l.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgbngo3vf.scala:15:33 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l += factorial(i)\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not found: factorial\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgbngo3vf.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e\
    [0m l += sum(i)\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803671
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) {\n                l = l :+ factorial(i)\n            } else {\n \
    \               l = l :+ sum(i)\n            }\n        }\n        l\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt632l2ok.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                l = l :+ factorial(i)\n\e[31m\e[31m \
    \  |\e[0m                         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \             Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpt632l2ok.scala:19:25 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m                l = l :+ sum(i)\n\e[31m\e[31m   |\e[0m                    \
    \     ^^^\e[0m\n\e[31m   |\e[0m                         Not found: sum\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659803676
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n          \
    \  if (i % 2 == 0) l += factorial(i)\n            else l += sum(i)\n        }\n\
    \        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8jj_8eob.scala:16:33 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l += factorial(i)\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not found: factorial\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8jj_8eob.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33melse\e\
    [0m l += sum(i)\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var result = new ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n \
    \           if (i % 2 == 0) {\n                var factorial = 1l\n          \
    \      for (j <- 1 to i) factorial *= j\n                result += factorial\n\
    \            }\n            else {\n                var sum = 0l\n           \
    \     for (j <- 1 to i) sum += j\n                result += sum\n            }\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803679
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var result = new ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n \
    \           if (i % 2 == 0) {\n                var factorial = 1\n           \
    \     for (j <- 1 to i) {\n                    factorial *= j\n              \
    \  }\n                result += factorial\n            } else {\n            \
    \    var sum = 0\n                for (j <- 1 to i) {\n                    sum\
    \ += j\n                }\n                result += sum\n            }\n    \
    \    }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803669
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) l = l :+ factorial(i)\n            else l = l :+ sum(i)\n        }\n\
    \        l\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf8gm50m2.scala:16:37 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l = l :+ factorial(i)\n\e[31m\e[31m   |\e[0m                            \
    \         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \ Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf8gm50m2.scala:17:26\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33melse\e\
    [0m l = l :+ sum(i)\n\e[31m\e[31m   |\e[0m                          ^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659803672
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var list = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) {\n                list = list :+ (1l to i.toLong).product\n  \
    \          } else {\n                list = list :+ (1l to i.toLong).sum\n   \
    \         }\n        }\n        list\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803679
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        val list = new ListBuffer[Long]\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) list += factorial(i)\n\
    \            else list += sum(i)\n        }\n        list.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp7tp647v.scala:15:36 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) list += factorial(i)\n\e[31m\e[31m   |\e[0m                             \
    \       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    Not\
    \ found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp7tp647v.scala:16:25\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e\
    [0m list += sum(i)\n\e[31m\e[31m   |\e[0m                         ^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659803677
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var result = List[Long]()\n   \
    \     for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result = result :+\
    \ (1 to i).foldLeft(1l)(_ * _)\n            else result = result :+ (1 to i).sum\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803681
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var l = List[Long]()\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                var fact\
    \ = 1\n                for (j <- 1 to i) fact *= j\n                l = l :+ fact\n\
    \            }\n            else {\n                var sum = 0\n            \
    \    for (j <- 1 to i) sum += j\n                l = l :+ sum\n            }\n\
    \        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803669
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var result = List[Long]()\n   \
    \     for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n             \
    \   var factorial = 1\n                for (j <- 1 to i) {\n                 \
    \   factorial *= j\n                }\n                result = result :+ factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ result = result :+ sum\n            }\n        }\n        return result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n          \
    \  if (i % 2 == 0) l += factorial(i)\n            else l += sum(i)\n        }\n\
    \        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8jj_8eob.scala:16:33 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l += factorial(i)\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not found: factorial\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8jj_8eob.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33melse\e\
    [0m l += sum(i)\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var result = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                result += factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ result += sum\n            }\n        }\n        result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803669
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        val l = new ListBuffer[Long]\n\
    \        for (i <- 1l to n) {\n            if (i % 2 == 0) l += factorial(i)\n\
    \            else l += sum(i)\n        }\n        l.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmznfiqs0.scala:15:33 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l += factorial(i)\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not found: factorial\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmznfiqs0.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e\
    [0m l += sum(i)\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var result = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result += factorial(i)\n\
    \            else result += sum(i)\n        }\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp19ojjsny.scala:15:38 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) result += factorial(i)\n\e[31m\e[31m   |\e[0m                           \
    \           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \    Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp19ojjsny.scala:16:27 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            \e[33melse\e[0m result += sum(i)\n\e[31m\e[31m   |\e[0m       \
    \                    ^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var result = new ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n \
    \           if (i % 2 == 0) {\n                var factorial = 1l\n          \
    \      for (j <- 1 to i) {\n                    factorial *= j\n             \
    \   }\n                result += factorial\n            } else {\n           \
    \     var sum = 0l\n                for (j <- 1 to i) {\n                    sum\
    \ += j\n                }\n                result += sum\n            }\n    \
    \    }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803681
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var l = List[Long]()\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l = l :+ (1 to i).product\n\
    \            else l = l :+ (1 to i).sum\n        }\n        l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803659
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var l = List[Long]()\n        for\
    \ (i <- 1l to n) {\n            if (i % 2 == 0) l = l :+ (1l to i).product\n \
    \           else l = l :+ (1l to i).sum\n        }\n        l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803683
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) {\n                l = l :+ (1 to i).product\n            } else {\n\
    \                l = l :+ (1 to i).sum\n            }\n        }\n        l\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803666
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var result = new ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n \
    \           if (i % 2 == 0) {\n                result += factorial(i)\n      \
    \      } else {\n                result += sum(i)\n            }\n        }\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj5sab7cc.scala:17:26 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                result += factorial(i)\n\e[31m\e[31m\
    \   |\e[0m                          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpj5sab7cc.scala:19:26 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m                result += sum(i)\n\e[31m\e[31m   |\e[0m  \
    \                        ^^^\e[0m\n\e[31m   |\e[0m                          Not\
    \ found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803678
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) {\n                l = l :+ (1 to i).product\n            } else {\n\
    \                l = l :+ (1 to i).sum\n            }\n        }\n        l\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803666
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var result = List[Long]()\n   \
    \     for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result = result :+\
    \ (1 to i).product\n            else result = result :+ (1 to i).sum\n       \
    \ }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803679
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) l = l :+ factorial(i)\n            else l = l :+ sum(i)\n        }\n\
    \        l\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf8gm50m2.scala:16:37 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l = l :+ factorial(i)\n\e[31m\e[31m   |\e[0m                            \
    \         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \ Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf8gm50m2.scala:17:26\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33melse\e\
    [0m l = l :+ sum(i)\n\e[31m\e[31m   |\e[0m                          ^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659803672
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var list = new ListBuffer[Long]\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      list += (1 to i).product\n            } else {\n                list +=\
    \ (1 to i).sum\n            }\n        }\n        list.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803684
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var list = List[Long]()\n        for (i <- 1l to n) {\n            if (i %\
    \ 2 == 0) {\n                var fact = 1l\n                for (j <- 1l to i)\
    \ {\n                    fact *= j\n                }\n                list =\
    \ list :+ fact\n            } else {\n                var sum = 0l\n         \
    \       for (j <- 1l to i) {\n                    sum += j\n                }\n\
    \                list = list :+ sum\n            }\n        }\n        list\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803684
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = List[Long]()\n        for (i <- 1l to n) {\n            if (i % 2\
    \ == 0) l = l :+ (1l to i).product\n            else l = l :+ (1l to i).sum\n\
    \        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803685
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var result = List[Long]()\n   \
    \     for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result = result :+\
    \ factorial(i)\n            else result = result :+ sum(i)\n        }\n      \
    \  result\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgeg7huu3.scala:15:47 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) result = result :+ factorial(i)\n\e[31m\e[31m   |\e[0m                  \
    \                             ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                               Not found: factorial\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpgeg7huu3.scala:16:36 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e[0m result = result :+ sum(i)\n\
    \e[31m\e[31m   |\e[0m                                    ^^^\e[0m\n\e[31m   |\e\
    [0m                                    Not found: sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659803655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) {\n                l = l :+ (1 to i).product\n            } else {\n\
    \                l = l :+ (1 to i).sum\n            }\n        }\n        l\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803666
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var list = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) {\n                list = list :+ factorial(i)\n            } else\
    \ {\n                list = list :+ sum(i)\n            }\n        }\n       \
    \ list\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc16cuy8n.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                list = list :+ factorial(i)\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                             Not found: factorial\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpc16cuy8n.scala:19:31 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                list = list :+ sum(i)\n\e[31m\e[31m \
    \  |\e[0m                               ^^^\e[0m\n\e[31m   |\e[0m            \
    \                   Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803682
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var l = List[Long]()\n        for\
    \ (i <- 1l to n) {\n            if (i % 2 == 0) {\n                l = l :+ (1l\
    \ to i).product\n            } else {\n                l = l :+ (1l to i).sum\n\
    \            }\n        }\n        l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803677
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   val l = new ListBuffer[Long]\n        for (i <- 1l to n) {\n            if\
    \ (i % 2 == 0) l += factorial(i)\n            else l += sum(i)\n        }\n  \
    \      l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2s1vvnc2.scala:16:33 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l += factorial(i)\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not found: factorial\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2s1vvnc2.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33melse\e\
    [0m l += sum(i)\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803683
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) {\n                l = l :+ (1 to i).foldLeft(1l)(_ * _)\n       \
    \     } else {\n                l = l :+ (1 to i).foldLeft(0l)(_ + _)\n      \
    \      }\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803686
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var result = List[Long]()\n   \
    \     for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n             \
    \   result = result :+ (1 to i).foldLeft(1l)(_ * _)\n            } else {\n  \
    \              result = result :+ (1 to i).sum\n            }\n        }\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803687
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) {\n                l = l :+ (1 to i).product\n            } else {\n\
    \                l = l :+ (1 to i).sum\n            }\n        }\n        l\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803666
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        val list = new ListBuffer[Long]\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) list += factorial(i)\n\
    \            else list += sum(i)\n        }\n        list.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp7tp647v.scala:15:36 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) list += factorial(i)\n\e[31m\e[31m   |\e[0m                             \
    \       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    Not\
    \ found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp7tp647v.scala:16:25\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e\
    [0m list += sum(i)\n\e[31m\e[31m   |\e[0m                         ^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659803677
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var list = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) list += factorial(i)\n\
    \            else list += sum(i)\n        }\n        list.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk00mnchp.scala:15:36 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) list += factorial(i)\n\e[31m\e[31m   |\e[0m                             \
    \       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    Not\
    \ found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk00mnchp.scala:16:25\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e\
    [0m list += sum(i)\n\e[31m\e[31m   |\e[0m                         ^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659803683
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) {\n                l = l :+ (1 to i).foldLeft(1L)(_ * _)\n       \
    \     } else {\n                l = l :+ (1 to i).sum\n            }\n       \
    \ }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803687
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var l = List[Long]()\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                var fact\
    \ = 1\n                for (j <- 1 to i) {\n                    fact *= j\n  \
    \              }\n                l = l :+ fact.toLong\n            } else {\n\
    \                var sum = 0\n                for (j <- 1 to i) {\n          \
    \          sum += j\n                }\n                l = l :+ sum.toLong\n\
    \            }\n        }\n        return l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n          \
    \  if (i % 2 == 0) l += factorial(i)\n            else l += sum(i)\n        }\n\
    \        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8jj_8eob.scala:16:33 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l += factorial(i)\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not found: factorial\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8jj_8eob.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33melse\e\
    [0m l += sum(i)\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n           \
    \ if (i % 2 == 0) {\n                var factorial = 1\n                for (j\
    \ <- 1 to i) {\n                    factorial *= j\n                }\n      \
    \          result = result :+ factorial\n            } else {\n              \
    \  var sum = 0\n                for (j <- 1 to i) {\n                    sum +=\
    \ j\n                }\n                result = result :+ sum\n            }\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803658
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n           \
    \ if (i % 2 == 0) {\n                result = result :+ (1 to i).product\n   \
    \         } else {\n                result = result :+ (1 to i).sum\n        \
    \    }\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   val l = new ListBuffer[Long]\n        for (i <- 1l to n) {\n            if\
    \ (i % 2 == 0) l += factorial(i)\n            else l += sum(i)\n        }\n  \
    \      l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2s1vvnc2.scala:16:33 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l += factorial(i)\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not found: factorial\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2s1vvnc2.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33melse\e\
    [0m l += sum(i)\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803683
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        val list = new ListBuffer[Long]()\n\
    \        for (i <- 1l to n) {\n            if (i % 2 == 0) {\n               \
    \ var factorial = 1l\n                for (j <- 1l to i) {\n                 \
    \   factorial *= j\n                }\n                list += factorial\n   \
    \         } else {\n                var sum = 0l\n                for (j <- 1l\
    \ to i) {\n                    sum += j\n                }\n                list\
    \ += sum\n            }\n        }\n        list.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803688
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   // Return the list of Long\n        var list = new ListBuffer[Long]()\n  \
    \      for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n            \
    \    var fact = 1\n                for (j <- 1 to i) {\n                    fact\
    \ *= j\n                }\n                list += fact\n            } else {\n\
    \                var sum = 0\n                for (j <- 1 to i) {\n          \
    \          sum += j\n                }\n                list += sum\n        \
    \    }\n        }\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803689
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   return List()\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo015p61y.scala:17)\n\tat Problem.main(tmpo015p61y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803688
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) {\n                l = l :+ (1 to i).product\n            } else {\n\
    \                l = l :+ (1 to i).sum\n            }\n        }\n        l\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803666
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) l = l :+ factorial(i)\n            else l = l :+ sum(i)\n        }\n\
    \        l\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf8gm50m2.scala:16:37 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l = l :+ factorial(i)\n\e[31m\e[31m   |\e[0m                            \
    \         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \ Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf8gm50m2.scala:17:26\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33melse\e\
    [0m l = l :+ sum(i)\n\e[31m\e[31m   |\e[0m                          ^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659803672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        val list = new ListBuffer[Long]\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) list += factorial(i)\n\
    \            else list += sum(i)\n        }\n        list.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp7tp647v.scala:15:36 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) list += factorial(i)\n\e[31m\e[31m   |\e[0m                             \
    \       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    Not\
    \ found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp7tp647v.scala:16:25\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e\
    [0m list += sum(i)\n\e[31m\e[31m   |\e[0m                         ^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659803677
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n          \
    \  if (i % 2 == 0) {\n                l += factorial(i)\n            } else {\n\
    \                l += sum(i)\n            }\n        }\n        l.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpybq18gnk.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                l += factorial(i)\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not\
    \ found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpybq18gnk.scala:19:21\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                l += sum(i)\n\
    \e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e[0m          \
    \           Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803686
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n           \
    \ if (i % 2 == 0) {\n                result = result :+ (1 to i).product\n   \
    \         } else {\n                result = result :+ (1 to i).sum\n        \
    \    }\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803658
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n           \
    \ if (i % 2 == 0) {\n                result = result :+ (1 to i).product\n   \
    \         } else {\n                result = result :+ (1 to i).sum\n        \
    \    }\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803658
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var list = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                list += factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ list += sum\n            }\n        }\n        list.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803689
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) {\n                l = l :+ (1 to i).product\n            } else {\n\
    \                l = l :+ (1 to i).sum\n            }\n        }\n        l\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803666
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var result = List[Long]()\n   \
    \     for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n             \
    \   var factorial = 1\n                for (j <- 1 to i) factorial *= j\n    \
    \            result = result :+ factorial\n            }\n            else {\n\
    \                var sum = 0\n                for (j <- 1 to i) sum += j\n   \
    \             result = result :+ sum\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803690
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) {\n                l = l :+ (1 to i).product\n            } else {\n\
    \                l = l :+ (1 to i).sum\n            }\n        }\n        l\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803666
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        def factorial(n : Long) : Long\
    \ = {\n            if (n == 0) 1\n            else n * factorial(n - 1)\n    \
    \    }\n        def sum(n : Long) : Long = {\n            if (n == 0) 0\n    \
    \        else n + sum(n - 1)\n        }\n        def g(n : Long) : Long = {\n\
    \            if (n % 2 == 0) factorial(n)\n            else sum(n)\n        }\n\
    \        def h(n : Long, acc : List[Long]) : List[Long] = {\n            if (n\
    \ == 0) acc\n            else h(n - 1, g(n) :: acc)\n        }\n        h(n, List())\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var l = List[Long]()\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l = l :+ factorial(i)\n \
    \           else l = l :+ sum(i)\n        }\n        l\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp7azpgzy.scala:15:37 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l = l :+ factorial(i)\n\e[31m\e[31m   |\e[0m                            \
    \         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \ Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp7azpgzy.scala:16:26\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e\
    [0m l = l :+ sum(i)\n\e[31m\e[31m   |\e[0m                          ^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659803655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   val l = new ListBuffer[Long]\n        for (i <- 1 to n.toInt) {\n        \
    \    if (i % 2 == 0) {\n                l += (1 to i).product\n            } else\
    \ {\n                l += (1 to i).sum\n            }\n        }\n        l.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var list = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) {\n                list = list :+ factorial(i)\n            } else\
    \ {\n                list = list :+ sum(i)\n            }\n        }\n       \
    \ list\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc16cuy8n.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                list = list :+ factorial(i)\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                             Not found: factorial\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpc16cuy8n.scala:19:31 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                list = list :+ sum(i)\n\e[31m\e[31m \
    \  |\e[0m                               ^^^\e[0m\n\e[31m   |\e[0m            \
    \                   Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        val list = new ListBuffer[Long]\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) list += factorial(i)\n\
    \            else list += sum(i)\n        }\n        list.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp7tp647v.scala:15:36 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) list += factorial(i)\n\e[31m\e[31m   |\e[0m                             \
    \       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    Not\
    \ found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp7tp647v.scala:16:25\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e\
    [0m list += sum(i)\n\e[31m\e[31m   |\e[0m                         ^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659803677
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var list = List[Long]()\n     \
    \   for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n               \
    \ list = list :+ (1 to i).product\n            } else {\n                list\
    \ = list :+ (1 to i).sum\n            }\n        }\n        list\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var result = new ListBuffer[Long]\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result += factorial(i)\n\
    \            else result += sum(i)\n        }\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj1ml0wt0.scala:15:38 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) result += factorial(i)\n\e[31m\e[31m   |\e[0m                           \
    \           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \    Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpj1ml0wt0.scala:16:27 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            \e[33melse\e[0m result += sum(i)\n\e[31m\e[31m   |\e[0m       \
    \                    ^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803668
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = List[Long]()\n        for (i <- 1l to n) {\n            if (i % 2\
    \ == 0) {\n                var fact = 1l\n                for (j <- 1l to i) {\n\
    \                    fact *= j\n                }\n                l = l :+ fact\n\
    \            } else {\n                var sum = 0l\n                for (j <-\
    \ 1l to i) {\n                    sum += j\n                }\n              \
    \  l = l :+ sum\n            }\n        }\n        return l\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var l = ListBuffer[Long]()\n  \
    \      for (i <- 1l to n) {\n            if (i % 2 == 0) l += factorial(i)\n \
    \           else l += sum(i)\n        }\n        l.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdq2b0ru5.scala:15:33 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l += factorial(i)\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not found: factorial\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdq2b0ru5.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e\
    [0m l += sum(i)\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n          \
    \  if (i % 2 == 0) l += factorial(i)\n            else l += sum(i)\n        }\n\
    \        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8jj_8eob.scala:16:33 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l += factorial(i)\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not found: factorial\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8jj_8eob.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33melse\e\
    [0m l += sum(i)\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) {\n                l = l :+ (1 to i).product\n            } else {\n\
    \                l = l :+ (1 to i).sum\n            }\n        }\n        l\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803666
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var l = ListBuffer[Long]()\n  \
    \      for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l += factorial(i)\n\
    \            else l += sum(i)\n        }\n        l.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgbngo3vf.scala:15:33 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l += factorial(i)\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not found: factorial\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgbngo3vf.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e\
    [0m l += sum(i)\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803671
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   val l = new ListBuffer[Long]\n        for (i <- 1 to n.toInt) {\n        \
    \    if (i % 2 == 0) {\n                l += (1 to i).product\n            } else\
    \ {\n                l += (1 to i).sum\n            }\n        }\n        l.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803690
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var list = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var fact = 1\n                for (j <- 1 to i) {\n                   \
    \ fact *= j\n                }\n                list += fact\n            } else\
    \ {\n                var sum = 0\n                for (j <- 1 to i) {\n      \
    \              sum += j\n                }\n                list += sum\n    \
    \        }\n        }\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803692
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var l = List[Long]()\n        for\
    \ (i <- 1l to n) {\n            if (i % 2 == 0) l = l :+ (1l to i).product\n \
    \           else l = l :+ (1l to i).sum\n        }\n        l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803683
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n           \
    \ if (i % 2 == 0) {\n                result = result :+ (1 to i).product\n   \
    \         } else {\n                result = result :+ (1 to i).sum\n        \
    \    }\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var l = ListBuffer[Long]()\n  \
    \      for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l += factorial(i)\n\
    \            else l += sum(i)\n        }\n        l.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgbngo3vf.scala:15:33 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l += factorial(i)\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not found: factorial\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgbngo3vf.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e\
    [0m l += sum(i)\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803671
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var result = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result += factorial(i)\n\
    \            else result += sum(i)\n        }\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp19ojjsny.scala:15:38 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) result += factorial(i)\n\e[31m\e[31m   |\e[0m                           \
    \           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \    Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp19ojjsny.scala:16:27 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            \e[33melse\e[0m result += sum(i)\n\e[31m\e[31m   |\e[0m       \
    \                    ^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var result = ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n     \
    \       if (i % 2 == 0) {\n                result += factorial(i)\n          \
    \  } else {\n                result += sum(i)\n            }\n        }\n    \
    \    result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg3patzss.scala:17:26 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                result += factorial(i)\n\e[31m\e[31m\
    \   |\e[0m                          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpg3patzss.scala:19:26 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m                result += sum(i)\n\e[31m\e[31m   |\e[0m  \
    \                        ^^^\e[0m\n\e[31m   |\e[0m                          Not\
    \ found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803689
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var result = new ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n \
    \           if (i % 2 == 0) result += factorial(i)\n            else result +=\
    \ sum(i)\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8a_gs0u1.scala:16:38 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) result += factorial(i)\n\e[31m\e[31m   |\e[0m                           \
    \           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \    Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp8a_gs0u1.scala:17:27 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            \e[33melse\e[0m result += sum(i)\n\e[31m\e[31m   |\e[0m       \
    \                    ^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803690
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var list = List[Long]()\n     \
    \   for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n               \
    \ list = list :+ (1 to i).product\n            } else {\n                list\
    \ = list :+ (1 to i).sum\n            }\n        }\n        list\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803690
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n           \
    \ if (i % 2 == 0) {\n                result = result :+ (1 to i).reduceLeft(_\
    \ * _)\n            } else {\n                result = result :+ (1 to i).reduceLeft(_\
    \ + _)\n            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803693
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var result = new ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n \
    \           if (i % 2 == 0) {\n                var factorial = 1\n           \
    \     for (j <- 1 to i) {\n                    factorial *= j\n              \
    \  }\n                result += factorial\n            } else {\n            \
    \    var sum = 0\n                for (j <- 1 to i) {\n                    sum\
    \ += j\n                }\n                result += sum\n            }\n    \
    \    }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803669
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var list = ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      list += (1 to i).product\n            } else {\n                list +=\
    \ (1 to i).sum\n            }\n        }\n        list.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803693
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) l = l :+ (1 to i).product\n            else l = l :+ (1 to i).sum\n\
    \        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803679
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var list = List[Long]()\n     \
    \   for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) list = list :+ factorial(i)\n\
    \            else list = list :+ sum(i)\n        }\n        list\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcenfvlea.scala:15:43 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) list = list :+ factorial(i)\n\e[31m\e[31m   |\e[0m                      \
    \                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpcenfvlea.scala:16:32 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33melse\e[0m list = list :+ sum(i)\n\e[31m\e\
    [31m   |\e[0m                                ^^^\e[0m\n\e[31m   |\e[0m       \
    \                         Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803691
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var list = new ListBuffer[Long]\n        for (i <- 1 to n.toInt) {\n     \
    \       if (i % 2 == 0) {\n                var factorial = 1\n               \
    \ for (j <- 1 to i) {\n                    factorial *= j\n                }\n\
    \                list += factorial\n            } else {\n                var\
    \ sum = 0\n                for (j <- 1 to i) {\n                    sum += j\n\
    \                }\n                list += sum\n            }\n        }\n  \
    \      list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803693
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var result = new ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n \
    \           if (i % 2 == 0) {\n                result += (1 to i).product\n  \
    \          } else {\n                result += (1 to i).sum\n            }\n \
    \       }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) l = l :+ factorial(i)\n            else l = l :+ sum(i)\n        }\n\
    \        l\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf8gm50m2.scala:16:37 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l = l :+ factorial(i)\n\e[31m\e[31m   |\e[0m                            \
    \         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \ Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf8gm50m2.scala:17:26\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33melse\e\
    [0m l = l :+ sum(i)\n\e[31m\e[31m   |\e[0m                          ^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659803672
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var result = List[Long]()\n   \
    \     for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result = result :+\
    \ (1 to i).product\n            else result = result :+ (1 to i).sum\n       \
    \ }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803679
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var l = ListBuffer[Long]()\n  \
    \      for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l += factorial(i)\n\
    \            else l += sum(i)\n        }\n        l.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgbngo3vf.scala:15:33 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l += factorial(i)\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not found: factorial\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgbngo3vf.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e\
    [0m l += sum(i)\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803671
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var l = List[Long]()\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l = l :+ factorial(i)\n \
    \           else l = l :+ sum(i)\n        }\n        l\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp7azpgzy.scala:15:37 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l = l :+ factorial(i)\n\e[31m\e[31m   |\e[0m                            \
    \         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \ Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp7azpgzy.scala:16:26\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e\
    [0m l = l :+ sum(i)\n\e[31m\e[31m   |\e[0m                          ^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659803655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = ListBuffer[Long]()\n        for (i <- 1l to n) {\n            if (i\
    \ % 2 == 0) {\n                var f = 1l\n                for (j <- 1l to i)\
    \ {\n                    f *= j\n                }\n                l += f\n \
    \           } else {\n                var s = 0l\n                for (j <- 1l\
    \ to i) {\n                    s += j\n                }\n                l +=\
    \ s\n            }\n        }\n        l.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803694
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   return List[Long]()\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmn1bavcj.scala:17)\n\tat Problem.main(tmpmn1bavcj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var l = List[Long]()\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l = l :+ factorial(i)\n \
    \           else l = l :+ sum(i)\n        }\n        l\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp7azpgzy.scala:15:37 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l = l :+ factorial(i)\n\e[31m\e[31m   |\e[0m                            \
    \         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \ Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp7azpgzy.scala:16:26\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e\
    [0m l = l :+ sum(i)\n\e[31m\e[31m   |\e[0m                          ^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659803655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var result = List[Long]()\n   \
    \     for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result = result :+\
    \ (1 to i).foldLeft(1l)(_ * _)\n            else result = result :+ (1 to i).foldLeft(0l)(_\
    \ + _)\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var list = List[Long]()\n     \
    \   for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) list = list :+ factorial(i)\n\
    \            else list = list :+ sum(i)\n        }\n        list\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcenfvlea.scala:15:43 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) list = list :+ factorial(i)\n\e[31m\e[31m   |\e[0m                      \
    \                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpcenfvlea.scala:16:32 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33melse\e[0m list = list :+ sum(i)\n\e[31m\e\
    [31m   |\e[0m                                ^^^\e[0m\n\e[31m   |\e[0m       \
    \                         Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var result = List[Long]()\n   \
    \     for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result = result :+\
    \ factorial(i)\n            else result = result :+ sum(i)\n        }\n      \
    \  result\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgeg7huu3.scala:15:47 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) result = result :+ factorial(i)\n\e[31m\e[31m   |\e[0m                  \
    \                             ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                               Not found: factorial\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpgeg7huu3.scala:16:36 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e[0m result = result :+ sum(i)\n\
    \e[31m\e[31m   |\e[0m                                    ^^^\e[0m\n\e[31m   |\e\
    [0m                                    Not found: sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659803655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var l = List[Long]()\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l = l :+ (1 to i).product\n\
    \            else l = l :+ (1 to i).sum\n        }\n        l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803659
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) {\n                l = l :+ (1 to i).product\n            } else {\n\
    \                l = l :+ (1 to i).sum\n            }\n        }\n        l\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803666
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   return null\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.collection.immutable.List.equals(Object)\"\
    \ because the return value of \"Problem$.f(long)\" is null\n\tat Problem$.main(tmpvp2cbbbd.scala:17)\n\
    \tat Problem.main(tmpvp2cbbbd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var list = List[Long]()\n     \
    \   for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) list = list :+ factorial(i)\n\
    \            else list = list :+ sum(i)\n        }\n        list\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcenfvlea.scala:15:43 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) list = list :+ factorial(i)\n\e[31m\e[31m   |\e[0m                      \
    \                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpcenfvlea.scala:16:32 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33melse\e[0m list = list :+ sum(i)\n\e[31m\e\
    [31m   |\e[0m                                ^^^\e[0m\n\e[31m   |\e[0m       \
    \                         Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) l = l :+ factorial(i)\n            else l = l :+ (1 to i).sum\n  \
    \      }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn9uo4z1n.scala:16:37 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l = l :+ factorial(i)\n\e[31m\e[31m   |\e[0m                            \
    \         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \ Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659803693
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        def factorial(n : Long) : Long\
    \ = {\n            if (n == 0) 1\n            else n * factorial(n - 1)\n    \
    \    }\n        def sum(n : Long) : Long = {\n            if (n == 0) 0\n    \
    \        else n + sum(n - 1)\n        }\n        def f(n : Long, i : Long) : List[Long]\
    \ = {\n            if (i == n) List()\n            else if (i % 2 == 0) factorial(i)\
    \ :: f(n, i + 1)\n            else sum(i) :: f(n, i + 1)\n        }\n        f(n,\
    \ 1)\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8o8ro5a8.scala:29)\n\tat Problem.main(tmp8o8ro5a8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803694
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) l = l :+ (1l to i.toLong).product\n            else l = l :+ (1l to\
    \ i.toLong).sum\n        }\n        l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803695
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var list = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) {\n                list = list :+ (1 to i).product\n          \
    \  } else {\n                list = list :+ (1 to i).sum\n            }\n    \
    \    }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803658
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var list = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) {\n                list = list :+ (1 to i).product\n          \
    \  } else {\n                list = list :+ (1 to i).sum\n            }\n    \
    \    }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803658
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = new ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n      \
    \      if (i % 2 == 0) {\n                var f = 1l\n                for (j <-\
    \ 1 to i) {\n                    f *= j\n                }\n                l\
    \ += f\n            } else {\n                var s = 0l\n                for\
    \ (j <- 1 to i) {\n                    s += j\n                }\n           \
    \     l += s\n            }\n        }\n        l.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803695
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        def factorial(n : Long) : Long\
    \ = {\n            if (n == 0) 1\n            else n * factorial(n - 1)\n    \
    \    }\n        def sum(n : Long) : Long = {\n            if (n == 0) 0\n    \
    \        else n + sum(n - 1)\n        }\n        var result = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result += factorial(i)\n\
    \            else result += sum(i)\n        }\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var l = ListBuffer[Long]()\n  \
    \      for (i <- 1l to n) {\n            if (i % 2 == 0) l += factorial(i)\n \
    \           else l += sum(i)\n        }\n        l.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdq2b0ru5.scala:15:33 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l += factorial(i)\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not found: factorial\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdq2b0ru5.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e\
    [0m l += sum(i)\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var list = List[Long]()\n     \
    \   for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) list = list :+ factorial(i)\n\
    \            else list = list :+ sum(i)\n        }\n        list\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcenfvlea.scala:15:43 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) list = list :+ factorial(i)\n\e[31m\e[31m   |\e[0m                      \
    \                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \                   Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpcenfvlea.scala:16:32 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33melse\e[0m list = list :+ sum(i)\n\e[31m\e\
    [31m   |\e[0m                                ^^^\e[0m\n\e[31m   |\e[0m       \
    \                         Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var result = List[Long]()\n   \
    \     for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n             \
    \   result = result :+ factorial(i)\n            } else {\n                result\
    \ = result :+ sum(i)\n            }\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc1o24ccr.scala:16:35 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                result = result :+ factorial(i)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Not found: factorial\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpc1o24ccr.scala:18:35 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                result = result :+ sum(i)\n\e[31m\e[31m\
    \   |\e[0m                                   ^^^\e[0m\n\e[31m   |\e[0m       \
    \                            Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659803693
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) l = l :+ factorial(i)\n            else l = l :+ sum(i)\n        }\n\
    \        l\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf8gm50m2.scala:16:37 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l = l :+ factorial(i)\n\e[31m\e[31m   |\e[0m                            \
    \         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \ Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf8gm50m2.scala:17:26\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33melse\e\
    [0m l = l :+ sum(i)\n\e[31m\e[31m   |\e[0m                          ^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659803672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var l = List[Long]()\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l = l :+ factorial(i)\n \
    \           else l = l :+ sum(i)\n        }\n        l\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp7azpgzy.scala:15:37 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l = l :+ factorial(i)\n\e[31m\e[31m   |\e[0m                            \
    \         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \ Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp7azpgzy.scala:16:26\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33melse\e\
    [0m l = l :+ sum(i)\n\e[31m\e[31m   |\e[0m                          ^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659803655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        // Write your code here\n     \
    \   var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n           \
    \ if (i % 2 == 0) {\n                result = result :+ (1 to i).product\n   \
    \         } else {\n                result = result :+ (1 to i).sum\n        \
    \    }\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803658
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        var result = List[Long]()\n   \
    \     for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result = result :+\
    \ (1 to i).product\n            else result = result :+ (1 to i).sum\n       \
    \ }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803679
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n\
    \    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n\
    \    def f(n : Long) : List[Long] = {\n        def factorial(n : Long) : Long\
    \ = {\n            if (n == 0) 1 else n * factorial(n - 1)\n        }\n      \
    \  val l = new ListBuffer[Long]\n        for (i <- 1 to n.toInt) {\n         \
    \   if (i % 2 == 0) l += factorial(i) else l += (1 to i).sum\n        }\n    \
    \    l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803695
