name: HumanEval_63_fibfib
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) == 0\n   \
  \ // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
  \    // Please write a function to efficiently compute the n-th element of the fibfib\
  \ number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n    // >>> fibfib((5l))\n\
  \    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n    def fibfib(n : Long) :\
  \ Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fibfib((2l)) == (1l));\n\
  \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
  \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n\
  \    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
completions: ["        // Your code here\n        return 0", "        // Your code\
    \ here\n        return 0", "        // Your code here\n        return 0", "  \
    \      // Your code here\n        return 0", "        // Your code here\n    \
    \    return 0", "        // Your code here\n        return 0l", "        // Your\
    \ code here\n        return 0", "        // Your code here\n        0", "    \
    \    // Fill up this function body\n        // 'n' is the n-th element of the\
    \ fibfib number sequence.\n        0", "        // Your code here\n        return\
    \ 0", "        // Your code here\n        return 0", "        // Your code here\n\
    \        0", "        // Your code here\n        return 0", "        // Your code\
    \ here\n        return 0", "        // Your code here\n        return 0", "  \
    \      // Your code here\n        0", "        // Your code here\n        return\
    \ 0", "        // Fill in the code here\n        0", "        // Fill up this\
    \ function body\n        // 'n' is the nth element in the sequence that needs\
    \ to be computed\n        // You may create helper functions as needed\n     \
    \   0", "        // Your code here\n        if (n == 0) 0\n        else if (n\
    \ == 1) 0\n        else if (n == 2) 1\n        else fibfib(n - 1) + fibfib(n -\
    \ 2) + fibfib(n - 3)"]
stop_tokens:
- "\n    }\n"
