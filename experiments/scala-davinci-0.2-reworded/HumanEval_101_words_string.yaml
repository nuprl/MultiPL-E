name: HumanEval_101_words_string
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You will be given a string of words separated by commas or spaces. Your\
  \ task is\n    // to split the string into words and return a list of the words.\n\
  \    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    //\
  \ (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"\
  One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"\
  three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi,\
  \ my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"\
  John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
  One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
  Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
  One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"\
  three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
  \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
  , \"gamal\"))));\n    }\n\n}\n"
completions: ['        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[ ,]+").toList', '        return
    s.split(",| ").toList', '        s.split("[, ]+").toList', '        s.split("[
    ,]+").toList', '        s.split("[ ,]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        return s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        return s.split("[, ]+").toList', '        s.split(",").toList.map(_.trim)',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        return s.split("[, ]+").toList', '        s.split("\\s+|,").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[
    ,]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  "        val words = s.split(\"[, ]+\")\n        words.toList", '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[,\\s]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        return s.split("[ ,]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[ ,]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        return s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', "        // Your code here\n\
    \        s.split(\"[, ]+\").toList", '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("\\s+|,").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[ ,]+").toList', '        s.split("[, ]+").toList', '        s.split("[
    ,]+").toList', '        s.split("[, ]+").toList', '        return s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split(",").toList.map(_.trim)', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split(",| ").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        return
    s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[
    ,]+").toList', '        s.split("[,\\s]+").toList', '        return s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        return s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        return
    s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,\\s]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[ ,]+").toList', "        // Your code here\n\
    \        s.split(\"[, ]+\").toList", "        val words = s.split(\"[, ]+\")\n\
    \        return words.toList", '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        return s.split("[ ,]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        return s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split(",| ").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', "        // Your code here\n        s.split(\"[, ]+\").toList",
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split(",|
    ").toList', '        s.split("[, ]+").toList', '        return s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[ ,]+").toList', '        s.split("[
    ,]+").toList', '        return s.split("[, ]+").toList', '        s.split("[,
    ]+").toList', '        s.split("[, ]+").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        s.split("[, ]+").toList', '        s.split("[,
    ]+").toList']
stop_tokens:
- "\n    }\n"
