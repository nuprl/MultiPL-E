language: scala
name: HumanEval_19_sort_numbers
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  var nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        var sorted = nums.sorted\n        var result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        return result.mkString(\" \")\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpmd55msq1.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpmd55msq1.scala:21)\n\
    \tat Problem$.main(tmpmd55msq1.scala:38)\n\tat Problem.main(tmpmd55msq1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numeral = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        numeral.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpobvt4xr7.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpobvt4xr7.scala:21)\n\
    \tat Problem$.main(tmpobvt4xr7.scala:38)\n\tat Problem.main(tmpobvt4xr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numsToWords = Map(0 -> \"zero\"\
    , 1 -> \"one\", 2 -> \"two\", 3 -> \"three\", 4 -> \"four\", 5 -> \"five\", 6\
    \ -> \"six\", 7 -> \"seven\", 8 -> \"eight\", 9 -> \"nine\")\n        sorted.map(x\
    \ => numsToWords(x)).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmplrtcw7v5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmplrtcw7v5.scala:21)\n\
    \tat Problem$.main(tmplrtcw7v5.scala:27)\n\tat Problem.main(tmplrtcw7v5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(_.toInt).sorted\n        nums.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpex7h6ulo.scala:10)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpex7h6ulo.scala:10)\n\
    \tat Problem$.main(tmpex7h6ulo.scala:14)\n\tat Problem.main(tmpex7h6ulo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val res = sorted.map(x => x match {\n\
    \            case 0 => \"zero\"\n            case 1 => \"one\"\n            case\
    \ 2 => \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\
    \n            case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        })\n        res.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpzi6wpdtn.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpzi6wpdtn.scala:21)\n\
    \tat Problem$.main(tmpzi6wpdtn.scala:38)\n\tat Problem.main(tmpzi6wpdtn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val nums2 = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        nums2.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpe5dsjar7.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpe5dsjar7.scala:21)\n\
    \tat Problem$.main(tmpe5dsjar7.scala:38)\n\tat Problem.main(tmpe5dsjar7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numeral = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        numeral.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpobvt4xr7.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpobvt4xr7.scala:21)\n\
    \tat Problem$.main(tmpobvt4xr7.scala:38)\n\tat Problem.main(tmpobvt4xr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numStrings = sorted.map(x => x\
    \ match {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n   \
    \         case 2 => \"two\"\n            case 3 => \"three\"\n            case\
    \ 4 => \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\
    \n            case 7 => \"seven\"\n            case 8 => \"eight\"\n         \
    \   case 9 => \"nine\"\n        })\n        numStrings.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpx7cufwuy.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpx7cufwuy.scala:21)\n\
    \tat Problem$.main(tmpx7cufwuy.scala:38)\n\tat Problem.main(tmpx7cufwuy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(s => s match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmprvrtjlul.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmprvrtjlul.scala:21)\n\
    \tat Problem$.main(tmprvrtjlul.scala:25)\n\tat Problem.main(tmprvrtjlul.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val numsSorted = nums.sorted\n        val numsSortedStr = numsSorted.map(x\
    \ => x match {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n\
    \            case 2 => \"two\"\n            case 3 => \"three\"\n            case\
    \ 4 => \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\
    \n            case 7 => \"seven\"\n            case 8 => \"eight\"\n         \
    \   case 9 => \"nine\"\n        })\n        numsSortedStr.mkString(\" \")\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmp91513nj9.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmp91513nj9.scala:21)\n\
    \tat Problem$.main(tmp91513nj9.scala:38)\n\tat Problem.main(tmp91513nj9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numeral = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        numeral.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpobvt4xr7.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpobvt4xr7.scala:21)\n\
    \tat Problem$.main(tmpobvt4xr7.scala:38)\n\tat Problem.main(tmpobvt4xr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numeral = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        numeral.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpobvt4xr7.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpobvt4xr7.scala:21)\n\
    \tat Problem$.main(tmpobvt4xr7.scala:38)\n\tat Problem.main(tmpobvt4xr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").toList\n        val numMap = Map(\"zero\" ->\
    \ 0, \"one\" -> 1, \"two\" -> 2, \"three\" -> 3, \"four\" -> 4, \"five\" -> 5,\
    \ \"six\" -> 6, \"seven\" -> 7, \"eight\" -> 8, \"nine\" -> 9)\n        val numsInt\
    \ = nums.map(numMap(_))\n        val sortedNums = numsInt.sorted\n        val\
    \ sortedNumsStr = sortedNums.map(numMap.map(_.swap))\n        sortedNumsStr.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: key not found: \n\tat scala.collection.MapOps.default(Map.scala:274)\n\
    \tat scala.collection.MapOps.default$(Map.scala:273)\n\tat scala.collection.AbstractMap.default(Map.scala:405)\n\
    \tat scala.collection.mutable.HashMap.apply(HashMap.scala:425)\n\tat Problem$.$anonfun$1(tmpqexapp8_.scala:12)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.sortNumbers(tmpqexapp8_.scala:12)\n\
    \tat Problem$.main(tmpqexapp8_.scala:18)\n\tat Problem.main(tmpqexapp8_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val numeralMap = Map(\"zero\" -> 0, \"one\" -> 1, \"two\" -> 2, \"three\" ->\
    \ 3, \"four\" -> 4, \"five\" -> 5, \"six\" -> 6, \"seven\" -> 7, \"eight\" ->\
    \ 8, \"nine\" -> 9)\n        val nums = numbers.split(\" \").map(numeralMap(_)).sorted\n\
    \        nums.map(numeralMap.find(_._2 == _).get._1).mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2a0z1y62.scala:12:35 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        nums.map(numeralMap.find(_._2 == _).get._1).mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                                 ^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value _2 is not a member\
    \ of String\n1 error found\n"
  stdout: ''
  timestamp: 1659798104
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numeral = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        numeral.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpobvt4xr7.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpobvt4xr7.scala:21)\n\
    \tat Problem$.main(tmpobvt4xr7.scala:38)\n\tat Problem.main(tmpobvt4xr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numsToWords = Array(\"zero\", \"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\")\n        val words = sorted.map(x => numsToWords(x))\n        words.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmp6ftzspj_.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmp6ftzspj_.scala:21)\n\
    \tat Problem$.main(tmp6ftzspj_.scala:28)\n\tat Problem.main(tmp6ftzspj_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numeral = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        numeral.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpobvt4xr7.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpobvt4xr7.scala:21)\n\
    \tat Problem$.main(tmpobvt4xr7.scala:38)\n\tat Problem.main(tmpobvt4xr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numeral = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        numeral.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpobvt4xr7.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpobvt4xr7.scala:21)\n\
    \tat Problem$.main(tmpobvt4xr7.scala:38)\n\tat Problem.main(tmpobvt4xr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(_.toInt).sorted\n        nums.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpex7h6ulo.scala:10)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpex7h6ulo.scala:10)\n\
    \tat Problem$.main(tmpex7h6ulo.scala:14)\n\tat Problem.main(tmpex7h6ulo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numeral = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        numeral.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpobvt4xr7.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpobvt4xr7.scala:21)\n\
    \tat Problem$.main(tmpobvt4xr7.scala:38)\n\tat Problem.main(tmpobvt4xr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val nums2 = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        nums2.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpe5dsjar7.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpe5dsjar7.scala:21)\n\
    \tat Problem$.main(tmpe5dsjar7.scala:38)\n\tat Problem.main(tmpe5dsjar7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numsStr = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        numsStr.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpb1f28avv.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpb1f28avv.scala:21)\n\
    \tat Problem$.main(tmpb1f28avv.scala:38)\n\tat Problem.main(tmpb1f28avv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(numeralToInt)\n        val sorted = nums.sorted\n\
    \        sorted.map(intToNumeral).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx8pgnpwk.scala:10:42 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = numbers.split(\e\
    [31m\" \"\e[0m).map(numeralToInt)\n\e[31m\e[31m   |\e[0m                     \
    \                     ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \                     Not found: numeralToInt\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmpx8pgnpwk.scala:10:55 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = numbers.split(\e\
    [31m\" \"\e[0m).map(numeralToInt)\n\e[31m\e[31m   |\e[0m                     \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                       No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m                                          where:    B is a type variable\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798104
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numeral = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        numeral.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpobvt4xr7.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpobvt4xr7.scala:21)\n\
    \tat Problem$.main(tmpobvt4xr7.scala:38)\n\tat Problem.main(tmpobvt4xr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val str = sorted.map(x => x match {\n\
    \            case 0 => \"zero\"\n            case 1 => \"one\"\n            case\
    \ 2 => \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\
    \n            case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        })\n        str.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpxdimu71y.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpxdimu71y.scala:21)\n\
    \tat Problem$.main(tmpxdimu71y.scala:38)\n\tat Problem.main(tmpxdimu71y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(numeralToInt).sorted\n        nums.map(intToNumeral).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpshfhpjkl.scala:10:42 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = numbers.split(\e\
    [31m\" \"\e[0m).map(numeralToInt).sorted\n\e[31m\e[31m   |\e[0m              \
    \                            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                            Not found: numeralToInt\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- Error: /tmp/tmpshfhpjkl.scala:10:55 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = numbers.split(\e\
    [31m\" \"\e[0m).map(numeralToInt).sorted\n\e[31m\e[31m   |\e[0m              \
    \                                         ^\e[0m\n\e[31m   |\e[0m            \
    \                              No ClassTag available for B\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m                                          where:    B is a type variable\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numeral = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        numeral.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpobvt4xr7.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpobvt4xr7.scala:21)\n\
    \tat Problem$.main(tmpobvt4xr7.scala:38)\n\tat Problem.main(tmpobvt4xr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numsStr = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        numsStr.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpb1f28avv.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpb1f28avv.scala:21)\n\
    \tat Problem$.main(tmpb1f28avv.scala:38)\n\tat Problem.main(tmpb1f28avv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numsToWords = sorted.map(x => x\
    \ match {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n   \
    \         case 2 => \"two\"\n            case 3 => \"three\"\n            case\
    \ 4 => \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\
    \n            case 7 => \"seven\"\n            case 8 => \"eight\"\n         \
    \   case 9 => \"nine\"\n        })\n        numsToWords.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpcyx8x4ny.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpcyx8x4ny.scala:21)\n\
    \tat Problem$.main(tmpcyx8x4ny.scala:38)\n\tat Problem.main(tmpcyx8x4ny.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numsToWords = sorted.map(x => x\
    \ match {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n   \
    \         case 2 => \"two\"\n            case 3 => \"three\"\n            case\
    \ 4 => \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\
    \n            case 7 => \"seven\"\n            case 8 => \"eight\"\n         \
    \   case 9 => \"nine\"\n        })\n        numsToWords.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpcyx8x4ny.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpcyx8x4ny.scala:21)\n\
    \tat Problem$.main(tmpcyx8x4ny.scala:38)\n\tat Problem.main(tmpcyx8x4ny.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val numsSorted = nums.sorted\n        val numsSortedStr = numsSorted.map(x\
    \ => x match {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n\
    \            case 2 => \"two\"\n            case 3 => \"three\"\n            case\
    \ 4 => \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\
    \n            case 7 => \"seven\"\n            case 8 => \"eight\"\n         \
    \   case 9 => \"nine\"\n        })\n        numsSortedStr.mkString(\" \")\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmp91513nj9.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmp91513nj9.scala:21)\n\
    \tat Problem$.main(tmp91513nj9.scala:38)\n\tat Problem.main(tmp91513nj9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(_.toInt).sorted\n        nums.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpex7h6ulo.scala:10)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpex7h6ulo.scala:10)\n\
    \tat Problem$.main(tmpex7h6ulo.scala:14)\n\tat Problem.main(tmpex7h6ulo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numStrings = sorted.map(x => x\
    \ match {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n   \
    \         case 2 => \"two\"\n            case 3 => \"three\"\n            case\
    \ 4 => \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\
    \n            case 7 => \"seven\"\n            case 8 => \"eight\"\n         \
    \   case 9 => \"nine\"\n        })\n        numStrings.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpx7cufwuy.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpx7cufwuy.scala:21)\n\
    \tat Problem$.main(tmpx7cufwuy.scala:38)\n\tat Problem.main(tmpx7cufwuy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(numeralToNumber)\n        val sorted =\
    \ nums.sorted\n        sorted.map(numberToNumeral).mkString(\" \")\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzbm8tesu.scala:10:42 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = numbers.split(\e\
    [31m\" \"\e[0m).map(numeralToNumber)\n\e[31m\e[31m   |\e[0m                  \
    \                        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                           Not found: numeralToNumber\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- Error: /tmp/tmpzbm8tesu.scala:10:58 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = numbers.split(\e\
    [31m\" \"\e[0m).map(numeralToNumber)\n\e[31m\e[31m   |\e[0m                  \
    \                                        ^\e[0m\n\e[31m   |\e[0m             \
    \                             No ClassTag available for B\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m                                          where:    B is a type variable\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  var nums = numbers.split(\" \").map(_.toInt).sorted\n        return nums.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmp2b8lgxah.scala:10)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmp2b8lgxah.scala:10)\n\
    \tat Problem$.main(tmp2b8lgxah.scala:14)\n\tat Problem.main(tmp2b8lgxah.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numeral = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        return numeral.mkString(\" \")\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpnomv7w4f.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpnomv7w4f.scala:21)\n\
    \tat Problem$.main(tmpnomv7w4f.scala:38)\n\tat Problem.main(tmpnomv7w4f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798111
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(_.toInt).sorted\n        nums.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpex7h6ulo.scala:10)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpex7h6ulo.scala:10)\n\
    \tat Problem$.main(tmpex7h6ulo.scala:14)\n\tat Problem.main(tmpex7h6ulo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val numeralMap = Map(\"zero\" -> 0, \"one\" -> 1, \"two\" -> 2, \"three\" ->\
    \ 3, \"four\" -> 4, \"five\" -> 5, \"six\" -> 6, \"seven\" -> 7, \"eight\" ->\
    \ 8, \"nine\" -> 9)\n        val nums = numbers.split(\" \").map(numeralMap(_)).sorted\n\
    \        nums.map(num => numeralMap.find(_._2 == num).get._1).mkString(\" \")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: key not found: \n\tat scala.collection.MapOps.default(Map.scala:274)\n\
    \tat scala.collection.MapOps.default$(Map.scala:273)\n\tat scala.collection.AbstractMap.default(Map.scala:405)\n\
    \tat scala.collection.mutable.HashMap.apply(HashMap.scala:425)\n\tat Problem$.$anonfun$1(tmpq9m24v0w.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq9m24v0w.scala:11)\n\
    \tat Problem$.main(tmpq9m24v0w.scala:15)\n\tat Problem.main(tmpq9m24v0w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798111
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numeral = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        numeral.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpobvt4xr7.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpobvt4xr7.scala:21)\n\
    \tat Problem$.main(tmpobvt4xr7.scala:38)\n\tat Problem.main(tmpobvt4xr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(s => s match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmprvrtjlul.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmprvrtjlul.scala:21)\n\
    \tat Problem$.main(tmprvrtjlul.scala:25)\n\tat Problem.main(tmprvrtjlul.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numsToWords = Array(\"zero\", \"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\")\n        sorted.map(x => numsToWords(x)).mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpk600jueq.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpk600jueq.scala:21)\n\
    \tat Problem$.main(tmpk600jueq.scala:27)\n\tat Problem.main(tmpk600jueq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798111
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numeral = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        numeral.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpobvt4xr7.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpobvt4xr7.scala:21)\n\
    \tat Problem$.main(tmpobvt4xr7.scala:38)\n\tat Problem.main(tmpobvt4xr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numeral = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        numeral.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpobvt4xr7.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpobvt4xr7.scala:21)\n\
    \tat Problem$.main(tmpobvt4xr7.scala:38)\n\tat Problem.main(tmpobvt4xr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val nums2 = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        nums2.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpe5dsjar7.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpe5dsjar7.scala:21)\n\
    \tat Problem$.main(tmpe5dsjar7.scala:38)\n\tat Problem.main(tmpe5dsjar7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(_.toInt).sorted\n        nums.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpex7h6ulo.scala:10)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpex7h6ulo.scala:10)\n\
    \tat Problem$.main(tmpex7h6ulo.scala:14)\n\tat Problem.main(tmpex7h6ulo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numsToString = sorted.map(x =>\
    \ x match {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n \
    \           case 2 => \"two\"\n            case 3 => \"three\"\n            case\
    \ 4 => \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\
    \n            case 7 => \"seven\"\n            case 8 => \"eight\"\n         \
    \   case 9 => \"nine\"\n        })\n        numsToString.mkString(\" \")\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmptfmhrnvs.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmptfmhrnvs.scala:21)\n\
    \tat Problem$.main(tmptfmhrnvs.scala:38)\n\tat Problem.main(tmptfmhrnvs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798111
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numeral = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        return numeral.mkString(\" \")\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpnomv7w4f.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpnomv7w4f.scala:21)\n\
    \tat Problem$.main(tmpnomv7w4f.scala:38)\n\tat Problem.main(tmpnomv7w4f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798111
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numeral = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        numeral.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpobvt4xr7.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpobvt4xr7.scala:21)\n\
    \tat Problem$.main(tmpobvt4xr7.scala:38)\n\tat Problem.main(tmpobvt4xr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").toList\n        val numMap = Map(\"zero\" ->\
    \ 0, \"one\" -> 1, \"two\" -> 2, \"three\" -> 3, \"four\" -> 4, \"five\" -> 5,\
    \ \"six\" -> 6, \"seven\" -> 7, \"eight\" -> 8, \"nine\" -> 9)\n        var numList\
    \ = List[Int]()\n        for (num <- nums) {\n            numList = numList :+\
    \ numMap(num)\n        }\n        numList = numList.sorted\n        var result\
    \ = \"\"\n        for (num <- numList) {\n            result += numMap.find(_._2\
    \ == num).get._1 + \" \"\n        }\n        result.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: key not found: \n\tat scala.collection.MapOps.default(Map.scala:274)\n\
    \tat scala.collection.MapOps.default$(Map.scala:273)\n\tat scala.collection.AbstractMap.default(Map.scala:405)\n\
    \tat scala.collection.mutable.HashMap.apply(HashMap.scala:425)\n\tat Problem$.sortNumbers$$anonfun$1(tmpnugoduwx.scala:14)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat Problem$.sortNumbers(tmpnugoduwx.scala:15)\n\
    \tat Problem$.main(tmpnugoduwx.scala:24)\n\tat Problem.main(tmpnugoduwx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798111
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numeral = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        return numeral.mkString(\" \")\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpnomv7w4f.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpnomv7w4f.scala:21)\n\
    \tat Problem$.main(tmpnomv7w4f.scala:38)\n\tat Problem.main(tmpnomv7w4f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798111
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numsToWords = Array(\"zero\", \"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\")\n        val result = sorted.map(x => numsToWords(x)).mkString(\"\
    \ \")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpdhvjttc4.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpdhvjttc4.scala:21)\n\
    \tat Problem$.main(tmpdhvjttc4.scala:28)\n\tat Problem.main(tmpdhvjttc4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798111
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").toList.map(x => x match {\n            case\
    \ \"zero\" => 0\n            case \"one\" => 1\n            case \"two\" => 2\n\
    \            case \"three\" => 3\n            case \"four\" => 4\n           \
    \ case \"five\" => 5\n            case \"six\" => 6\n            case \"seven\"\
    \ => 7\n            case \"eight\" => 8\n            case \"nine\" => 9\n    \
    \    })\n        val sorted = nums.sorted\n        val result = sorted.map(x =>\
    \ x match {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n \
    \           case 2 => \"two\"\n            case 3 => \"three\"\n            case\
    \ 4 => \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\
    \n            case 7 => \"seven\"\n            case 8 => \"eight\"\n         \
    \   case 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmp8y0xi138.scala:20)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.sortNumbers(tmp8y0xi138.scala:21)\n\
    \tat Problem$.main(tmp8y0xi138.scala:38)\n\tat Problem.main(tmp8y0xi138.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798111
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => {\n            x match {\n       \
    \         case \"zero\" => 0\n                case \"one\" => 1\n            \
    \    case \"two\" => 2\n                case \"three\" => 3\n                case\
    \ \"four\" => 4\n                case \"five\" => 5\n                case \"six\"\
    \ => 6\n                case \"seven\" => 7\n                case \"eight\" =>\
    \ 8\n                case \"nine\" => 9\n            }\n        })\n        val\
    \ sorted = nums.sorted\n        val numsToWords = sorted.map(x => {\n        \
    \    x match {\n                case 0 => \"zero\"\n                case 1 =>\
    \ \"one\"\n                case 2 => \"two\"\n                case 3 => \"three\"\
    \n                case 4 => \"four\"\n                case 5 => \"five\"\n   \
    \             case 6 => \"six\"\n                case 7 => \"seven\"\n       \
    \         case 8 => \"eight\"\n                case 9 => \"nine\"\n          \
    \  }\n        })\n        numsToWords.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpx0hk8wsk.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpx0hk8wsk.scala:23)\n\
    \tat Problem$.main(tmpx0hk8wsk.scala:42)\n\tat Problem.main(tmpx0hk8wsk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798112
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val res = sorted.map(x => x match {\n\
    \            case 0 => \"zero\"\n            case 1 => \"one\"\n            case\
    \ 2 => \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\
    \n            case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        })\n        res.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpzi6wpdtn.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpzi6wpdtn.scala:21)\n\
    \tat Problem$.main(tmpzi6wpdtn.scala:38)\n\tat Problem.main(tmpzi6wpdtn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numeral = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        numeral.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpobvt4xr7.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpobvt4xr7.scala:21)\n\
    \tat Problem$.main(tmpobvt4xr7.scala:38)\n\tat Problem.main(tmpobvt4xr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sortedNums = nums.sorted\n        val numStrings = sortedNums.map(x\
    \ => x match {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n\
    \            case 2 => \"two\"\n            case 3 => \"three\"\n            case\
    \ 4 => \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\
    \n            case 7 => \"seven\"\n            case 8 => \"eight\"\n         \
    \   case 9 => \"nine\"\n        })\n        numStrings.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmppx6wia7w.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmppx6wia7w.scala:21)\n\
    \tat Problem$.main(tmppx6wia7w.scala:38)\n\tat Problem.main(tmppx6wia7w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798112
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(numeralToInt)\n        val sorted = nums.sorted\n\
    \        sorted.map(intToNumeral).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx8pgnpwk.scala:10:42 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = numbers.split(\e\
    [31m\" \"\e[0m).map(numeralToInt)\n\e[31m\e[31m   |\e[0m                     \
    \                     ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \                     Not found: numeralToInt\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmpx8pgnpwk.scala:10:55 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = numbers.split(\e\
    [31m\" \"\e[0m).map(numeralToInt)\n\e[31m\e[31m   |\e[0m                     \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                       No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m                                          where:    B is a type variable\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798104
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val numMap = Map(\"zero\" -> 0, \"one\" -> 1, \"two\" -> 2, \"three\" -> 3,\
    \ \"four\" -> 4, \"five\" -> 5, \"six\" -> 6, \"seven\" -> 7, \"eight\" -> 8,\
    \ \"nine\" -> 9)\n        val nums = numbers.split(\" \").map(numMap(_)).sorted\n\
    \        nums.map(num => numMap.find(_._2 == num).get._1).mkString(\" \")\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: key not found: \n\tat scala.collection.MapOps.default(Map.scala:274)\n\
    \tat scala.collection.MapOps.default$(Map.scala:273)\n\tat scala.collection.AbstractMap.default(Map.scala:405)\n\
    \tat scala.collection.mutable.HashMap.apply(HashMap.scala:425)\n\tat Problem$.$anonfun$1(tmp1m6f2owf.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmp1m6f2owf.scala:11)\n\
    \tat Problem$.main(tmp1m6f2owf.scala:15)\n\tat Problem.main(tmp1m6f2owf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798112
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val numMap = Map(\"zero\" -> 0, \"one\" -> 1, \"two\" -> 2, \"three\" -> 3,\
    \ \"four\" -> 4, \"five\" -> 5, \"six\" -> 6, \"seven\" -> 7, \"eight\" -> 8,\
    \ \"nine\" -> 9)\n        val nums = numbers.split(\" \").map(numMap(_)).sorted\n\
    \        nums.map(num => numMap.find(_._2 == num).get._1).mkString(\" \")\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: key not found: \n\tat scala.collection.MapOps.default(Map.scala:274)\n\
    \tat scala.collection.MapOps.default$(Map.scala:273)\n\tat scala.collection.AbstractMap.default(Map.scala:405)\n\
    \tat scala.collection.mutable.HashMap.apply(HashMap.scala:425)\n\tat Problem$.$anonfun$1(tmp1m6f2owf.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmp1m6f2owf.scala:11)\n\
    \tat Problem$.main(tmp1m6f2owf.scala:15)\n\tat Problem.main(tmp1m6f2owf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798112
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
