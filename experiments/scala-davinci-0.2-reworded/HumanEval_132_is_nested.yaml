name: HumanEval_132_is_nested
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Create a function that takes a string as input which contains only square\
  \ brackets.\n    // The function should return true if and only if there is a valid\
  \ subsequence of brackets \n    // where at least one bracket in the subsequence\
  \ is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n    // >>> isNested((\"\
  []]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"[][]\"))\n    // (false)\n\
  \    // >>> isNested((\"[]\"))\n    // (false)\n    // >>> isNested((\"[[][]]\"\
  ))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n    // (true)\n    def isNested(string\
  \ : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"\
  )) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
  [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
  [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
  \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"))\
  \ == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
  [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
  \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
  ]]]]]]]]\")) == (false));\n    }\n\n}\n"
completions: ["        var stack = new Stack[Char]\n        for (c <- string) {\n\
    \            if (c == '[') stack.push(c)\n            else if (c == ']') {\n \
    \               if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        return !stack.isEmpty", "        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     if (stack.isEmpty) return false\n        return true", "        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return !stack.isEmpty", "        var stack = new Stack[Char]()\n       \
    \ for (c <- string) {\n            if (c == '[') stack.push(c)\n            else\
    \ if (c == ']') {\n                if (stack.isEmpty) return false\n         \
    \       else stack.pop\n            }\n        }\n        if (stack.isEmpty) true\
    \ else false", "        var stack = new Stack[Char]()\n        for (c <- string)\
    \ {\n            if (c == '[') stack.push(c)\n            else if (c == ']') {\n\
    \                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        return !stack.isEmpty", "        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ {\n                stack.push(c)\n            } else if (c == ']') {\n     \
    \           if (stack.isEmpty) {\n                    return false\n         \
    \       } else {\n                    stack.pop()\n                }\n       \
    \     }\n        }\n        return !stack.isEmpty", "        var stack = new Stack[Char]()\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        // Create a stack\n        var stack = new Stack[Char]()\n        // Iterate\
    \ through the string\n        for (c <- string) {\n            // If the character\
    \ is a left bracket, push it onto the stack\n            if (c == '[') stack.push(c)\n\
    \            // If the character is a right bracket, pop the stack\n         \
    \   else if (c == ']') {\n                // If the stack is empty, return false\n\
    \                if (stack.isEmpty) return false\n                // Otherwise,\
    \ pop the stack\n                else stack.pop\n            }\n        }\n  \
    \      // If the stack is empty, return true\n        if (stack.isEmpty) true\n\
    \        // Otherwise, return false\n        else false", "        var stack =\
    \ new Stack[Char]()\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false", "        var stack = new Stack[Char]\n        for (c <- string)\
    \ {\n            if (c == '[') {\n                stack.push(c)\n            }\
    \ else if (c == ']') {\n                if (stack.isEmpty) {\n               \
    \     return false\n                } else {\n                    stack.pop\n\
    \                }\n            }\n        }\n        return !stack.isEmpty",
  "        val stack = new Stack[Char]\n        for (i <- 0 until string.length) {\n\
    \            if (string(i) == '[') {\n                stack.push(string(i))\n\
    \            } else {\n                if (stack.isEmpty) {\n                \
    \    return false\n                } else {\n                    stack.pop\n \
    \               }\n            }\n        }\n        if (stack.isEmpty) {\n  \
    \          return false\n        } else {\n            return true\n        }",
  "        var stack = new Stack[Char]()\n        for (i <- 0 until string.length)\
    \ {\n            if (string(i) == '[') {\n                stack.push(string(i))\n\
    \            } else {\n                if (stack.isEmpty) {\n                \
    \    return false\n                } else {\n                    stack.pop()\n\
    \                }\n            }\n        }\n        return !stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        if (stack.isEmpty) true else false", "        val stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return !stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') {\n                stack.push(c)\n            } else if (c == ']')\
    \ {\n                if (stack.isEmpty) {\n                    return false\n\
    \                } else {\n                    stack.pop\n                }\n\
    \            }\n        }\n        if (stack.isEmpty) {\n            return false\n\
    \        } else {\n            return true\n        }", "        var stack = new\
    \ Stack[Char]()\n        for (c <- string) {\n            if (c == '[') {\n  \
    \              stack.push(c)\n            } else if (c == ']') {\n           \
    \     if (stack.isEmpty) {\n                    return false\n               \
    \ } else {\n                    stack.pop()\n                }\n            }\n\
    \        }\n        if (stack.isEmpty) {\n            return false\n        }\
    \ else {\n            return true\n        }", "        val stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return !stack.isEmpty",
  "        var stack = new Stack[Char]()\n        for (c <- string) {\n          \
    \  if (c == '[') stack.push(c)\n            else if (c == ']') {\n           \
    \     if (stack.isEmpty) return false\n                else stack.pop\n      \
    \      }\n        }\n        return !stack.isEmpty", "        var stack = new\
    \ Stack[Char]()\n        var result = false\n        for (c <- string) {\n   \
    \         if (c == '[') {\n                stack.push(c)\n            } else if\
    \ (c == ']') {\n                if (stack.isEmpty) {\n                    return\
    \ false\n                } else {\n                    stack.pop()\n         \
    \           result = true\n                }\n            }\n        }\n     \
    \   return result", "        val stack = Stack[Char]()\n        for (c <- string)\
    \ {\n            if (c == '[') stack.push(c)\n            else if (c == ']') {\n\
    \                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) false else true", "    \
    \    var stack = new Stack[Char]\n        for (i <- 0 until string.length) {\n\
    \            if (string(i) == '[') stack.push('[')\n            else if (string(i)\
    \ == ']') {\n                if (stack.isEmpty) return false\n               \
    \ stack.pop\n            }\n        }\n        if (stack.isEmpty) true else false",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return !stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false", "        var stack = new Stack[Char]()\n        for (c <-\
    \ string) {\n            if (c == '[') stack.push(c)\n            else if (c ==\
    \ ']') {\n                if (stack.isEmpty) return false\n                else\
    \ stack.pop\n            }\n        }\n        return !stack.isEmpty", "     \
    \   var stack = new Stack[Char]\n        for (c <- string) {\n            if (c\
    \ == '[') stack.push(c)\n            else if (c == ']') {\n                if\
    \ (stack.isEmpty) return false\n                else stack.pop\n            }\n\
    \        }\n        return stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false", "        var stack = new Stack[Char]\n        for (c <- string)\
    \ {\n            if (c == '[') {\n                stack.push(c)\n            }\
    \ else if (c == ']') {\n                if (stack.isEmpty) {\n               \
    \     return false\n                } else {\n                    stack.pop\n\
    \                }\n            }\n        }\n        return !stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') {\n                stack.push(c)\n            } else if (c == ']')\
    \ {\n                if (stack.isEmpty) {\n                    return false\n\
    \                } else {\n                    stack.pop\n                }\n\
    \            }\n        }\n        return !stack.isEmpty", "        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     if (stack.isEmpty) true else false", "        var stack = new Stack[Char]()\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                stack.pop\n            }\n        }\n        return !stack.isEmpty",
  "        // Create a stack to store the brackets.\n        val stack = new Stack[Char]\n\
    \        // Iterate over the string.\n        for (c <- string) {\n          \
    \  // If the character is an opening bracket, push it to the stack.\n        \
    \    if (c == '[') stack.push(c)\n            // If the character is a closing\
    \ bracket, pop the stack.\n            else if (c == ']') {\n                //\
    \ If the stack is empty, return false.\n                if (stack.isEmpty) return\
    \ false\n                // If the stack is not empty, pop the stack.\n      \
    \          else stack.pop\n            }\n        }\n        // If the stack is\
    \ empty, return false.\n        if (stack.isEmpty) false\n        // If the stack\
    \ is not empty, return true.\n        else true", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return !stack.isEmpty",
  "        var stack = new Stack[Char]()\n        for (c <- string) {\n          \
    \  if (c == '[') stack.push(c)\n            else if (c == ']') {\n           \
    \     if (stack.isEmpty) return false\n                else stack.pop\n      \
    \      }\n        }\n        return stack.isEmpty", "        val stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') {\n                stack.push(c)\n            } else if (c == ']')\
    \ {\n                if (stack.isEmpty) {\n                    return false\n\
    \                } else {\n                    stack.pop\n                }\n\
    \            }\n        }\n        return !stack.isEmpty", "        // Create\
    \ a stack to keep track of the brackets\n        val stack = new Stack[Char]\n\
    \        // Iterate through the string\n        for (i <- 0 until string.length)\
    \ {\n            // If the current character is an opening bracket, push it onto\
    \ the stack\n            if (string(i) == '[') stack.push(string(i))\n       \
    \     // If the current character is a closing bracket, pop the stack\n      \
    \      else if (string(i) == ']') stack.pop\n        }\n        // If the stack\
    \ is empty, then there is a valid subsequence of brackets where at least one bracket\
    \ in the subsequence is nested\n        stack.isEmpty", "        var stack = new\
    \ Stack[Char]\n        for (i <- 0 until string.length) {\n            if (string(i)\
    \ == '[') stack.push('[')\n            else if (string(i) == ']') {\n        \
    \        if (stack.isEmpty) return false\n                else stack.pop\n   \
    \         }\n        }\n        return !stack.isEmpty", "        var stack = new\
    \ Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                stack.pop\n            }\n\
    \        }\n        if (stack.isEmpty) true else false", "        var stack =\
    \ new Stack[Char]()\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else if (c == ']') {\n         \
    \       if (stack.isEmpty) {\n                    return false\n             \
    \   } else {\n                    stack.pop()\n                }\n           \
    \ }\n        }\n        return !stack.isEmpty", "        var stack = new Stack[Char]()\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ return false\n        else return true", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return !stack.isEmpty",
  "        var stack = new Stack[Char]()\n        for (c <- string) {\n          \
    \  if (c == '[') stack.push(c)\n            else if (c == ']') {\n           \
    \     if (stack.isEmpty) return false\n                else if (stack.top == '[')\
    \ stack.pop\n                else return false\n            }\n        }\n   \
    \     if (stack.isEmpty) true else false", "        val stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        !stack.isEmpty",
  "        val stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        if (stack.isEmpty) true else false", "        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     if (stack.isEmpty) true else false", "        val stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return !stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') {\n                stack.push(c)\n            } else if (c == ']')\
    \ {\n                if (stack.isEmpty) {\n                    return false\n\
    \                } else {\n                    stack.pop\n                }\n\
    \            }\n        }\n        return !stack.isEmpty", "        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else if (stack.top == '[') stack.pop\n                else return\
    \ false\n            }\n        }\n        if (stack.isEmpty) true else false",
  "        var stack = Stack[Char]()\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        if (stack.isEmpty) return false\n        else return\
    \ true", "        var stack = new Stack[Char]\n        for (c <- string) {\n \
    \           if (c == '[') stack.push(c)\n            else if (c == ']') {\n  \
    \              if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        return !stack.isEmpty", "        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false", "        var stack = new Stack[Char]\n        for (c <- string)\
    \ {\n            if (c == '[') stack.push(c)\n            else if (c == ']') {\n\
    \                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) true else false", "    \
    \    val stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return !stack.isEmpty", "        val stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return !stack.isEmpty",
  "        val stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') {\n                stack.push(c)\n            } else {\n        \
    \        if (stack.isEmpty) {\n                    return false\n            \
    \    } else {\n                    stack.pop\n                }\n            }\n\
    \        }\n        return !stack.isEmpty", "        var stack = new Stack[Char]()\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false", "        var stack = new Stack[Char]\n        for (char <-\
    \ string) {\n            if (char == '[') stack.push(char)\n            else if\
    \ (char == ']') {\n                if (stack.isEmpty) return false\n         \
    \       else stack.pop\n            }\n        }\n        return !stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return stack.isEmpty", "        var stack = new Stack[Char]()\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return stack.isEmpty", "        var stack = new Stack[Char]()\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false", "        var stack = new Stack[Char]\n        for (c <- string)\
    \ {\n            if (c == '[') stack.push(c)\n            else if (c == ']') {\n\
    \                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) true else false", "    \
    \    var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        if (stack.isEmpty) return false\n        else return\
    \ true", "        var stack = new Stack[Char]\n        for (c <- string) {\n \
    \           if (c == '[') stack.push(c)\n            else if (c == ']') {\n  \
    \              if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) true else false", "    \
    \    var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') {\n                stack.push(c)\n            } else if (c == ']')\
    \ {\n                if (stack.isEmpty) {\n                    return false\n\
    \                } else {\n                    stack.pop\n                }\n\
    \            }\n        }\n        return !stack.isEmpty", "        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ {\n                stack.push(c)\n            } else if (c == ']') {\n     \
    \           if (stack.isEmpty) {\n                    return false\n         \
    \       } else {\n                    stack.pop()\n                }\n       \
    \     }\n        }\n        return !stack.isEmpty", "        var stack = new Stack[Char]()\n\
    \        for (c <- string) {\n            if (c == '[') {\n                stack.push(c)\n\
    \            } else if (c == ']') {\n                if (stack.isEmpty) {\n  \
    \                  return false\n                } else {\n                  \
    \  stack.pop()\n                }\n            }\n        }\n        return !stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (i <- 0 until string.length) {\n\
    \            if (string(i) == '[') stack.push('[')\n            else if (string(i)\
    \ == ']') {\n                if (stack.isEmpty) return false\n               \
    \ else stack.pop\n            }\n        }\n        if (stack.isEmpty) return\
    \ false\n        else return true", "        var stack = new Stack[Char]\n   \
    \     for (c <- string) {\n            if (c == '[') {\n                stack.push(c)\n\
    \            } else if (c == ']') {\n                if (stack.isEmpty) {\n  \
    \                  return false\n                } else {\n                  \
    \  stack.pop\n                }\n            }\n        }\n        return !stack.isEmpty",
  "        var stack = new Stack[Char]()\n        for (c <- string) {\n          \
    \  if (c == '[') {\n                stack.push(c)\n            } else if (c ==\
    \ ']') {\n                if (stack.isEmpty) {\n                    return false\n\
    \                } else {\n                    stack.pop()\n                }\n\
    \            }\n        }\n        return stack.isEmpty", "        var stack =\
    \ new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false", "        var stack = new Stack[Char]()\n        for (i <-\
    \ 0 until string.length) {\n            if (string(i) == '[') stack.push('[')\n\
    \            else if (string(i) == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     if (stack.isEmpty) return false\n        else return true", "        var\
    \ stack = new Stack[Char]()\n        for (c <- string) {\n            if (c ==\
    \ '[') stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return !stack.isEmpty", "        var stack = new Stack[Char]\n        for\
    \ (c <- string) {\n            if (c == '[') stack.push(c)\n            else if\
    \ (c == ']') {\n                if (stack.isEmpty) return false\n            \
    \    else stack.pop\n            }\n        }\n        return !stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (i <- 0 until string.length) {\n\
    \            if (string(i) == '[') stack.push('[')\n            else if (string(i)\
    \ == ']') {\n                if (stack.isEmpty) return false\n               \
    \ else stack.pop\n            }\n        }\n        return !stack.isEmpty", " \
    \       var stack = new Stack[Char]()\n        for (c <- string) {\n         \
    \   if (c == '[') stack.push(c)\n            else if (c == ']') {\n          \
    \      if (stack.isEmpty) return false\n                else stack.pop\n     \
    \       }\n        }\n        if (stack.isEmpty) true else false", "        var\
    \ stack = new Stack[Char]\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty", "        var stack = new Stack[Char]()\n        for\
    \ (c <- string) {\n            if (c == '[') stack.push(c)\n            else if\
    \ (c == ']') {\n                if (stack.isEmpty) return false\n            \
    \    else stack.pop\n            }\n        }\n        return !stack.isEmpty",
  "        var stack = new Stack[Char]()\n        for (c <- string) {\n          \
    \  if (c == '[') {\n                stack.push(c)\n            } else if (c ==\
    \ ']') {\n                if (stack.isEmpty) return false\n                if\
    \ (stack.pop != '[') return false\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (i <- 0 until string.length) {\n\
    \            if (string(i) == '[') stack.push('[')\n            else if (string(i)\
    \ == ']') {\n                if (stack.isEmpty) return false\n               \
    \ else stack.pop\n            }\n        }\n        if (stack.isEmpty) return\
    \ false\n        else return true", "        var stack = new Stack[Char]\n   \
    \     for (c <- string) {\n            if (c == '[') stack.push(c)\n         \
    \   else if (c == ']') {\n                if (stack.isEmpty) return false\n  \
    \              else if (stack.top == '[') stack.pop\n                else return\
    \ false\n            }\n        }\n        if (stack.isEmpty) true else false",
  "        val stack = Stack[Char]()\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return !stack.isEmpty", "        var stack = new Stack[Char]()\n\
    \        var isNested = false\n        for (i <- 0 until string.length) {\n  \
    \          if (string(i) == '[') {\n                stack.push(string(i))\n  \
    \          } else {\n                if (stack.isEmpty) {\n                  \
    \  return false\n                } else {\n                    stack.pop()\n \
    \                   isNested = true\n                }\n            }\n      \
    \  }\n        return isNested", "        val stack = new Stack[Char]\n       \
    \ for (c <- string) {\n            if (c == '[') {\n                stack.push(c)\n\
    \            } else {\n                if (stack.isEmpty) {\n                \
    \    return false\n                } else {\n                    stack.pop\n \
    \               }\n            }\n        }\n        return stack.isEmpty", " \
    \       var stack = new Stack[Char]()\n        for (c <- string) {\n         \
    \   if (c == '[') {\n                stack.push(c)\n            } else if (c ==\
    \ ']') {\n                if (stack.isEmpty) {\n                    return false\n\
    \                } else {\n                    stack.pop()\n                }\n\
    \            }\n        }\n        return stack.isEmpty", "        val stack =\
    \ new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false", "        var stack = new Stack[Char]()\n        for (i <-\
    \ 0 until string.length) {\n            if (string(i) == '[') {\n            \
    \    stack.push(string(i))\n            } else {\n                if (stack.isEmpty)\
    \ {\n                    return false\n                } else {\n            \
    \        stack.pop()\n                }\n            }\n        }\n        return\
    \ !stack.isEmpty", "        val stack = new Stack[Char]\n        for (c <- string)\
    \ {\n            if (c == '[') {\n                stack.push(c)\n            }\
    \ else {\n                if (stack.isEmpty) {\n                    return false\n\
    \                } else {\n                    stack.pop\n                }\n\
    \            }\n        }\n        return !stack.isEmpty", "        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return !stack.isEmpty", "        var stack = new Stack[Char]()\n       \
    \ for (c <- string) {\n            if (c == '[') {\n                stack.push(c)\n\
    \            } else if (c == ']') {\n                if (stack.isEmpty) {\n  \
    \                  return false\n                } else {\n                  \
    \  stack.pop()\n                }\n            }\n        }\n        return !stack.isEmpty",
  "        val stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        if (stack.isEmpty) true else false", "        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ return false\n        else return true", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]()\n        for (c <- string) {\n          \
    \  if (c == '[') {\n                stack.push(c)\n            } else if (c ==\
    \ ']') {\n                if (stack.isEmpty) {\n                    return false\n\
    \                } else {\n                    stack.pop()\n                }\n\
    \            }\n        }\n        return !stack.isEmpty", "        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ {\n                stack.push(c)\n            } else if (c == ']') {\n     \
    \           if (stack.isEmpty) {\n                    return false\n         \
    \       } else {\n                    stack.pop()\n                }\n       \
    \     }\n        }\n        return !stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (i <- 0 until string.length) {\n            if (string(i) == '[')\
    \ stack.push('[')\n            else if (string(i) == ']') {\n                if\
    \ (stack.isEmpty) return false\n                else stack.pop\n            }\n\
    \        }\n        return !stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return !stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return stack.isEmpty", "        var stack = new Stack[Char]()\n\
    \        for (c <- string) {\n            if (c == '[') {\n                stack.push(c)\n\
    \            } else if (c == ']') {\n                if (stack.isEmpty) {\n  \
    \                  return false\n                } else {\n                  \
    \  stack.pop()\n                }\n            }\n        }\n        return !stack.isEmpty",
  "        var stack = new Stack[Char]()\n        for (c <- string) {\n          \
    \  if (c == '[') {\n                stack.push(c)\n            } else if (c ==\
    \ ']') {\n                if (stack.isEmpty) {\n                    return false\n\
    \                } else {\n                    stack.pop()\n                }\n\
    \            }\n        }\n        return !stack.isEmpty", "        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     if (stack.isEmpty) return false\n        else return true", "        val\
    \ stack = new Stack[Char]\n        for (c <- string) {\n            if (c == '[')\
    \ {\n                stack.push(c)\n            } else {\n                if (stack.isEmpty)\
    \ {\n                    return false\n                } else {\n            \
    \        stack.pop\n                }\n            }\n        }\n        return\
    \ !stack.isEmpty", "        val stack = new Stack[Char]\n        for (c <- string)\
    \ {\n            if (c == '[') stack.push(c)\n            else if (c == ']') {\n\
    \                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) return false\n        return\
    \ true", "        var stack = new Stack[Char]()\n        for (c <- string) {\n\
    \            if (c == '[') stack.push(c)\n            else if (c == ']') {\n \
    \               if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        return !stack.isEmpty", "        val stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return !stack.isEmpty",
  "        var stack = new Stack[Char]()\n        for (c <- string) {\n          \
    \  if (c == '[') stack.push(c)\n            else if (c == ']') {\n           \
    \     if (stack.isEmpty) return false\n                else stack.pop\n      \
    \      }\n        }\n        if (stack.isEmpty) true else false", "        var\
    \ stack = new Stack[Char]\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return !stack.isEmpty", "        val stack = new Stack[Char]\n        for\
    \ (c <- string) {\n            if (c == '[') {\n                stack.push(c)\n\
    \            } else {\n                if (stack.isEmpty) {\n                \
    \    return false\n                } else {\n                    stack.pop\n \
    \               }\n            }\n        }\n        return stack.isEmpty", " \
    \       var stack = new Stack[Char]\n        for (c <- string) {\n           \
    \ if (c == '[') {\n                stack.push(c)\n            } else if (c ==\
    \ ']') {\n                if (stack.isEmpty) {\n                    return false\n\
    \                } else {\n                    stack.pop\n                }\n\
    \            }\n        }\n        return !stack.isEmpty", "        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return !stack.isEmpty", "        var stack = new Stack[Char]()\n       \
    \ for (i <- 0 until string.length) {\n            if (string(i) == '[') stack.push('[')\n\
    \            else if (string(i) == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     if (stack.isEmpty) true else false", "        var stack = new Stack[Char]()\n\
    \        for (c <- string) {\n            if (c == '[') {\n                stack.push(c)\n\
    \            } else if (c == ']') {\n                if (stack.isEmpty) {\n  \
    \                  return false\n                } else {\n                  \
    \  stack.pop()\n                }\n            }\n        }\n        return !stack.isEmpty",
  "        var stack = Stack[Char]()\n        for (c <- string) {\n            if\
    \ (c == '[') {\n                stack.push(c)\n            } else if (c == ']')\
    \ {\n                if (stack.isEmpty) {\n                    return false\n\
    \                } else {\n                    stack.pop\n                }\n\
    \            }\n        }\n        return !stack.isEmpty", "        var stack\
    \ = new Stack[Char]()\n        for (i <- 0 until string.length) {\n          \
    \  if (string(i) == '[') stack.push('[')\n            else if (string(i) == ']')\
    \ {\n                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        return !stack.isEmpty", "        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ {\n                stack.push(c)\n            } else if (c == ']') {\n     \
    \           if (stack.isEmpty) {\n                    return false\n         \
    \       } else {\n                    stack.pop()\n                }\n       \
    \     }\n        }\n        return stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') {\n                stack.push(c)\n\
    \            } else if (c == ']') {\n                if (stack.isEmpty) {\n  \
    \                  return false\n                } else {\n                  \
    \  stack.pop\n                }\n            }\n        }\n        return !stack.isEmpty",
  "        var stack = new Stack[Char]()\n        for (c <- string) {\n          \
    \  if (c == '[') {\n                stack.push(c)\n            } else if (c ==\
    \ ']') {\n                if (stack.isEmpty) {\n                    return false\n\
    \                } else {\n                    stack.pop()\n                }\n\
    \            }\n        }\n        return !stack.isEmpty", "        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return !stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return !stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ return false\n        else return true", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') {\n                stack.push(c)\n\
    \            } else if (c == ']') {\n                if (stack.isEmpty) {\n  \
    \                  return false\n                } else {\n                  \
    \  stack.pop\n                }\n            }\n        }\n        return !stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') {\n                stack.push(c)\n            } else if (c == ']')\
    \ {\n                if (stack.isEmpty) {\n                    return false\n\
    \                } else {\n                    stack.pop\n                }\n\
    \            }\n        }\n        return !stack.isEmpty", "        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return !stack.isEmpty",
  "        val stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') {\n                stack.push(c)\n            } else {\n        \
    \        if (stack.isEmpty) {\n                    return false\n            \
    \    } else {\n                    stack.pop\n                }\n            }\n\
    \        }\n        return !stack.isEmpty", "        var stack = new Stack[Char]()\n\
    \        for (c <- string) {\n            if (c == '[') {\n                stack.push(c)\n\
    \            } else if (c == ']') {\n                if (stack.isEmpty) {\n  \
    \                  return false\n                } else {\n                  \
    \  stack.pop()\n                }\n            }\n        }\n        return !stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return !stack.isEmpty", "        var stack = new Stack[Char]()\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return !stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        if (stack.isEmpty) return false\n        else return\
    \ true", "        var stack = new Stack[Char]()\n        for (c <- string) {\n\
    \            if (c == '[') stack.push(c)\n            else if (c == ']') {\n \
    \               if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        return stack.isEmpty", "        var stack =\
    \ new Stack[Char]()\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else if (c == ']') {\n         \
    \       if (stack.isEmpty) {\n                    return false\n             \
    \   } else {\n                    stack.pop()\n                }\n           \
    \ }\n        }\n        return !stack.isEmpty", "        var stack = new Stack[Char]()\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                if (stack.pop() != '[') return false\n            }\n       \
    \ }\n        return stack.isEmpty", "        var stack = new Stack[Char]()\n \
    \       for (c <- string) {\n            if (c == '[') stack.push(c)\n       \
    \     else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return !stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false", "        var stack = new Stack[Char]\n        for (c <- string)\
    \ {\n            if (c == '[') stack.push(c)\n            else if (c == ']') {\n\
    \                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) true else false", "    \
    \    var stack = new Stack[Char]\n        for (i <- 0 until string.length) {\n\
    \            if (string(i) == '[') stack.push('[')\n            else if (string(i)\
    \ == ']') {\n                if (stack.isEmpty) return false\n               \
    \ else stack.pop\n            }\n        }\n        if (stack.isEmpty) return\
    \ false\n        else return true", "        var stack = new Stack[Char]\n   \
    \     for (c <- string) {\n            if (c == '[') stack.push(c)\n         \
    \   else if (c == ']') {\n                if (stack.isEmpty) return false\n  \
    \              else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return !stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return !stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        if (stack.isEmpty) return false\n        else return\
    \ true", "        var stack = new Stack[Char]()\n        for (c <- string) {\n\
    \            if (c == '[') stack.push(c)\n            else if (c == ']') {\n \
    \               if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) return false\n        else\
    \ return true", "        var stack = new Stack[Char]()\n        for (c <- string)\
    \ {\n            if (c == '[') {\n                stack.push(c)\n            }\
    \ else if (c == ']') {\n                if (stack.isEmpty) {\n               \
    \     return false\n                } else {\n                    stack.pop()\n\
    \                }\n            }\n        }\n        return !stack.isEmpty",
  "        var stack = new Stack[Char]()\n        for (c <- string) {\n          \
    \  if (c == '[') stack.push(c)\n            else if (c == ']') {\n           \
    \     if (stack.isEmpty) return false\n                else stack.pop\n      \
    \      }\n        }\n        if (stack.isEmpty) true else false", "        var\
    \ stack = new Stack[Char]()\n        for (c <- string) {\n            if (c ==\
    \ '[') stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return !stack.isEmpty", "        var stack = Stack[Char]()\n        for\
    \ (c <- string) {\n            if (c == '[') stack.push(c)\n            else if\
    \ (c == ']') {\n                if (stack.isEmpty) return false\n            \
    \    else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        if (stack.isEmpty) true else false", "        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                stack.pop\n            }\n        }\n        return\
    \ !stack.isEmpty", "        var stack = new Stack[Char]()\n        for (c <- string)\
    \ {\n            if (c == '[') stack.push(c)\n            else if (c == ']') {\n\
    \                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) true else false", "    \
    \    var stack = new Stack[Char]()\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return !stack.isEmpty",
  "        var stack = new Stack[Char]()\n        for (c <- string) {\n          \
    \  if (c == '[') stack.push(c)\n            else if (c == ']') {\n           \
    \     if (stack.isEmpty) return false\n                else stack.pop\n      \
    \      }\n        }\n        return !stack.isEmpty", "        var stack = new\
    \ Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]()\n        for (c <- string) {\n          \
    \  if (c == '[') {\n                stack.push(c)\n            } else if (c ==\
    \ ']') {\n                if (stack.isEmpty) {\n                    return false\n\
    \                } else {\n                    stack.pop()\n                }\n\
    \            }\n        }\n        return !stack.isEmpty", "        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     if (stack.isEmpty) return false\n        else return true", "        var\
    \ stack = new Stack[Char]()\n        for (c <- string) {\n            if (c ==\
    \ '[') {\n                stack.push(c)\n            } else if (c == ']') {\n\
    \                if (stack.isEmpty) {\n                    return false\n    \
    \            } else {\n                    stack.pop()\n                }\n  \
    \          }\n        }\n        return !stack.isEmpty", "        var stack =\
    \ new Stack[Char]()\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else if (c == ']') {\n         \
    \       if (stack.isEmpty) {\n                    return false\n             \
    \   } else {\n                    stack.pop()\n                }\n           \
    \ }\n        }\n        if (stack.isEmpty) {\n            return false\n     \
    \   } else {\n            return true\n        }", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ return false\n        return true", "        var stack = new Stack[Char]()\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return !stack.isEmpty",
  "        var stack = new Stack[Char]()\n        for (c <- string) {\n          \
    \  if (c == '[') stack.push(c)\n            else if (c == ']') {\n           \
    \     if (stack.isEmpty) return false\n                else stack.pop\n      \
    \      }\n        }\n        return !stack.isEmpty", "        var stack = new\
    \ Stack[Char]()\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else if (stack.top == '[') stack.pop\n                else return\
    \ false\n            }\n        }\n        if (stack.isEmpty) true else false",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else if (stack.top == '[') stack.pop\n                else return\
    \ false\n            }\n        }\n        return stack.isEmpty", "        var\
    \ stack = new Stack[Char]\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                if (stack.pop != '[') return false\n         \
    \   }\n        }\n        return stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false", "        var stack = new Stack[Char]\n        for (c <- string)\
    \ {\n            if (c == '[') stack.push(c)\n            else if (c == ']') {\n\
    \                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) true else false", "    \
    \    val stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') {\n                stack.push(c)\n            } else {\n        \
    \        if (stack.isEmpty) {\n                    return false\n            \
    \    } else {\n                    stack.pop\n                }\n            }\n\
    \        }\n        return !stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') {\n                stack.push(c)\n\
    \            } else if (c == ']') {\n                if (stack.isEmpty) return\
    \ false\n                else stack.pop\n            }\n        }\n        return\
    \ !stack.isEmpty", "        val stack = Stack[Char]()\n        for (c <- string)\
    \ {\n            if (c == '[') stack.push(c)\n            else if (c == ']') {\n\
    \                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) return false\n        return\
    \ true", "        var stack = new Stack[Char]()\n        for (i <- 0 until string.length)\
    \ {\n            if (string(i) == '[') {\n                stack.push(string(i))\n\
    \            } else {\n                if (stack.isEmpty) {\n                \
    \    return false\n                } else {\n                    stack.pop()\n\
    \                }\n            }\n        }\n        return !stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        if (stack.isEmpty) true else false", "        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     if (stack.isEmpty) return false\n        else return true", "        var\
    \ stack = Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     if (stack.isEmpty) true else false", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ return false\n        else return true", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else if (stack.top == '[') stack.pop\n                else return\
    \ false\n            }\n        }\n        if (stack.isEmpty) true else false",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return !stack.isEmpty", "        // Create a stack to\
    \ store the brackets\n        var stack = new Stack[Char]()\n        // Iterate\
    \ through the string\n        for (c <- string) {\n            // If the character\
    \ is an opening bracket, push it onto the stack\n            if (c == '[') {\n\
    \                stack.push(c)\n            }\n            // If the character\
    \ is a closing bracket, pop the top of the stack\n            else if (c == ']')\
    \ {\n                // If the stack is empty, return false\n                if\
    \ (stack.isEmpty) {\n                    return false\n                }\n   \
    \             // Otherwise, pop the top of the stack\n                else {\n\
    \                    stack.pop()\n                }\n            }\n        }\n\
    \        // If the stack is empty, return true\n        if (stack.isEmpty) {\n\
    \            return true\n        }\n        // Otherwise, return false\n    \
    \    else {\n            return false\n        }", "        var stack = new Stack[Char]()\n\
    \        for (c <- string) {\n            if (c == '[') {\n                stack.push(c)\n\
    \            } else if (c == ']') {\n                if (stack.isEmpty) {\n  \
    \                  return false\n                } else {\n                  \
    \  stack.pop()\n                }\n            }\n        }\n        if (stack.isEmpty)\
    \ {\n            return false\n        } else {\n            return true\n   \
    \     }", "        var stack = new Stack[Char]()\n        for (c <- string) {\n\
    \            if (c == '[') {\n                stack.push(c)\n            } else\
    \ if (c == ']') {\n                if (stack.isEmpty) {\n                    return\
    \ false\n                } else {\n                    stack.pop()\n         \
    \       }\n            }\n        }\n        return !stack.isEmpty", "       \
    \ var stack = new Stack[Char]\n        for (ch <- string) {\n            if (ch\
    \ == '[') stack.push(ch)\n            else if (ch == ']') {\n                if\
    \ (stack.isEmpty) return false\n                else stack.pop\n            }\n\
    \        }\n        return stack.isEmpty", "        var stack = new Stack[Char]()\n\
    \        for (c <- string) {\n            if (c == '[') {\n                stack.push(c)\n\
    \            } else if (c == ']') {\n                if (stack.isEmpty) {\n  \
    \                  return false\n                } else {\n                  \
    \  stack.pop()\n                }\n            }\n        }\n        return !stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else if (stack.top == '[') stack.pop\n                else return\
    \ false\n            }\n        }\n        if (stack.isEmpty) true else false",
  "        var stack = Stack[Char]()\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        return !stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return !stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- string) {\n            if\
    \ (c == '[') stack.push(c)\n            else if (c == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        if (stack.isEmpty) true else false", "        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false", "        var stack = new Stack[Char]\n        for (c <- string)\
    \ {\n            if (c == '[') stack.push(c)\n            else if (c == ']') {\n\
    \                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) return false\n        else\
    \ return true", "        var stack = new Stack[Char]()\n        for (c <- string)\
    \ {\n            if (c == '[') {\n                stack.push(c)\n            }\
    \ else if (c == ']') {\n                if (stack.isEmpty) {\n               \
    \     return false\n                } else {\n                    stack.pop()\n\
    \                }\n            }\n        }\n        return !stack.isEmpty",
  "        var stack = new Stack[Char]()\n        for (c <- string) {\n          \
    \  if (c == '[') {\n                stack.push(c)\n            } else if (c ==\
    \ ']') {\n                if (stack.isEmpty) {\n                    return false\n\
    \                } else {\n                    stack.pop()\n                }\n\
    \            }\n        }\n        return !stack.isEmpty", "        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ {\n                stack.push(c)\n            } else if (c == ']') {\n     \
    \           if (stack.isEmpty) {\n                    return false\n         \
    \       } else {\n                    stack.pop()\n                }\n       \
    \     }\n        }\n        return !stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return !stack.isEmpty",
  "        var stack = new Stack[Char]()\n        for (c <- string) {\n          \
    \  if (c == '[') {\n                stack.push(c)\n            } else if (c ==\
    \ ']') {\n                if (stack.isEmpty) {\n                    return false\n\
    \                } else {\n                    stack.pop()\n                }\n\
    \            }\n        }\n        return !stack.isEmpty", "        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     if (stack.isEmpty) return false\n        return true", "        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else if (c == ']') {\n         \
    \       if (stack.isEmpty) {\n                    return false\n             \
    \   } else {\n                    stack.pop\n                }\n            }\n\
    \        }\n        return !stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- string) {\n            if (c == '[') stack.push(c)\n      \
    \      else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return !stack.isEmpty"]
stop_tokens:
- "\n    }\n"
