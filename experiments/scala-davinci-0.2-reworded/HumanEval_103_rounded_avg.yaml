name: HumanEval_103_rounded_avg
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given two positive integers n and m, and your task is to compute\
  \ the\n    // average of the integers from n through m (including n and m). \n \
  \   // Round the answer to the nearest integer and convert that to binary.\n   \
  \ // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
  \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
  \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
  \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
  \ Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
  \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
  ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
  \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
  0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
  ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
  \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
  0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
  \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n \
  \   }\n\n}\n"
completions: ["        if (n > m) Left(\"-1\")\n        else {\n            val avg\
    \ = (n + m) / 2\n            Right(avg)\n        }", "        if (n > m) Left(\"\
    -1\")\n        else {\n            val avg = (n + m) / 2\n            val bin\
    \ = avg.toBinaryString\n            Right(bin.toLong)\n        }", "        if\
    \ (n > m) return Left(\"-1\")\n        val avg = (n + m) / 2\n        val bin\
    \ = avg.toBinaryString\n        return Right(bin.toLong)", "        if (n > m)\
    \ Left(\"-1\")\n        else {\n            val avg = (n + m) / 2\n          \
    \  Right(avg)\n        }", "        if (n > m) {\n            Left(\"-1\")\n \
    \       } else {\n            val avg = (n + m) / 2\n            val binary =\
    \ avg.toBinaryString\n            Right(binary.toLong)\n        }", "        if\
    \ (n > m) Left(\"-1\")\n        else {\n            val avg = (n + m) / 2\n  \
    \          val binary = avg.toBinaryString\n            Right(binary.toLong)\n\
    \        }", "        if (n > m) Left(\"-1\")\n        else {\n            val\
    \ sum = (n + m) * (m - n + 1) / 2\n            val avg = sum / (m - n + 1)\n \
    \           Right(avg)\n        }", "        if (n > m) Left(\"-1\")\n       \
    \ else {\n            val sum = (n to m).sum\n            val avg = sum / (m -\
    \ n + 1)\n            Right(avg)\n        }", "        if (n > m) return Left(\"\
    -1\")\n        val avg = (n + m) / 2\n        val binary = avg.toBinaryString\n\
    \        Right(binary.toLong)", "        if (n > m) Left(\"-1\")\n        else\
    \ {\n            val avg = (n + m) / 2\n            val binary = avg.toBinaryString\n\
    \            Right(binary.toLong)\n        }", "        if (n > m) {\n       \
    \     Left(\"-1\")\n        } else {\n            val avg = (n + m) / 2\n    \
    \        Right(avg)\n        }", "        if (n > m) return Left(\"-1\")\n   \
    \     val avg = (n + m) / 2\n        val avgBin = avg.toBinaryString\n       \
    \ return Right(avgBin.toLong)", "        if (n > m) return Left(\"-1\")\n    \
    \    val avg = (n + m) / 2\n        val bin = avg.toBinaryString\n        Right(bin.toLong)",
  "        if (n > m) return Left(\"-1\")\n        val avg = round((n + m) / 2.0)\n\
    \        val bin = avg.toBinaryString\n        Right(bin.toLong)", "        if\
    \ (n > m) {\n            Left(\"-1\")\n        } else {\n            Right((n\
    \ + m) / 2)\n        }", "        if (n > m) {\n            Left(\"-1\")\n   \
    \     } else {\n            val sum = (n to m).sum\n            val avg = sum\
    \ / (m - n + 1)\n            Right(avg)\n        }", "        if (n > m) {\n \
    \           Left(\"-1\")\n        } else {\n            val avg = (n + m) / 2\n\
    \            val bin = avg.toBinaryString\n            Right(bin.toLong)\n   \
    \     }", "        if (n > m) {\n            Left(\"-1\")\n        } else {\n\
    \            val sum = (n + m) * (m - n + 1) / 2\n            val avg = sum /\
    \ (m - n + 1)\n            Right(avg)\n        }", "        if (n > m) Left(\"\
    -1\")\n        else {\n            val avg = (n + m) / 2\n            val bin\
    \ = avg.toBinaryString\n            Right(bin.toLong)\n        }", "        if\
    \ (n > m) return Left(\"-1\")\n        var sum = 0l\n        for (i <- n to m)\
    \ {\n            sum += i\n        }\n        var avg = sum / (m - n + 1)\n  \
    \      return Right(avg)"]
stop_tokens:
- "\n    }\n"
