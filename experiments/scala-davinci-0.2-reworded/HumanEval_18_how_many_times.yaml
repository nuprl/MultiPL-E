name: HumanEval_18_how_many_times
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Find how many times a given substring can be found in the original string.\
  \ Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n\
  \    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"\
  aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string : String, substring\
  \ : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"\
  ), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
  \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
  john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
completions: ["        var count = 0l\n        var index = string.indexOf(substring)\n\
    \        while (index != -1) {\n            count += 1\n            index = string.indexOf(substring,\
    \ index + 1)\n        }\n        return count", "        var count = 0l\n    \
    \    var index = 0\n        while (index < string.length) {\n            if (string.substring(index).startsWith(substring))\
    \ {\n                count += 1\n                index += substring.length\n \
    \           }\n            else index += 1\n        }\n        count", "     \
    \   var count = 0l\n        for (i <- 0 to string.length - substring.length) {\n\
    \            if (string.substring(i, i + substring.length) == substring) count\
    \ += 1\n        }\n        return count", "        var count = 0l\n        var\
    \ index = 0\n        while(index < string.length) {\n            if(string.substring(index).startsWith(substring))\
    \ {\n                count += 1\n                index += substring.length\n \
    \           }\n            else index += 1\n        }\n        return count",
  "        var count = 0l\n        for (i <- 0 to string.length - substring.length)\
    \ {\n            if (string.substring(i, i + substring.length) == substring) count\
    \ += 1\n        }\n        return count", "        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count",
  "        var count = 0l\n        var i = 0\n        while (i < string.length) {\n\
    \            if (string.substring(i).startsWith(substring)) {\n              \
    \  count += 1\n                i += substring.length\n            } else {\n \
    \               i += 1\n            }\n        }\n        return count", "   \
    \     var count = 0l\n        var index = 0\n        while (index != -1) {\n \
    \           index = string.indexOf(substring, index)\n            if (index !=\
    \ -1) {\n                count += 1\n                index += 1\n            }\n\
    \        }\n        return count", "        var count = 0l\n        for (i <-\
    \ 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count",
  "        var count = 0l\n        var index = 0\n        while (index < string.length)\
    \ {\n            if (string.indexOf(substring, index) == index) {\n          \
    \      count += 1\n                index += substring.length\n            }\n\
    \            else index += 1\n        }\n        return count", "        var count\
    \ = 0l\n        var i = 0\n        while (i < string.length) {\n            if\
    \ (string.substring(i).startsWith(substring)) {\n                count += 1\n\
    \                i += substring.length\n            } else {\n               \
    \ i += 1\n            }\n        }\n        return count", "        var count\
    \ = 0l\n        for (i <- 0 to string.length - substring.length) {\n         \
    \   if (string.substring(i, i + substring.length) == substring) count += 1\n \
    \       }\n        return count", "        var count = 0l\n        for (i <- 0\
    \ to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count",
  "        var count = 0l\n        for (i <- 0 to string.length - substring.length)\
    \ {\n            if (string.substring(i, i + substring.length) == substring) count\
    \ += 1\n        }\n        return count", "        var count = 0l\n        var\
    \ index = 0\n        while (index != -1) {\n            index = string.indexOf(substring,\
    \ index)\n            if (index != -1) {\n                count += 1\n       \
    \         index += 1\n            }\n        }\n        return count", "     \
    \   var count = 0l\n        var index = string.indexOf(substring)\n        while\
    \ (index != -1) {\n            count += 1\n            index = string.indexOf(substring,\
    \ index + 1)\n        }\n        return count", "        var count = 0l\n    \
    \    for (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) {\n                count += 1\n        \
    \    }\n        }\n        return count", "        var count = 0l\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (string.substring(i).startsWith(substring))\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       } else {\n                i += 1\n            }\n        }\n        return\
    \ count", "        var count = 0l\n        var index = 0\n        while (index\
    \ < string.length) {\n            if (string.indexOf(substring, index) != -1)\
    \ {\n                count += 1\n                index = string.indexOf(substring,\
    \ index) + 1\n            }\n            else index = string.length\n        }\n\
    \        return count", "        var count = 0l\n        for (i <- 0 to string.length\
    \ - substring.length) {\n            if (string.substring(i, i + substring.length)\
    \ == substring) count += 1\n        }\n        return count"]
stop_tokens:
- "\n    }\n"
