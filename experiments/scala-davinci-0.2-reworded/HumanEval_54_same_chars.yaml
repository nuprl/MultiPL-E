name: HumanEval_54_same_chars
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"\
  ), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"\
  dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"\
  ))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n\
  \    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>>\
  \ sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0\
  \ : String, s1 : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sameChars((\"eabcdzzzz\"\
  ), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"), (\"dddddddabc\"\
  )) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n\
  \    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(sameChars((\"\
  abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"eabcdzzzz\"),\
  \ (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"), (\"aaccc\"\
  )) == (false));\n    }\n\n}\n"
completions: ["        val c0 = s0.toList.sorted\n        val c1 = s1.toList.sorted\n\
    \        c0 == c1", "        val c0 = s0.toCharArray.sorted\n        val c1 =\
    \ s1.toCharArray.sorted\n        c0.sameElements(c1)", "        val c0 = s0.toCharArray.sorted\n\
    \        val c1 = s1.toCharArray.sorted\n        c0.sameElements(c1)", "     \
    \   val c0 = s0.toCharArray.sorted\n        val c1 = s1.toCharArray.sorted\n \
    \       c0.deep == c1.deep", "        val c0 = s0.toCharArray.sorted\n       \
    \ val c1 = s1.toCharArray.sorted\n        c0.deep == c1.deep", "        val c0\
    \ = s0.toCharArray.sorted\n        val c1 = s1.toCharArray.sorted\n        c0.sameElements(c1)",
  "        val c0 = s0.toCharArray.sorted\n        val c1 = s1.toCharArray.sorted\n\
    \        c0.sameElements(c1)", "        val c0 = s0.toCharArray.sorted\n     \
    \   val c1 = s1.toCharArray.sorted\n        c0.sameElements(c1)", "        val\
    \ c0 = s0.toCharArray.sorted\n        val c1 = s1.toCharArray.sorted\n       \
    \ c0.sameElements(c1)", "        val c0 = s0.toCharArray.sorted\n        val c1\
    \ = s1.toCharArray.sorted\n        c0.sameElements(c1)", "        val c0 = s0.toCharArray.sorted\n\
    \        val c1 = s1.toCharArray.sorted\n        c0.length == c1.length && c0.zip(c1).forall(p\
    \ => p._1 == p._2)", "        val c0 = s0.toCharArray.sorted\n        val c1 =\
    \ s1.toCharArray.sorted\n        c0.sameElements(c1)", "        val c0 = s0.toCharArray.sorted\n\
    \        val c1 = s1.toCharArray.sorted\n        c0.sameElements(c1)", "     \
    \   val c0 = s0.toCharArray.sorted\n        val c1 = s1.toCharArray.sorted\n \
    \       c0.sameElements(c1)", "        val m0 = new HashMap[Char, Int]\n     \
    \   for (c <- s0) {\n            if (m0.contains(c)) m0(c) += 1 else m0(c) = 1\n\
    \        }\n        val m1 = new HashMap[Char, Int]\n        for (c <- s1) {\n\
    \            if (m1.contains(c)) m1(c) += 1 else m1(c) = 1\n        }\n      \
    \  m0 == m1", "        val c0 = s0.toCharArray.sorted\n        val c1 = s1.toCharArray.sorted\n\
    \        c0.sameElements(c1)", "        val a0 = s0.toCharArray.sorted\n     \
    \   val a1 = s1.toCharArray.sorted\n        a0.sameElements(a1)", "        val\
    \ c0 = s0.toCharArray.sorted\n        val c1 = s1.toCharArray.sorted\n       \
    \ c0.sameElements(c1)", "        val c0 = s0.toCharArray.sorted\n        val c1\
    \ = s1.toCharArray.sorted\n        c0.sameElements(c1)", "        val c0 = s0.toCharArray.sorted\n\
    \        val c1 = s1.toCharArray.sorted\n        c0.sameElements(c1)"]
stop_tokens:
- "\n    }\n"
