name: HumanEval_125_split_words
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string of words, return a list of words split on whitespace, if\
  \ no whitespaces exists in the text you\n    // should split on commas ',' if no\
  \ commas exists you should return the number of lower-case letters with odd order\
  \ in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    //\
  \ Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"Hello\"\
  , \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
  Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def splitWords(txt\
  \ : String) : Either[List[String], Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
  \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
  Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
  Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
  Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n \
  \   assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
  )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
  \")).equals(0l));\n    }\n\n}\n"
completions: ["        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val words = txt.split(\"\
    ,\")\n            if (words.length > 1) Left(words.toList)\n            else {\n\
    \                val count = txt.toLowerCase.toList.map(c => (c - 'a')).filter(i\
    \ => i % 2 == 0).length\n                Right(count)\n            }\n       \
    \ }", "        if (txt.contains(\" \")) {\n            Left(txt.split(\" \").toList)\n\
    \        } else if (txt.contains(\",\")) {\n            Left(txt.split(\",\").toList)\n\
    \        } else {\n            Right(txt.toLowerCase.toList.filter(c => c >= 'a'\
    \ && c <= 'z').map(c => (c - 'a') % 2).count(_ == 1))\n        }", "        val\
    \ words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                val count = txt.toList.filter(c\
    \ => c.isLower && (c - 'a') % 2 == 0).length\n                Right(count)\n \
    \           }\n        }", "        val words = txt.split(\"\\\\s+\")\n      \
    \  if (words.length > 1) Left(words.toList)\n        else {\n            val words\
    \ = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n \
    \           else {\n                var count = 0l\n                for (i <-\
    \ 0 until txt.length) {\n                    if (txt(i) >= 'a' && txt(i) <= 'z'\
    \ && i % 2 == 0) count += 1\n                }\n                Right(count)\n\
    \            }\n        }", "        val words = txt.split(\" \")\n        if\
    \ (words.length > 1) {\n            Left(words.toList)\n        } else {\n   \
    \         val words = txt.split(\",\")\n            if (words.length > 1) {\n\
    \                Left(words.toList)\n            } else {\n                val\
    \ count = txt.filter(c => c >= 'a' && c <= 'z').map(c => ord(c) % 2).sum\n   \
    \             Right(count)\n            }\n        }", "        val words = txt.split(\"\
    \ \")\n        if (words.length > 1) {\n            Left(words.toList)\n     \
    \   } else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        Right(txt.filter(c => c.isLower && (c - 'a') % 2 == 0).length)\n    \
    \        }\n        }", '        ???', "        // Your code here\n        null",
  "        if (txt.contains(\" \")) {\n            Left(txt.split(\" \").toList)\n\
    \        } else if (txt.contains(\",\")) {\n            Left(txt.split(\",\").toList)\n\
    \        } else {\n            Right(txt.toLowerCase.map(c => (c - 'a') % 2).count(_\
    \ == 1))\n        }", "        // Your code here\n        null", "        val\
    \ words = txt.split(\"\\\\s+\")\n        if (words.length > 1) {\n           \
    \ Left(words.toList)\n        } else {\n            val chars = txt.split(\",\"\
    )\n            if (chars.length > 1) {\n                Left(chars.toList)\n \
    \           } else {\n                Right(chars.head.filter(c => c.isLower &&\
    \ c.toInt % 2 == 1).length)\n            }\n        }", "        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toLowerCase.toList.zipWithIndex.filter(x => x._2 % 2 == 0).map(x\
    \ => x._1.toInt - 'a'.toInt).sum)\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                var count = 0\n                for (i <-\
    \ 0 until txt.length) {\n                    if (txt(i) - 'a' >= 0 && txt(i) -\
    \ 'a' < 26 && (txt(i) - 'a') % 2 == 1) count += 1\n                }\n       \
    \         Right(count)\n            }\n        }", "        // TODO: Implement\n\
    \        ???", "        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ > 1) {\n            Left(words.toList)\n        } else {\n            val chars\
    \ = txt.split(\",\")\n            if (chars.length > 1) {\n                Left(chars.toList)\n\
    \            } else {\n                Right(chars.map(c => c.toLowerCase).map(c\
    \ => c.toCharArray.map(c => c.toInt - ord('a'))).map(c => c.filter(c => c % 2\
    \ == 1)).map(c => c.length).sum)\n            }\n        }", "        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0l\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                var count = 0\n                for (i <-\
    \ 0 until txt.length) {\n                    if (txt(i) >= 'a' && txt(i) <= 'z'\
    \ && i % 2 == 0) count += 1\n                }\n                Right(count)\n\
    \            }\n        }", "        // TODO: Implement this method\n        null",
  "        // TODO: Implement me!\n        Left(List(\"Hello\", \"world!\"))", " \
    \       // Your code here\n        null", "        // Write your code here\n \
    \       null", "        val words = txt.split(\" \")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val words = txt.split(\"\
    ,\")\n            if (words.length > 1) Left(words.toList)\n            else {\n\
    \                var count = 0l\n                for (i <- 0 until txt.length)\
    \ {\n                    if (txt(i) - 'a' >= 0 && txt(i) - 'a' < 26 && (txt(i)\
    \ - 'a') % 2 == 1) count += 1\n                }\n                Right(count)\n\
    \            }\n        }", "        val words = txt.split(\"\\\\s+\")\n     \
    \   if (words.length > 1) {\n            Left(words.toList)\n        } else {\n\
    \            val chars = txt.split(\",\")\n            if (chars.length > 1) {\n\
    \                Left(chars.toList)\n            } else {\n                Right(txt.toList.filter(c\
    \ => c >= 'a' && c <= 'z').map(c => (c - 'a') % 2).filter(b => b == 1).length)\n\
    \            }\n        }", "        val words = txt.split(\" \")\n        if\
    \ (words.length > 1) {\n            Left(words.toList)\n        } else {\n   \
    \         val chars = txt.split(\",\")\n            if (chars.length > 1) {\n\
    \                Left(chars.toList)\n            } else {\n                Right(txt.toLowerCase.filter(c\
    \ => (c - 'a') % 2 == 0).length)\n            }\n        }", "        // Your\
    \ code here\n        null", "        // TODO: Implement me\n        null", " \
    \       // Your code here\n        null", "        if (txt.contains(\" \")) Left(txt.split(\"\
    \ \").toList)\n        else if (txt.contains(\",\")) Left(txt.split(\",\").toList)\n\
    \        else Right(txt.toLowerCase.toList.zipWithIndex.filter(x => x._2 % 2 ==\
    \ 0).map(x => x._1).length)", "        // Your code here\n        val words =\
    \ txt.split(\" \")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) {\n                Left(words.toList)\n            } else {\n         \
    \       val count = txt.toList.filter(x => x.toInt % 2 == 1).length\n        \
    \        Right(count)\n            }\n        }", "        // Your code here\n\
    \        var split = txt.split(\" \")\n        if (split.length > 1) {\n     \
    \       Left(split.toList)\n        } else {\n            split = txt.split(\"\
    ,\")\n            if (split.length > 1) {\n                Left(split.toList)\n\
    \            } else {\n                var count = 0\n                for (i <-\
    \ 0 until txt.length) {\n                    if (txt(i) - 'a' % 2 == 1) {\n  \
    \                      count += 1\n                    }\n                }\n\
    \                Right(count)\n            }\n        }", "        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toLowerCase.map(c => (c - 'a') % 2).filter(_ == 1).length)\n \
    \       }", "        // Write your code here\n        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) {\n            Left(words.toList)\n \
    \       } else {\n            val chars = txt.split(\",\")\n            if (chars.length\
    \ > 1) {\n                Left(chars.toList)\n            } else {\n         \
    \       Right(txt.toLowerCase.toList.filter(c => c.toInt % 2 == 1).length)\n \
    \           }\n        }", "        if (txt.contains(\" \")) {\n            Left(txt.split(\"\
    \ \").toList)\n        } else if (txt.contains(\",\")) {\n            Left(txt.split(\"\
    ,\").toList)\n        } else {\n            Right(txt.toLowerCase.map(c => (c\
    \ - 'a') % 2).count(_ == 1))\n        }", "        val words = txt.split(\"\\\\\
    s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n    \
    \        val words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                var count = 0l\n                for (i <-\
    \ 0 until txt.length) {\n                    if (txt(i) >= 'a' && txt(i) <= 'z'\
    \ && (txt(i) - 'a') % 2 == 0) count += 1\n                }\n                Right(count)\n\
    \            }\n        }", "        if (txt.contains(\" \")) {\n            Left(txt.split(\"\
    \ \").toList)\n        } else if (txt.contains(\",\")) {\n            Left(txt.split(\"\
    ,\").toList)\n        } else {\n            Right(txt.toLowerCase.toList.filter(c\
    \ => c >= 'a' && c <= 'z').map(c => (c - 'a') % 2).filter(x => x == 1).length)\n\
    \        }", "        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val words = txt.split(\"\
    ,\")\n            if (words.length > 1) Left(words.toList)\n            else {\n\
    \                var count = 0\n                for (i <- 0 until txt.length)\
    \ {\n                    if (txt(i) >= 'a' && txt(i) <= 'z' && i % 2 == 0) count\
    \ += 1\n                }\n                Right(count)\n            }\n     \
    \   }", "        // Your code here\n        null", "        // TODO: Implement\
    \ this method\n        null", "        val lst = txt.split(\" \")\n        if\
    \ (lst.length > 1) {\n            Left(lst.toList)\n        } else {\n       \
    \     val lst2 = txt.split(\",\")\n            if (lst2.length > 1) {\n      \
    \          Left(lst2.toList)\n            } else {\n                val lst3 =\
    \ txt.toList\n                val lst4 = lst3.filter(x => x.isLower)\n       \
    \         val lst5 = lst4.filter(x => (x.toInt - 97) % 2 == 0)\n             \
    \   Right(lst5.length)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) {\n            Left(words.toList)\n \
    \       } else {\n            val chars = txt.split(\",\")\n            if (chars.length\
    \ > 1) {\n                Left(chars.toList)\n            } else {\n         \
    \       Right(chars.map(c => c.toLowerCase.toInt - ord('a')).filter(i => i % 2\
    \ == 1).length)\n            }\n        }", "        if (txt.contains(\" \"))\
    \ {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toLowerCase.toList.map(x => x.toInt - 'a'.toInt).filter(x => x\
    \ % 2 == 1).length)\n        }", "        val words = txt.split(\" \")\n     \
    \   if (words.length > 1) {\n            Left(words.toList)\n        } else {\n\
    \            val commas = txt.split(\",\")\n            if (commas.length > 1)\
    \ {\n                Left(commas.toList)\n            } else {\n             \
    \   Right(txt.toLowerCase.filter(c => c >= 'a' && c <= 'z').zipWithIndex.filter(p\
    \ => p._2 % 2 == 0).map(p => p._1).length)\n            }\n        }", "     \
    \   val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0l\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ - 'a' % 2 == 1) count += 1\n                }\n                Right(count)\n\
    \            }\n        }", "        val words = txt.split(\"\\\\s+\")\n     \
    \   if (words.length > 1) {\n            Left(words.toList)\n        } else {\n\
    \            val chars = txt.split(\",\")\n            if (chars.length > 1) {\n\
    \                Left(chars.toList)\n            } else {\n                val\
    \ count = txt.toList.filter(c => c.isLower && (c - 'a') % 2 == 0).length\n   \
    \             Right(count)\n            }\n        }", "        // Your code here\n\
    \        null", "        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ > 1) {\n            Left(words.toList)\n        } else {\n            val words\
    \ = txt.split(\",\")\n            if (words.length > 1) {\n                Left(words.toList)\n\
    \            } else {\n                Right(txt.toLowerCase.toList.filter(c =>\
    \ c >= 'a' && c <= 'z').zipWithIndex.filter(p => p._2 % 2 == 0).map(p => p._1\
    \ - 'a').sum)\n            }\n        }", "        val words = txt.split(\"\\\\\
    s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n    \
    \        val words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                var count = 0\n                for (i <-\
    \ 0 until txt.length) {\n                    if (txt(i) >= 'a' && txt(i) <= 'z'\
    \ && i % 2 == 0) count += 1\n                }\n                Right(count)\n\
    \            }\n        }", "        // TODO: Implement\n        return null",
  "        // Your code here\n        if (txt.contains(\" \")) {\n            Left(txt.split(\"\
    \ \").toList)\n        } else if (txt.contains(\",\")) {\n            Left(txt.split(\"\
    ,\").toList)\n        } else {\n            Right(txt.toList.map(x => x.toInt\
    \ - 'a'.toInt).filter(x => x % 2 == 1).length)\n        }", "        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        var count = 0\n                for (i <- 0 until txt.length) {\n    \
    \                if (txt(i) - 'a' % 2 == 1) {\n                        count +=\
    \ 1\n                    }\n                }\n                Right(count)\n\
    \            }\n        }", "        // Your code here\n        null", "     \
    \   // YOUR CODE HERE\n        null", "        // YOUR CODE HERE\n        ???",
  "        // Your code here\n        val words = txt.split(\" \")\n        if (words.length\
    \ > 1) {\n            Left(words.toList)\n        } else {\n            val letters\
    \ = txt.split(\",\")\n            if (letters.length > 1) {\n                Left(letters.toList)\n\
    \            } else {\n                var count = 0\n                for (i <-\
    \ 0 until letters(0).length) {\n                    if (letters(0)(i) - 'a' %\
    \ 2 == 1) {\n                        count += 1\n                    }\n     \
    \           }\n                Right(count)\n            }\n        }", "    \
    \    // TODO: Implement me!\n        ???", "        // Write your code here\n\
    \        ???", "        if (txt.contains(\" \")) {\n            Left(txt.split(\"\
    \ \").toList)\n        } else if (txt.contains(\",\")) {\n            Left(txt.split(\"\
    ,\").toList)\n        } else {\n            Right(txt.toLowerCase.toList.filter(c\
    \ => (c - 'a') % 2 == 0).length)\n        }", "        // TODO: Implement me\n\
    \        return Left(List())", "        val words = txt.split(\"\\\\s+\")\n  \
    \      if (words.length > 1) Left(words.toList)\n        else {\n            val\
    \ words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                var count = 0\n                for (i <-\
    \ 0 until txt.length) {\n                    if (txt(i) - 'a' % 2 == 1) count\
    \ += 1\n                }\n                Right(count)\n            }\n     \
    \   }", "        // Your code here\n        val words = txt.split(\" \")\n   \
    \     if (words.length > 1) {\n            Left(words.toList)\n        } else\
    \ {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        Right(txt.toLowerCase.toList.zipWithIndex.filter(x => x._2 % 2 == 0).map(x\
    \ => x._1).filter(x => x >= 'a' && x <= 'z').length)\n            }\n        }",
  "        if (txt.contains(\" \")) {\n            Left(txt.split(\" \").toList)\n\
    \        } else if (txt.contains(\",\")) {\n            Left(txt.split(\",\").toList)\n\
    \        } else {\n            Right(txt.toLowerCase.map(c => (c - 'a') % 2).filter(_\
    \ == 1).size)\n        }", "        // Your code here\n        val words = txt.split(\"\
    \ \")\n        if (words.length > 1) {\n            Left(words.toList)\n     \
    \   } else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        Right(txt.toLowerCase.toList.filter(c => c.toInt % 2 == 1).length)\n\
    \            }\n        }", "        // Your code here\n        null", "     \
    \   val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) {\n     \
    \       Left(words.toList)\n        } else {\n            val chars = txt.split(\"\
    ,\")\n            if (chars.length > 1) {\n                Left(chars.toList)\n\
    \            } else {\n                Right(chars.head.toList.filter(c => c.toInt\
    \ % 2 == 1).length)\n            }\n        }", "        // TODO: Implement\n\
    \        return null", "        // Your code here\n        val words = txt.split(\"\
    \ \")\n        if (words.length > 1) {\n            Left(words.toList)\n     \
    \   } else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        val count = txt.toLowerCase.toList.filter(x => x.toInt - 'a'.toInt %\
    \ 2 == 1).length\n                Right(count)\n            }\n        }", " \
    \       // Your code here\n        if (txt.contains(\" \")) {\n            Left(txt.split(\"\
    \ \").toList)\n        } else if (txt.contains(\",\")) {\n            Left(txt.split(\"\
    ,\").toList)\n        } else {\n            Right(txt.toLowerCase.toList.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1).map(x => x.toInt - 97).filter(x => x % 2 ==\
    \ 1).length)\n        }", '        ???', "        // Your code here\n        ???",
  "        // TODO: Implement\n        Left(List(\"Hello\", \"world!\"))", "     \
    \   // Your code here\n        null", "        // TODO: implement me\n       \
    \ ???", "        val words = txt.split(\"\\\\s+\")\n        if (words.length >\
    \ 1) {\n            Left(words.toList)\n        } else {\n            val words\
    \ = txt.split(\",\")\n            if (words.length > 1) {\n                Left(words.toList)\n\
    \            } else {\n                Right(txt.filter(c => c >= 'a' && c <=\
    \ 'z').map(c => c - 'a').filter(i => i % 2 == 0).length)\n            }\n    \
    \    }", "        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val words = txt.split(\"\
    ,\")\n            if (words.length > 1) Left(words.toList)\n            else {\n\
    \                var count = 0l\n                for (i <- 0 until txt.length)\
    \ {\n                    if (txt(i) >= 'a' && txt(i) <= 'z' && (txt(i) - 'a')\
    \ % 2 == 0) count += 1\n                }\n                Right(count)\n    \
    \        }\n        }", "        val words = txt.split(\"\\\\s+\")\n        if\
    \ (words.length > 1) {\n            Left(words.toList)\n        } else {\n   \
    \         val chars = txt.split(\",\")\n            if (chars.length > 1) {\n\
    \                Left(chars.toList)\n            } else {\n                Right(chars.flatMap(_.toLowerCase.toCharArray).filter(c\
    \ => c - 'a' % 2 == 0).length)\n            }\n        }", "        // your code\
    \ here\n        val words = txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }", "        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.toLowerCase.toList.filter(c => c >= 'a' && c <= 'z').zipWithIndex.filter(p\
    \ => p._2 % 2 == 0).map(p => p._1 - 'a').sum)\n        }", "        // Your code\
    \ here\n        val words = txt.split(\" \")\n        if (words.length > 1) {\n\
    \            Left(words.toList)\n        } else {\n            val chars = txt.split(\"\
    ,\")\n            if (chars.length > 1) {\n                Left(chars.toList)\n\
    \            } else {\n                val count = txt.toList.filter(c => c.toInt\
    \ % 2 == 1).length\n                Right(count)\n            }\n        }", " \
    \       // Your code goes here\n        val words = txt.split(\" \")\n       \
    \ if (words.length > 1) {\n            Left(words.toList)\n        } else {\n\
    \            val commas = txt.split(\",\")\n            if (commas.length > 1)\
    \ {\n                Left(commas.toList)\n            } else {\n             \
    \   Right(txt.filter(c => c.isLower).zipWithIndex.filter(p => p._2 % 2 == 0).map(p\
    \ => p._1).length)\n            }\n        }", "        // TODO: Implement me!\n\
    \        null", "        // Your code here\n        null", "        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n     \
    \   else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0l\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }", "        // Your code here\n\
    \        null", "        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ > 1) {\n            Left(words.toList)\n        } else {\n            val chars\
    \ = txt.split(\",\")\n            if (chars.length > 1) {\n                Left(chars.toList)\n\
    \            } else {\n                Right(chars.map(c => c.toCharArray.map(x\
    \ => x.toInt - ord('a')).filter(x => x % 2 == 1).length).sum)\n            }\n\
    \        }", "        val words = txt.split(\" \")\n        if (words.length >\
    \ 1) {\n            Left(words.toList)\n        } else {\n            val words\
    \ = txt.split(\",\")\n            if (words.length > 1) {\n                Left(words.toList)\n\
    \            } else {\n                val count = txt.toLowerCase.toList.map(x\
    \ => x.toInt - 'a'.toInt).filter(x => x % 2 == 1).length\n                Right(count)\n\
    \            }\n        }", "        // TODO: Implement me\n        Right(0)",
  "        if (txt.contains(\" \")) {\n            Left(txt.split(\" \").toList)\n\
    \        } else if (txt.contains(\",\")) {\n            Left(txt.split(\",\").toList)\n\
    \        } else {\n            Right(txt.toList.filter(x => x.toInt % 2 == 1).length)\n\
    \        }", "        if (txt.contains(\" \")) {\n            Left(txt.split(\"\
    \ \").toList)\n        } else if (txt.contains(\",\")) {\n            Left(txt.split(\"\
    ,\").toList)\n        } else {\n            Right(txt.toLowerCase.map(c => (c\
    \ - 'a') % 2).count(_ == 1))\n        }", "        // Your code here\n       \
    \ null", "        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ > 1) {\n            Left(words.toList)\n        } else {\n            val commas\
    \ = txt.split(\",\")\n            if (commas.length > 1) {\n                Left(commas.toList)\n\
    \            } else {\n                Right(txt.toLowerCase.toList.filter(c =>\
    \ c >= 'a' && c <= 'z').zipWithIndex.filter(p => p._2 % 2 == 0).map(p => p._1).length)\n\
    \            }\n        }", "        // Your code here\n        null", "     \
    \   // Your code here\n        val words = txt.split(\" \")\n        if (words.length\
    \ > 1) {\n            Left(words.toList)\n        } else {\n            val words2\
    \ = txt.split(\",\")\n            if (words2.length > 1) {\n                Left(words2.toList)\n\
    \            } else {\n                val count = txt.toList.filter(x => x.toInt\
    \ % 2 == 1).length\n                Right(count)\n            }\n        }", " \
    \       val words = txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }", "        val words = txt.split(\"\
    \ \")\n        if (words.length > 1) Left(words.toList)\n        else {\n    \
    \        val words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                var count = 0l\n                for (i <-\
    \ 0 until txt.length) {\n                    if (txt(i) - 'a' % 2 == 1) count\
    \ += 1\n                }\n                Right(count)\n            }\n     \
    \   }", "        val words = txt.split(\" \")\n        if (words.length > 1) {\n\
    \            Left(words.toList)\n        } else {\n            val words = txt.split(\"\
    ,\")\n            if (words.length > 1) {\n                Left(words.toList)\n\
    \            } else {\n                Right(txt.toLowerCase.map(c => ord(c) %\
    \ 2).filter(x => x == 1).length)\n            }\n        }", "        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                Right(txt.toList.filter(c\
    \ => c.isLower && c.toInt % 2 == 1).length)\n            }\n        }", "    \
    \    // TODO: Implement this method\n        Left(List())", "        // Write\
    \ your code here\n        val words = txt.split(\" \")\n        if (words.length\
    \ > 1) {\n            Left(words.toList)\n        } else {\n            val letters\
    \ = txt.split(\",\")\n            if (letters.length > 1) {\n                Left(letters.toList)\n\
    \            } else {\n                Right(letters(0).filter(c => c >= 'a' &&\
    \ c <= 'z').map(c => c - 'a').filter(i => i % 2 == 0).length)\n            }\n\
    \        }", "        // Your code here\n        null", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                var count = 0\n                for (i <-\
    \ 0 until txt.length) {\n                    if (txt(i) >= 'a' && txt(i) <= 'z'\
    \ && i % 2 == 0) count += 1\n                }\n                Right(count)\n\
    \            }\n        }", "        // TODO: Implement this method\n        return\
    \ null", "        // Your code here\n        if (txt.contains(\" \")) {\n    \
    \        Left(txt.split(\" \").toList)\n        } else if (txt.contains(\",\"\
    )) {\n            Left(txt.split(\",\").toList)\n        } else {\n          \
    \  var count = 0\n            for (i <- 0 until txt.length) {\n              \
    \  if (txt(i) - 'a' % 2 == 1) {\n                    count += 1\n            \
    \    }\n            }\n            Right(count)\n        }", "        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val chars = txt.split(\",\")\n            if (chars.length\
    \ > 1) {\n                Left(chars.toList)\n            } else {\n         \
    \       Right(chars.head.toList.filter(c => c.toInt % 2 == 1).length)\n      \
    \      }\n        }", "        // Write your code here\n        null", "     \
    \   val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) {\n     \
    \       Left(words.toList)\n        } else {\n            val chars = txt.split(\"\
    ,\")\n            if (chars.length > 1) {\n                Left(chars.toList)\n\
    \            } else {\n                Right(chars.flatMap(_.toLowerCase.toList).filter(c\
    \ => c.toInt - ord('a') % 2 == 1).length)\n            }\n        }", "      \
    \  if (txt.contains(\" \")) {\n            Left(txt.split(\" \").toList)\n   \
    \     } else if (txt.contains(\",\")) {\n            Left(txt.split(\",\").toList)\n\
    \        } else {\n            Right(txt.toLowerCase.zipWithIndex.filter(x =>\
    \ x._2 % 2 == 0).map(x => x._1 - 'a').sum)\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) {\n            Left(words.toList)\n \
    \       } else {\n            val chars = txt.split(\",\")\n            if (chars.length\
    \ > 1) {\n                Left(chars.toList)\n            } else {\n         \
    \       Right(chars.head.toLowerCase.zipWithIndex.filter(x => x._2 % 2 == 0).count(x\
    \ => x._1.toInt - 'a'.toInt % 2 == 1))\n            }\n        }", "        //\
    \ Your code here\n        null", "        // TODO: Implement this function\n \
    \       null", "        // Your code here\n        null", '        ???', "   \
    \     // Write your code here\n        null", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) Left(words.toList)\n        else {\n\
    \            val words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                var count = 0l\n                for (i <-\
    \ 0 until txt.length) {\n                    if (txt(i) >= 'a' && txt(i) <= 'z'\
    \ && i % 2 == 0) count += 1\n                }\n                Right(count)\n\
    \            }\n        }", "        val words = txt.split(\" \")\n        if\
    \ (words.length > 1) {\n            Left(words.toList)\n        } else {\n   \
    \         val commas = txt.split(\",\")\n            if (commas.length > 1) {\n\
    \                Left(commas.toList)\n            } else {\n                Right(txt.toLowerCase.filter(c\
    \ => c >= 'a' && c <= 'z').zipWithIndex.filter(p => p._2 % 2 == 0).map(p => p._1).length)\n\
    \            }\n        }", "        // TODO: Implement me!\n        ???", " \
    \       // Your code here\n        null", "        // your code here\n       \
    \ null", "        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val words = txt.split(\"\
    ,\")\n            if (words.length > 1) Left(words.toList)\n            else {\n\
    \                var count = 0l\n                for (i <- 0 until txt.length)\
    \ {\n                    if (txt(i) >= 'a' && txt(i) <= 'z' && i % 2 == 0) count\
    \ += 1\n                }\n                Right(count)\n            }\n     \
    \   }", "        // Your code here\n        null", "        if (txt.contains(\"\
    \ \")) {\n            Left(txt.split(\" \").toList)\n        } else if (txt.contains(\"\
    ,\")) {\n            Left(txt.split(\",\").toList)\n        } else {\n       \
    \     Right(txt.filter(_.isLower).map(x => x.toInt - 'a').filter(_ % 2 == 1).length)\n\
    \        }", "        // TODO: Implement this function\n        val words = txt.split(\"\
    \ \")\n        if (words.length > 1) {\n            Left(words.toList)\n     \
    \   } else {\n            val letters = txt.split(\",\")\n            if (letters.length\
    \ > 1) {\n                Left(letters.toList)\n            } else {\n       \
    \         val count = txt.toList.filter(x => x.toInt % 2 == 1).length\n      \
    \          Right(count)\n            }\n        }", "        val words = txt.split(\"\
    \ \")\n        if (words.length > 1) {\n            Left(words.toList)\n     \
    \   } else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        Right(txt.toList.filter(c => c >= 'a' && c <= 'z').map(c => c - 'a').filter(i\
    \ => i % 2 == 0).length)\n            }\n        }", "        val words = txt.split(\"\
    \ \")\n        if (words.length > 1) {\n            Left(words.toList)\n     \
    \   } else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        Right(txt.toList.filter(c => c.isLower && (c.toInt - 'a'.toInt) % 2 ==\
    \ 1).length)\n            }\n        }", "        // TODO: Implement me!\n   \
    \     ???", "        // Your code here\n        val words = txt.split(\" \")\n\
    \        if (words.length > 1) {\n            Left(words.toList)\n        } else\
    \ {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        val chars = txt.toCharArray\n                var count = 0\n        \
    \        for (i <- 0 until chars.length) {\n                    if (chars(i) >=\
    \ 'a' && chars(i) <= 'z' && i % 2 == 0) {\n                        count += 1\n\
    \                    }\n                }\n                Right(count)\n    \
    \        }\n        }", "        val words = txt.split(\" \")\n        if (words.length\
    \ > 1) {\n            Left(words.toList)\n        } else {\n            val commas\
    \ = txt.split(\",\")\n            if (commas.length > 1) {\n                Left(commas.toList)\n\
    \            } else {\n                Right(txt.toLowerCase.filter(c => c >=\
    \ 'a' && c <= 'z').zipWithIndex.filter(p => p._2 % 2 == 0).map(p => p._1).length)\n\
    \            }\n        }", "        val words = txt.split(\" \")\n        if\
    \ (words.length > 1) {\n            Left(words.toList)\n        } else {\n   \
    \         val commas = txt.split(\",\")\n            if (commas.length > 1) {\n\
    \                Left(commas.toList)\n            } else {\n                Right(txt.toLowerCase.toList.filter(x\
    \ => x.toInt % 2 == 1).length)\n            }\n        }", "        // Your code\
    \ here\n        null", "        if (txt.contains(\" \")) {\n            Left(txt.split(\"\
    \ \").toList)\n        } else if (txt.contains(\",\")) {\n            Left(txt.split(\"\
    ,\").toList)\n        } else {\n            Right(txt.toLowerCase.filter(x =>\
    \ x - 'a' % 2 == 0).length)\n        }", "        val words = txt.split(\" \"\
    )\n        if (words.length > 1) Left(words.toList)\n        else {\n        \
    \    val words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                var count = 0l\n                for (i <-\
    \ 0 until txt.length) {\n                    if (txt(i) >= 'a' && txt(i) <= 'z'\
    \ && i % 2 == 0) count += 1\n                }\n                Right(count)\n\
    \            }\n        }", "        // your code here\n        ???", "      \
    \  // your code here\n        val s = txt.split(\" \")\n        if (s.length >\
    \ 1) {\n            Left(s.toList)\n        } else {\n            val s2 = txt.split(\"\
    ,\")\n            if (s2.length > 1) {\n                Left(s2.toList)\n    \
    \        } else {\n                Right(txt.filter(x => x.isLower).zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).length)\n            }\n        }", "        // Your code\
    \ here\n        null", "        // Your code here\n        var list = List[String]()\n\
    \        var count = 0\n        var flag = false\n        var flag2 = false\n\
    \        for (i <- 0 until txt.length) {\n            if (txt(i) == ' ') {\n \
    \               flag = true\n                list = list :+ txt.substring(count,\
    \ i)\n                count = i + 1\n            }\n            if (txt(i) ==\
    \ ',') {\n                flag2 = true\n                list = list :+ txt.substring(count,\
    \ i)\n                count = i + 1\n            }\n        }\n        if (flag)\
    \ {\n            Left(list :+ txt.substring(count, txt.length))\n        } else\
    \ if (flag2) {\n            Left(list :+ txt.substring(count, txt.length))\n \
    \       } else {\n            var count2 = 0\n            for (i <- 0 until txt.length)\
    \ {\n                if (txt(i) % 2 == 1) {\n                    count2 += 1\n\
    \                }\n            }\n            Right(count2)\n        }", "  \
    \      val words = txt.split(\" \")\n        if (words.length > 1) {\n       \
    \     Left(words.toList)\n        } else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) {\n                Left(commas.toList)\n\
    \            } else {\n                Right(txt.filter(_.isLower).zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1).length)\n            }\n        }", "     \
    \   // Your code here\n        null", "        // YOUR CODE HERE\n        null",
  "        val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                Right(txt.filter(c\
    \ => c.isLower).zipWithIndex.filter(p => p._2 % 2 == 0).map(p => p._1).length)\n\
    \            }\n        }", "        val words = txt.split(\"\\\\s+\")\n     \
    \   if (words.length > 1) {\n            Left(words.toList)\n        } else {\n\
    \            val commas = txt.split(\",\")\n            if (commas.length > 1)\
    \ {\n                Left(commas.toList)\n            } else {\n             \
    \   Right(txt.toLowerCase.toList.filter(c => c >= 'a' && c <= 'z').zipWithIndex.filter(p\
    \ => p._2 % 2 == 0).map(p => p._1).length)\n            }\n        }", "     \
    \   // TODO: Implement this function\n        null", "        // your code here\n\
    \        val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ - 'a' >= 0 && txt(i) - 'a' < 26 && (txt(i) - 'a') % 2 == 1) count += 1\n   \
    \             }\n                Right(count)\n            }\n        }", "  \
    \      val words = txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                val count = txt.filter(c\
    \ => c >= 'a' && c <= 'z').map(c => c - 'a').filter(i => i % 2 == 0).length\n\
    \                Right(count)\n            }\n        }", "        // Your code\
    \ here\n        null", "        // Your code here\n        null", "        val\
    \ words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0l\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) {\n            Left(words.toList)\n \
    \       } else {\n            val chars = txt.split(\",\")\n            if (chars.length\
    \ > 1) {\n                Left(chars.toList)\n            } else {\n         \
    \       Right(chars.flatMap(_.toLowerCase.toList).filter(c => (c - 'a') % 2 ==\
    \ 0).length)\n            }\n        }", "        // Your code here\n        null",
  "        if (txt.contains(\" \")) {\n            Left(txt.split(\" \").toList)\n\
    \        } else if (txt.contains(\",\")) {\n            Left(txt.split(\",\").toList)\n\
    \        } else {\n            Right(txt.toLowerCase.toList.map(x => x.toInt -\
    \ 'a'.toInt).filter(x => x % 2 == 1).length)\n        }", "        val words =\
    \ txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n  \
    \      else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0l\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }", "        // Your code here\n\
    \        val words = txt.split(\" \")\n        if (words.length > 1) {\n     \
    \       Left(words.toList)\n        } else {\n            val letters = txt.split(\"\
    ,\")\n            if (letters.length > 1) {\n                Left(letters.toList)\n\
    \            } else {\n                val odd = txt.filter(x => x.toInt % 2 ==\
    \ 1).length\n                Right(odd)\n            }\n        }", "        val\
    \ words = txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) {\n            Left(words.toList)\n \
    \       } else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        Right(txt.filter(c => c >= 'a' && c <= 'z').map(c => (c - 'a') % 2).filter(x\
    \ => x == 1).length)\n            }\n        }", "        // your code here\n\
    \        val l = txt.split(\" \")\n        if (l.length > 1) Left(l.toList)\n\
    \        else {\n            val l2 = txt.split(\",\")\n            if (l2.length\
    \ > 1) Left(l2.toList)\n            else {\n                var count = 0\n  \
    \              for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ - 'a' % 2 == 1) count += 1\n                }\n                Right(count)\n\
    \            }\n        }", "        val words = txt.split(\"\\\\s+\")\n     \
    \   if (words.length > 1) Left(words.toList)\n        else {\n            val\
    \ words = txt.split(\",\")\n            if (words.length > 1) Left(words.toList)\n\
    \            else {\n                var count = 0l\n                for (i <-\
    \ 0 until txt.length) {\n                    if (txt(i) >= 'a' && txt(i) <= 'z'\
    \ && (txt(i) - 'a') % 2 == 0) count += 1\n                }\n                Right(count)\n\
    \            }\n        }", "        // Your code here\n        null", "     \
    \   val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0l\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }", "        // Your code here\n\
    \        val words = txt.split(\"\\\\s+\")\n        if (words.length > 1) {\n\
    \            Left(words.toList)\n        } else {\n            val chars = txt.split(\"\
    ,\")\n            if (chars.length > 1) {\n                Left(chars.toList)\n\
    \            } else {\n                Right(chars.flatMap(_.toLowerCase.toList).zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1).count(x => x.toInt % 2 == 1))\n           \
    \ }\n        }", "        // Your code here\n        null", "        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        Right(txt.toLowerCase.toList.filter(x => x.toInt % 2 == 1).length)\n\
    \            }\n        }", "        // YOUR CODE HERE\n        null", "     \
    \   // Your code here\n        null", "        // TODO: Implement this method\n\
    \        Left(List(\"Hello\", \"world!\"))", "        // Your code here\n    \
    \    null", "        if (txt.contains(\" \")) {\n            Left(txt.split(\"\
    \ \").toList)\n        } else if (txt.contains(\",\")) {\n            Left(txt.split(\"\
    ,\").toList)\n        } else {\n            Right(txt.toList.map(c => c.toLong\
    \ - 'a'.toLong).filter(i => i % 2 == 1).length)\n        }", "        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) Left(words.toList)\n\
    \        else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }", "        // Your code here\n\
    \        null", "        // TODO: Implement this method\n        null", "    \
    \    val words = txt.split(\" \")\n        if (words.length > 1) {\n         \
    \   Left(words.toList)\n        } else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) {\n                Left(commas.toList)\n\
    \            } else {\n                Right(txt.toLowerCase.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0).map(x => x._1.toInt - 'a'.toInt).sum)\n            }\n   \
    \     }", "        // Your code here\n        if (txt.contains(\" \")) {\n   \
    \         Left(txt.split(\" \").toList)\n        } else if (txt.contains(\",\"\
    )) {\n            Left(txt.split(\",\").toList)\n        } else {\n          \
    \  var count = 0\n            for (i <- 0 until txt.length) {\n              \
    \  if (txt(i) - 'a' % 2 == 1) {\n                    count += 1\n            \
    \    }\n            }\n            Right(count)\n        }", "        // Your\
    \ code here\n        val words = txt.split(\" \")\n        if (words.length >\
    \ 1) {\n            Left(words.toList)\n        } else {\n            val words\
    \ = txt.split(\",\")\n            if (words.length > 1) {\n                Left(words.toList)\n\
    \            } else {\n                val count = txt.toLowerCase.toList.filter(x\
    \ => x.toInt % 2 == 1).length\n                Right(count)\n            }\n \
    \       }", "        // TODO: Implement me\n        Left(List(\"Hello\", \"world!\"\
    ))", "        val words = txt.split(\"\\\\s+\")\n        if (words.length > 1)\
    \ Left(words.toList)\n        else {\n            val words = txt.split(\",\"\
    )\n            if (words.length > 1) Left(words.toList)\n            else {\n\
    \                var count = 0l\n                for (i <- 0 until txt.length)\
    \ {\n                    if (txt(i) >= 'a' && txt(i) <= 'z' && i % 2 == 0) count\
    \ += 1\n                }\n                Right(count)\n            }\n     \
    \   }", "        val words = txt.split(\"\\\\s+\")\n        if (words.length >\
    \ 1) Left(words.toList)\n        else {\n            val words = txt.split(\"\
    ,\")\n            if (words.length > 1) Left(words.toList)\n            else {\n\
    \                var count = 0\n                for (i <- 0 until txt.length)\
    \ {\n                    if (txt(i) - 'a' >= 0 && txt(i) - 'a' < 26 && (txt(i)\
    \ - 'a') % 2 == 1) count += 1\n                }\n                Right(count)\n\
    \            }\n        }", "        val words = txt.split(\" \")\n        if\
    \ (words.length > 1) {\n            Left(words.toList)\n        } else {\n   \
    \         val commas = txt.split(\",\")\n            if (commas.length > 1) {\n\
    \                Left(commas.toList)\n            } else {\n                Right(txt.toLowerCase.filter(c\
    \ => c >= 'a' && c <= 'z').zipWithIndex.filter(t => t._2 % 2 == 0).map(t => t._1).length)\n\
    \            }\n        }", "        val words = txt.split(\" \")\n        if\
    \ (words.length > 1) {\n            Left(words.toList)\n        } else {\n   \
    \         val commas = txt.split(\",\")\n            if (commas.length > 1) {\n\
    \                Left(commas.toList)\n            } else {\n                Right(txt.toLowerCase.filter(c\
    \ => c >= 'a' && c <= 'z').zipWithIndex.filter(p => p._2 % 2 == 0).map(p => p._1).length)\n\
    \            }\n        }", "        // TODO: Implement this method\n        Left(List())",
  "        // TODO: Implement this function\n        Right(0l)", "        val words\
    \ = txt.split(\" \")\n        if (words.length > 1) Left(words.toList)\n     \
    \   else {\n            val words = txt.split(\",\")\n            if (words.length\
    \ > 1) Left(words.toList)\n            else {\n                var count = 0l\n\
    \                for (i <- 0 until txt.length) {\n                    if (txt(i)\
    \ >= 'a' && txt(i) <= 'z' && i % 2 == 0) count += 1\n                }\n     \
    \           Right(count)\n            }\n        }", "        // Your code here\n\
    \        null", "        val words = txt.split(\" \")\n        if (words.length\
    \ > 1)\n            Left(words.toList)\n        else {\n            val words\
    \ = txt.split(\",\")\n            if (words.length > 1)\n                Left(words.toList)\n\
    \            else {\n                val count = txt.toLowerCase.toCharArray.filter(c\
    \ => c >= 'a' && c <= 'z').map(c => (c - 'a') % 2).count(b => b == 1)\n      \
    \          Right(count)\n            }\n        }", "        // Your code here\n\
    \        ???", "        // Your code here\n        val words = txt.split(\" \"\
    )\n        if (words.length > 1) {\n            Left(words.toList)\n        }\
    \ else {\n            val letters = txt.split(\",\")\n            if (letters.length\
    \ > 1) {\n                Left(letters.toList)\n            } else {\n       \
    \         Right(letters.head.count(c => c - 'a' % 2 == 1))\n            }\n  \
    \      }", "        // TODO: Implement me\n        null", "        // Your code\
    \ here\n        val words = txt.split(\" \")\n        if (words.length > 1) {\n\
    \            Left(words.toList)\n        } else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) {\n                Left(commas.toList)\n\
    \            } else {\n                val count = txt.toLowerCase.toList.filter(x\
    \ => x.toInt % 2 == 1).length\n                Right(count)\n            }\n \
    \       }", "        val words = txt.split(\" \")\n        if (words.length >\
    \ 1) {\n            Left(words.toList)\n        } else {\n            val commas\
    \ = txt.split(\",\")\n            if (commas.length > 1) {\n                Left(commas.toList)\n\
    \            } else {\n                Right(txt.toLowerCase.filter(c => c >=\
    \ 'a' && c <= 'z').zipWithIndex.filter(p => p._2 % 2 == 0).map(p => p._1).length)\n\
    \            }\n        }", "        // Your code here\n        null", "     \
    \   val words = txt.split(\" \")\n        if (words.length > 1) {\n          \
    \  Left(words.toList)\n        } else {\n            val commas = txt.split(\"\
    ,\")\n            if (commas.length > 1) {\n                Left(commas.toList)\n\
    \            } else {\n                Right(txt.toLowerCase.filter(c => c >=\
    \ 'a' && c <= 'z').zipWithIndex.filter(p => p._2 % 2 == 0).map(p => p._1).length)\n\
    \            }\n        }", "        // Write your code here\n        null", " \
    \       // Your code here\n        null", "        // Your code here\n       \
    \ null", "        val words = txt.split(\" \")\n        if (words.length > 1)\
    \ {\n            Left(words.toList)\n        } else {\n            val commas\
    \ = txt.split(\",\")\n            if (commas.length > 1) {\n                Left(commas.toList)\n\
    \            } else {\n                Right(txt.toLowerCase.toCharArray.filter(x\
    \ => (x - 'a') % 2 == 0).length)\n            }\n        }", "        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length > 1) {\n            Left(words.toList)\n\
    \        } else {\n            val chars = txt.split(\",\")\n            if (chars.length\
    \ > 1) {\n                Left(chars.toList)\n            } else {\n         \
    \       Right(chars.head.toLowerCase.zipWithIndex.filter(x => x._2 % 2 == 0).map(x\
    \ => x._1 - 'a').sum)\n            }\n        }", "        val words = txt.split(\"\
    \ \")\n        if (words.length > 1) {\n            Left(words.toList)\n     \
    \   } else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        Right(txt.filter(c => c.isLower && c.toInt % 2 == 1).length)\n      \
    \      }\n        }", "        // Your code here\n        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length > 1) {\n            Left(words.toList)\n \
    \       } else {\n            val chars = txt.split(\",\")\n            if (chars.length\
    \ > 1) {\n                Left(chars.toList)\n            } else {\n         \
    \       Right(chars.map(c => c.toLowerCase.toList.map(x => x.toInt - ord('a'))).flatten.filter(x\
    \ => x % 2 == 1).length)\n            }\n        }", "        // TODO: Implement\
    \ me!\n        null", "        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ > 1) Left(words.toList)\n        else {\n            val words = txt.split(\"\
    ,\")\n            if (words.length > 1) Left(words.toList)\n            else {\n\
    \                var count = 0l\n                for (i <- 0 until txt.length)\
    \ {\n                    if (txt(i) >= 'a' && txt(i) <= 'z' && (txt(i) - 'a')\
    \ % 2 == 1) count += 1\n                }\n                Right(count)\n    \
    \        }\n        }", "        // TODO: Implement\n        Left(List(\"Hello\"\
    , \"world!\"))", "        if (txt.contains(\" \")) {\n            Left(txt.split(\"\
    \ \").toList)\n        } else if (txt.contains(\",\")) {\n            Left(txt.split(\"\
    ,\").toList)\n        } else {\n            Right(txt.toLowerCase.map(c => c -\
    \ 'a').filter(i => i % 2 == 1).length)\n        }", "        val words = txt.split(\"\
    \ \")\n        if (words.length > 1) {\n            Left(words.toList)\n     \
    \   } else {\n            val commas = txt.split(\",\")\n            if (commas.length\
    \ > 1) {\n                Left(commas.toList)\n            } else {\n        \
    \        Right(txt.toLowerCase.toList.filter(c => c.toInt % 2 == 1).length)\n\
    \            }\n        }", "        // Your code here\n        null"]
stop_tokens:
- "\n    }\n"
