name: HumanEval_127_intersection
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given two intervals,\n    // where each interval is a pair of integers.\
  \ For example, interval = (start, end) = (1, 2).\n    // The given intervals are\
  \ closed which means that the interval (start, end)\n    // includes both start\
  \ and end.\n    // For each given interval, it is assumed that its start is less\
  \ or equal its end.\n    // Your task is to determine whether the length of intersection\
  \ of these two \n    // intervals is a prime number.\n    // Example, the intersection\
  \ of the intervals (1, 3), (2, 4) is (2, 3)\n    // which its length is 1, which\
  \ not a prime number.\n    // If the length of the intersection is a prime number,\
  \ return \"YES\",\n    // otherwise, return \"NO\".\n    // If the two intervals\
  \ don't intersect, return \"NO\".\n    // [input/output] samples:\n    // >>> intersection(((1l,\
  \ 2l)), ((2l, 3l)))\n    // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l,\
  \ 4l)))\n    // (\"NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n \
  \   // (\"YES\")\n    def intersection(interval1 : Tuple2[Long, Long], interval2\
  \ : Tuple2[Long, Long]) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
  \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
  \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
  YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
  \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
  \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
  \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
  NO\")));\n    }\n\n}\n"
completions: ["        val (start1, end1) = interval1\n        val (start2, end2)\
    \ = interval2\n        val start = max(start1, start2)\n        val end = min(end1,\
    \ end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end - start\
    \ + 1)) \"YES\"\n        else \"NO\"", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        if (start > end) {\n            \"\
    NO\"\n        } else {\n            val length = end - start + 1\n           \
    \ if (length == 1) {\n                \"NO\"\n            } else {\n         \
    \       if (length == 2) {\n                    \"YES\"\n                } else\
    \ {\n                    if (length % 2 == 0) {\n                        \"NO\"\
    \n                    } else {\n                        var isPrime = true\n \
    \                       for (i <- 3 to sqrt(length).toInt by 2) {\n          \
    \                  if (length % i == 0) {\n                                isPrime\
    \ = false\n                            }\n                        }\n        \
    \                if (isPrime) {\n                            \"YES\"\n       \
    \                 } else {\n                            \"NO\"\n             \
    \           }\n                    }\n                }\n            }\n     \
    \   }", "        val (start1, end1) = interval1\n        val (start2, end2) =\
    \ interval2\n        val start = max(start1, start2)\n        val end = min(end1,\
    \ end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end - start\
    \ + 1)) \"YES\"\n        else \"NO\"", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        if (start1 > end1 || start2 >\
    \ end2) return \"NO\"\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) return \"NO\"\n        val length\
    \ = end - start + 1\n        if (length == 1) return \"NO\"\n        if (length\
    \ == 2) return \"YES\"\n        if (length % 2 == 0) return \"NO\"\n        for\
    \ (i <- 3l to sqrt(length).toLong by 2) {\n            if (length % i == 0) return\
    \ \"NO\"\n        }\n        \"YES\"", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        if (start > end) \"NO\"\n        else\
    \ if (isPrime(end - start + 1)) \"YES\"\n        else \"NO\"", "        val (start1,\
    \ end1) = interval1\n        val (start2, end2) = interval2\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ > end) return \"NO\"\n        val length = end - start + 1\n        if (length\
    \ == 1) return \"NO\"\n        if (length == 2) return \"YES\"\n        for (i\
    \ <- 2l until length) {\n            if (length % i == 0) return \"NO\"\n    \
    \    }\n        \"YES\"", "        val start = max(interval1._1, interval2._1)\n\
    \        val end = min(interval1._2, interval2._2)\n        if (start > end) {\n\
    \            \"NO\"\n        } else {\n            val length = end - start +\
    \ 1\n            if (length == 1) {\n                \"NO\"\n            } else\
    \ {\n                val sqrt = sqrt(length).toLong\n                if (length\
    \ == sqrt * sqrt) {\n                    \"NO\"\n                } else {\n  \
    \                  var isPrime = true\n                    for (i <- 2l to sqrt)\
    \ {\n                        if (length % i == 0) {\n                        \
    \    isPrime = false\n                        }\n                    }\n     \
    \               if (isPrime) {\n                        \"YES\"\n            \
    \        } else {\n                        \"NO\"\n                    }\n   \
    \             }\n            }\n        }", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        if (start > end) \"NO\"\n        else\
    \ if (isPrime(end - start + 1)) \"YES\"\n        else \"NO\"", "        val (start1,\
    \ end1) = interval1\n        val (start2, end2) = interval2\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ > end) return \"NO\"\n        val length = end - start + 1\n        if (length\
    \ == 1) return \"NO\"\n        if (length == 2) return \"YES\"\n        for (i\
    \ <- 2 to sqrt(length).toInt) {\n            if (length % i == 0) return \"NO\"\
    \n        }\n        \"YES\"", "        val (start1, end1) = interval1\n     \
    \   val (start2, end2) = interval2\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        if (start > end) \"NO\"\n        else\
    \ if (isPrime(end - start + 1)) \"YES\"\n        else \"NO\"", "        val (start1,\
    \ end1) = interval1\n        val (start2, end2) = interval2\n        if (start1\
    \ > end1 || start2 > end2) {\n            return \"NO\"\n        }\n        val\
    \ start = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ > end) {\n            return \"NO\"\n        }\n        val length = end - start\
    \ + 1\n        if (length == 1) {\n            return \"NO\"\n        }\n    \
    \    if (length == 2) {\n            return \"YES\"\n        }\n        for (i\
    \ <- 2l until length) {\n            if (length % i == 0) {\n                return\
    \ \"NO\"\n            }\n        }\n        \"YES\"", "        val (start1, end1)\
    \ = interval1\n        val (start2, end2) = interval2\n        val start = max(start1,\
    \ start2)\n        val end = min(end1, end2)\n        if (start > end) \"NO\"\n\
    \        else if (isPrime(end - start + 1)) \"YES\"\n        else \"NO\"", " \
    \       val (start1, end1) = interval1\n        val (start2, end2) = interval2\n\
    \        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) return \"NO\"\n        val length = end - start + 1\n\
    \        if (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\
    \n        for (i <- 2l until length) {\n            if (length % i == 0) return\
    \ \"NO\"\n        }\n        \"YES\"", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        if (start > end) {\n            \"\
    NO\"\n        } else {\n            if (isPrime(end - start + 1)) {\n        \
    \        \"YES\"\n            } else {\n                \"NO\"\n            }\n\
    \        }", "        val (start1, end1) = interval1\n        val (start2, end2)\
    \ = interval2\n        val start = max(start1, start2)\n        val end = min(end1,\
    \ end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end - start\
    \ + 1)) \"YES\"\n        else \"NO\"", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        if (start > end) {\n            \"\
    NO\"\n        } else {\n            val length = end - start + 1\n           \
    \ if (length == 1) {\n                \"NO\"\n            } else {\n         \
    \       val sqrt = sqrt(length).toLong\n                var isPrime = true\n \
    \               for (i <- 2l to sqrt) {\n                    if (length % i ==\
    \ 0) {\n                        isPrime = false\n                    }\n     \
    \           }\n                if (isPrime) {\n                    \"YES\"\n \
    \               } else {\n                    \"NO\"\n                }\n    \
    \        }\n        }", "        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) return \"NO\"\n        val length = end - start + 1\n\
    \        if (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\
    \n        for (i <- 2l until length) {\n            if (length % i == 0) return\
    \ \"NO\"\n        }\n        \"YES\"", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        if (start > end) \"NO\"\n        else\
    \ if (isPrime(end - start + 1)) \"YES\"\n        else \"NO\"", "        val (start1,\
    \ end1) = interval1\n        val (start2, end2) = interval2\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ > end) {\n            \"NO\"\n        } else {\n            val length = end\
    \ - start + 1\n            if (length == 1) {\n                \"NO\"\n      \
    \      } else {\n                if (length == 2) {\n                    \"YES\"\
    \n                } else {\n                    if (length % 2 == 0) {\n     \
    \                   \"NO\"\n                    } else {\n                   \
    \     var isPrime = true\n                        for (i <- 3 to sqrt(length).toInt\
    \ by 2) {\n                            if (length % i == 0) {\n              \
    \                  isPrime = false\n                            }\n          \
    \              }\n                        if (isPrime) {\n                   \
    \         \"YES\"\n                        } else {\n                        \
    \    \"NO\"\n                        }\n                    }\n              \
    \  }\n            }\n        }", "        val (start1, end1) = interval1\n   \
    \     val (start2, end2) = interval2\n        if (start1 > end1 || start2 > end2)\
    \ return \"NO\"\n        val start = max(start1, start2)\n        val end = min(end1,\
    \ end2)\n        if (start > end) return \"NO\"\n        val length = end - start\
    \ + 1\n        if (length == 1) return \"NO\"\n        if (length == 2) return\
    \ \"YES\"\n        if (length % 2 == 0) return \"NO\"\n        for (i <- 3 to\
    \ sqrt(length).toInt by 2) {\n            if (length % i == 0) return \"NO\"\n\
    \        }\n        \"YES\""]
stop_tokens:
- "\n    }\n"
