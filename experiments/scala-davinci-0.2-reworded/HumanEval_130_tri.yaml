name: HumanEval_130_tri
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1)\
  \ = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n\
  \ - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 /\
  \ 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // =\
  \ 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have\
  \ to a return a list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n\
  \    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong, 3l.toLong,\
  \ 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n    assert(tri((7l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n\
  \    assert(tri((8l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
  \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
  \ 5l.toLong, 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
  \ 5l.toLong, 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong,\
  \ 80l.toLong, 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n\
  \    assert(tri((0l)).equals((List[Long](1l.toLong))));\n    assert(tri((1l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong))));\n    }\n\n}\n"
completions: ["        var l = List[Long]()\n        for (i <- 0 to n.toInt) {\n \
    \           if (i == 0) l = l :+ 1\n            else if (i == 1) l = l :+ 3\n\
    \            else if (i == 2) l = l :+ 2\n            else if (i % 2 == 0) l =\
    \ l :+ (1 + i / 2)\n            else l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n\
    \        }\n        return l", "        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var l = List[Long]()\n\
    \        l = l :+ 1\n        l = l :+ 3\n        l = l :+ 2\n        for (i <-\
    \ 3 to n.toInt) {\n            if (i % 2 == 0) {\n                l = l :+ (1\
    \ + i / 2)\n            } else {\n                l = l :+ (l(i - 1) + l(i - 2)\
    \ + l(i + 1))\n            }\n        }\n        return l", "        if (n ==\
    \ 0) return List[Long](1)\n        if (n == 1) return List[Long](1, 3)\n     \
    \   if (n == 2) return List[Long](1, 3, 2)\n        var l = List[Long](1, 3, 2)\n\
    \        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l = l :+ (1 +\
    \ i / 2)\n            else l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n       \
    \ }\n        return l", "        // Fill up this function body\n        // You\
    \ can add another function as well, if required\n        var lst = new ListBuffer[Long]\n\
    \        lst += 1\n        lst += 3\n        lst += 2\n        for (i <- 3 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                lst += 1 + i / 2\n\
    \            } else {\n                lst += lst(i - 1) + lst(i - 2) + lst(i\
    \ + 1)\n            }\n        }\n        lst.toList", "        // Fill up this\
    \ function body\n        // You can add another function as well, if required\n\
    \        var l = new ListBuffer[Long]\n        l += 1\n        l += 3\n      \
    \  l += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) {\n\
    \                l += (1 + i / 2)\n            } else {\n                l +=\
    \ (l(i - 1) + l(i - 2) + l(i + 1))\n            }\n        }\n        l.toList",
  "        def tri(n : Long, l : List[Long]) : List[Long] = {\n            if (n ==\
    \ 0) l\n            else if (n % 2 == 0) tri(n - 1, l :+ (1 + n / 2))\n      \
    \      else tri(n - 1, l :+ (l(l.length - 1) + l(l.length - 2) + l(l.length -\
    \ 3)))\n        }\n        tri(n, List[Long](1))", "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ var l = ListBuffer[Long]()\n        l += 1\n        l += 3\n        l += 2\n\
    \        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1 + i /\
    \ 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n    \
    \    l.toList", "        // Fill up this function body\n        // You can add\
    \ another function as well, if required\n        var l = List[Long]()\n      \
    \  for (i <- 1 to n.toInt) {\n            if (i == 1) l = l :+ 1\n           \
    \ else if (i == 2) l = l :+ 3\n            else if (i == 3) l = l :+ 2\n     \
    \       else if (i % 2 == 0) l = l :+ (1 + i / 2)\n            else l = l :+ (l(i\
    \ - 2) + l(i - 3) + l(i - 1))\n        }\n        l", "        // Fill up this\
    \ function body\n        // 'n' is the number of elements in the Tribonacci sequence\n\
    \        // You have to return a list of the first n + 1 numbers of the Tribonacci\
    \ sequence\n        // For example, tri(3) should return List(1, 3, 2, 8)\n  \
    \      var list = List[Long]()\n        if (n == 0) {\n            list = List[Long](1)\n\
    \        } else if (n == 1) {\n            list = List[Long](1, 3)\n        }\
    \ else if (n == 2) {\n            list = List[Long](1, 3, 2)\n        } else {\n\
    \            list = List[Long](1, 3, 2)\n            var i = 3\n            while\
    \ (i <= n) {\n                if (i % 2 == 0) {\n                    list = list\
    \ :+ (1 + i / 2)\n                } else {\n                    list = list :+\
    \ (list(i - 1) + list(i - 2) + list(i + 1))\n                }\n             \
    \   i += 1\n            }\n        }\n        list", "        var list = new ListBuffer[Long]()\n\
    \        list += 1\n        list += 3\n        list += 2\n        for (i <- 3\
    \ to n.toInt) {\n            if (i % 2 == 0) list += (1 + i / 2)\n           \
    \ else list += (list(i - 1) + list(i - 2) + list(i + 1))\n        }\n        list.toList",
  "        var result = new ListBuffer[Long]\n        result += 1\n        result\
    \ += 3\n        result += 2\n        for (i <- 3 to n.toInt) {\n            if\
    \ (i % 2 == 0) {\n                result += (1 + i / 2)\n            } else {\n\
    \                result += (result(i - 1) + result(i - 2) + result(i + 1))\n \
    \           }\n        }\n        return result.toList", "        def triHelper(n\
    \ : Long, l : List[Long]) : List[Long] = {\n            if (n == 0) l\n      \
    \      else if (n == 1) triHelper(n - 1, l :+ 3)\n            else if (n == 2)\
    \ triHelper(n - 1, l :+ 2)\n            else if (n % 2 == 0) triHelper(n - 1,\
    \ l :+ (1 + n / 2))\n            else triHelper(n - 1, l :+ (l(l.length - 1) +\
    \ l(l.length - 2) + l(l.length - 3)))\n        }\n        triHelper(n, List())",
  "        val result = new ListBuffer[Long]\n        result += 1\n        result\
    \ += 3\n        for (i <- 2 to n.toInt) {\n            if (i % 2 == 0) result\
    \ += (1 + i / 2)\n            else result += (result(i - 1) + result(i - 2) +\
    \ result(i + 1))\n        }\n        result.toList", "        // Fill up this\
    \ function body\n        // You can add another function as well, if required\n\
    \        var l = ListBuffer[Long]()\n        l += 1\n        l += 3\n        l\
    \ += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) {\n   \
    \             l += 1 + i / 2\n            } else {\n                l += l(i -\
    \ 1) + l(i - 2) + l(i + 1)\n            }\n        }\n        l.toList", "   \
    \     if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n    \
    \    if (n == 2) return List(1, 3, 2)\n        var result = List(1, 3, 2)\n  \
    \      var i = 3\n        while (i <= n) {\n            if (i % 2 == 0) result\
    \ = result :+ (1 + i / 2)\n            else result = result :+ (result(i - 1)\
    \ + result(i - 2) + result(i + 1))\n            i += 1\n        }\n        return\
    \ result", "        var l = ListBuffer[Long]()\n        l += 1\n        l += 3\n\
    \        l += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0)\
    \ l += (1 + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n \
    \       }\n        l.toList", "        if (n == 0) return List(1)\n        if\
    \ (n == 1) return List(1, 3)\n        if (n == 2) return List(1, 3, 2)\n     \
    \   var result = List(1l, 3l, 2l)\n        for (i <- 3 to n.toInt) {\n       \
    \     if (i % 2 == 0) result = result :+ (1 + i / 2)\n            else result\
    \ = result :+ (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n   \
    \     return result", "        // Fill up this function body\n        // 'n' is\
    \ the number of elements in the Tribonacci sequence\n        // You have to return\
    \ a list of Long\n        // For example:\n        // >>> tri((3l))\n        //\
    \ (List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong))\n        var list =\
    \ List[Long]()\n        list = list :+ 1\n        list = list :+ 3\n        list\
    \ = list :+ 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0)\
    \ {\n                list = list :+ (1 + i / 2)\n            } else {\n      \
    \          list = list :+ (list(i - 1) + list(i - 2) + list(i + 1))\n        \
    \    }\n        }\n        list", "        def tri(n : Long, l : List[Long]) :\
    \ List[Long] = {\n            if (n == 0) l\n            else if (n == 1) tri(n\
    \ - 1, 3 :: l)\n            else if (n % 2 == 0) tri(n - 1, (1 + n / 2) :: l)\n\
    \            else tri(n - 1, (l(1) + l(2) + l(0)) :: l)\n        }\n        tri(n,\
    \ List[Long]())", "        def tri(n : Long, l : List[Long]) : List[Long] = {\n\
    \            if (n == 0) l\n            else if (n % 2 == 0) tri(n - 1, l :+ (1\
    \ + n / 2))\n            else tri(n - 1, l :+ (l(l.length - 1) + l(l.length -\
    \ 2) + l(l.length - 3)))\n        }\n        tri(n, List(1))", "        def triHelper(n\
    \ : Long, l : List[Long]) : List[Long] = {\n            if (n == 0) l\n      \
    \      else if (n % 2 == 0) triHelper(n - 1, l :+ (1 + n / 2))\n            else\
    \ triHelper(n - 1, l :+ (l(l.length - 1) + l(l.length - 2) + l(l.length - 3)))\n\
    \        }\n        triHelper(n, List(1))", "        var l = ListBuffer[Long]()\n\
    \        l += 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                l += 1 + i / 2\n         \
    \   } else {\n                l += l(i - 1) + l(i - 2) + l(i + 1)\n          \
    \  }\n        }\n        l.toList", "        // Fill up this function body\n \
    \       // You can add another function as well, if required\n        var l =\
    \ ListBuffer[Long]()\n        l += 1\n        l += 3\n        l += 2\n       \
    \ for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1 + i / 2)\n  \
    \          else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n        l.toList",
  "        var l = new ListBuffer[Long]\n        l += 1\n        l += 3\n        l\
    \ += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1\
    \ + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n\
    \        l.toList", "        var result = ListBuffer[Long]()\n        result +=\
    \ 1\n        result += 3\n        result += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) result += (1 + i / 2)\n            else result\
    \ += (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n        result.toList",
  "        if (n == 0) return List[Long](1)\n        if (n == 1) return List[Long](1,\
    \ 3)\n        if (n == 2) return List[Long](1, 3, 2)\n        var a = 1l\n   \
    \     var b = 3l\n        var c = 2l\n        var d = 0l\n        var result =\
    \ List[Long](1, 3, 2)\n        for (i <- 3l to n) {\n            if (i % 2 ==\
    \ 0) {\n                d = 1 + i / 2\n            } else {\n                d\
    \ = a + b + c\n            }\n            result = result :+ d\n            a\
    \ = b\n            b = c\n            c = d\n        }\n        return result",
  "        def tri(n : Long, l : List[Long]) : List[Long] = {\n            if (n ==\
    \ 0) l.reverse\n            else if (n % 2 == 0) tri(n - 1, (n / 2 + 1) :: l)\n\
    \            else tri(n - 1, l.head + l.tail.head + l.tail.tail.head :: l)\n \
    \       }\n        tri(n, List(1))", "        var l = List[Long]()\n        for\
    \ (i <- 0 to n.toInt) {\n            if (i == 0) l = l :+ 1\n            else\
    \ if (i == 1) l = l :+ 3\n            else if (i == 2) l = l :+ 2\n          \
    \  else if (i % 2 == 0) l = l :+ (1 + i / 2)\n            else l = l :+ (l(i -\
    \ 1) + l(i - 2) + l(i + 1))\n        }\n        return l", "        if (n == 0)\
    \ return List(1)\n        if (n == 1) return List(1, 3)\n        if (n == 2) return\
    \ List(1, 3, 2)\n        var list = List(1, 3, 2)\n        var i = 3\n       \
    \ while (i <= n) {\n            if (i % 2 == 0) list = list :+ (1 + i / 2)\n \
    \           else list = list :+ (list(i - 1) + list(i - 2) + list(i + 1))\n  \
    \          i += 1\n        }\n        return list", "        var l = List[Long]()\n\
    \        for (i <- 0 to n.toInt) {\n            if (i == 0) l = 1l :: l\n    \
    \        else if (i == 1) l = 3l :: l\n            else if (i == 2) l = 2l ::\
    \ l\n            else if (i % 2 == 0) l = (1 + i / 2) :: l\n            else l\
    \ = (l(0) + l(1) + l(2)) :: l\n        }\n        l.reverse", "        // Fill\
    \ up this function body\n        // 'n' is the number of elements in the Tribonacci\
    \ sequence\n        // You have to return a list of Longs\n        // For example,\
    \ if n = 3, then the returned list should be\n        // List(1, 3, 2, 8)\n  \
    \      var list = List[Long]()\n        if (n == 0) {\n            list = List(1)\n\
    \        } else if (n == 1) {\n            list = List(1, 3)\n        } else if\
    \ (n == 2) {\n            list = List(1, 3, 2)\n        } else {\n           \
    \ list = List(1, 3, 2)\n            for (i <- 3 to n.toInt) {\n              \
    \  if (i % 2 == 0) {\n                    list = list :+ (1 + i / 2)\n       \
    \         } else {\n                    list = list :+ (list(i - 1) + list(i -\
    \ 2) + list(i + 1))\n                }\n            }\n        }\n        list",
  "        var result = new ListBuffer[Long]\n        result += 1\n        result\
    \ += 3\n        if (n == 1) return result.toList\n        result += 2\n      \
    \  if (n == 2) return result.toList\n        for (i <- 3 to n.toInt) {\n     \
    \       if (i % 2 == 0) result += (1 + i / 2)\n            else result += (result(i\
    \ - 1) + result(i - 2) + result(i + 1))\n        }\n        return result.toList",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var list = new ListBuffer[Long]()\n        list\
    \ += 1\n        list += 3\n        list += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) list += (1 + i / 2)\n            else list +=\
    \ (list(i - 1) + list(i - 2) + list(i + 1))\n        }\n        list.toList",
  "        var l = ListBuffer[Long]()\n        l += 1\n        l += 3\n        l +=\
    \ 2\n        for (i <- 3 to n.toInt) {\n            var x = l(i - 1) + l(i - 2)\
    \ + l(i - 3)\n            if (i % 2 == 0) x += i / 2\n            l += x\n   \
    \     }\n        return l.toList", "        def triHelper(n : Long, acc : List[Long])\
    \ : List[Long] = {\n            if (n == 0) acc\n            else if (n == 1)\
    \ triHelper(n - 1, 3 :: acc)\n            else if (n % 2 == 0) triHelper(n - 1,\
    \ (1 + n / 2) :: acc)\n            else triHelper(n - 1, (acc(0) + acc(1) + acc(2))\
    \ :: acc)\n        }\n        triHelper(n, List[Long]()).reverse", "        val\
    \ cache = new Array[Long](n.toInt + 1)\n        cache(0) = 1\n        cache(1)\
    \ = 3\n        cache(2) = 2\n        for (i <- 3 to n.toInt) {\n            if\
    \ (i % 2 == 0) cache(i) = 1 + i / 2\n            else cache(i) = cache(i - 1)\
    \ + cache(i - 2) + cache(i + 1)\n        }\n        cache.toList", "        //\
    \ Fill up this function body\n        // You can add another function as well,\
    \ if required\n        var l = List[Long]()\n        for (i <- 0 to n.toInt) {\n\
    \            if (i == 0) l = 1 :: l\n            else if (i == 1) l = 3 :: l\n\
    \            else if (i == 2) l = 2 :: l\n            else if (i % 2 == 0) l =\
    \ (1 + i / 2) :: l\n            else l = (l(0) + l(1) + l(2)) :: l\n        }\n\
    \        l.reverse", "        // Fill up this function body\n        // You can\
    \ add another function as well, if required\n        var l = ListBuffer[Long]()\n\
    \        l += 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                l += 1 + i / 2\n         \
    \   } else {\n                l += l(i - 1) + l(i - 2) + l(i + 1)\n          \
    \  }\n        }\n        l.toList", "        if (n == 0) return List(1)\n    \
    \    if (n == 1) return List(1, 3)\n        if (n == 2) return List(1, 3, 2)\n\
    \        var a = 1l\n        var b = 3l\n        var c = 2l\n        var d = a\
    \ + b + c\n        var result = List(a, b, c, d)\n        for (i <- 4 to n.toInt)\
    \ {\n            a = b\n            b = c\n            c = d\n            if (i\
    \ % 2 == 0) d = 1 + i / 2\n            else d = a + b + c\n            result\
    \ = result :+ d\n        }\n        return result", "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ var l = ListBuffer[Long]()\n        l += 1\n        l += 3\n        l += 2\n\
    \        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1 + i /\
    \ 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n    \
    \    l.toList", "        val l = new ListBuffer[Long]\n        l += 1\n      \
    \  l += 3\n        l += 2\n        for (i <- 3 to n.toInt) {\n            if (i\
    \ % 2 == 0) l += (1 + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i\
    \ + 1))\n        }\n        l.toList", "        val result = new ListBuffer[Long]\n\
    \        result += 1\n        result += 3\n        if (n == 1) return result.toList\n\
    \        result += 2\n        if (n == 2) return result.toList\n        for (i\
    \ <- 3 to n.toInt) {\n            if (i % 2 == 0) result += (1 + i / 2)\n    \
    \        else result += (result(i - 1) + result(i - 2) + result(i + 1))\n    \
    \    }\n        result.toList", "        // Fill up this function body\n     \
    \   // You can add another function as well, if required\n        var list = List[Long]()\n\
    \        for (i <- 0 to n.toInt) {\n            if (i == 0) list = list :+ 1\n\
    \            else if (i == 1) list = list :+ 3\n            else if (i == 2) list\
    \ = list :+ 2\n            else if (i % 2 == 0) list = list :+ (1 + i / 2)\n \
    \           else list = list :+ (list(i - 1) + list(i - 2) + list(i + 1))\n  \
    \      }\n        list", "        // Fill up this function body\n        // You\
    \ can add another function as well, if required\n        var l = ListBuffer[Long]()\n\
    \        l += 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                l += 1 + i / 2\n         \
    \   } else {\n                l += l(i - 1) + l(i - 2) + l(i + 1)\n          \
    \  }\n        }\n        l.toList", "        val cache = new HashMap[Long, Long]\n\
    \        def tri(n : Long) : Long = {\n            if (cache.contains(n)) cache(n)\n\
    \            else {\n                val result = if (n == 1) 3\n            \
    \    else if (n % 2 == 0) 1 + n / 2\n                else tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n                cache(n) = result\n                result\n\
    \            }\n        }\n        (1 to n.toInt).map(tri(_)).toList", "     \
    \   var result = List[Long]()\n        for (i <- 0 to n.toInt) {\n           \
    \ if (i == 0) result = result :+ 1\n            else if (i == 1) result = result\
    \ :+ 3\n            else if (i == 2) result = result :+ 2\n            else if\
    \ (i % 2 == 0) result = result :+ (1 + i / 2)\n            else result = result\
    \ :+ (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n        result",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var list = new ListBuffer[Long]\n        list\
    \ += 1\n        list += 3\n        list += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                list += 1 + i / 2\n      \
    \      } else {\n                list += list(i - 1) + list(i - 2) + list(i +\
    \ 1)\n            }\n        }\n        list.toList", "        def tri(n : Long,\
    \ l : List[Long]) : List[Long] = {\n            if (n == 0) l\n            else\
    \ if (n % 2 == 0) tri(n - 1, l :+ (1 + n / 2))\n            else tri(n - 1, l\
    \ :+ (l(l.length - 1) + l(l.length - 2) + l(l.length - 3)))\n        }\n     \
    \   tri(n, List(1l))", "        // Fill up this function body\n        // You\
    \ can add another function as well, if required\n        var lst = List[Long]()\n\
    \        for (i <- 0 to n.toInt) {\n            if (i == 0) lst = lst :+ 1\n \
    \           else if (i == 1) lst = lst :+ 3\n            else if (i == 2) lst\
    \ = lst :+ 2\n            else if (i % 2 == 0) lst = lst :+ (1 + i / 2)\n    \
    \        else lst = lst :+ (lst(i - 1) + lst(i - 2) + lst(i + 1))\n        }\n\
    \        lst", "        val result = new ListBuffer[Long]\n        result += 1\n\
    \        result += 3\n        if (n == 1) return result.toList\n        result\
    \ += 2\n        if (n == 2) return result.toList\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) result += (1 + i / 2)\n            else result\
    \ += (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n        result.toList",
  "        def tri_helper(n : Long, l : List[Long]) : List[Long] = {\n           \
    \ if (n == 0) l\n            else if (n % 2 == 0) tri_helper(n - 1, l :+ (1 +\
    \ n / 2))\n            else tri_helper(n - 1, l :+ (l(l.length - 1) + l(l.length\
    \ - 2) + l(l.length - 3)))\n        }\n        tri_helper(n, List(1l))", "   \
    \     val result = new ArrayBuffer[Long]()\n        result += 1\n        result\
    \ += 3\n        result += 2\n        for (i <- 3 to n.toInt) {\n            if\
    \ (i % 2 == 0) {\n                result += (1 + i / 2)\n            } else {\n\
    \                result += (result(i - 1) + result(i - 2) + result(i + 1))\n \
    \           }\n        }\n        result.toList", "        if (n == 0) return\
    \ List(1)\n        if (n == 1) return List(1, 3)\n        if (n == 2) return List(1,\
    \ 3, 2)\n        var a = 1l\n        var b = 3l\n        var c = 2l\n        var\
    \ d = 0l\n        var result = List(1l, 3l, 2l)\n        for (i <- 3l to n) {\n\
    \            if (i % 2 == 0) {\n                d = 1 + i / 2\n            } else\
    \ {\n                d = a + b + c\n            }\n            a = b\n       \
    \     b = c\n            c = d\n            result = result :+ d\n        }\n\
    \        return result", "        var l = List[Long]()\n        for (i <- 0 to\
    \ n.toInt) {\n            if (i == 0) l = 1 :: l\n            else if (i == 1)\
    \ l = 3 :: l\n            else if (i == 2) l = 2 :: l\n            else if (i\
    \ % 2 == 0) l = (1 + i / 2) :: l\n            else l = (l(0) + l(1) + l(2)) ::\
    \ l\n        }\n        l.reverse", "        val cache = new HashMap[Long, Long]\n\
    \        def tri(n : Long) : Long = {\n            if (cache.contains(n)) cache(n)\n\
    \            else {\n                val result = if (n == 1) 3\n            \
    \    else if (n % 2 == 0) 1 + n / 2\n                else tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n                cache(n) = result\n                result\n\
    \            }\n        }\n        (1 to n.toInt).map(tri(_)).toList", "     \
    \   if (n == 0) return List(1)\n        var a = 1l\n        var b = 3l\n     \
    \   var c = 2l\n        var d = 8l\n        var result = List(a, b, c, d)\n  \
    \      for (i <- 4l to n) {\n            if (i % 2 == 0) {\n                a\
    \ = d\n                d = 1 + i / 2\n                result = result :+ d\n \
    \           } else {\n                a = d\n                d = a + b + c\n \
    \               result = result :+ d\n                b = c\n                c\
    \ = a\n            }\n        }\n        return result", "        var result =\
    \ ListBuffer[Long]()\n        result += 1\n        result += 3\n        for (i\
    \ <- 2 to n.toInt) {\n            if (i % 2 == 0) result += (1 + i / 2)\n    \
    \        else result += (result(i - 1) + result(i - 2) + result(i + 1))\n    \
    \    }\n        result.toList", "        var result = ListBuffer[Long]()\n   \
    \     result += 1\n        result += 3\n        result += 2\n        for (i <-\
    \ 3 to n.toInt) {\n            if (i % 2 == 0) result += (1 + i / 2)\n       \
    \     else result += (result(i - 1) + result(i - 2) + result(i + 1))\n       \
    \ }\n        result.toList", "        var l = new ListBuffer[Long]\n        l\
    \ += 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt) {\n  \
    \          if (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i - 1) +\
    \ l(i - 2) + l(i + 1))\n        }\n        l.toList", "        // Fill up this\
    \ function body\n        // You can add another function as well, if required\n\
    \        var l = List[Long]()\n        if (n == 0) {\n            l = List(1)\n\
    \        } else if (n == 1) {\n            l = List(1, 3)\n        } else if (n\
    \ == 2) {\n            l = List(1, 3, 2)\n        } else {\n            l = List(1,\
    \ 3, 2)\n            for (i <- 3 to n.toInt) {\n                if (i % 2 == 0)\
    \ {\n                    l = l :+ (1 + i / 2)\n                } else {\n    \
    \                l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n                }\n\
    \            }\n        }\n        l", "        val l = new ListBuffer[Long]\n\
    \        l += 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i\
    \ - 1) + l(i - 2) + l(i + 1))\n        }\n        l.toList", "        var result\
    \ = List[Long]()\n        for (i <- 0 to n.toInt) {\n            if (i == 0) result\
    \ = result :+ 1\n            else if (i == 1) result = result :+ 3\n         \
    \   else if (i == 2) result = result :+ 2\n            else if (i % 2 == 0) result\
    \ = result :+ (1 + i / 2)\n            else result = result :+ (result(i - 1)\
    \ + result(i - 2) + result(i + 1))\n        }\n        result", "        var l\
    \ = List[Long]()\n        for (i <- 0 to n.toInt) {\n            if (i == 0) l\
    \ = 1l :: l\n            else if (i == 1) l = 3l :: l\n            else if (i\
    \ == 2) l = 2l :: l\n            else if (i % 2 == 0) l = (1 + i / 2) :: l\n \
    \           else l = (l(0) + l(1) + l(2)) :: l\n        }\n        l.reverse",
  "        // Fill up this function body\n        // 'n' is the number of elements\
    \ in the Tribonacci sequence\n        // You have to return a list of the first\
    \ n + 1 numbers of the Tribonacci sequence\n        var l = ListBuffer[Long]()\n\
    \        l += 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                l += 1 + i / 2\n         \
    \   } else {\n                l += l(i - 1) + l(i - 2) + l(i + 1)\n          \
    \  }\n        }\n        l.toList", "        if (n == 0) return List(1)\n    \
    \    if (n == 1) return List(1, 3)\n        var result = List(1l, 3l, 2l)\n  \
    \      for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) result = result\
    \ :+ (i / 2 + 1)\n            else result = result :+ (result(i - 1) + result(i\
    \ - 2) + result(i + 1))\n        }\n        return result", "        // Fill up\
    \ this function body\n        // 'n' is the number of elements in the Tribonacci\
    \ sequence\n        // You have to return a list of 'n' + 1 elements\n       \
    \ // The first element of the list should be 1\n        // The second element\
    \ of the list should be 3\n        // The third element of the list should be\
    \ 2\n        // The rest of the list should be the Tribonacci sequence\n     \
    \   val result = new ListBuffer[Long]\n        result += 1\n        result +=\
    \ 3\n        result += 2\n        for (i <- 3 to n.toInt) {\n            if (i\
    \ % 2 == 0) result += (1 + i / 2)\n            else result += (result(i - 1) +\
    \ result(i - 2) + result(i + 1))\n        }\n        result.toList", "       \
    \ if (n == 0) return List(1l)\n        if (n == 1) return List(1l, 3l)\n     \
    \   if (n == 2) return List(1l, 3l, 2l)\n        var l = List(1l, 3l, 2l)\n  \
    \      var i = 3\n        while (i <= n) {\n            if (i % 2 == 0) l = l\
    \ :+ (1 + i / 2)\n            else l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n\
    \            i += 1\n        }\n        return l", "        if (n == 0) return\
    \ List(1)\n        var l = List(1, 3, 2)\n        for (i <- 3 to n.toInt) {\n\
    \            if (i % 2 == 0) l = l :+ (1 + i / 2)\n            else l = l :+ (l(i\
    \ - 1) + l(i - 2) + l(i + 1))\n        }\n        return l", "        var a =\
    \ 1l\n        var b = 3l\n        var c = 2l\n        var d = 0l\n        var\
    \ result = List[Long]()\n        result = result :+ a\n        result = result\
    \ :+ b\n        result = result :+ c\n        for (i <- 3l to n) {\n         \
    \   if (i % 2 == 0) {\n                d = 1 + i / 2\n            } else {\n \
    \               d = a + b + c\n            }\n            a = b\n            b\
    \ = c\n            c = d\n            result = result :+ d\n        }\n      \
    \  return result", "        // Fill up this function body\n        // You may\
    \ add another function as well, if required\n        var lst = new ListBuffer[Long]()\n\
    \        lst += 1\n        lst += 3\n        lst += 2\n        for (i <- 3 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                lst += (1 + i / 2)\n\
    \            } else {\n                lst += (lst(i - 1) + lst(i - 2) + lst(i\
    \ + 1))\n            }\n        }\n        lst.toList", "        // Fill up this\
    \ function body\n        // You can add another function as well, if required\n\
    \        var lst = new ListBuffer[Long]\n        lst += 1\n        lst += 3\n\
    \        lst += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 ==\
    \ 0) {\n                lst += (1 + i / 2)\n            } else {\n           \
    \     lst += (lst(i - 1) + lst(i - 2) + lst(i + 1))\n            }\n        }\n\
    \        lst.toList", "        // Fill up this function body\n        // You may\
    \ also define new functions as you wish\n        // to solve this problem\n  \
    \      var list = List[Long]()\n        for (i <- 0 to n.toInt) {\n          \
    \  if (i == 0) list = list :+ 1\n            else if (i == 1) list = list :+ 3\n\
    \            else if (i == 2) list = list :+ 2\n            else if (i % 2 ==\
    \ 0) list = list :+ (1 + i / 2)\n            else list = list :+ (list(i - 1)\
    \ + list(i - 2) + list(i + 1))\n        }\n        list", "        var a = 1l\n\
    \        var b = 3l\n        var c = 2l\n        var d = 0l\n        var result\
    \ = List(a, b, c)\n        for (i <- 3l to n) {\n            if (i % 2 == 0) {\n\
    \                d = 1 + i / 2\n            } else {\n                d = a +\
    \ b + c\n            }\n            a = b\n            b = c\n            c =\
    \ d\n            result = result :+ d\n        }\n        return result", "  \
    \      var result = List[Long]()\n        result = result :+ 1\n        result\
    \ = result :+ 3\n        result = result :+ 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) result = result :+ (1 + i / 2)\n            else\
    \ result = result :+ (result(i - 1) + result(i - 2) + result(i + 1))\n       \
    \ }\n        return result", "        // Fill up this function body\n        //\
    \ You can add another function as well, if required\n        var l = ListBuffer[Long]()\n\
    \        l += 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i\
    \ - 1) + l(i - 2) + l(i + 1))\n        }\n        l.toList", "        // Fill\
    \ up this function body\n        // 'n' is the number of elements in the Tribonacci\
    \ sequence\n        // You have to return a list of Long containing the first\
    \ 'n' + 1 elements of the Tribonacci sequence\n        // For example, if n =\
    \ 3, then the list should be:\n        // List(1, 3, 2, 8)\n        if (n == 0)\
    \ return List(1)\n        if (n == 1) return List(1, 3)\n        if (n == 2) return\
    \ List(1, 3, 2)\n        var lst = List(1, 3, 2)\n        var i = 3\n        while\
    \ (i <= n) {\n            if (i % 2 == 0) lst = lst :+ (1 + i / 2)\n         \
    \   else lst = lst :+ (lst(i - 1) + lst(i - 2) + lst(i + 1))\n            i +=\
    \ 1\n        }\n        lst", "        // Fill up this function body\n       \
    \ // 'n' is the number of elements in the Tribonacci sequence\n        // You\
    \ have to return a list of the first 'n' + 1 elements of the Tribonacci sequence\n\
    \        // You can use the helper function 'triHelper'\n        triHelper(n,\
    \ List(1, 3, 2))", "        var l = ListBuffer[Long]()\n        l += 1\n     \
    \   l += 3\n        l += 2\n        for (i <- 3 to n.toInt) {\n            if\
    \ (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i - 1) + l(i - 2) +\
    \ l(i + 1))\n        }\n        l.toList", "        // Fill up this function body\n\
    \        // You can add another function as well, if required\n        var l =\
    \ List[Long]()\n        for (i <- 0 to n.toInt) {\n            if (i == 0) l =\
    \ l :+ 1\n            else if (i == 1) l = l :+ 3\n            else if (i == 2)\
    \ l = l :+ 2\n            else if (i % 2 == 0) l = l :+ (1 + i / 2)\n        \
    \    else l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n        l", " \
    \       var result = ListBuffer[Long]()\n        result += 1\n        result +=\
    \ 3\n        result += 2\n        for (i <- 3 to n.toInt) {\n            if (i\
    \ % 2 == 0) result += (1 + i / 2)\n            else result += (result(i - 1) +\
    \ result(i - 2) + result(i + 1))\n        }\n        result.toList", "       \
    \ val l = new ListBuffer[Long]\n        l += 1\n        l += 3\n        l += 2\n\
    \        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1 + i /\
    \ 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n    \
    \    l.toList", "        val cache = new Array[Long](n.toInt + 1)\n        def\
    \ tri(n : Long) : Long = {\n            if (n == 1) 3\n            else if (n\
    \ == 2) 1\n            else if (n == 3) 2\n            else if (cache(n.toInt)\
    \ != 0) cache(n.toInt)\n            else {\n                val result = if (n\
    \ % 2 == 0) 1 + n / 2 else tri(n - 1) + tri(n - 2) + tri(n + 1)\n            \
    \    cache(n.toInt) = result\n                result\n            }\n        }\n\
    \        (1 to n.toInt).map(tri(_)).toList", "        def triHelper(n : Long,\
    \ l : List[Long]) : List[Long] = {\n            if (n == 0) l\n            else\
    \ if (n % 2 == 0) triHelper(n - 1, l :+ (1 + n / 2))\n            else triHelper(n\
    \ - 1, l :+ (l(l.length - 1) + l(l.length - 2) + l(l.length - 3)))\n        }\n\
    \        triHelper(n, List(1l))", "        // Fill up this function body\n   \
    \     // You may also define new functions as you wish\n        // to solve this\
    \ problem\n        var l = new ListBuffer[Long]()\n        l += 1\n        l +=\
    \ 3\n        l += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2\
    \ == 0) l += (1 + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n\
    \        }\n        l.toList", "        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var l = ListBuffer[Long]()\n\
    \        l += 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                l += 1 + i / 2\n         \
    \   } else {\n                l += l(i - 1) + l(i - 2) + l(i + 1)\n          \
    \  }\n        }\n        l.toList", "        def tri(n : Long, l : List[Long])\
    \ : List[Long] = {\n            if (n == 0) l\n            else if (n % 2 == 0)\
    \ tri(n - 1, l :+ (1 + n / 2))\n            else tri(n - 1, l :+ (l(l.length -\
    \ 1) + l(l.length - 2) + l(l.length - 3)))\n        }\n        tri(n, List(1l))",
  "        var result = ListBuffer[Long]()\n        result += 1\n        result +=\
    \ 3\n        for (i <- 2 to n.toInt) {\n            if (i % 2 == 0) {\n      \
    \          result += (1 + i / 2)\n            } else {\n                result\
    \ += (result(i - 1) + result(i - 2) + result(i + 1))\n            }\n        }\n\
    \        result.toList", "        val cache = new HashMap[Long, Long]\n      \
    \  def tri(n : Long) : Long = {\n            if (cache.contains(n)) cache(n)\n\
    \            else {\n                val result = if (n == 1) 3\n            \
    \    else if (n % 2 == 0) 1 + n / 2\n                else tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n                cache(n) = result\n                result\n\
    \            }\n        }\n        (1 to n.toInt).map(tri(_)).toList", "     \
    \   var l = ListBuffer[Long]()\n        l += 1\n        l += 3\n        l += 2\n\
    \        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += 1 + i / 2\n\
    \            else l += l(i - 1) + l(i - 2) + l(i + 1)\n        }\n        l.toList",
  "        def triHelper(n : Long, l : List[Long]) : List[Long] = {\n            if\
    \ (n == 0) l\n            else if (n % 2 == 0) triHelper(n - 1, l :+ (1 + n /\
    \ 2))\n            else triHelper(n - 1, l :+ (l(l.length - 1) + l(l.length -\
    \ 2) + l(l.length - 3)))\n        }\n        triHelper(n, List[Long](1))", " \
    \       // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var l = List[Long]()\n        l = l :+ 1\n   \
    \     l = l :+ 3\n        l = l :+ 2\n        for (i <- 3 to n.toInt) {\n    \
    \        if (i % 2 == 0) {\n                l = l :+ (1 + i / 2)\n           \
    \ } else {\n                l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n      \
    \      }\n        }\n        return l", "        var l = List[Long]()\n      \
    \  for (i <- 0 to n.toInt) {\n            if (i == 0) l = l :+ 1\n           \
    \ else if (i == 1) l = l :+ 3\n            else if (i == 2) l = l :+ 2\n     \
    \       else if (i % 2 == 0) l = l :+ (1 + i / 2)\n            else l = l :+ (l(i\
    \ - 1) + l(i - 2) + l(i + 1))\n        }\n        return l", "        var result\
    \ = List[Long]()\n        result = result :+ 1\n        result = result :+ 3\n\
    \        result = result :+ 2\n        for (i <- 3 to n.toInt) {\n           \
    \ if (i % 2 == 0) {\n                result = result :+ (1 + i / 2)\n        \
    \    } else {\n                result = result :+ (result(i - 1) + result(i -\
    \ 2) + result(i + 1))\n            }\n        }\n        return result", "   \
    \     var l = List[Long]()\n        l = l :+ 1\n        l = l :+ 3\n        l\
    \ = l :+ 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l =\
    \ l :+ (1 + i / 2)\n            else l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n\
    \        }\n        return l", "        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var l = ListBuffer[Long]()\n\
    \        l += 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i\
    \ - 1) + l(i - 2) + l(i + 1))\n        }\n        l.toList", "        def tri(n\
    \ : Long, l : List[Long]) : List[Long] = {\n            if (n == 0) l\n      \
    \      else if (n == 1) tri(n - 1, 1l :: l)\n            else if (n == 2) tri(n\
    \ - 1, 3l :: l)\n            else if (n % 2 == 0) tri(n - 1, (1 + n / 2) :: l)\n\
    \            else tri(n - 1, (l.head + l.tail.head + l.tail.tail.head) :: l)\n\
    \        }\n        tri(n, List[Long]()).reverse", "        def tri(n : Long,\
    \ l : List[Long]) : List[Long] = {\n            if (n == 0) l\n            else\
    \ if (n == 1) tri(n - 1, l :+ 3)\n            else if (n % 2 == 0) tri(n - 1,\
    \ l :+ (1 + n / 2))\n            else tri(n - 1, l :+ (l(l.length - 1) + l(l.length\
    \ - 2) + l(l.length - 3)))\n        }\n        tri(n, List[Long]())", "      \
    \  var result = new ListBuffer[Long]\n        result += 1\n        result += 3\n\
    \        if (n == 1) return result.toList\n        result += 2\n        if (n\
    \ == 2) return result.toList\n        for (i <- 3 to n.toInt) {\n            if\
    \ (i % 2 == 0) result += (1 + i / 2)\n            else result += (result(i - 1)\
    \ + result(i - 2) + result(i + 1))\n        }\n        return result.toList",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var l = new ListBuffer[Long]\n        l += 1\n\
    \        l += 3\n        l += 2\n        for (i <- 3 to n.toInt) {\n         \
    \   if (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i - 1) + l(i -\
    \ 2) + l(i + 1))\n        }\n        l.toList", "        var result = new ListBuffer[Long]\n\
    \        result += 1\n        result += 3\n        result += 2\n        for (i\
    \ <- 3 to n.toInt) {\n            if (i % 2 == 0) result += (1 + i / 2)\n    \
    \        else result += (result(i - 1) + result(i - 2) + result(i + 1))\n    \
    \    }\n        result.toList", "        def triHelper(n : Long, acc : List[Long])\
    \ : List[Long] = {\n            if (n == 0) acc\n            else if (n == 1)\
    \ 3 :: acc\n            else if (n % 2 == 0) triHelper(n - 1, (1 + n / 2) :: acc)\n\
    \            else triHelper(n - 1, (acc(1) + acc(2) + acc(3)) :: acc)\n      \
    \  }\n        triHelper(n, List[Long]()).reverse", "        var l = ListBuffer[Long]()\n\
    \        l += 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i\
    \ - 1) + l(i - 2) + l(i + 1))\n        }\n        l.toList", "        // Fill\
    \ up this function body\n        // 'n' is the number of elements in the Tribonacci\
    \ sequence\n        // You have to return a list of the first n + 1 numbers of\
    \ the Tribonacci sequence\n        // You can use the helper function 'triHelper'\n\
    \        triHelper(n, List[Long](1, 3, 2))", "        def tri(n : Long, l : List[Long])\
    \ : List[Long] = {\n            if (n == 0) l\n            else if (n % 2 == 0)\
    \ tri(n - 1, l :+ (1 + n / 2))\n            else tri(n - 1, l :+ (l(l.length -\
    \ 1) + l(l.length - 2) + l(l.length - 3)))\n        }\n        tri(n, List(1))",
  "        var l = ListBuffer[Long]()\n        l += 1\n        l += 3\n        l +=\
    \ 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1 +\
    \ i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n\
    \        l.toList", "        if (n == 0) return List(1)\n        if (n == 1) return\
    \ List(1, 3)\n        if (n == 2) return List(1, 3, 2)\n        var result = List(1,\
    \ 3, 2)\n        var i = 3\n        while (i <= n) {\n            if (i % 2 ==\
    \ 0) result = result :+ (1 + i / 2)\n            else result = result :+ (result(i\
    \ - 1) + result(i - 2) + result(i + 1))\n            i += 1\n        }\n     \
    \   return result", "        var l = List[Long]()\n        var a = 1l\n      \
    \  var b = 3l\n        var c = 2l\n        l = l :+ a\n        l = l :+ b\n  \
    \      l = l :+ c\n        for (i <- 3 to n.toInt) {\n            if (i % 2 ==\
    \ 0) {\n                var d = 1 + i / 2\n                l = l :+ d\n      \
    \      } else {\n                var d = a + b + c\n                l = l :+ d\n\
    \                a = b\n                b = c\n                c = d\n       \
    \     }\n        }\n        return l", "        if (n == 0) return List(1)\n \
    \       var a = 1l\n        var b = 3l\n        var c = 2l\n        var d = 8l\n\
    \        var result = List(a, b, c, d)\n        for (i <- 4l to n) {\n       \
    \     a = b\n            b = c\n            c = d\n            if (i % 2 == 0)\
    \ d = 1 + i / 2\n            else d = a + b + c\n            result = result :+\
    \ d\n        }\n        return result", "        // Fill up this function body\n\
    \        // You can add another function as well, if required\n        var l =\
    \ List[Long]()\n        l = l :+ 1\n        l = l :+ 3\n        l = l :+ 2\n \
    \       for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) {\n           \
    \     l = l :+ (1 + i / 2)\n            } else {\n                l = l :+ (l(i\
    \ - 1) + l(i - 2) + l(i + 1))\n            }\n        }\n        return l", " \
    \       if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n  \
    \      if (n == 2) return List(1, 3, 2)\n        val l = tri(n - 1)\n        if\
    \ (n % 2 == 0) return l :+ (1 + n / 2)\n        return l :+ (l(l.length - 1) +\
    \ l(l.length - 2) + l(l.length - 3))", "        // Fill up this function body\n\
    \        // You can add another function as well, if required\n        var result\
    \ = new ListBuffer[Long]()\n        result += 1\n        result += 3\n       \
    \ result += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0)\
    \ {\n                result += 1 + i / 2\n            } else {\n             \
    \   result += result(i - 1) + result(i - 2) + result(i + 1)\n            }\n \
    \       }\n        result.toList", "        def triHelper(n : Long, l : List[Long])\
    \ : List[Long] = {\n            if (n == 0) l\n            else if (n == 1) triHelper(n\
    \ - 1, List(3))\n            else if (n == 2) triHelper(n - 1, List(1, 3))\n \
    \           else if (n % 2 == 0) triHelper(n - 1, 1 + n / 2 :: l)\n          \
    \  else triHelper(n - 1, l.head + l.tail.head + l.tail.tail.head :: l)\n     \
    \   }\n        triHelper(n, List()).reverse", "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ var list = List[Long]()\n        for (i <- 0 to n.toInt) {\n            if (i\
    \ == 0) list = list :+ 1\n            else if (i == 1) list = list :+ 3\n    \
    \        else if (i == 2) list = list :+ 2\n            else if (i % 2 == 0) list\
    \ = list :+ (1 + i / 2)\n            else list = list :+ (list(i - 1) + list(i\
    \ - 2) + list(i + 1))\n        }\n        list", "        var result = ListBuffer[Long]()\n\
    \        result += 1\n        result += 3\n        result += 2\n        for (i\
    \ <- 3 to n.toInt) {\n            if (i % 2 == 0) result += (1 + i / 2)\n    \
    \        else result += (result(i - 1) + result(i - 2) + result(i + 1))\n    \
    \    }\n        result.toList", "        val cache = new HashMap[Long, Long]\n\
    \        def tri(n : Long) : Long = {\n            if (cache.contains(n)) cache(n)\n\
    \            else {\n                val result = if (n == 1) 3\n            \
    \    else if (n % 2 == 0) 1 + n / 2\n                else tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n                cache(n) = result\n                result\n\
    \            }\n        }\n        (1 to n.toInt).map(tri(_)).toList", "     \
    \   var result = List[Long]()\n        var t1 = 1l\n        var t2 = 3l\n    \
    \    var t3 = 2l\n        result = result :+ t1\n        result = result :+ t2\n\
    \        result = result :+ t3\n        for (i <- 3 to n.toInt) {\n          \
    \  val t4 = if (i % 2 == 0) 1 + i / 2 else t1 + t2 + t3\n            result =\
    \ result :+ t4\n            t1 = t2\n            t2 = t3\n            t3 = t4\n\
    \        }\n        result", "        var a = 1l\n        var b = 3l\n       \
    \ var c = 2l\n        var d = 0l\n        var l = List[Long]()\n        l = l\
    \ :+ a\n        l = l :+ b\n        l = l :+ c\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                d = 1 + i / 2\n          \
    \  } else {\n                d = a + b + c\n            }\n            a = b\n\
    \            b = c\n            c = d\n            l = l :+ d\n        }\n   \
    \     return l", "        // Fill up this function body\n        // You can add\
    \ another function as well, if required\n        var l = ListBuffer[Long]()\n\
    \        l += 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i\
    \ - 1) + l(i - 2) + l(i + 1))\n        }\n        l.toList", "        // Fill\
    \ up this function body\n        // 'n' is the number of elements in the Tribonacci\
    \ sequence\n        // You have to return a list of the first n + 1 numbers of\
    \ the Tribonacci sequence\n        // The first element of the Tribonacci sequence\
    \ is 1, the second element is 3, the third element is 2\n        // The nth element\
    \ of the Tribonacci sequence is the sum of the (n - 1)th, (n - 2)th and (n + 1)th\
    \ elements\n        // The (n + 1)th element is the (n - 1)th element\n      \
    \  val list = new ListBuffer[Long]\n        list += 1\n        list += 3\n   \
    \     list += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0)\
    \ list += (1 + i / 2)\n            else list += (list(i - 1) + list(i - 2) + list(i\
    \ + 1))\n        }\n        list.toList", "        val result = new ListBuffer[Long]\n\
    \        result += 1\n        result += 3\n        if (n == 1) return result.toList\n\
    \        result += 2\n        if (n == 2) return result.toList\n        for (i\
    \ <- 3 to n.toInt) {\n            if (i % 2 == 0) result += (1 + i / 2)\n    \
    \        else result += (result(i - 1) + result(i - 2) + result(i + 1))\n    \
    \    }\n        result.toList", "        def triHelper(n : Long, acc : List[Long])\
    \ : List[Long] = {\n            if (n == 0) acc\n            else {\n        \
    \        val newAcc = if (n % 2 == 0) acc :+ (1 + n / 2)\n                   \
    \          else acc :+ (acc(acc.length - 1) + acc(acc.length - 2) + acc(acc.length\
    \ - 3))\n                triHelper(n - 1, newAcc)\n            }\n        }\n\
    \        triHelper(n, List(1))", "        var a = 1l\n        var b = 3l\n   \
    \     var c = 2l\n        var result = List[Long]()\n        result = result :+\
    \ a\n        result = result :+ b\n        result = result :+ c\n        for (i\
    \ <- 3 to n.toInt) {\n            if (i % 2 == 0) {\n                result =\
    \ result :+ (1 + i / 2)\n            } else {\n                result = result\
    \ :+ (result(i - 1) + result(i - 2) + result(i + 1))\n            }\n        }\n\
    \        return result", "        var l = List[Long]()\n        for (i <- 0 to\
    \ n.toInt) {\n            if (i == 0) l = l :+ 1\n            else if (i == 1)\
    \ l = l :+ 3\n            else if (i == 2) l = l :+ 2\n            else if (i\
    \ % 2 == 0) l = l :+ (1 + i / 2)\n            else l = l :+ (l(i - 1) + l(i -\
    \ 2) + l(i + 1))\n        }\n        return l", "        def triHelper(n : Long,\
    \ l : List[Long]) : List[Long] = {\n            if (n == 0) l\n            else\
    \ if (n == 1) triHelper(n - 1, l :+ 3)\n            else if (n % 2 == 0) triHelper(n\
    \ - 1, l :+ (1 + n / 2))\n            else triHelper(n - 1, l :+ (l(l.length -\
    \ 1) + l(l.length - 2) + l(l.length - 3)))\n        }\n        triHelper(n, List[Long]())",
  "        // Fill up this function body\n        // 'n' is the number of elements\
    \ in the tribonacci sequence\n        var l = List[Long]()\n        if (n == 0)\
    \ {\n            return l\n        }\n        l = l :+ 1\n        if (n == 1)\
    \ {\n            return l\n        }\n        l = l :+ 3\n        if (n == 2)\
    \ {\n            return l\n        }\n        l = l :+ 2\n        if (n == 3)\
    \ {\n            return l\n        }\n        for (i <- 4 to n.toInt) {\n    \
    \        if (i % 2 == 0) {\n                l = l :+ (1 + i / 2)\n           \
    \ } else {\n                l = l :+ (l(i - 1) + l(i - 2) + l(i - 3))\n      \
    \      }\n        }\n        return l", "        // Fill up this function body\n\
    \        // 'n' is the number of elements in the sequence\n        // You have\
    \ to return a list of the first n + 1 numbers of the Tribonacci sequence\n   \
    \     // For example, for n = 3, the list should be:\n        // List[Long](1l.toLong,\
    \ 3l.toLong, 2l.toLong, 8l.toLong)\n        var l = List[Long](1l.toLong, 3l.toLong,\
    \ 2l.toLong)\n        var i = 3\n        while (i <= n) {\n            if (i %\
    \ 2 == 0) {\n                l = l :+ (1 + i / 2)\n            } else {\n    \
    \            l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n            }\n      \
    \      i += 1\n        }\n        l", "        var l = ListBuffer[Long]()\n  \
    \      l += 1\n        l += 3\n        for (i <- 2 to n.toInt) {\n           \
    \ if (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i - 1) + l(i - 2)\
    \ + l(i + 1))\n        }\n        l.toList", "        if (n == 0) return List(1)\n\
    \        if (n == 1) return List(1, 3)\n        if (n == 2) return List(1, 3,\
    \ 2)\n        var a = 1l\n        var b = 3l\n        var c = 2l\n        var\
    \ d = 0l\n        var result = List(1l, 3l, 2l)\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                d = 1 + i / 2\n          \
    \  } else {\n                d = a + b + c\n            }\n            a = b\n\
    \            b = c\n            c = d\n            result = result :+ d\n    \
    \    }\n        return result", "        if (n == 0) return List(1)\n        if\
    \ (n == 1) return List(1, 3)\n        if (n == 2) return List(1, 3, 2)\n     \
    \   var result = List(1, 3, 2)\n        var i = 3\n        while (i <= n) {\n\
    \            if (i % 2 == 0) result = result :+ (1 + i / 2)\n            else\
    \ result = result :+ (result(i - 1) + result(i - 2) + result(i + 1))\n       \
    \     i += 1\n        }\n        return result", "        def tri(n : Long, l\
    \ : List[Long]) : List[Long] = {\n            if (n == 0) l\n            else\
    \ if (n % 2 == 0) tri(n - 1, l :+ (1 + n / 2))\n            else tri(n - 1, l\
    \ :+ (l(l.length - 1) + l(l.length - 2) + l(l.length - 3)))\n        }\n     \
    \   tri(n, List[Long](1))", "        if (n == 0) return List(1)\n        if (n\
    \ == 1) return List(1, 3)\n        if (n == 2) return List(1, 3, 2)\n        var\
    \ result = List(1, 3, 2)\n        for (i <- 3 to n.toInt) {\n            if (i\
    \ % 2 == 0) result = result :+ (1 + i / 2)\n            else result = result :+\
    \ (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n        return result",
  "        // Fill up this function body\n        // 'n' is the number of elements\
    \ in the Tribonacci sequence\n        // You have to return a list of the first\
    \ n + 1 numbers of the Tribonacci sequence\n        var l = ListBuffer[Long]()\n\
    \        l += 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                l += 1 + i / 2\n         \
    \   } else {\n                l += l(i - 1) + l(i - 2) + l(i + 1)\n          \
    \  }\n        }\n        l.toList", "        if (n == 0) return List(1)\n    \
    \    var l = List[Long](1, 3, 2)\n        for (i <- 3 to n.toInt) {\n        \
    \    if (i % 2 == 0) l = l :+ (1 + i / 2)\n            else l = l :+ (l(i - 1)\
    \ + l(i - 2) + l(i + 1))\n        }\n        return l", "        def tri(n : Long,\
    \ l : List[Long]) : List[Long] = {\n            if (n == 0) l\n            else\
    \ {\n                val x = if (n % 2 == 0) 1 + n / 2 else l(l.length - 3) +\
    \ l(l.length - 2) + l(l.length - 1)\n                tri(n - 1, l :+ x)\n    \
    \        }\n        }\n        tri(n, List(1))", "        def triRec(n : Long,\
    \ l : List[Long]) : List[Long] = {\n            if (n == 0) l\n            else\
    \ if (n % 2 == 0) triRec(n - 1, l :+ (1 + n / 2))\n            else triRec(n -\
    \ 1, l :+ (l(l.length - 1) + l(l.length - 2) + l(l.length - 3)))\n        }\n\
    \        triRec(n, List(1))", "        val result = new ListBuffer[Long]\n   \
    \     result += 1\n        result += 3\n        for (i <- 2 to n.toInt) {\n  \
    \          if (i % 2 == 0) {\n                result += 1 + i / 2\n          \
    \  } else {\n                result += result(i - 1) + result(i - 2) + result(i\
    \ + 1)\n            }\n        }\n        result.toList", "        if (n == 0)\
    \ return List[Long](1)\n        if (n == 1) return List[Long](1, 3)\n        if\
    \ (n == 2) return List[Long](1, 3, 2)\n        var result = List[Long](1, 3, 2)\n\
    \        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) result = result\
    \ :+ (1 + i / 2)\n            else result = result :+ (result(i - 1) + result(i\
    \ - 2) + result(i + 1))\n        }\n        return result", "        def triHelper(n\
    \ : Long, l : List[Long]) : List[Long] = {\n            if (n == 0) l\n      \
    \      else if (n % 2 == 0) triHelper(n - 1, l :+ (1 + n / 2))\n            else\
    \ triHelper(n - 1, l :+ (l(l.length - 1) + l(l.length - 2) + l(l.length - 3)))\n\
    \        }\n        triHelper(n, List(1))", "        var l = List[Long]()\n  \
    \      for (i <- 0 to n.toInt) {\n            if (i == 0) l = l :+ 1\n       \
    \     else if (i == 1) l = l :+ 3\n            else if (i == 2) l = l :+ 2\n \
    \           else if (i % 2 == 0) l = l :+ (1 + i / 2)\n            else l = l\
    \ :+ (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n        return l", "       \
    \ // Fill up this function body\n        // You can add another function as well,\
    \ if required\n        var l = List[Long]()\n        l = l :+ 1\n        l = l\
    \ :+ 3\n        l = l :+ 2\n        for (i <- 3 to n.toInt) {\n            if\
    \ (i % 2 == 0) {\n                l = l :+ (1 + i / 2)\n            } else {\n\
    \                l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n            }\n  \
    \      }\n        return l", "        // Fill up this function body\n        //\
    \ You can add another function as well, if required\n        var l = List[Long]()\n\
    \        l = l :+ 1\n        l = l :+ 3\n        l = l :+ 2\n        for (i <-\
    \ 3 to n.toInt) {\n            if (i % 2 == 0) {\n                l = l :+ (1\
    \ + i / 2)\n            } else {\n                l = l :+ (l(i - 1) + l(i - 2)\
    \ + l(i + 1))\n            }\n        }\n        return l", "        val result\
    \ = new ListBuffer[Long]()\n        result += 1\n        result += 3\n       \
    \ for (i <- 2 to n.toInt) {\n            if (i % 2 == 0) result += (1 + i / 2)\n\
    \            else result += (result(i - 1) + result(i - 2) + result(i + 1))\n\
    \        }\n        result.toList", "        var l = ListBuffer[Long]()\n    \
    \    l += 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt) {\n\
    \            if (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i - 1)\
    \ + l(i - 2) + l(i + 1))\n        }\n        l.toList", "        var list = List[Long]()\n\
    \        var i = 1l\n        while (i <= n) {\n            list = list :+ tri(i)\n\
    \            i += 1\n        }\n        list", "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ var result = ListBuffer[Long]()\n        result += 1\n        result += 3\n\
    \        for (i <- 2 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      result += 1 + i / 2\n            } else {\n                result += result(i\
    \ - 1) + result(i - 2) + result(i + 1)\n            }\n        }\n        result.toList",
  "        def tri(n : Long, l : List[Long]) : List[Long] = {\n            if (n ==\
    \ 0) l\n            else {\n                val next = if (n % 2 == 0) 1 + n /\
    \ 2 else l(l.length - 1) + l(l.length - 2) + l(l.length - 3)\n               \
    \ tri(n - 1, l :+ next)\n            }\n        }\n        tri(n, List(1))", " \
    \       if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n  \
    \      if (n == 2) return List(1, 3, 2)\n        var result = List(1l, 3l, 2l)\n\
    \        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) result = result\
    \ :+ (1 + i / 2)\n            else result = result :+ (result(i - 1) + result(i\
    \ - 2) + result(i + 1))\n        }\n        return result", "        var list\
    \ = new ListBuffer[Long]\n        list += 1\n        list += 3\n        list +=\
    \ 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) {\n      \
    \          list += (1 + i / 2)\n            } else {\n                list +=\
    \ (list(i - 1) + list(i - 2) + list(i + 1))\n            }\n        }\n      \
    \  list.toList", "        var l = List[Long]()\n        for (i <- 0 to n.toInt)\
    \ {\n            if (i == 0) l = l :+ 1\n            else if (i == 1) l = l :+\
    \ 3\n            else if (i == 2) l = l :+ 2\n            else if (i % 2 == 0)\
    \ l = l :+ (1 + i / 2)\n            else l = l :+ (l(i - 1) + l(i - 2) + l(i +\
    \ 1))\n        }\n        return l", "        val l = new ListBuffer[Long]\n \
    \       l += 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i\
    \ - 1) + l(i - 2) + l(i + 1))\n        }\n        l.toList", "        val cache\
    \ = new Array[Long](n.toInt + 1)\n        def tri(n : Long) : Long = {\n     \
    \       if (n == 1) 3\n            else if (n == 2) 1\n            else if (n\
    \ == 3) 2\n            else if (cache(n.toInt) != 0) cache(n.toInt)\n        \
    \    else {\n                val result = if (n % 2 == 0) 1 + n / 2 else tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n                cache(n.toInt) = result\n  \
    \              result\n            }\n        }\n        (1 to n.toInt).map(tri(_)).toList",
  "        def triHelper(n : Long, l : List[Long]) : List[Long] = {\n            if\
    \ (n == 0) l\n            else if (n % 2 == 0) triHelper(n - 1, l :+ (1 + n /\
    \ 2))\n            else triHelper(n - 1, l :+ (l(l.length - 1) + l(l.length -\
    \ 2) + l(l.length - 3)))\n        }\n        triHelper(n, List(1l))", "      \
    \  var l = ListBuffer[Long]()\n        l += 1\n        l += 3\n        l += 2\n\
    \        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1 + i /\
    \ 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n    \
    \    l.toList", "        var result = ListBuffer[Long]()\n        result += 1\n\
    \        result += 3\n        result += 2\n        for (i <- 3 to n.toInt) {\n\
    \            if (i % 2 == 0) {\n                result += (1 + i / 2)\n      \
    \      } else {\n                result += (result(i - 1) + result(i - 2) + result(i\
    \ + 1))\n            }\n        }\n        result.toList", "        val l = new\
    \ ListBuffer[Long]\n        l += 1\n        l += 3\n        l += 2\n        for\
    \ (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1 + i / 2)\n      \
    \      else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n        l.toList",
  "        def tri1(n : Long, l : List[Long]) : List[Long] = {\n            if (n\
    \ == 0) l\n            else if (n % 2 == 0) tri1(n - 1, l :+ (1 + n / 2))\n  \
    \          else tri1(n - 1, l :+ (l(l.length - 1) + l(l.length - 2) + l(l.length\
    \ - 3)))\n        }\n        tri1(n, List[Long](1))", "        // Fill up this\
    \ function body\n        // You can add another function as well, if required\n\
    \        var seq = new ListBuffer[Long]\n        seq += 1\n        seq += 3\n\
    \        seq += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 ==\
    \ 0) seq += (1 + i / 2)\n            else seq += (seq(i - 1) + seq(i - 2) + seq(i\
    \ + 1))\n        }\n        seq.toList", "        var a = 1l\n        var b =\
    \ 3l\n        var c = 2l\n        var d = 0l\n        var l = List[Long]()\n \
    \       l = l :+ a\n        l = l :+ b\n        l = l :+ c\n        for (i <-\
    \ 3 to n.toInt) {\n            if (i % 2 == 0) {\n                d = 1 + i /\
    \ 2\n            } else {\n                d = a + b + c\n            }\n    \
    \        a = b\n            b = c\n            c = d\n            l = l :+ d\n\
    \        }\n        return l", "        val m = n + 1\n        val a = new Array[Long](m.toInt)\n\
    \        a(0) = 1\n        a(1) = 3\n        a(2) = 2\n        for (i <- 3 to\
    \ m.toInt - 1) {\n            if (i % 2 == 0) a(i) = 1 + i / 2\n            else\
    \ a(i) = a(i - 1) + a(i - 2) + a(i + 1)\n        }\n        return a.toList",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var result = List[Long]()\n        result = result\
    \ :+ 1\n        result = result :+ 3\n        result = result :+ 2\n        for\
    \ (i <- 3 to n.toInt) {\n            if (i % 2 == 0) {\n                result\
    \ = result :+ (1 + i / 2)\n            } else {\n                result = result\
    \ :+ (result(i - 1) + result(i - 2) + result(i + 1))\n            }\n        }\n\
    \        return result", "        var l = new ListBuffer[Long]\n        l += 1\n\
    \        l += 3\n        l += 2\n        for (i <- 3 to n.toInt) {\n         \
    \   if (i % 2 == 0) {\n                l += (1 + i / 2)\n            } else {\n\
    \                l += (l(i - 1) + l(i - 2) + l(i + 1))\n            }\n      \
    \  }\n        return l.toList", "        var l = List[Long]()\n        for (i\
    \ <- 0 to n.toInt) {\n            if (i == 0) l = l :+ 1\n            else if\
    \ (i == 1) l = l :+ 3\n            else if (i == 2) l = l :+ 2\n            else\
    \ if (i % 2 == 0) l = l :+ (1 + i / 2)\n            else l = l :+ (l(i - 1) +\
    \ l(i - 2) + l(i + 1))\n        }\n        return l", "        val l = new ListBuffer[Long]\n\
    \        l += 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i\
    \ - 1) + l(i - 2) + l(i + 1))\n        }\n        l.toList", "        // Fill\
    \ up this function body\n        // You may also define new functions as you wish\n\
    \        // to make the code more readable\n        var l = List[Long]()\n   \
    \     l = l :+ 1\n        l = l :+ 3\n        l = l :+ 2\n        for (i <- 3\
    \ to n.toInt) {\n            if (i % 2 == 0) {\n                l = l :+ (1 +\
    \ i / 2)\n            } else {\n                l = l :+ (l(i - 1) + l(i - 2)\
    \ + l(i + 1))\n            }\n        }\n        return l", "        var result\
    \ = new ListBuffer[Long]\n        result += 1\n        result += 3\n        result\
    \ += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) result\
    \ += (1 + i / 2)\n            else result += (result(i - 1) + result(i - 2) +\
    \ result(i + 1))\n        }\n        result.toList", "        // Fill up this\
    \ function body\n        // 'n' is the number of elements in the Tribonacci sequence\n\
    \        // You have to return a list of the first n + 1 numbers of the Tribonacci\
    \ sequence\n        var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n\
    \            if (i == 1) l = l :+ 3\n            else if (i == 2) l = l :+ 1\n\
    \            else if (i == 3) l = l :+ 2\n            else {\n               \
    \ if (i % 2 == 0) l = l :+ (1 + i / 2)\n                else l = l :+ (l(i - 2)\
    \ + l(i - 3) + l(i - 1))\n            }\n        }\n        l", "        var lst\
    \ = new ListBuffer[Long]\n        lst += 1\n        lst += 3\n        for (i <-\
    \ 2 to n.toInt) {\n            if (i % 2 == 0) lst += (1 + i / 2)\n          \
    \  else lst += (lst(i - 1) + lst(i - 2) + lst(i + 1))\n        }\n        lst.toList",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var list = new ListBuffer[Long]()\n        list\
    \ += 1\n        list += 3\n        list += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                list += (1 + i / 2)\n    \
    \        } else {\n                list += (list(i - 1) + list(i - 2) + list(i\
    \ + 1))\n            }\n        }\n        list.toList", "        val result =\
    \ new ListBuffer[Long]\n        result += 1\n        result += 3\n        for\
    \ (i <- 2 to n.toInt) {\n            if (i % 2 == 0) result += (1 + i / 2)\n \
    \           else result += (result(i - 1) + result(i - 2) + result(i + 1))\n \
    \       }\n        result.toList", "        var l = List[Long]()\n        for\
    \ (i <- 0 to n.toInt) {\n            if (i == 0) l = l :+ 1\n            else\
    \ if (i == 1) l = l :+ 3\n            else if (i == 2) l = l :+ 2\n          \
    \  else if (i % 2 == 0) l = l :+ (1 + i / 2)\n            else l = l :+ (l(i -\
    \ 1) + l(i - 2) + l(i + 1))\n        }\n        return l", "        val l = new\
    \ ListBuffer[Long]\n        l += 1\n        l += 3\n        l += 2\n        for\
    \ (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1 + i / 2)\n      \
    \      else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n        l.toList",
  "        // Fill up this function body\n        // 'n' is the number of elements\
    \ in the Tribonacci sequence\n        var list = List[Long]()\n        for (i\
    \ <- 1 to n.toInt) {\n            if (i == 1) list = list :+ 3\n            else\
    \ if (i == 2) list = list :+ 1\n            else if (i == 3) list = list :+ 2\n\
    \            else if (i % 2 == 0) list = list :+ (1 + i / 2)\n            else\
    \ list = list :+ (list(i - 2) + list(i - 3) + list(i - 1))\n        }\n      \
    \  list", "        var l = List[Long]()\n        for (i <- 0 to n.toInt) {\n \
    \           if (i == 0) l = 1 :: l\n            else if (i == 1) l = 3 :: l\n\
    \            else if (i == 2) l = 2 :: l\n            else if (i % 2 == 0) l =\
    \ (1 + i / 2) :: l\n            else l = (l(0) + l(1) + l(2)) :: l\n        }\n\
    \        l.reverse", "        var l = ListBuffer[Long]()\n        l += 1\n   \
    \     l += 3\n        l += 2\n        for (i <- 3 to n.toInt) {\n            if\
    \ (i % 2 == 0) l += (1 + i / 2)\n            else l += (l(i - 1) + l(i - 2) +\
    \ l(i + 1))\n        }\n        l.toList", "        // Fill up this function body\n\
    \        // 'n' is the number of elements in the Tribonacci sequence\n       \
    \ // You have to return a list of Long\n        var l = List[Long]()\n       \
    \ l = l :+ 1\n        l = l :+ 3\n        l = l :+ 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                l = l :+ (1 + i / 2)\n   \
    \         } else {\n                l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n\
    \            }\n        }\n        l", "        def triHelper(n : Long, acc :\
    \ List[Long]) : List[Long] = {\n            if (n == 0) acc\n            else\
    \ if (n == 1) triHelper(n - 1, acc :+ 3)\n            else if (n % 2 == 0) triHelper(n\
    \ - 1, acc :+ (1 + n / 2))\n            else triHelper(n - 1, acc :+ (acc(acc.length\
    \ - 1) + acc(acc.length - 2) + acc(acc.length - 3)))\n        }\n        triHelper(n,\
    \ List[Long]())", "        var result = List[Long]()\n        for (i <- 0 to n.toInt)\
    \ {\n            if (i == 0) result = result :+ 1\n            else if (i == 1)\
    \ result = result :+ 3\n            else if (i == 2) result = result :+ 2\n  \
    \          else if (i % 2 == 0) result = result :+ (1 + i / 2)\n            else\
    \ result = result :+ (result(i - 1) + result(i - 2) + result(i + 1))\n       \
    \ }\n        result", "        // Fill up this function body\n        // You can\
    \ add another function as well, if required\n        var l = ListBuffer[Long]()\n\
    \        l += 1\n        l += 3\n        l += 2\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                l += 1 + i / 2\n         \
    \   } else {\n                l += l(i - 1) + l(i - 2) + l(i + 1)\n          \
    \  }\n        }\n        l.toList", "        var l = List[Long]()\n        for\
    \ (i <- 0 to n.toInt) {\n            if (i == 0) l = l :+ 1\n            else\
    \ if (i == 1) l = l :+ 3\n            else if (i == 2) l = l :+ 2\n          \
    \  else if (i % 2 == 0) l = l :+ (1 + i / 2)\n            else l = l :+ (l(i -\
    \ 1) + l(i - 2) + l(i + 1))\n        }\n        return l", "        // Fill up\
    \ this function body\n        // You can add another function as well, if required\n\
    \        var l = List[Long]()\n        for (i <- 0 to n.toInt) {\n           \
    \ if (i == 0) l = l :+ 1\n            else if (i == 1) l = l :+ 3\n          \
    \  else if (i == 2) l = l :+ 2\n            else if (i % 2 == 0) l = l :+ (1 +\
    \ i / 2)\n            else l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n       \
    \ }\n        l", "        if (n == 0) return List(1)\n        if (n == 1) return\
    \ List(1, 3)\n        if (n == 2) return List(1, 3, 2)\n        var list = List(1,\
    \ 3, 2)\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) list =\
    \ list :+ (1 + i / 2)\n            else list = list :+ (list(i - 1) + list(i -\
    \ 2) + list(i + 1))\n        }\n        return list", "        var a = 1l\n  \
    \      var b = 3l\n        var c = 2l\n        var d = 0l\n        var result\
    \ = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i == 1) result\
    \ = result :+ a\n            else if (i == 2) result = result :+ b\n         \
    \   else if (i == 3) result = result :+ c\n            else {\n              \
    \  d = if (i % 2 == 0) 1 + i / 2 else a + b + c\n                a = b\n     \
    \           b = c\n                c = d\n                result = result :+ d\n\
    \            }\n        }\n        result", "        def tri_rec(n : Long, l :\
    \ List[Long]) : List[Long] = {\n            if (n == 0) l\n            else if\
    \ (n % 2 == 0) tri_rec(n - 1, l :+ (1 + n / 2))\n            else tri_rec(n -\
    \ 1, l :+ (l(l.length - 1) + l(l.length - 2) + l(l.length - 3)))\n        }\n\
    \        tri_rec(n, List(1))", "        var lst = List[Long](1, 3, 2)\n      \
    \  for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) lst = lst :+ (1 + i\
    \ / 2)\n            else lst = lst :+ (lst(i - 1) + lst(i - 2) + lst(i + 1))\n\
    \        }\n        return lst", "        var a = 1l\n        var b = 3l\n   \
    \     var c = 2l\n        var d = 8l\n        var result = List[Long](a, b, c,\
    \ d)\n        for (i <- 4l to n) {\n            if (i % 2 == 0) {\n          \
    \      a = b\n                b = c\n                c = d\n                d\
    \ = 1 + i / 2\n                result = result :+ d\n            } else {\n  \
    \              a = b\n                b = c\n                c = d\n         \
    \       d = a + b + c\n                result = result :+ d\n            }\n \
    \       }\n        return result", "        // Fill up this function body\n  \
    \      // You can add another function as well, if required\n        var lst =\
    \ List[Long]()\n        var a = 1l\n        var b = 3l\n        var c = 2l\n \
    \       lst = lst :+ a\n        lst = lst :+ b\n        lst = lst :+ c\n     \
    \   for (i <- 4l to n) {\n            if (i % 2 == 0) {\n                a = 1\
    \ + i / 2\n                lst = lst :+ a\n            }\n            else {\n\
    \                a = b + c + a\n                lst = lst :+ a\n             \
    \   b = c\n                c = a\n            }\n        }\n        lst", "  \
    \      val l = new ListBuffer[Long]\n        l += 1\n        l += 3\n        l\
    \ += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1\
    \ + i / 2)\n            else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n\
    \        l.toList", "        var l = ListBuffer[Long]()\n        l += 1\n    \
    \    l += 3\n        l += 2\n        for (i <- 4l to n) {\n            if (i %\
    \ 2 == 0) l += (1 + i / 2)\n            else l += (l(i.toInt - 1) + l(i.toInt\
    \ - 2) + l(i.toInt + 1))\n        }\n        return l.toList", "        var result\
    \ = List[Long]()\n        var a = 1l\n        var b = 3l\n        var c = 2l\n\
    \        result = result :+ a\n        result = result :+ b\n        result =\
    \ result :+ c\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0)\
    \ {\n                var d = 1 + i / 2\n                result = result :+ d\n\
    \            } else {\n                var d = a + b + c\n                result\
    \ = result :+ d\n                a = b\n                b = c\n              \
    \  c = d\n            }\n        }\n        return result", "        var l = new\
    \ ListBuffer[Long]\n        l += 1\n        l += 3\n        l += 2\n        for\
    \ (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l += (1 + i / 2)\n      \
    \      else l += (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n        l.toList",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var l = List[Long]()\n        for (i <- 0 to n.toInt)\
    \ {\n            if (i == 0) {\n                l = l :+ 1\n            } else\
    \ if (i == 1) {\n                l = l :+ 3\n            } else if (i == 2) {\n\
    \                l = l :+ 2\n            } else if (i % 2 == 0) {\n          \
    \      l = l :+ (1 + i / 2)\n            } else {\n                l = l :+ (l(i\
    \ - 1) + l(i - 2) + l(i + 1))\n            }\n        }\n        l", "       \
    \ var l = List[Long]()\n        l = l :+ 1\n        l = l :+ 3\n        l = l\
    \ :+ 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l = l :+\
    \ (1 + i / 2)\n            else l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n  \
    \      }\n        return l", "        var result = new ListBuffer[Long]\n    \
    \    result += 1\n        result += 3\n        if (n == 1) return result.toList\n\
    \        result += 2\n        if (n == 2) return result.toList\n        for (i\
    \ <- 3 to n.toInt) {\n            if (i % 2 == 0) result += (1 + i / 2)\n    \
    \        else result += (result(i - 1) + result(i - 2) + result(i + 1))\n    \
    \    }\n        return result.toList", "        var list = ListBuffer[Long]()\n\
    \        list += 1\n        list += 3\n        list += 2\n        for (i <- 3\
    \ to n.toInt) {\n            if (i % 2 == 0) list += (1 + i / 2)\n           \
    \ else list += (list(i - 1) + list(i - 2) + list(i + 1))\n        }\n        list.toList",
  "        var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i == 1) l = l :+ 1\n            else if (i == 2) l = l :+ 3\n            else\
    \ if (i == 3) l = l :+ 2\n            else if (i % 2 == 0) l = l :+ (1 + i / 2)\n\
    \            else l = l :+ (l(i - 2) + l(i - 3) + l(i - 1))\n        }\n     \
    \   return l", "        val result = new ArrayBuffer[Long]()\n        result +=\
    \ 1\n        result += 3\n        if (n == 1) return result.toList\n        result\
    \ += 2\n        if (n == 2) return result.toList\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) result += (1 + i / 2)\n            else result\
    \ += (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n        result.toList",
  "        // Fill up this function body\n        // 'n' is the number of elements\
    \ in the Tribonacci sequence\n        // You have to return a list of the first\
    \ n + 1 numbers of the Tribonacci sequence\n        // For example:\n        //\
    \ >>> tri((3l))\n        // (List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong))\n\
    \        var lst = List[Long]()\n        for (i <- 1 to n.toInt) {\n         \
    \   if (i == 1) {\n                lst = 1l :: lst\n            } else if (i ==\
    \ 2) {\n                lst = 3l :: lst\n            } else if (i == 3) {\n  \
    \              lst = 2l :: lst\n            } else {\n                if (i %\
    \ 2 == 0) {\n                    lst = (1 + i / 2) :: lst\n                } else\
    \ {\n                    lst = (lst(0) + lst(1) + lst(2)) :: lst\n           \
    \     }\n            }\n        }\n        lst.reverse", "        def tri_rec(n\
    \ : Long, l : List[Long]) : List[Long] = {\n            if (n == 0) l\n      \
    \      else if (n % 2 == 0) tri_rec(n - 1, l :+ (1 + n / 2))\n            else\
    \ tri_rec(n - 1, l :+ (l(l.length - 1) + l(l.length - 2) + l(l.length - 3)))\n\
    \        }\n        tri_rec(n, List(1l))", "        if (n == 0) return List(1)\n\
    \        if (n == 1) return List(1, 3)\n        if (n == 2) return List(1, 3,\
    \ 2)\n        var result = List(1, 3, 2)\n        var i = 3\n        while (i\
    \ <= n) {\n            if (i % 2 == 0) result = result :+ (1 + i / 2)\n      \
    \      else result = result :+ (result(i - 1) + result(i - 2) + result(i + 1))\n\
    \            i += 1\n        }\n        return result", "        var result =\
    \ ListBuffer[Long]()\n        result += 1\n        result += 3\n        result\
    \ += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) {\n   \
    \             result += 1 + i / 2\n            } else {\n                result\
    \ += result(i - 1) + result(i - 2) + result(i + 1)\n            }\n        }\n\
    \        result.toList"]
stop_tokens:
- "\n    }\n"
