name: HumanEval_73_smallest_change
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list arr of integers, find the minimum number of elements that\n\
  \    // need to be changed to make the list palindromic. A palindromic list is a\
  \ list that\n    // is read the same backwards and forwards. In one change, you\
  \ can change one element to any other element.\n    // For example:\n    // >>>\
  \ smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 4l.toLong,\
  \ 7l.toLong, 9l.toLong, 6l.toLong)))\n    // (4l)\n    // >>> smallestChange((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 2l.toLong)))\n    // (1l)\n\
  \    // >>> smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong,\
  \ 1l.toLong)))\n    // (0l)\n    def smallestChange(arr : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(smallestChange((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 5l.toLong, 4l.toLong, 7l.toLong, 9l.toLong, 6l.toLong)))\
  \ == (4l));\n    assert(smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
  \ 4l.toLong, 3l.toLong, 2l.toLong, 2l.toLong))) == (1l));\n    assert(smallestChange((List[Long](1l.toLong,\
  \ 4l.toLong, 2l.toLong))) == (1l));\n    assert(smallestChange((List[Long](1l.toLong,\
  \ 4l.toLong, 4l.toLong, 2l.toLong))) == (1l));\n    assert(smallestChange((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 2l.toLong, 1l.toLong))) == (0l));\n    assert(smallestChange((List[Long](3l.toLong,\
  \ 1l.toLong, 1l.toLong, 3l.toLong))) == (0l));\n    assert(smallestChange((List[Long](1l.toLong)))\
  \ == (0l));\n    assert(smallestChange((List[Long](0l.toLong, 1l.toLong))) == (1l));\n\
  \    }\n\n}\n"
completions: ["        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i +\
    \ 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (k <-\
    \ 2 until n) {\n            for (i <- 0 until n - k) {\n                dp(i)(i\
    \ + k) = min(dp(i + 1)(i + k - 1) + abs(arr(i) - arr(i + k)), dp(i)(i + k - 1)\
    \ + abs(arr(i + k) - arr(i + k - 1)))\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n        \
    \        if (i == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n\
    \            }\n        }\n        for (i <- 0 until n) {\n            for (j\
    \ <- 0 until n) {\n                if (i >= j) dp(i)(j) = 0\n                else\
    \ {\n                    if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n \
    \                   else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n    \
    \            }\n            }\n        }\n        dp(0)(n - 1)", "        val\
    \ n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <-\
    \ 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i +\
    \ 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (i <- n - 3 to 0 by -1)\
    \ {\n            for (j <- i + 2 until n) {\n                dp(i)(j) = min(dp(i\
    \ + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          for (j <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n\
    \                else dp(i)(j) = Long.MaxValue\n            }\n        }\n   \
    \     for (i <- 0 until n) {\n            for (j <- 0 until n) {\n           \
    \     if (i == j) dp(i)(j) = 0\n                else if (j == i + 1) dp(i)(j)\
    \ = abs(arr(i) - arr(j))\n                else {\n                    for (k <-\
    \ i until j) {\n                        dp(i)(j) = min(dp(i)(j), dp(i)(k) + dp(k\
    \ + 1)(j) + abs(arr(i) - arr(j)))\n                    }\n                }\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        var dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (l <- 2 until n) {\n            for (i\
    \ <- 0 until n - l) {\n                val j = i + l\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          for (j <- 0 until n) {\n                dp(i)(j) = Long.MaxValue\n\
    \            }\n        }\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n        }\n        for (i <- 0 until n - 1) {\n            dp(i)(i + 1)\
    \ = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n        for (k <- 2 until n)\
    \ {\n            for (i <- 0 until n - k) {\n                val j = i + k\n \
    \               if (arr(i) == arr(j)) {\n                    dp(i)(j) = dp(i +\
    \ 1)(j - 1)\n                } else {\n                    dp(i)(j) = min(dp(i\
    \ + 1)(j), dp(i)(j - 1)) + 1\n                }\n            }\n        }\n  \
    \      dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for\
    \ (i <- n - 3 to 0 by -1) {\n            for (j <- i + 2 until n) {\n        \
    \        dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1)\
    \ + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (i <- n - 3 to 0 by\
    \ -1) {\n            for (j <- i + 2 until n) {\n                dp(i)(j) = min(dp(i\
    \ + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (l <- 3 to n) {\n            for (i <-\
    \ 0 to n - l) {\n                val j = i + l - 1\n                dp(i)(j) =\
    \ min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (len <- 3 to n) {\n            for (i\
    \ <- 0 to n - len) {\n                val j = i + len - 1\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (k <- 2 until n) {\n            for (i\
    \ <- 0 until n - k) {\n                val j = i + k\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (k <- 2 until n) {\n            for (i\
    \ <- 0 until n - k) {\n                val j = i + k\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i)\
    \ = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) = if (arr(i) == arr(i + 1))\
    \ 0 else 1\n        for (k <- 2 until n) {\n            for (i <- 0 until n -\
    \ k) {\n                val j = i + k\n                dp(i)(j) = min(dp(i + 1)(j)\
    \ + 1, dp(i)(j - 1) + 1)\n                if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j),\
    \ dp(i + 1)(j - 1))\n            }\n        }\n        dp(0)(n - 1)", "      \
    \  val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i\
    \ <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (k <- 2 until n) {\n\
    \            for (i <- 0 until n - k) {\n                dp(i)(i + k) = min(dp(i\
    \ + 1)(i + k - 1) + abs(arr(i) - arr(i + k)), dp(i)(i + k - 1) + abs(arr(i + k)\
    \ - arr(i + k - 1)))\n            }\n        }\n        dp(0)(n - 1)", "     \
    \   val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (l <- 3 to n) {\n  \
    \          for (i <- 0 to n - l) {\n                val j = i + l - 1\n      \
    \          dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1)\
    \ + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n - 1)",
  "        def helper(arr : List[Long], i : Int, j : Int, count : Long) : Long = {\n\
    \            if (i >= j) count\n            else if (arr(i) == arr(j)) helper(arr,\
    \ i + 1, j - 1, count)\n            else {\n                val count1 = helper(arr,\
    \ i + 1, j, count + 1)\n                val count2 = helper(arr, i, j - 1, count\
    \ + 1)\n                min(count1, count2)\n            }\n        }\n      \
    \  helper(arr, 0, arr.length - 1, 0)", "        if (arr.length == 0) return 0l\n\
    \        var count = 0l\n        for (i <- 0 until arr.length / 2) {\n       \
    \     if (arr(i) != arr(arr.length - 1 - i)) count += 1\n        }\n        count",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (l <- 3 to n) {\n  \
    \          for (i <- 0 to n - l) {\n                val j = i + l - 1\n      \
    \          dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1)\
    \ + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (i <- 2 until n) {\n\
    \            for (j <- 0 until n - i) {\n                dp(j)(j + i) = min(dp(j\
    \ + 1)(j + i - 1) + abs(arr(j) - arr(j + i)), dp(j + 1)(j + i) + abs(arr(j) -\
    \ arr(j + i - 1)))\n            }\n        }\n        dp(0)(n - 1)", "       \
    \ val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i\
    \ <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i\
    \ + 1) = 0\n        }\n        for (i <- 2 until n) {\n            for (j <- 0\
    \ until n - i) {\n                dp(j)(j + i) = min(dp(j + 1)(j + i - 1) + abs(arr(j)\
    \ - arr(j + i)), dp(j + 1)(j + i) + 1, dp(j)(j + i - 1) + 1)\n            }\n\
    \        }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp\
    \ = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n  \
    \      }\n        for (k <- 2 until n) {\n            for (i <- 0 until n - k)\
    \ {\n                val j = i + k\n                dp(i)(j) = min(dp(i + 1)(j)\
    \ + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n     \
    \       }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n   \
    \     val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n     \
    \       dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i\
    \ + 1))\n        }\n        for (k <- 2 until n) {\n            for (i <- 0 until\
    \ n - k) {\n                val j = i + k\n                dp(i)(j) = min(dp(i\
    \ + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (k <- 2 until n) {\n            for (i\
    \ <- 0 until n - k) {\n                dp(i)(i + k) = min(dp(i + 1)(i + k - 1)\
    \ + abs(arr(i) - arr(i + k)), dp(i)(i + k - 1) + abs(arr(i + k) - arr(i + k -\
    \ 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (l <- 3 to n) {\n            for (i <-\
    \ 0 to n - l) {\n                val j = i + l - 1\n                dp(i)(j) =\
    \ min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = if (arr(i)\
    \ == arr(i + 1)) 0 else 1\n        }\n        for (k <- 2 until n) {\n       \
    \     for (i <- 0 until n - k) {\n                val j = i + k\n            \
    \    dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n                if (arr(i)\
    \ == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n            }\n     \
    \   }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i > 0) dp(i)(i - 1) = 0\n        }\n        for (l <- 2 to n) {\n         \
    \   for (i <- 0 to n - l) {\n                val j = i + l - 1\n             \
    \   if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n                else dp(i)(j)\
    \ = min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i +\
    \ 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (i <-\
    \ 2 until n) {\n            for (j <- 0 until n - i) {\n                dp(j)(j\
    \ + i) = min(dp(j + 1)(j + i - 1) + abs(arr(j) - arr(j + i)), dp(j + 1)(j + i)\
    \ + abs(arr(j) - arr(j + i - 1)))\n            }\n        }\n        dp(0)(n -\
    \ 1)", "        def recurse(arr : List[Long], left : Int, right : Int, count :\
    \ Long) : Long = {\n            if (left >= right) count\n            else {\n\
    \                val newCount = if (arr(left) != arr(right)) count + 1 else count\n\
    \                recurse(arr, left + 1, right - 1, newCount)\n            }\n\
    \        }\n        recurse(arr, 0, arr.length - 1, 0)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i < n - 1) {\n                dp(i)(i\
    \ + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n            }\n        }\n      \
    \  for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n                val\
    \ j = i + l - 1\n                if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j\
    \ - 1)\n                else dp(i)(j) = 1 + min(dp(i + 1)(j), dp(i)(j - 1))\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (k <- 2 until n) {\n            for (i\
    \ <- 0 until n - k) {\n                val j = i + k\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i + 1) = if (arr(i)\
    \ == arr(i + 1)) 0 else 1\n        }\n        for (i <- n - 3 to 0 by -1) {\n\
    \            for (j <- i + 2 until n) {\n                dp(i)(j) = min(dp(i +\
    \ 1)(j) + 1, dp(i)(j - 1) + 1)\n                if (arr(i) == arr(j)) dp(i)(j)\
    \ = min(dp(i)(j), dp(i + 1)(j - 1))\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i +\
    \ 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (i <-\
    \ n - 3 to 0 by -1) {\n            for (j <- i + 2 until n) {\n              \
    \  dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j)\
    \ - arr(j - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val\
    \ n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <-\
    \ 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i +\
    \ 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n        for (i <- n - 3\
    \ to 0 by -1) {\n            for (j <- i + 2 until n) {\n                dp(i)(j)\
    \ = min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n                if (arr(i) == arr(j))\
    \ dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n            }\n        }\n     \
    \   dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n -\
    \ 1) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        for (l <- 3 to\
    \ n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n\
    \                dp(i)(j) = if (arr(i) == arr(j)) dp(i + 1)(j - 1) else min(dp(i\
    \ + 1)(j), dp(i)(j - 1)) + 1\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (l <- 3 to n) {\n  \
    \          for (i <- 0 to n - l) {\n                val j = i + l - 1\n      \
    \          dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1)\
    \ + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i\
    \ + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n        for (k <- 2 until\
    \ n) {\n            for (i <- 0 until n - k) {\n                val j = i + k\n\
    \                dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n        \
    \        if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n  \
    \          }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (k <- 2 until n) {\n            for (i\
    \ <- 0 until n - k) {\n                dp(i)(i + k) = min(dp(i + 1)(i + k - 1)\
    \ + abs(arr(i) - arr(i + k)), dp(i)(i + k - 1) + abs(arr(i + k) - arr(i + k -\
    \ 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) {\n                dp(i)(i\
    \ + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n            }\n        }\n      \
    \  for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n          \
    \      dp(i)(i + k) = min(dp(i + 1)(i + k - 1) + (if (arr(i) == arr(i + k)) 0\
    \ else 1), dp(i)(i + k - 1) + 1)\n            }\n        }\n        dp(0)(n -\
    \ 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i +\
    \ 1 < n) {\n                dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n\
    \            }\n        }\n        for (l <- 3 to n) {\n            for (i <-\
    \ 0 to n - l) {\n                val j = i + l - 1\n                if (arr(i)\
    \ == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n                else dp(i)(j) = 1 +\
    \ min(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n -\
    \ 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i +\
    \ 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (k <-\
    \ 2 until n) {\n            for (i <- 0 until n - k) {\n                val j\
    \ = i + k\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i +\
    \ 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n  \
    \      dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i < n - 1) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n \
    \       for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n           \
    \     val j = i + l - 1\n                dp(i)(j) = dp(i + 1)(j - 1) + (if (arr(i)\
    \ == arr(j)) 0 else 1)\n                for (k <- i + 1 to j - 1) {\n        \
    \            dp(i)(j) = min(dp(i)(j), dp(i)(k) + dp(k + 1)(j))\n             \
    \   }\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (i <- n - 3 to 0 by -1) {\n          \
    \  for (j <- i + 2 until n) {\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i)\
    \ - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n   \
    \     }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp =\
    \ Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n  \
    \      }\n        for (k <- 2 until n) {\n            for (i <- 0 until n - k)\
    \ {\n                val j = i + k\n                dp(i)(j) = min(dp(i + 1)(j)\
    \ + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n     \
    \       }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n   \
    \     val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n     \
    \       dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i\
    \ + 1))\n        }\n        for (k <- 2 until n) {\n            for (i <- 0 until\
    \ n - k) {\n                dp(i)(i + k) = min(dp(i + 1)(i + k - 1) + abs(arr(i)\
    \ - arr(i + k)), dp(i)(i + k - 1) + abs(arr(i + k) - arr(i + k - 1)))\n      \
    \      }\n        }\n        dp(0)(n - 1)", "        var min = Long.MaxValue\n\
    \        for (i <- 0 until arr.length) {\n            var count = 0l\n       \
    \     for (j <- 0 until arr.length / 2) {\n                if (arr(j) != arr(arr.length\
    \ - 1 - j)) count += 1\n            }\n            min = min min count\n     \
    \   }\n        min", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for\
    \ (i <- n - 3 to 0 by -1) {\n            for (j <- i + 2 until n) {\n        \
    \        dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1)\
    \ + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (i <- 2 until n) {\n\
    \            for (j <- 0 until n - i) {\n                dp(j)(j + i) = min(dp(j\
    \ + 1)(j + i - 1) + abs(arr(j) - arr(j + i)), dp(j + 1)(j + i) + abs(arr(j) -\
    \ arr(j + i - 1)))\n            }\n        }\n        dp(0)(n - 1)", "       \
    \ val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i\
    \ <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (l <- 3 to n) {\n  \
    \          for (i <- 0 to n - l) {\n                val j = i + l - 1\n      \
    \          dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1)\
    \ + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (i <- 2 until n) {\n\
    \            for (j <- 0 until n - i) {\n                dp(j)(j + i) = min(dp(j\
    \ + 1)(j + i - 1) + abs(arr(j) - arr(j + i)), dp(j + 1)(j + i) + abs(arr(j) -\
    \ arr(j + i - 1)))\n            }\n        }\n        dp(0)(n - 1)", "       \
    \ val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i\
    \ <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (k <- 2 until n) {\n\
    \            for (i <- 0 until n - k) {\n                val j = i + k\n     \
    \           dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j -\
    \ 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n -\
    \ 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i +\
    \ 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (k <-\
    \ 2 until n) {\n            for (i <- 0 until n - k) {\n                dp(i)(i\
    \ + k) = min(dp(i + 1)(i + k - 1) + abs(arr(i) - arr(i + k)), dp(i)(i + k - 1)\
    \ + abs(arr(i + k) - arr(i + k - 1)))\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i +\
    \ 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (len\
    \ <- 3 to n) {\n            for (i <- 0 to n - len) {\n                val j =\
    \ i + len - 1\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i\
    \ + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n\
    \        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for\
    \ (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n               \
    \ dp(i)(i + k) = min(dp(i + 1)(i + k) + abs(arr(i) - arr(i + k)), dp(i)(i + k\
    \ - 1) + abs(arr(i + k) - arr(i + k - 1)))\n            }\n        }\n       \
    \ dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for\
    \ (l <- 2 until n) {\n            for (i <- 0 until n - l) {\n               \
    \ val j = i + l\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i\
    \ + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n\
    \        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for\
    \ (i <- n - 3 to 0 by -1) {\n            for (j <- i + 2 until n) {\n        \
    \        dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1)\
    \ + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (i <- n - 3 to 0 by\
    \ -1) {\n            for (j <- i + 2 until n) {\n                dp(i)(j) = min(dp(i\
    \ + 1)(j - 1) + abs(arr(i) - arr(j)), dp(i + 1)(j) + abs(arr(i) - arr(i + 1)),\
    \ dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n       \
    \ dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for\
    \ (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n               \
    \ val j = i + k\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i\
    \ + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n\
    \        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i < n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for\
    \ (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n                val j\
    \ = i + l - 1\n                dp(i)(j) = min(dp(i + 1)(j - 1) + abs(arr(i) -\
    \ arr(j)), min(dp(i + 1)(j), dp(i)(j - 1)))\n            }\n        }\n      \
    \  dp(0)(n - 1)", "        var minChanges = 0l\n        for (i <- 0 until arr.length\
    \ / 2) {\n            if (arr(i) != arr(arr.length - 1 - i)) {\n             \
    \   minChanges += 1\n            }\n        }\n        minChanges", "        val\
    \ n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <-\
    \ 0 until n; j <- 0 until n) dp(i)(j) = Long.MaxValue\n        for (i <- 0 until\
    \ n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) = if (arr(i)\
    \ == arr(i + 1)) 0 else 1\n        for (k <- 2 until n) {\n            for (i\
    \ <- 0 until n - k) {\n                val j = i + k\n                dp(i)(j)\
    \ = min(dp(i)(j), dp(i + 1)(j) + 1)\n                dp(i)(j) = min(dp(i)(j),\
    \ dp(i)(j - 1) + 1)\n                dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1)\
    \ + (if (arr(i) == arr(j)) 0 else 1))\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i +\
    \ 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (i <-\
    \ 2 until n) {\n            for (j <- 0 until n - i) {\n                dp(j)(j\
    \ + i) = min(dp(j + 1)(j + i - 1) + abs(arr(j) - arr(j + i)), dp(j + 1)(j + i)\
    \ + abs(arr(j) - arr(j + i - 1)))\n            }\n        }\n        dp(0)(n -\
    \ 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i <\
    \ n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (k <-\
    \ 2 until n) {\n            for (i <- 0 until n - k) {\n                dp(i)(i\
    \ + k) = min(dp(i + 1)(i + k) + abs(arr(i) - arr(i + k)), dp(i)(i + k - 1) + abs(arr(i\
    \ + k) - arr(i + k - 1)))\n            }\n        }\n        dp(0)(n - 1)", " \
    \       val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n       \
    \ for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n)\
    \ dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (l <- 3 to n)\
    \ {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n\
    \                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j\
    \ - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i\
    \ + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        for (k <- 2 until n) {\n\
    \            for (i <- 0 until n - k) {\n                val j = i + k\n     \
    \           dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n                if\
    \ (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n            }\n\
    \        }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp\
    \ = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n  \
    \      }\n        for (i <- n - 3 to 0 by -1) {\n            for (j <- i + 2 until\
    \ n) {\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)),\
    \ dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n       \
    \ dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n   \
    \             if (i == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n\
    \            }\n        }\n        for (i <- 0 until n) {\n            for (j\
    \ <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n                else\
    \ if (i + 1 == j) dp(i)(j) = if (arr(i) == arr(j)) 0 else 1\n                else\
    \ dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1) + (if (arr(i) == arr(j)) 0 else 1))\n\
    \                for (k <- i until j) {\n                    dp(i)(j) = min(dp(i)(j),\
    \ dp(i)(k) + dp(k + 1)(j))\n                }\n            }\n        }\n    \
    \    dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i < n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for\
    \ (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n                val j\
    \ = i + l - 1\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i\
    \ + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n\
    \        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i < n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for\
    \ (i <- n - 3 to 0 by -1) {\n            for (j <- i + 2 until n) {\n        \
    \        dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1)\
    \ + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) {\n\
    \                dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n            }\n    \
    \    }\n        for (l <- 2 until n) {\n            for (i <- 0 until n - l) {\n\
    \                val j = i + l\n                dp(i)(j) = min(dp(i + 1)(j) +\
    \ abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n       \
    \     }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n     \
    \   val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n       \
    \     dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i\
    \ + 1))\n        }\n        for (k <- 2 until n) {\n            for (i <- 0 until\
    \ n - k) {\n                dp(i)(i + k) = min(dp(i + 1)(i + k - 1) + abs(arr(i)\
    \ - arr(i + k)), dp(i)(i + k - 1) + abs(arr(i + k) - arr(i + k - 1)))\n      \
    \      }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n    \
    \    val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n      \
    \      dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i\
    \ + 1))\n        }\n        for (i <- 0 until n) {\n            for (j <- i +\
    \ 2 until n) {\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i\
    \ + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n\
    \        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i < n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for\
    \ (i <- n - 3 to 0 by -1) {\n            for (j <- i + 2 until n) {\n        \
    \        dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1)\
    \ + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1)\
    \ = if (arr(i) == arr(i + 1)) 0 else 1\n        for (len <- 3 to n) {\n      \
    \      for (i <- 0 to n - len) {\n                val j = i + len - 1\n      \
    \          if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n               \
    \ else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n            }\n       \
    \ }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n -\
    \ 1) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        for (l <- 3 to\
    \ n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n\
    \                if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n         \
    \       else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n            }\n \
    \       }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp\
    \ = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n  \
    \      }\n        for (k <- 2 until n) {\n            for (i <- 0 until n - k)\
    \ {\n                dp(i)(i + k) = min(dp(i + 1)(i + k - 1) + abs(arr(i) - arr(i\
    \ + k)), dp(i)(i + k - 1) + abs(arr(i + k) - arr(i + k - 1)))\n            }\n\
    \        }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp\
    \ = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i + 1 < n) {\n                dp(i)(i + 1) = if (arr(i)\
    \ == arr(i + 1)) 0 else 1\n            }\n        }\n        for (k <- 2 until\
    \ n) {\n            for (i <- 0 until n - k) {\n                val j = i + k\n\
    \                dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n            \
    \    if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n      \
    \      }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n    \
    \    val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n      \
    \      dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i\
    \ + 1))\n        }\n        for (l <- 3 to n) {\n            for (i <- 0 to n\
    \ - l) {\n                val j = i + l - 1\n                dp(i)(j) = min(dp(i\
    \ + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i != n - 1) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (l <- 2 until n) {\n            for (i\
    \ <- 0 until n - l) {\n                dp(i)(i + l) = min(dp(i + 1)(i + l - 1)\
    \ + abs(arr(i) - arr(i + l)), dp(i + 1)(i + l) + abs(arr(i) - arr(i + 1)))\n \
    \           }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i)\
    \ = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) = if (arr(i) == arr(i + 1))\
    \ 0 else 1\n        for (i <- 2 until n) {\n            for (j <- 0 until n -\
    \ i) {\n                dp(j)(j + i) = min(dp(j + 1)(j + i - 1) + (if (arr(j)\
    \ == arr(j + i)) 0 else 2), dp(j + 1)(j + i) + 1, dp(j)(j + i - 1) + 1)\n    \
    \        }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n  \
    \      val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n    \
    \        dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i) -\
    \ arr(i + 1))\n        }\n        for (k <- 2 until n) {\n            for (i <-\
    \ 0 until n - k) {\n                dp(i)(i + k) = min(dp(i + 1)(i + k) + abs(arr(i)\
    \ - arr(i + k)), dp(i)(i + k - 1) + abs(arr(i + k) - arr(i + k - 1)))\n      \
    \      }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n    \
    \    val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n      \
    \      dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i + 1) = if (arr(i) == arr(i\
    \ + 1)) 0 else 1\n        }\n        for (i <- n - 3 to 0 by -1) {\n         \
    \   for (j <- i + 2 until n) {\n                dp(i)(j) = min(dp(i + 1)(j), dp(i)(j\
    \ - 1)) + 1\n                if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i\
    \ + 1)(j - 1))\n            }\n        }\n        dp(0)(n - 1)", "        val\
    \ n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <-\
    \ 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i +\
    \ 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (l <- 3 to n) {\n    \
    \        for (i <- 0 to n - l) {\n                val j = i + l - 1\n        \
    \        dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1)\
    \ + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (l <- 3 to n) {\n  \
    \          for (i <- 0 to n - l) {\n                val j = i + l - 1\n      \
    \          dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1)\
    \ + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (i <- n - 3 to 0 by\
    \ -1) {\n            for (j <- i + 2 until n) {\n                dp(i)(j) = min(dp(i\
    \ + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (k <- 2 until n) {\n            for (i\
    \ <- 0 until n - k) {\n                val j = i + k\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (k <- 2 until n) {\n            for (i\
    \ <- 0 until n - k) {\n                val j = i + k\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        def smallestChange(arr\
    \ : List[Long], i : Int, j : Int, count : Long) : Long = {\n            if (i\
    \ >= j) count\n            else if (arr(i) == arr(j)) smallestChange(arr, i +\
    \ 1, j - 1, count)\n            else {\n                val count1 = smallestChange(arr,\
    \ i + 1, j, count + 1)\n                val count2 = smallestChange(arr, i, j\
    \ - 1, count + 1)\n                min(count1, count2)\n            }\n      \
    \  }\n        smallestChange(arr, 0, arr.length - 1, 0)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (len <- 3 to n) {\n            for (i\
    \ <- 0 to n - len) {\n                val j = i + len - 1\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i)\
    \ = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) = if (arr(i) == arr(i + 1))\
    \ 0 else 1\n        for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n\
    \                val j = i + l - 1\n                if (arr(i) == arr(j)) dp(i)(j)\
    \ = dp(i + 1)(j - 1)\n                else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j\
    \ - 1)) + 1\n            }\n        }\n        dp(0)(n - 1)", "        var minChanges\
    \ = 0l\n        for (i <- 0 until arr.length / 2) {\n            if (arr(i) !=\
    \ arr(arr.length - 1 - i)) minChanges += 1\n        }\n        minChanges", " \
    \       val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n       \
    \ for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n)\
    \ dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n        for (l\
    \ <- 3 to n) {\n            for (i <- 0 to n - l) {\n                val j = i\
    \ + l - 1\n                if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n\
    \                else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n       \
    \     }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n     \
    \   val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n       \
    \     dp(i)(i) = 0\n            if (i + 1 < n) {\n                dp(i)(i + 1)\
    \ = abs(arr(i) - arr(i + 1))\n            }\n        }\n        for (i <- n -\
    \ 3 to 0 by -1) {\n            for (j <- i + 2 until n) {\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (l <- 3 to n) {\n            for (i <-\
    \ 0 to n - l) {\n                val j = i + l - 1\n                dp(i)(j) =\
    \ min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (l <- 3 to n) {\n            for (i <-\
    \ 0 to n - l) {\n                val j = i + l - 1\n                dp(i)(j) =\
    \ min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (l <- 2 until n) {\n            for (i\
    \ <- 0 until n - l) {\n                val j = i + l\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (k <- 2 until n) {\n            for (i\
    \ <- 0 until n - k) {\n                dp(i)(i + k) = min(dp(i + 1)(i + k - 1)\
    \ + abs(arr(i) - arr(i + k)), dp(i)(i + k - 1) + abs(arr(i + k) - arr(i + k -\
    \ 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) {\n                dp(i)(i\
    \ + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n            }\n        }\n      \
    \  for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n                val\
    \ j = i + l - 1\n                if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j\
    \ - 1)\n                else dp(i)(j) = 1 + min(dp(i + 1)(j), dp(i)(j - 1))\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          for (j <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n\
    \                else dp(i)(j) = Long.MaxValue\n            }\n        }\n   \
    \     for (i <- 0 until n) {\n            for (j <- 0 until n) {\n           \
    \     if (i == j) dp(i)(j) = 0\n                else if (i + 1 == j) dp(i)(j)\
    \ = abs(arr(i) - arr(j))\n                else dp(i)(j) = min(dp(i)(j), dp(i +\
    \ 1)(j - 1) + abs(arr(i) - arr(j)))\n                if (i + 1 < n) dp(i)(j) =\
    \ min(dp(i)(j), dp(i + 1)(j) + 1)\n                if (j - 1 >= 0) dp(i)(j) =\
    \ min(dp(i)(j), dp(i)(j - 1) + 1)\n            }\n        }\n        dp(0)(n -\
    \ 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i +\
    \ 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (k <-\
    \ 2 until n) {\n            for (i <- 0 until n - k) {\n                dp(i)(i\
    \ + k) = min(dp(i + 1)(i + k - 1) + abs(arr(i) - arr(i + k)), dp(i)(i + k - 1)\
    \ + abs(arr(i + k) - arr(i + k - 1)))\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i +\
    \ 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (l <-\
    \ 3 to n) {\n            for (i <- 0 to n - l) {\n                val j = i +\
    \ l - 1\n                dp(i)(j) = min(dp(i + 1)(j - 1) + abs(arr(i) - arr(j)),\
    \ dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j -\
    \ 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (i <- n - 3 to 0 by -1) {\n          \
    \  for (j <- i + 2 until n) {\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i)\
    \ - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n   \
    \     }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp =\
    \ Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n  \
    \      }\n        for (k <- 2 until n) {\n            for (i <- 0 until n - k)\
    \ {\n                dp(i)(i + k) = min(dp(i + 1)(i + k - 1) + abs(arr(i) - arr(i\
    \ + k)), dp(i)(i + k - 1) + abs(arr(i + k) - arr(i + k - 1)))\n            }\n\
    \        }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp\
    \ = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i + 1 < n) {\n                dp(i)(i + 1) = if (arr(i)\
    \ == arr(i + 1)) 0 else 1\n            }\n        }\n        for (i <- 2 until\
    \ n) {\n            for (j <- 0 until n - i) {\n                dp(j)(j + i) =\
    \ min(dp(j + 1)(j + i - 1) + (if (arr(j) == arr(j + i)) 0 else 2), dp(j + 1)(j\
    \ + i) + 1, dp(j)(j + i - 1) + 1)\n            }\n        }\n        dp(0)(n -\
    \ 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i +\
    \ 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (k <-\
    \ 2 until n) {\n            for (i <- 0 until n - k) {\n                dp(i)(i\
    \ + k) = min(dp(i + 1)(i + k - 1) + abs(arr(i) - arr(i + k)), dp(i)(i + k - 1)\
    \ + abs(arr(i + k) - arr(i + k - 1)))\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i <\
    \ n - 1) {\n                dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n\
    \            }\n        }\n        for (k <- 2 until n) {\n            for (i\
    \ <- 0 until n - k) {\n                val j = i + k\n                if (arr(i)\
    \ == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n                else dp(i)(j) = min(dp(i\
    \ + 1)(j), dp(i)(j - 1)) + 1\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (i <- 2 until n) {\n\
    \            for (j <- 0 until n - i) {\n                dp(j)(j + i) = min(dp(j\
    \ + 1)(j + i - 1) + abs(arr(j) - arr(j + i)), dp(j + 1)(j + i) + abs(arr(j) -\
    \ arr(j + i - 1)))\n            }\n        }\n        dp(0)(n - 1)", "       \
    \ val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i\
    \ <- 0 until n) {\n            dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (i <- n - 3 to 0 by\
    \ -1) {\n            for (j <- i + 2 until n) {\n                dp(i)(j) = min(dp(i\
    \ + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (k <- 2 until n) {\n            for (i\
    \ <- 0 until n - k) {\n                dp(i)(i + k) = min(dp(i + 1)(i + k - 1)\
    \ + abs(arr(i) - arr(i + k)), dp(i)(i + k - 1) + abs(arr(i + k) - arr(i + k -\
    \ 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (k <- 2 until n) {\n            for (i\
    \ <- 0 until n - k) {\n                dp(i)(i + k) = min(dp(i + 1)(i + k - 1)\
    \ + abs(arr(i) - arr(i + k)), dp(i)(i + k - 1) + abs(arr(i + k) - arr(i + k -\
    \ 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (len <- 3 to n) {\n            for (i\
    \ <- 0 to n - len) {\n                val j = i + len - 1\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        def smallestChangeHelper(arr\
    \ : List[Long], left : Int, right : Int, count : Long) : Long = {\n          \
    \  if (left >= right) count\n            else {\n                val newCount\
    \ = if (arr(left) != arr(right)) count + 1 else count\n                smallestChangeHelper(arr,\
    \ left + 1, right - 1, newCount)\n            }\n        }\n        smallestChangeHelper(arr,\
    \ 0, arr.length - 1, 0)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n   \
    \             if (i == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n\
    \            }\n        }\n        for (k <- 1 until n) {\n            for (i\
    \ <- 0 until n - k) {\n                val j = i + k\n                if (arr(i)\
    \ == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n                else dp(i)(j) = min(dp(i\
    \ + 1)(j), dp(i)(j - 1)) + 1\n            }\n        }\n        dp(0)(n - 1)",
  "        def helper(arr : List[Long], i : Int, j : Int, dp : Array[Array[Long]])\
    \ : Long = {\n            if (i >= j) return 0\n            if (dp(i)(j) != -1)\
    \ return dp(i)(j)\n            if (arr(i) == arr(j)) return helper(arr, i + 1,\
    \ j - 1, dp)\n            dp(i)(j) = min(helper(arr, i + 1, j, dp), helper(arr,\
    \ i, j - 1, dp)) + 1\n            dp(i)(j)\n        }\n        val dp = Array.fill(arr.length,\
    \ arr.length)(-1l)\n        helper(arr, 0, arr.length - 1, dp)", "        val\
    \ n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <-\
    \ 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i +\
    \ 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (k <- 2 until n) {\n \
    \           for (i <- 0 until n - k) {\n                dp(i)(i + k) = min(dp(i\
    \ + 1)(i + k) + abs(arr(i) - arr(i + k)), dp(i)(i + k - 1) + abs(arr(i + k) -\
    \ arr(i + k - 1)))\n            }\n        }\n        dp(0)(n - 1)", "       \
    \ val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i\
    \ <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) {\n  \
    \              dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n           \
    \ }\n        }\n        for (k <- 2 until n) {\n            for (i <- 0 until\
    \ n - k) {\n                val j = i + k\n                dp(i)(j) = min(dp(i\
    \ + 1)(j) + 1, dp(i)(j - 1) + 1)\n                if (arr(i) == arr(j)) dp(i)(j)\
    \ = min(dp(i)(j), dp(i + 1)(j - 1))\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i <\
    \ n - 1) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n      \
    \  for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n          \
    \      val j = i + k\n                if (arr(i) == arr(j)) dp(i)(j) = dp(i +\
    \ 1)(j - 1)\n                else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1)) +\
    \ 1\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (i <- n - 3 to 0 by -1) {\n          \
    \  for (j <- i + 2 until n) {\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i)\
    \ - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n   \
    \     }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp =\
    \ Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n  \
    \      }\n        for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n \
    \               val j = i + l - 1\n                dp(i)(j) = min(dp(i + 1)(j)\
    \ + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n     \
    \       }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n   \
    \     val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n     \
    \       dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i\
    \ + 1))\n        }\n        for (k <- 2 until n) {\n            for (i <- 0 until\
    \ n - k) {\n                dp(i)(i + k) = min(dp(i + 1)(i + k - 1) + abs(arr(i)\
    \ - arr(i + k)), dp(i)(i + k - 1) + abs(arr(i + k) - arr(i + k - 1)))\n      \
    \      }\n        }\n        dp(0)(n - 1)", "        var palindrome = arr.reverse\n\
    \        var count = 0l\n        for (i <- 0 until arr.length) {\n           \
    \ if (arr(i) != palindrome(i)) count += 1\n        }\n        count", "      \
    \  val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i\
    \ <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (l <- 3 to n) {\n  \
    \          for (i <- 0 to n - l) {\n                val j = i + l - 1\n      \
    \          dp(i)(j) = min(dp(i + 1)(j - 1) + abs(arr(i) - arr(j)), dp(i + 1)(j)\
    \ + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n     \
    \       }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n   \
    \     val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n     \
    \       dp(i)(i) = 0\n            if (i + 1 < n) {\n                dp(i)(i +\
    \ 1) = if (arr(i) == arr(i + 1)) 0 else 1\n            }\n        }\n        for\
    \ (i <- n - 3 to 0 by -1) {\n            for (j <- i + 2 until n) {\n        \
    \        dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n                if\
    \ (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n            }\n\
    \        }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp\
    \ = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n  \
    \      }\n        for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n \
    \               val j = i + l - 1\n                dp(i)(j) = min(dp(i + 1)(j)\
    \ + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n     \
    \       }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n   \
    \     val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n     \
    \       dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i\
    \ + 1))\n        }\n        for (l <- 3 to n) {\n            for (i <- 0 to n\
    \ - l) {\n                val j = i + l - 1\n                dp(i)(j) = min(dp(i\
    \ + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (l <- 3 to n) {\n            for (i <-\
    \ 0 to n - l) {\n                val j = i + l - 1\n                dp(i)(j) =\
    \ min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (i <- n - 3 to 0 by -1) {\n          \
    \  for (j <- i + 2 until n) {\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i)\
    \ - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n   \
    \     }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp =\
    \ Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i + 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else\
    \ 1\n        }\n        for (l <- 3 to n) {\n            for (i <- 0 to n - l)\
    \ {\n                val j = i + l - 1\n                dp(i)(j) = min(dp(i +\
    \ 1)(j) + 1, dp(i)(j - 1) + 1)\n                if (arr(i) == arr(j)) dp(i)(j)\
    \ = min(dp(i)(j), dp(i + 1)(j - 1))\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i <\
    \ n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (l <-\
    \ 3 to n) {\n            for (i <- 0 to n - l) {\n                val j = i +\
    \ l - 1\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)),\
    \ dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n       \
    \ dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n -\
    \ 1) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        for (i <- 2 until\
    \ n) {\n            for (j <- 0 until n - i) {\n                dp(j)(j + i) =\
    \ if (arr(j) == arr(j + i)) dp(j + 1)(j + i - 1) else (dp(j + 1)(j + i) min dp(j)(j\
    \ + i - 1)) + 1\n            }\n        }\n        dp(0)(n - 1)", "        val\
    \ n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <-\
    \ 0 until n) {\n            for (j <- 0 until n) {\n                if (i == j)\
    \ dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n            }\n\
    \        }\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n\
    \                if (i + 1 <= j) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j) + 1)\n\
    \                if (i <= j - 1) dp(i)(j) = min(dp(i)(j), dp(i)(j - 1) + 1)\n\
    \                if (i + 1 <= j - 1) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1)\
    \ + (if (arr(i) == arr(j)) 0 else 1))\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i +\
    \ 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n      \
    \  for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n          \
    \      dp(i)(i + k) = min(dp(i + 1)(i + k - 1) + (if (arr(i) == arr(i + k)) 0\
    \ else 1), dp(i)(i + k - 1) + 1)\n            }\n        }\n        dp(0)(n -\
    \ 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i +\
    \ 1 < n) {\n                dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n\
    \            }\n        }\n        for (k <- 2 until n) {\n            for (i\
    \ <- 0 until n - k) {\n                val j = i + k\n                if (arr(i)\
    \ == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n                else dp(i)(j) = 1 +\
    \ min(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n -\
    \ 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i +\
    \ 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (len\
    \ <- 3 to n) {\n            for (i <- 0 to n - len) {\n                val j =\
    \ i + len - 1\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i\
    \ + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n\
    \        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for\
    \ (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n                val j\
    \ = i + l - 1\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i\
    \ + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n\
    \        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n -\
    \ 1) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        for (k <- 2 until\
    \ n) {\n            for (i <- 0 until n - k) {\n                val j = i + k\n\
    \                if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n         \
    \       else dp(i)(j) = 1 + min(dp(i + 1)(j), dp(i)(j - 1))\n            }\n \
    \       }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp\
    \ = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i + 1 < n) dp(i)(i + 1) = 0\n        }\n        for (k\
    \ <- 2 until n) {\n            for (i <- 0 until n - k) {\n                val\
    \ j = i + k\n                dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n\
    \                if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j -\
    \ 1))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (i <- n - 3 to 0 by -1) {\n          \
    \  for (j <- i + 2 until n) {\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i)\
    \ - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n   \
    \     }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp =\
    \ Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i < n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n  \
    \      }\n        for (k <- 2 until n) {\n            for (i <- 0 until n - k)\
    \ {\n                dp(i)(i + k) = min(dp(i + 1)(i + k - 1) + abs(arr(i) - arr(i\
    \ + k)), dp(i)(i + k - 1) + abs(arr(i + k) - arr(i + k - 1)))\n            }\n\
    \        }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp\
    \ = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n  \
    \      }\n        for (i <- n - 3 to 0 by -1) {\n            for (j <- i + 2 until\
    \ n) {\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)),\
    \ dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n       \
    \ dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = 0\n        }\n        for (l <- 2 until n) {\n  \
    \          for (i <- 0 until n - l) {\n                val j = i + l\n       \
    \         dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n                if (arr(i)\
    \ == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n            }\n     \
    \   }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i < n - 1) {\n                dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n   \
    \         }\n        }\n        for (i <- 2 until n) {\n            for (j <-\
    \ 0 until n - i) {\n                dp(j)(j + i) = min(dp(j + 1)(j + i - 1) +\
    \ abs(arr(j) - arr(j + i)), dp(j + 1)(j + i) + abs(arr(j) - arr(j + i - 1)))\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          for (j <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n\
    \                else dp(i)(j) = Long.MaxValue\n            }\n        }\n   \
    \     for (l <- 1 until n) {\n            for (i <- 0 until n - l) {\n       \
    \         val j = i + l\n                if (arr(i) == arr(j)) dp(i)(j) = dp(i\
    \ + 1)(j - 1)\n                else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1))\
    \ + 1\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = if (arr(i)\
    \ == arr(i + 1)) 0 else 1\n        }\n        for (k <- 2 until n) {\n       \
    \     for (i <- 0 until n - k) {\n                dp(i)(i + k) = min(dp(i + 1)(i\
    \ + k - 1) + (if (arr(i) == arr(i + k)) 0 else 1), dp(i)(i + k - 1) + 1)\n   \
    \         }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n \
    \       val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n   \
    \         dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i) -\
    \ arr(i + 1))\n        }\n        for (k <- 2 until n) {\n            for (i <-\
    \ 0 until n - k) {\n                dp(i)(i + k) = min(dp(i + 1)(i + k - 1) +\
    \ abs(arr(i) - arr(i + k)), dp(i)(i + k - 1) + abs(arr(i + k) - arr(i + k - 1)))\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) {\n                dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n            }\n        }\n        for (k <-\
    \ 2 until n) {\n            for (i <- 0 until n - k) {\n                dp(i)(i\
    \ + k) = min(dp(i + 1)(i + k - 1) + abs(arr(i) - arr(i + k)), dp(i)(i + k - 1)\
    \ + abs(arr(i + k) - arr(i + k - 1)))\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i +\
    \ 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (l <-\
    \ 3 to n) {\n            for (i <- 0 to n - l) {\n                val j = i +\
    \ l - 1\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)),\
    \ dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n       \
    \ dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) {\n                dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else\
    \ 1\n            }\n        }\n        for (k <- 2 until n) {\n            for\
    \ (i <- 0 until n - k) {\n                val j = i + k\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n                if (arr(i) == arr(j))\
    \ dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n            }\n        }\n     \
    \   dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n -\
    \ 1) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        for (k <- 2 until\
    \ n) {\n            for (i <- 0 until n - k) {\n                val j = i + k\n\
    \                if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n         \
    \       else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n            }\n \
    \       }\n        dp(0)(n - 1)", "        def recurse(arr : List[Long], left\
    \ : Int, right : Int, count : Long) : Long = {\n            if (left >= right)\
    \ count\n            else if (arr(left) == arr(right)) recurse(arr, left + 1,\
    \ right - 1, count)\n            else recurse(arr, left + 1, right, count + 1)\n\
    \        }\n        recurse(arr, 0, arr.length - 1, 0)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) {\n                dp(i)(i\
    \ + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n            }\n        }\n      \
    \  for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n                val\
    \ j = i + l - 1\n                if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j\
    \ - 1)\n                else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (k <- 2 until n) {\n            for (i\
    \ <- 0 until n - k) {\n                dp(i)(i + k) = min(dp(i + 1)(i + k) + abs(arr(i)\
    \ - arr(i + k)), dp(i)(i + k - 1) + abs(arr(i + k) - arr(i + k - 1)))\n      \
    \      }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n    \
    \    val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n      \
    \      dp(i)(i) = 0\n            if (i != n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i\
    \ + 1))\n        }\n        for (len <- 3 to n) {\n            for (i <- 0 to\
    \ n - len) {\n                val j = i + len - 1\n                dp(i)(j) =\
    \ min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (l <- 3 to n) {\n            for (i <-\
    \ 0 to n - l) {\n                val j = i + l - 1\n                dp(i)(j) =\
    \ min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (k <- 2 until n) {\n            for (i\
    \ <- 0 until n - k) {\n                val j = i + k\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        def helper(arr\
    \ : List[Long], i : Int, j : Int, count : Long) : Long = {\n            if (i\
    \ >= j) count\n            else if (arr(i) == arr(j)) helper(arr, i + 1, j - 1,\
    \ count)\n            else {\n                val count1 = helper(arr, i + 1,\
    \ j, count + 1)\n                val count2 = helper(arr, i, j - 1, count + 1)\n\
    \                min(count1, count2)\n            }\n        }\n        helper(arr,\
    \ 0, arr.length - 1, 0)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for\
    \ (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n               \
    \ val j = i + k\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i\
    \ + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n\
    \        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for\
    \ (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n                val j\
    \ = i + l - 1\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i\
    \ + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n\
    \        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n   \
    \             if (i == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n\
    \            }\n        }\n        for (i <- 0 until n) {\n            for (j\
    \ <- 0 until n) {\n                if (i + 1 <= j) dp(i)(j) = min(dp(i)(j), dp(i\
    \ + 1)(j) + 1)\n                if (i <= j - 1) dp(i)(j) = min(dp(i)(j), dp(i)(j\
    \ - 1) + 1)\n                if (i + 1 <= j - 1) dp(i)(j) = min(dp(i)(j), dp(i\
    \ + 1)(j - 1) + (if (arr(i) == arr(j)) 0 else 1))\n            }\n        }\n\
    \        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n   \
    \             if (i == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n\
    \            }\n        }\n        for (i <- 0 until n) {\n            for (j\
    \ <- 0 until n) {\n                if (i >= j) dp(i)(j) = 0\n                else\
    \ if (i + 1 == j) dp(i)(j) = if (arr(i) == arr(j)) 0 else 1\n                else\
    \ {\n                    dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1) + (if (arr(i)\
    \ == arr(j)) 0 else 1))\n                    dp(i)(j) = min(dp(i)(j), dp(i + 1)(j)\
    \ + 1)\n                    dp(i)(j) = min(dp(i)(j), dp(i)(j - 1) + 1)\n     \
    \           }\n            }\n        }\n        dp(0)(n - 1)", "        val n\
    \ = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0\
    \ until n) {\n            dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i + 1)\
    \ = abs(arr(i) - arr(i + 1))\n        }\n        for (i <- n - 3 to 0 by -1) {\n\
    \            for (j <- i + 2 until n) {\n                dp(i)(j) = min(dp(i +\
    \ 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (l <- 3 to n) {\n            for (i <-\
    \ 0 to n - l) {\n                val j = i + l - 1\n                dp(i)(j) =\
    \ min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (i <- 2 until n) {\n            for (j\
    \ <- 0 until n - i) {\n                dp(j)(j + i) = min(dp(j + 1)(j + i - 1)\
    \ + abs(arr(j) - arr(j + i)), dp(j + 1)(j + i) + abs(arr(j) - arr(j + i - 1)))\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (l <- 3 to n) {\n            for (i <-\
    \ 0 to n - l) {\n                val j = i + l - 1\n                dp(i)(j) =\
    \ min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) {\n                dp(i)(i\
    \ + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n            }\n        }\n      \
    \  for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n                val\
    \ j = i + l - 1\n                if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j\
    \ - 1)\n                else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i)\
    \ = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1) = if (arr(i) == arr(i + 1))\
    \ 0 else 1\n        for (i <- 2 until n) {\n            for (j <- 0 until n -\
    \ i) {\n                dp(j)(j + i) = min(dp(j + 1)(j + i - 1) + (if (arr(j)\
    \ == arr(j + i)) 0 else 2), dp(j + 1)(j + i) + 1, dp(j)(j + i - 1) + 1)\n    \
    \        }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n  \
    \      val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n    \
    \        dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i) -\
    \ arr(i + 1))\n        }\n        for (i <- 2 until n) {\n            for (j <-\
    \ 0 until n - i) {\n                dp(j)(j + i) = min(dp(j + 1)(j + i - 1) +\
    \ abs(arr(j) - arr(j + i)), dp(j + 1)(j + i) + abs(arr(j) - arr(j + i - 1)))\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (i <- n - 3 to 0 by -1) {\n          \
    \  for (j <- i + 2 until n) {\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i)\
    \ - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n   \
    \     }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp =\
    \ Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i + 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else\
    \ 1\n        }\n        for (len <- 3 to n) {\n            for (i <- 0 to n -\
    \ len) {\n                val j = i + len - 1\n                if (arr(i) == arr(j))\
    \ dp(i)(j) = dp(i + 1)(j - 1)\n                else dp(i)(j) = 1 + min(dp(i +\
    \ 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)", "   \
    \     val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (i <- 2 until n) {\n\
    \            for (j <- 0 until n - i) {\n                dp(j)(j + i) = min(dp(j\
    \ + 1)(j + i - 1) + abs(arr(j) - arr(j + i)), dp(j + 1)(j + i) + abs(arr(j) -\
    \ arr(j + i - 1)))\n            }\n        }\n        dp(0)(n - 1)", "       \
    \ val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i\
    \ <- 0 until n) {\n            dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (i <- n - 3 to 0 by\
    \ -1) {\n            for (j <- i + 2 until n) {\n                dp(i)(j) = min(dp(i\
    \ + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (l <- 3 to n) {\n            for (i <-\
    \ 0 to n - l) {\n                val j = i + l - 1\n                dp(i)(j) =\
    \ min(dp(i + 1)(j - 1) + abs(arr(i) - arr(j)), dp(i + 1)(j) + abs(arr(i) - arr(i\
    \ + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n\
    \        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for\
    \ (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n                val j\
    \ = i + l - 1\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i\
    \ + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n\
    \        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for\
    \ (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n               \
    \ val j = i + k\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i\
    \ + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n\
    \        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for\
    \ (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n               \
    \ dp(i)(i + k) = min(dp(i + 1)(i + k - 1) + abs(arr(i) - arr(i + k)), dp(i)(i\
    \ + k - 1) + abs(arr(i + k) - arr(i + k - 1)))\n            }\n        }\n   \
    \     dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for\
    \ (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n               \
    \ val j = i + k\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i\
    \ + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n\
    \        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for\
    \ (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n                val j\
    \ = i + l - 1\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i\
    \ + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n\
    \        dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n   \
    \             if (i == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n\
    \            }\n        }\n        for (l <- 2 to n) {\n            for (i <-\
    \ 0 to n - l) {\n                val j = i + l - 1\n                if (arr(i)\
    \ == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n                else dp(i)(j) = min(dp(i\
    \ + 1)(j), dp(i)(j - 1)) + 1\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1)\
    \ = if (arr(i) == arr(i + 1)) 0 else 1\n        for (i <- 2 until n) {\n     \
    \       for (j <- 0 until n - i) {\n                val k = j + i\n          \
    \      dp(j)(k) = min(dp(j + 1)(k) + 1, dp(j)(k - 1) + 1)\n                if\
    \ (arr(j) == arr(k)) dp(j)(k) = min(dp(j)(k), dp(j + 1)(k - 1))\n            }\n\
    \        }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp\
    \ = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n  \
    \      }\n        for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n \
    \               val j = i + l - 1\n                dp(i)(j) = min(dp(i + 1)(j)\
    \ + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n     \
    \       }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n   \
    \     val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n     \
    \       dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i\
    \ + 1))\n        }\n        for (i <- 2 until n) {\n            for (j <- 0 until\
    \ n - i) {\n                dp(j)(j + i) = min(dp(j + 1)(j + i - 1) + abs(arr(j)\
    \ - arr(j + i)), dp(j + 1)(j + i) + abs(arr(j) - arr(j + i - 1)))\n          \
    \  }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n        var\
    \ dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n  \
    \      }\n        for (l <- 2 until n) {\n            for (i <- 0 until n - l)\
    \ {\n                dp(i)(i + l) = min(dp(i + 1)(i + l) + abs(arr(i) - arr(i\
    \ + l)), dp(i)(i + l - 1) + abs(arr(i + l) - arr(i + l - 1)))\n            }\n\
    \        }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp\
    \ = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n  \
    \      }\n        for (i <- n - 3 to 0 by -1) {\n            for (j <- i + 2 until\
    \ n) {\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)),\
    \ dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n       \
    \ dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n        }\n \
    \       for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n     \
    \           val j = i + k\n                dp(i)(j) = min(dp(i + 1)(j), dp(i)(j\
    \ - 1)) + 1\n                if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i\
    \ + 1)(j - 1))\n            }\n        }\n        dp(0)(n - 1)", "        val\
    \ n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <-\
    \ 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) {\n     \
    \           dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n            }\n\
    \        }\n        for (i <- n - 3 to 0 by -1) {\n            for (j <- i + 2\
    \ until n) {\n                dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n\
    \                if (arr(i) == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j -\
    \ 1))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (i <- n - 3 to 0 by -1) {\n          \
    \  for (j <- i + 2 until n) {\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i)\
    \ - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n   \
    \     }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp =\
    \ Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n  \
    \      }\n        for (k <- 2 until n) {\n            for (i <- 0 until n - k)\
    \ {\n                dp(i)(i + k) = min(dp(i + 1)(i + k - 1) + abs(arr(i) - arr(i\
    \ + k)), dp(i)(i + k - 1) + abs(arr(i + k) - arr(i + k - 1)))\n            }\n\
    \        }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp\
    \ = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n  \
    \      }\n        for (k <- 2 until n) {\n            for (i <- 0 until n - k)\
    \ {\n                val j = i + k\n                dp(i)(j) = min(dp(i + 1)(j)\
    \ + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n     \
    \       }\n        }\n        dp(0)(n - 1)", "        if (arr.length == 0) return\
    \ 0\n        var min = Long.MaxValue\n        for (i <- 0 until arr.length) {\n\
    \            var count = 0\n            for (j <- 0 until arr.length) {\n    \
    \            if (i + j >= arr.length) {\n                    count += abs(arr(i\
    \ + j - arr.length) - arr(j))\n                } else {\n                    count\
    \ += abs(arr(i + j) - arr(j))\n                }\n            }\n            min\
    \ = min min count\n        }\n        min", "        val n = arr.length\n    \
    \    var dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n      \
    \      dp(i)(i) = 0\n            if (i + 1 < n) {\n                dp(i)(i + 1)\
    \ = abs(arr(i) - arr(i + 1))\n            }\n        }\n        for (l <- 2 until\
    \ n) {\n            for (i <- 0 until n - l) {\n                val j = i + l\n\
    \                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j\
    \ - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n\
    \ - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n        \
    \        if (i == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n\
    \            }\n        }\n        for (l <- 2 to n) {\n            for (i <-\
    \ 0 to n - l) {\n                val j = i + l - 1\n                if (arr(i)\
    \ == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n                else dp(i)(j) = min(dp(i\
    \ + 1)(j), dp(i)(j - 1)) + 1\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (l <- 3 to n) {\n  \
    \          for (i <- 0 to n - l) {\n                val j = i + l - 1\n      \
    \          dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1)\
    \ + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i + 1)\
    \ = if (arr(i) == arr(i + 1)) 0 else 1\n        for (l <- 3 to n) {\n        \
    \    for (i <- 0 to n - l) {\n                val j = i + l - 1\n            \
    \    dp(i)(j) = min(dp(i + 1)(j) + 1, dp(i)(j - 1) + 1)\n                if (arr(i)\
    \ == arr(j)) dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1))\n            }\n     \
    \   }\n        dp(0)(n - 1)", "        def helper(arr : List[Long], i : Int, j\
    \ : Int, count : Long) : Long = {\n            if (i >= j) count\n           \
    \ else if (arr(i) == arr(j)) helper(arr, i + 1, j - 1, count)\n            else\
    \ {\n                val count1 = helper(arr, i + 1, j, count + 1)\n         \
    \       val count2 = helper(arr, i, j - 1, count + 1)\n                min(count1,\
    \ count2)\n            }\n        }\n        helper(arr, 0, arr.length - 1, 0)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) {\n            for (j <- 0 until n) {\n                if (i\
    \ == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n        \
    \    }\n        }\n        for (i <- 0 until n) {\n            for (j <- 0 until\
    \ n) {\n                if (i == j) dp(i)(j) = 0\n                else if (i +\
    \ 1 == j) dp(i)(j) = abs(arr(i) - arr(j))\n                else {\n          \
    \          dp(i)(j) = min(dp(i)(j), dp(i + 1)(j) + abs(arr(i) - arr(i + 1)))\n\
    \                    dp(i)(j) = min(dp(i)(j), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n                    dp(i)(j) = min(dp(i)(j), dp(i + 1)(j - 1) + abs(arr(i)\
    \ - arr(j)))\n                }\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n; j <- 0 until n) {\n            if (i == j) dp(i)(j) = 0\n \
    \           else dp(i)(j) = Long.MaxValue\n        }\n        for (i <- 0 until\
    \ n; j <- 0 until n) {\n            if (i == j) dp(i)(j) = 0\n            else\
    \ if (i + 1 == j) dp(i)(j) = abs(arr(i) - arr(j))\n            else dp(i)(j) =\
    \ min(dp(i)(j), dp(i + 1)(j - 1) + abs(arr(i) - arr(j)))\n            for (k <-\
    \ i until j) {\n                dp(i)(j) = min(dp(i)(j), dp(i)(k) + dp(k + 1)(j))\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (i <- n - 3 to 0 by -1) {\n          \
    \  for (j <- i + 2 until n) {\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i)\
    \ - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n   \
    \     }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp =\
    \ Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n  \
    \      }\n        for (k <- 2 until n) {\n            for (i <- 0 until n - k)\
    \ {\n                val j = i + k\n                dp(i)(j) = min(dp(i + 1)(j)\
    \ + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n     \
    \       }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n   \
    \     val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n     \
    \       dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i\
    \ + 1))\n        }\n        for (k <- 2 until n) {\n            for (i <- 0 until\
    \ n - k) {\n                dp(i)(i + k) = min(dp(i + 1)(i + k - 1) + abs(arr(i)\
    \ - arr(i + k)), dp(i)(i + k - 1) + abs(arr(i + k) - arr(i + k - 1)))\n      \
    \      }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n    \
    \    val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n      \
    \      dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i\
    \ + 1))\n        }\n        for (l <- 3 to n) {\n            for (i <- 0 to n\
    \ - l) {\n                val j = i + l - 1\n                dp(i)(j) = min(dp(i\
    \ + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          for (j <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n\
    \                else dp(i)(j) = Long.MaxValue\n            }\n        }\n   \
    \     for (len <- 2 to n) {\n            for (i <- 0 to n - len) {\n         \
    \       val j = i + len - 1\n                if (arr(i) == arr(j)) dp(i)(j) =\
    \ dp(i + 1)(j - 1)\n                else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j\
    \ - 1)) + 1\n            }\n        }\n        dp(0)(n - 1)"]
stop_tokens:
- "\n    }\n"
