name: HumanEval_48_is_palindrome
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Checks if given string is a palindrome\n    // >>> isPalindrome((\"\"))\n\
  \    // (true)\n    // >>> isPalindrome((\"aba\"))\n    // (true)\n    // >>> isPalindrome((\"\
  aaaaa\"))\n    // (true)\n    // >>> isPalindrome((\"zbcd\"))\n    // (false)\n\
  \    def isPalindrome(text : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\"\
  )) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
  aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
  xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n    assert(isPalindrome((\"\
  xywzx\")) == (false));\n    }\n\n}\n"
completions: ["        if (text.length == 0) return true\n        if (text.length\
    \ == 1) return true\n        if (text.charAt(0) == text.charAt(text.length - 1))\
    \ {\n            isPalindrome(text.substring(1, text.length - 1))\n        } else\
    \ {\n            false\n        }", "        if (text.length == 0) return true\n\
    \        if (text.length == 1) return true\n        if (text.charAt(0) == text.charAt(text.length\
    \ - 1))\n            return isPalindrome(text.substring(1, text.length - 1))\n\
    \        else return false", "        if (text.length <= 1) return true\n    \
    \    if (text(0) != text(text.length - 1)) return false\n        return isPalindrome(text.substring(1,\
    \ text.length - 1))", "        if (text.length <= 1) return true\n        if (text(0)\
    \ != text(text.length - 1)) return false\n        return isPalindrome(text.substring(1,\
    \ text.length - 1))", "        if (text.length == 0) return true\n        if (text.length\
    \ == 1) return true\n        if (text.charAt(0) == text.charAt(text.length - 1))\
    \ return isPalindrome(text.substring(1, text.length - 1))\n        return false",
  "        if (text.length == 0) return true\n        if (text.length == 1) return\
    \ true\n        if (text.charAt(0) == text.charAt(text.length - 1)) return isPalindrome(text.substring(1,\
    \ text.length - 1))\n        return false", "        if (text.length <= 1) return\
    \ true\n        if (text(0) != text(text.length - 1)) return false\n        return\
    \ isPalindrome(text.substring(1, text.length - 1))", "        if (text.length\
    \ <= 1) return true\n        if (text(0) != text(text.length - 1)) return false\n\
    \        return isPalindrome(text.substring(1, text.length - 1))", "        if\
    \ (text.length <= 1) return true\n        if (text(0) != text(text.length - 1))\
    \ return false\n        return isPalindrome(text.substring(1, text.length - 1))",
  "        if (text.length == 0) return true\n        if (text.length == 1) return\
    \ true\n        if (text.length == 2) return text(0) == text(1)\n        if (text(0)\
    \ != text(text.length - 1)) return false\n        return isPalindrome(text.substring(1,\
    \ text.length - 1))", "        if (text.length <= 1) return true\n        if (text(0)\
    \ != text(text.length - 1)) return false\n        return isPalindrome(text.substring(1,\
    \ text.length - 1))", "        val len = text.length\n        if (len == 0) return\
    \ true\n        for (i <- 0 until len/2) {\n            if (text(i) != text(len\
    \ - i - 1)) return false\n        }\n        return true", "        if (text.length\
    \ == 0) return true\n        if (text.length == 1) return true\n        if (text.length\
    \ == 2) return text(0) == text(1)\n        if (text(0) != text(text.length - 1))\
    \ return false\n        return isPalindrome(text.substring(1, text.length - 1))",
  "        if (text.length == 0) return true\n        if (text.length == 1) return\
    \ true\n        if (text.length == 2) return text(0) == text(1)\n        if (text(0)\
    \ != text(text.length - 1)) return false\n        return isPalindrome(text.substring(1,\
    \ text.length - 1))", "        if (text.length == 0) return true\n        if (text.length\
    \ == 1) return true\n        if (text.length == 2) return text(0) == text(1)\n\
    \        if (text(0) != text(text.length - 1)) return false\n        return isPalindrome(text.substring(1,\
    \ text.length - 1))", "        if (text.length == 0) return true\n        if (text.length\
    \ == 1) return true\n        if (text.charAt(0) == text.charAt(text.length - 1))\
    \ {\n            return isPalindrome(text.substring(1, text.length - 1))\n   \
    \     }\n        return false", "        if (text.length == 0) return true\n \
    \       if (text.length == 1) return true\n        if (text.length == 2) return\
    \ text(0) == text(1)\n        if (text(0) != text(text.length - 1)) return false\n\
    \        isPalindrome(text.substring(1, text.length - 1))", "        if (text.length\
    \ == 0) return true\n        if (text.length == 1) return true\n        if (text.length\
    \ == 2) return text(0) == text(1)\n        if (text(0) != text(text.length - 1))\
    \ return false\n        return isPalindrome(text.substring(1, text.length - 1))",
  "        if (text.length == 0) return true\n        if (text.length == 1) return\
    \ true\n        if (text.length == 2) return text(0) == text(1)\n        if (text(0)\
    \ != text(text.length - 1)) return false\n        return isPalindrome(text.substring(1,\
    \ text.length - 1))", "        val length = text.length\n        for (i <- 0 until\
    \ length / 2) {\n            if (text(i) != text(length - i - 1)) {\n        \
    \        return false\n            }\n        }\n        return true"]
stop_tokens:
- "\n    }\n"
