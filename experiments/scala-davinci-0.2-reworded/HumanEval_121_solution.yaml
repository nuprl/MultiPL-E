name: HumanEval_121_solution
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a non-empty list of integers, return the sum of all of the odd elements\
  \ that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
  \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
  \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
  \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst : List[Long])\
  \ : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
  \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
  \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
  \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
  \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
  \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
  \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
  \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
completions: ["        // Your code here\n        lst.zipWithIndex.filter(x => x._2\
    \ % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        var sum = 0l\n        for\
    \ (i <- 0 until lst.length) {\n            if (i % 2 == 0 && lst(i) % 2 == 1)\
    \ {\n                sum += lst(i)\n            }\n        }\n        return sum",
  "        // Your code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 &&\
    \ x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n\
    \        val lst2 = lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 ==\
    \ 1)\n        lst2.map(x => x._1).sum", "        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Write your solution\
    \ here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(x\
    \ => x._1).sum", "        // Your code here\n        return 0", "        // Your\
    \ code here\n        var sum = 0l\n        for (i <- 0 until lst.length) {\n \
    \           if (i % 2 == 0 && lst(i) % 2 == 1) {\n                sum += lst(i)\n\
    \            }\n        }\n        sum", "        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n\
    \        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum",
  "        // Your code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 &&\
    \ x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n\
    \        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum",
  "        // Your code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 &&\
    \ x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n        val lst2\
    \ = lst.zipWithIndex.filter(x => x._2 % 2 == 0).map(x => x._1)\n        val lst3\
    \ = lst2.filter(x => x % 2 == 1)\n        lst3.sum", "        // Your solution\
    \ goes here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 ==\
    \ 1).map(x => x._1).sum", "        // Your code here\n        lst.zipWithIndex.filter(x\
    \ => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum", "        // Your code here\n\
    \        lst.zipWithIndex.filter(x => x._2 % 2 == 0 && x._1 % 2 == 1).map(_._1).sum",
  "        // Your code here\n        lst.zipWithIndex.filter(x => x._2 % 2 == 0 &&\
    \ x._1 % 2 == 1).map(_._1).sum"]
stop_tokens:
- "\n    }\n"
