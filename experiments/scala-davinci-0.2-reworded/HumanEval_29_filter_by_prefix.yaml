name: HumanEval_29_filter_by_prefix
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Filter an input list of strings only for ones that start with a given prefix.\n\
  \    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
  \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\")),\
  \ (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
  \ : List[String], prefix : String) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
  \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
  xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
  xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
completions: ['        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(x => x.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(x =>
    x.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(x => x.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(x => x.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(x => x.startsWith(prefix))',
  '        strings.filter(x => x.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(str => str.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(x => x.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(x =>
    x.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(x =>
    x.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(x
    => x.startsWith(prefix))', '        strings.filter(x => x.startsWith(prefix))',
  '        strings.filter(x => x.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(x => x.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(x => x.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(x =>
    x.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(x => x.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(x
    => x.startsWith(prefix))', '        strings.filter(x => x.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(x =>
    x.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(x => x.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(x => x.startsWith(prefix))', " \
    \       // TODO: Implement me!\n        return List[String]()", '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(x => x.startsWith(prefix))', '        strings.filter(x =>
    x.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(x
    => x.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', "        var result : List[String]\
    \ = List()\n        for (string <- strings) {\n            if (string.startsWith(prefix))\
    \ {\n                result = string :: result\n            }\n        }\n   \
    \     return result", '        strings.filter((s : String) => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(x => x.startsWith(prefix))', '        strings.filter(x
    => x.startsWith(prefix))', '        strings.filter(x => x.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(x
    => x.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(str => str.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(x => x.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(x =>
    x.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(x
    => x.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(x => x.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(x => x.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(x => x.startsWith(prefix))',
  '        strings.filter(x => x.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(x
    => x.startsWith(prefix))', '        strings.filter(x => x.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(x => x.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(x => x.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(x => x.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))']
stop_tokens:
- "\n    }\n"
