name: HumanEval_68_pluck
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // \"Given a list representing a branch of a tree that has non-negative integer\
  \ nodes\n    // your task is to pluck one of the nodes and return it.\n    // The\
  \ plucked node should be the node with the smallest even value.\n    // If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n    // The plucked node should be returned in a list, [ smalest_value,\
  \ its index ],\n    // If there are no even values or the given list is empty, return\
  \ [].\n    // Example 1:\n    // >>> pluck((List[Long](4l.toLong, 2l.toLong, 3l.toLong)))\n\
  \    // (List[Long](2l.toLong, 1l.toLong))\n    // Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> pluck((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 1l.toLong))\n    // Explanation:\
  \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n\
  \    // >>> pluck((List[Long]()))\n    // (List[Long]())\n    // Example 4:\n  \
  \  // >>> pluck((List[Long](5l.toLong, 0l.toLong, 3l.toLong, 0l.toLong, 4l.toLong,\
  \ 2l.toLong)))\n    // (List[Long](0l.toLong, 1l.toLong))\n    // Explanation: 0\
  \ is the smallest value, but  there are two zeros,\n    // so we will choose the\
  \ first zero, which has the smallest index.\n    // Constraints:\n    // * 1 <=\
  \ nodes.length <= 10000\n    // * 0 <= node.value\n    def pluck(arr : List[Long])\
  \ : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(pluck((List[Long](4l.toLong,\
  \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 1l.toLong))));\n    assert(pluck((List[Long]())).equals((List[Long]())));\n\
  \    assert(pluck((List[Long](5l.toLong, 0l.toLong, 3l.toLong, 0l.toLong, 4l.toLong,\
  \ 2l.toLong))).equals((List[Long](0l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 0l.toLong, 5l.toLong, 3l.toLong))).equals((List[Long](0l.toLong,\
  \ 3l.toLong))));\n    assert(pluck((List[Long](5l.toLong, 4l.toLong, 8l.toLong,\
  \ 4l.toLong, 8l.toLong))).equals((List[Long](4l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](7l.toLong,\
  \ 6l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long](6l.toLong, 1l.toLong))));\n\
  \    assert(pluck((List[Long](7l.toLong, 9l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long]())));\n\
  \    }\n\n}\n"
completions: ["        var min = Long.MaxValue\n        var minIndex = -1\n      \
    \  for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) List() else List(min, minIndex)",
  "        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) List()\n\
    \        else {\n            val min = evens.min\n            val index = arr.indexOf(min)\n\
    \            List(min, index)\n        }", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List() else List(min, minIndex)", "        val evens = arr.filter(_ % 2\
    \ == 0)\n        if (evens.isEmpty) List()\n        else {\n            val min\
    \ = evens.min\n            val index = arr.indexOf(min)\n            List(min,\
    \ index)\n        }", "        // Write your code here\n        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List() else List(min, minIndex)", "        var min = Long.MaxValue\n   \
    \     var index = -1\n        for (i <- 0 until arr.length) {\n            if\
    \ (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n        \
    \        index = i\n            }\n        }\n        if (index == -1) List()\
    \ else List(min, index)", "        var result = List[Long]()\n        if (arr.length\
    \ == 0) {\n            return result\n        }\n        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) {\n            return result\n        }\n        result = List(min, minIndex.toLong)\n\
    \        return result", "        var min = Long.MaxValue\n        var index =\
    \ -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0\
    \ && arr(i) < min) {\n                min = arr(i)\n                index = i\n\
    \            }\n        }\n        if (index == -1) List() else List(min, index)",
  "        if (arr.isEmpty) return List()\n        val evens = arr.filter(_ % 2 ==\
    \ 0)\n        if (evens.isEmpty) return List()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        List(min, index)", "        val\
    \ evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty) List()\n   \
    \     else {\n            val min = evens.min\n            val index = arr.indexOf(min)\n\
    \            List(min, index)\n        }", "        val evens = arr.filter(_ %\
    \ 2 == 0)\n        if (evens.isEmpty) List()\n        else {\n            val\
    \ min = evens.min\n            val index = arr.indexOf(min)\n            List(min,\
    \ index)\n        }", "        var min = Long.MaxValue\n        var index = -1\n\
    \        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                index = i\n        \
    \    }\n        }\n        if (index == -1) List() else List(min, index)", " \
    \       // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var min = Long.MaxValue\n        var index = -1\n\
    \        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                index = i\n        \
    \    }\n        }\n        if (index == -1) List() else List(min, index)", " \
    \       var min = Long.MaxValue\n        var minIndex = -1\n        for (i <-\
    \ 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n\
    \                min = arr(i)\n                minIndex = i\n            }\n \
    \       }\n        if (minIndex == -1) List() else List(min, minIndex)", "   \
    \     var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0\
    \ until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n  \
    \              min = arr(i)\n                minIndex = i\n            }\n   \
    \     }\n        if (minIndex == -1) List() else List(min, minIndex)", "     \
    \   var min = Long.MaxValue\n        var index = -1\n        for (i <- 0 until\
    \ arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n        \
    \        min = arr(i)\n                index = i\n            }\n        }\n \
    \       if (index == -1) List() else List(min, index)", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List() else List(min, minIndex)", "        // Fill up this function body\n\
    \        // You can add another function as well, if required\n        val evens\
    \ = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) List()\n        else {\n\
    \            val min = evens.min\n            val index = arr.indexOf(min)\n \
    \           List(min, index)\n        }", "        var min = Long.MaxValue\n \
    \       var index = -1\n        for (i <- 0 until arr.length) {\n            if\
    \ (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n        \
    \        index = i\n            }\n        }\n        if (index == -1) List()\
    \ else List(min, index)", "        // Fill up this function body\n        // You\
    \ can add another function as well, if required\n        var min = 10001\n   \
    \     var index = -1\n        for (i <- 0 until arr.length) {\n            if\
    \ (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i).toInt\n  \
    \              index = i\n            }\n        }\n        if (index == -1) List()\n\
    \        else List(min, index)", "        if (arr.isEmpty) return List[Long]()\n\
    \        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return\
    \ List[Long]()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List[Long](min, index.toLong)", "        // Fill up this function body\n\
    \        // You can add another function as well, if required\n        val evens\
    \ = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) List()\n        else {\n\
    \            val min = evens.min\n            val index = arr.indexOf(min)\n \
    \           List(min, index)\n        }", "        // Fill up this function body\n\
    \        // You can add another function as well, if required\n        var min\
    \ = Long.MaxValue\n        var index = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                index = i\n            }\n        }\n        if (index\
    \ == -1) List[Long]()\n        else List[Long](min, index)", "        var min\
    \ = Long.MaxValue\n        var index = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                index = i\n            }\n        }\n        if (index\
    \ == -1) List() else List(min, index)", "        val evens = arr.filter(x => x\
    \ % 2 == 0)\n        if (evens.isEmpty) return List[Long]()\n        val min =\
    \ evens.min\n        val index = arr.indexOf(min)\n        return List(min, index.toLong)",
  "        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) List()\n\
    \        else {\n            val min = evens.min\n            val index = arr.indexOf(min)\n\
    \            List(min, index)\n        }", "        // Fill up this function body\n\
    \        // You can add another function as well, if required\n        var min\
    \ = Long.MaxValue\n        var index = 0\n        var minIndex = 0\n        for\
    \ (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min)\
    \ {\n                min = arr(i)\n                minIndex = i\n            }\n\
    \        }\n        if (min == Long.MaxValue) List()\n        else List(min, minIndex)",
  "        var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0\
    \ until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n  \
    \              min = arr(i)\n                minIndex = i\n            }\n   \
    \     }\n        if (minIndex == -1) return List()\n        return List(min, minIndex)",
  "        var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0\
    \ until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n  \
    \              min = arr(i)\n                minIndex = i\n            }\n   \
    \     }\n        if (minIndex == -1) List() else List(min, minIndex)", "     \
    \   var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until\
    \ arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n        \
    \        min = arr(i)\n                minIndex = i\n            }\n        }\n\
    \        if (minIndex == -1) List() else List(min, minIndex)", "        // Fill\
    \ up this function body\n        // You can add another function as well, if required\n\
    \        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) List()\n\
    \        else {\n            val min = evens.min\n            val index = arr.indexOf(min)\n\
    \            List(min, index)\n        }", "        if (arr.isEmpty) return List()\n\
    \        var min = Long.MaxValue\n        var minIndex = -1\n        for (i <-\
    \ 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n\
    \                min = arr(i)\n                minIndex = i\n            }\n \
    \       }\n        if (minIndex == -1) return List()\n        return List(min,\
    \ minIndex)", "        if (arr.isEmpty) return List()\n        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        if (evens.isEmpty) return List()\n        val min =\
    \ evens.min\n        val index = arr.indexOf(min)\n        return List(min, index.toLong)",
  "        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) List()\n\
    \        else {\n            val min = evens.min\n            val index = arr.indexOf(min)\n\
    \            List(min, index)\n        }", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List() else List(min, minIndex)", "        var min = Long.MaxValue\n   \
    \     var minIndex = -1\n        for (i <- 0 until arr.length) {\n           \
    \ if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n     \
    \           minIndex = i\n            }\n        }\n        if (minIndex == -1)\
    \ List() else List(min, minIndex)", "        if (arr.length == 0) return List()\n\
    \        var min = Long.MaxValue\n        var minIndex = -1\n        for (i <-\
    \ 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n\
    \                min = arr(i)\n                minIndex = i\n            }\n \
    \       }\n        if (minIndex == -1) return List()\n        return List(min,\
    \ minIndex)", "        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty)\
    \ return List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) List() else List(min,\
    \ minIndex)", "        // Fill up this function body\n        // You can add another\
    \ function as well, if required\n        var min = Long.MaxValue\n        var\
    \ index = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n                index\
    \ = i\n            }\n        }\n        if (index == -1) List() else List(min,\
    \ index)", "        var min = Long.MaxValue\n        var minIndex = -1\n     \
    \   for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) List() else List(min, minIndex)",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var result = List[Long]()\n        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex !=\
    \ -1) {\n            result = List(min, minIndex)\n        }\n        result",
  "        var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0\
    \ until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n  \
    \              min = arr(i)\n                minIndex = i\n            }\n   \
    \     }\n        if (minIndex == -1) List() else List(min, minIndex)", "     \
    \   // Fill up this function body\n        // You can add another function as\
    \ well, if required\n        var min = Long.MaxValue\n        var index = -1\n\
    \        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                index = i\n        \
    \    }\n        }\n        if (index == -1) List() else List(min, index)", " \
    \       // Write your code here\n        return List[Long]()", "        var min\
    \ = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) List() else List(min, minIndex.toLong)", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List() else List(min, minIndex)", "        var result = List[Long]()\n \
    \       var min = Long.MaxValue\n        var minIndex = -1\n        for (i <-\
    \ 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n\
    \                min = arr(i)\n                minIndex = i\n            }\n \
    \       }\n        if (minIndex == -1) return result\n        result = List(min,\
    \ minIndex)\n        return result", "        var min = Long.MaxValue\n      \
    \  var minIndex = -1\n        for (i <- 0 until arr.length) {\n            if\
    \ (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n        \
    \        minIndex = i\n            }\n        }\n        if (minIndex == -1) List()\
    \ else List(min, minIndex)", "        var min = Long.MaxValue\n        var index\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                index =\
    \ i\n            }\n        }\n        if (index == -1) List() else List(min,\
    \ index)", "        var min = Long.MaxValue\n        var minIndex = -1\n     \
    \   for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) List[Long]()\n        else List[Long](min,\
    \ minIndex)", "        var result = List[Long]()\n        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    val x = arr(i)\n            if (x % 2 == 0 && x < min) {\n              \
    \  min = x\n                minIndex = i\n            }\n        }\n        if\
    \ (minIndex != -1) {\n            result = List(min, minIndex)\n        }\n  \
    \      result", "        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty)\
    \ List[Long]()\n        else {\n            val min = evens.min\n            val\
    \ index = arr.indexOf(min)\n            List(min, index)\n        }", "      \
    \  // Fill up this function body\n        // You can add another function as well,\
    \ if required\n        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty)\
    \ List()\n        else {\n            val min = evens.min\n            val index\
    \ = arr.indexOf(min)\n            List(min, index)\n        }", "        val evens\
    \ = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) List()\n        else {\n\
    \            val min = evens.min\n            val index = arr.indexOf(min)\n \
    \           List(min, index)\n        }", "        // Fill up this function body\n\
    \        // You can add another function as well, if required\n        var min\
    \ = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) return List()\n        return List(min, minIndex)", "        // Write\
    \ your code here\n        var result = List[Long]()\n        var min = Long.MaxValue\n\
    \        var index = -1\n        for (i <- 0 until arr.length) {\n           \
    \ if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n     \
    \           index = i\n            }\n        }\n        if (index != -1) {\n\
    \            result = List(min, index.toLong)\n        }\n        result", " \
    \       if (arr.isEmpty) return List()\n        var min = Long.MaxValue\n    \
    \    var minIndex = -1\n        for (i <- 0 until arr.length) {\n            if\
    \ (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n        \
    \        minIndex = i\n            }\n        }\n        if (minIndex == -1) return\
    \ List()\n        return List(min, minIndex)", "        val evens = arr.filter(_\
    \ % 2 == 0)\n        if (evens.isEmpty) List()\n        else {\n            val\
    \ min = evens.min\n            val index = arr.indexOf(min)\n            List(min,\
    \ index)\n        }", "        var min = Long.MaxValue\n        var minIndex =\
    \ -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0\
    \ && arr(i) < min) {\n                min = arr(i)\n                minIndex =\
    \ i\n            }\n        }\n        if (minIndex == -1) return List()\n   \
    \     return List(min, minIndex)", "        // Fill up this function body\n  \
    \      // You can add another function as well, if required\n        var ans :\
    \ List[Long] = List()\n        if (arr.length == 0) return ans\n        var min\
    \ : Long = Long.MaxValue\n        var minIndex : Long = Long.MaxValue\n      \
    \  for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (min == Long.MaxValue) return ans\n        ans\
    \ = List(min, minIndex)\n        return ans", "        val evens = arr.filter(_\
    \ % 2 == 0)\n        if (evens.isEmpty) List()\n        else {\n            val\
    \ min = evens.min\n            val index = arr.indexOf(min)\n            List(min,\
    \ index)\n        }", "        val evens = arr.filter(x => x % 2 == 0)\n     \
    \   if (evens.isEmpty) return List()\n        val min = evens.min\n        val\
    \ index = arr.indexOf(min)\n        List(min, index)", "        if (arr.isEmpty)\
    \ return List[Long]()\n        val evens = arr.filter(_ % 2 == 0)\n        if\
    \ (evens.isEmpty) return List[Long]()\n        val min = evens.min\n        val\
    \ index = arr.indexOf(min)\n        List[Long](min, index.toLong)", "        //\
    \ Fill up this function body\n        // You can add another function as well,\
    \ if required\n        var minEven = Long.MaxValue\n        var minEvenIndex =\
    \ -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0\
    \ && arr(i) < minEven) {\n                minEven = arr(i)\n                minEvenIndex\
    \ = i\n            }\n        }\n        if (minEvenIndex == -1) return List()\n\
    \        return List(minEven, minEvenIndex)", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List() else List(min, minIndex)", "        var min = Long.MaxValue\n   \
    \     var minIndex = -1\n        for (i <- 0 until arr.length) {\n           \
    \ if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n     \
    \           minIndex = i\n            }\n        }\n        if (minIndex == -1)\
    \ List() else List(min, minIndex)", "        val evens = arr.filter(x => x % 2\
    \ == 0)\n        if (evens.isEmpty) return List()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        List(min, index)", "        var\
    \ min = Long.MaxValue\n        var index = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                index = i\n            }\n        }\n        if (index\
    \ == -1) List() else List(min, index)", "        // Write your code here\n   \
    \     val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty) return\
    \ List()\n        val min = evens.min\n        val minIndex = arr.indexOf(min)\n\
    \        List(min, minIndex)", "        val evens = arr.filter(_ % 2 == 0)\n \
    \       if (evens.isEmpty) List()\n        else {\n            val min = evens.min\n\
    \            val index = arr.indexOf(min)\n            List(min, index)\n    \
    \    }", "        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty)\
    \ return List[Long]()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List[Long](min, index.toLong)", "        var minEven = Long.MaxValue\n\
    \        var minEvenIndex = -1\n        for (i <- 0 until arr.length) {\n    \
    \        if (arr(i) % 2 == 0 && arr(i) < minEven) {\n                minEven =\
    \ arr(i)\n                minEvenIndex = i\n            }\n        }\n       \
    \ if (minEvenIndex == -1) return List()\n        return List(minEven, minEvenIndex)",
  "        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) List()\n\
    \        else {\n            val min = evens.min\n            val index = arr.indexOf(min)\n\
    \            List(min, index)\n        }", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List() else List(min, minIndex)", "        // Write your code here\n   \
    \     return List[Long]()", "        if (arr.isEmpty) return List[Long]()\n  \
    \      val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return List[Long]()\n\
    \        val min = evens.min\n        val index = arr.indexOf(min)\n        List[Long](min,\
    \ index.toLong)", "        var min = Long.MaxValue\n        var minIndex = -1\n\
    \        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) return List()\n        return\
    \ List(min, minIndex)", "        var min = Long.MaxValue\n        var index =\
    \ -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0\
    \ && arr(i) < min) {\n                min = arr(i)\n                index = i\n\
    \            }\n        }\n        if (index == -1) List() else List(min, index.toLong)",
  "        // Write your code here\n        // return List[Long]()\n        var min\
    \ = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) List[Long]()\n        else List[Long](min, minIndex)", "        var min\
    \ = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) List() else List(min, minIndex)", "        if (arr.isEmpty) return List()\n\
    \        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return\
    \ List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        if (arr.length == 0) return List()\n    \
    \    val evens = arr.filter(_ % 2 == 0)\n        if (evens.length == 0) return\
    \ List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) List() else List(min,\
    \ minIndex)", "        var min = Long.MaxValue\n        var minIndex = -1\n  \
    \      for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) List() else List(min, minIndex)",
  "        // Write your code here\n        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) List() else List(min,\
    \ minIndex)", "        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty)\
    \ List()\n        else {\n            val min = evens.min\n            val index\
    \ = arr.indexOf(min)\n            List(min, index)\n        }", "        val evens\
    \ = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) List()\n        else {\n\
    \            val min = evens.min\n            val index = arr.indexOf(min)\n \
    \           List(min, index)\n        }", "        // Fill up this function body\n\
    \        // You can add another function as well, if required\n        var min\
    \ = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (min\
    \ == Long.MaxValue) List()\n        else List(min, minIndex)", "        val evens\
    \ = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty) return List()\n  \
    \      val min = evens.min\n        val index = arr.indexOf(min)\n        List(min,\
    \ index)", "        var min = Long.MaxValue\n        var minIndex = -1\n     \
    \   for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) List() else List(min, minIndex)",
  "        var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0\
    \ until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n  \
    \              min = arr(i)\n                minIndex = i\n            }\n   \
    \     }\n        if (minIndex == -1) List() else List(min, minIndex)", "     \
    \   val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return List()\n\
    \        val min = evens.min\n        val index = arr.indexOf(min)\n        List(min,\
    \ index)", "        var min = Long.MaxValue\n        var minIndex = -1\n     \
    \   for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) return List()\n        return\
    \ List(min, minIndex)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) List() else List(min,\
    \ minIndex)", "        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty)\
    \ {\n            List[Long]()\n        } else {\n            val min = evens.min\n\
    \            val index = arr.indexOf(min)\n            List[Long](min, index.toLong)\n\
    \        }", "        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty)\
    \ return List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        val evens = arr.filter(_ % 2 == 0)\n    \
    \    if (evens.isEmpty) List()\n        else {\n            val min = evens.min\n\
    \            val index = arr.indexOf(min)\n            List(min, index)\n    \
    \    }", "        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty)\
    \ return List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) List() else List(min,\
    \ minIndex)", "        var min = Long.MaxValue\n        var minIndex = -1\n  \
    \      for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) List() else List(min, minIndex)",
  "        var min = Long.MaxValue\n        var index = -1\n        for (i <- 0 until\
    \ arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n        \
    \        min = arr(i)\n                index = i\n            }\n        }\n \
    \       if (index == -1) List() else List(min, index)", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List() else List(min, minIndex)", "        val evens = arr.filter(x => x\
    \ % 2 == 0)\n        if (evens.isEmpty) return List()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        List(min, index)", "        var\
    \ min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) List() else List(min, minIndex)", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List() else List(min, minIndex)", "        var min = Long.MaxValue\n   \
    \     var minIndex = -1\n        for (i <- 0 until arr.length) {\n           \
    \ if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n     \
    \           minIndex = i\n            }\n        }\n        if (minIndex == -1)\
    \ List() else List(min, minIndex)", "        val evens = arr.filter(x => x % 2\
    \ == 0)\n        if (evens.isEmpty) return List[Long]()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        List[Long](min, index.toLong)",
  "        var min = 10001\n        var index = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i).toInt\n                index = i\n            }\n        }\n        if\
    \ (index == -1) List()\n        else List(min, index)", "        val evens = arr.filter(_\
    \ % 2 == 0)\n        if (evens.isEmpty) return List()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        List(min, index)", "        //\
    \ Fill up this function body\n        // You can add another function as well,\
    \ if required\n        var min = Long.MaxValue\n        var minIndex = -1\n  \
    \      for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) List[Long]()\n        else List[Long](min,\
    \ minIndex)", "        if (arr.isEmpty) return List[Long]()\n        val evens\
    \ = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty) return List[Long]()\n\
    \        val min = evens.min\n        val index = arr.indexOf(min)\n        List[Long](min,\
    \ index.toLong)", "        var result = List[Long]()\n        var min = Long.MaxValue\n\
    \        var index = -1\n        for (i <- 0 until arr.length) {\n           \
    \ if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n     \
    \           index = i\n            }\n        }\n        if (index != -1) {\n\
    \            result = List(min, index.toLong)\n        }\n        result", " \
    \       var min = Long.MaxValue\n        var minIndex = -1\n        for (i <-\
    \ 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n\
    \                min = arr(i)\n                minIndex = i\n            }\n \
    \       }\n        if (minIndex == -1) List() else List(min, minIndex)", "   \
    \     var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0\
    \ until arr.length) {\n            val x = arr(i)\n            if (x % 2 == 0\
    \ && x < min) {\n                min = x\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) List() else List(min, minIndex)",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var min = Long.MaxValue\n        var index = -1\n\
    \        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                index = i\n        \
    \    }\n        }\n        if (index == -1) List[Long]()\n        else List[Long](min,\
    \ index)", "        var min = Long.MaxValue\n        var minIndex = -1\n     \
    \   for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) List[Long]()\n        else List[Long](min,\
    \ minIndex)", "        var min = Long.MaxValue\n        var minIndex = -1\n  \
    \      for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) List() else List(min, minIndex)",
  "        var min = Long.MaxValue\n        var index = -1\n        for (i <- 0 until\
    \ arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n        \
    \        min = arr(i)\n                index = i\n            }\n        }\n \
    \       if (index == -1) List() else List(min, index)", "        def pluckRec(arr\
    \ : List[Long], min : Long, minIndex : Long, index : Long) : List[Long] = {\n\
    \            if (arr.isEmpty) List()\n            else if (arr.head % 2 == 0 &&\
    \ arr.head < min) pluckRec(arr.tail, arr.head, index, index + 1)\n           \
    \ else pluckRec(arr.tail, min, minIndex, index + 1)\n        }\n        pluckRec(arr,\
    \ Long.MaxValue, -1, 0)", "        var min = Long.MaxValue\n        var index\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                index =\
    \ i\n            }\n        }\n        if (index == -1) List() else List(min,\
    \ index)", "        var minEven = Long.MaxValue\n        var minEvenIndex = -1\n\
    \        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < minEven) {\n                minEven = arr(i)\n                minEvenIndex\
    \ = i\n            }\n        }\n        if (minEvenIndex == -1) List()\n    \
    \    else List(minEven, minEvenIndex)", "        // Fill up this function body\n\
    \        // You can add another function as well, if required\n        var min\
    \ = Long.MaxValue\n        var index = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                index = i\n            }\n        }\n        if (index\
    \ == -1) return List[Long]()\n        return List[Long](min, index)", "      \
    \  if (arr.length == 0) return List[Long]()\n        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        if (evens.length == 0) return List[Long]()\n       \
    \ val min = evens.min\n        val index = arr.indexOf(min)\n        List[Long](min,\
    \ index.toLong)", "        var min = Long.MaxValue\n        var minIndex = -1\n\
    \        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) List() else List(min, minIndex)",
  "        var min = Long.MaxValue\n        var index = -1\n        for (i <- 0 until\
    \ arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n        \
    \        min = arr(i)\n                index = i\n            }\n        }\n \
    \       if (index == -1) List() else List(min, index)", "        if (arr.isEmpty)\
    \ return List()\n        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty)\
    \ return List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        val evens = arr.filter(_ % 2 == 0)\n    \
    \    if (evens.isEmpty) return List()\n        val min = evens.min\n        val\
    \ index = arr.indexOf(min)\n        List(min, index)", "        if (arr.isEmpty)\
    \ return List[Long]()\n        var min = Long.MaxValue\n        var minIndex =\
    \ -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0\
    \ && arr(i) < min) {\n                min = arr(i)\n                minIndex =\
    \ i\n            }\n        }\n        if (minIndex == -1) return List[Long]()\n\
    \        return List[Long](min, minIndex)", "        var min = Long.MaxValue\n\
    \        var index = -1\n        for (i <- 0 until arr.length) {\n           \
    \ val n = arr(i)\n            if (n % 2 == 0 && n < min) {\n                min\
    \ = n\n                index = i\n            }\n        }\n        if (index\
    \ == -1) List() else List(min, index)", "        val evens = arr.filter(_ % 2\
    \ == 0)\n        if (evens.isEmpty) return List()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        List(min, index)", "        var\
    \ minEven = Long.MaxValue\n        var minEvenIndex = -1\n        for (i <- 0\
    \ until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < minEven) {\n\
    \                minEven = arr(i)\n                minEvenIndex = i\n        \
    \    }\n        }\n        if (minEvenIndex == -1) List()\n        else List(minEven,\
    \ minEvenIndex.toLong)", "        val evens = arr.filter(_ % 2 == 0)\n       \
    \ if (evens.isEmpty) List()\n        else {\n            val min = evens.min\n\
    \            val index = arr.indexOf(min)\n            List(min, index)\n    \
    \    }", "        if (arr.isEmpty) return List()\n        val evens = arr.filter(_\
    \ % 2 == 0)\n        if (evens.isEmpty) return List()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        List(min, index)", "        var\
    \ min = Long.MaxValue\n        var index = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                index = i\n            }\n        }\n        if (index\
    \ == -1) List() else List(min, index)", "        val evens = arr.filter(_ % 2\
    \ == 0)\n        if (evens.isEmpty) return List()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        List(min, index)", "        var\
    \ min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) List() else List(min, minIndex)", "        var min = Long.MaxValue\n\
    \        var index = -1\n        for (i <- 0 until arr.length) {\n           \
    \ if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n     \
    \           index = i\n            }\n        }\n        if (index == -1) List()\
    \ else List(min, index)", "        if (arr.isEmpty) return List()\n        var\
    \ minEven = Long.MaxValue\n        var minEvenIndex = -1\n        for (i <- 0\
    \ until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < minEven) {\n\
    \                minEven = arr(i)\n                minEvenIndex = i\n        \
    \    }\n        }\n        if (minEvenIndex == -1) return List()\n        return\
    \ List(minEven, minEvenIndex)", "        val evens = arr.filter(x => x % 2 ==\
    \ 0)\n        if (evens.isEmpty) List()\n        else {\n            val min =\
    \ evens.min\n            val index = arr.indexOf(min)\n            List(min, index)\n\
    \        }", "        var min = Long.MaxValue\n        var minIndex = -1\n   \
    \     for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) List() else List(min, minIndex)",
  "        if (arr.length == 0) return List[Long]()\n        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) return List[Long]()\n        return List[Long](min, minIndex)", "      \
    \  if (arr.length == 0) return List[Long]()\n        var min = Long.MaxValue\n\
    \        var index = -1\n        for (i <- 0 until arr.length) {\n           \
    \ if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n     \
    \           index = i\n            }\n        }\n        if (index == -1) return\
    \ List[Long]()\n        return List[Long](min, index.toLong)", "        if (arr.isEmpty)\
    \ return List()\n        var min = Long.MaxValue\n        var minIndex = -1\n\
    \        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) return List()\n        return\
    \ List(min, minIndex)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) List() else List(min,\
    \ minIndex)", "        var min = -1\n        var minIndex = -1\n        for (i\
    \ <- 0 until arr.length) {\n            if (arr(i) % 2 == 0) {\n             \
    \   if (min == -1 || arr(i) < min) {\n                    min = arr(i).toInt\n\
    \                    minIndex = i\n                }\n            }\n        }\n\
    \        if (min == -1) List() else List(min, minIndex)", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List() else List(min, minIndex)", "        var result = List[Long]()\n \
    \       var min = Long.MaxValue\n        var index = -1\n        for (i <- 0 until\
    \ arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n        \
    \        min = arr(i)\n                index = i\n            }\n        }\n \
    \       if (index != -1) {\n            result = List(min, index.toLong)\n   \
    \     }\n        result", "        var min = Long.MaxValue\n        var index\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                index =\
    \ i\n            }\n        }\n        if (index == -1) List() else List(min,\
    \ index)", "        var min = Long.MaxValue\n        var minIndex = -1\n     \
    \   for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) return List()\n        return\
    \ List(min, minIndex)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) List() else List(min,\
    \ minIndex)", "        var min = Long.MaxValue\n        var minIndex = -1\n  \
    \      for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (min == Long.MaxValue) List()\n        else List(min,\
    \ minIndex)", "        var min = Long.MaxValue\n        var minIndex = -1\n  \
    \      for (i <- 0 until arr.length) {\n            val x = arr(i)\n         \
    \   if (x % 2 == 0 && x < min) {\n                min = x\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) List() else List(min,\
    \ minIndex)", "        var min = Long.MaxValue\n        var minIndex = -1\n  \
    \      for (i <- 0 until arr.length) {\n            val x = arr(i)\n         \
    \   if (x % 2 == 0 && x < min) {\n                min = x\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) List() else List(min,\
    \ minIndex)", "        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty)\
    \ return List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        val evens = arr.filter(x => x % 2 == 0)\n\
    \        if (evens.isEmpty) {\n            List()\n        } else {\n        \
    \    val min = evens.min\n            val index = arr.indexOf(min)\n         \
    \   List(min, index)\n        }", "        var min = Long.MaxValue\n        var\
    \ minIndex = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) List() else List(min,\
    \ minIndex)", "        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty)\
    \ List[Long]()\n        else {\n            val min = evens.min\n            val\
    \ index = arr.indexOf(min)\n            List(min, index)\n        }", "      \
    \  var min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until\
    \ arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n        \
    \        min = arr(i)\n                minIndex = i\n            }\n        }\n\
    \        if (minIndex == -1) List() else List(min, minIndex)", "        if (arr.isEmpty)\
    \ return List[Long]()\n        val evens = arr.filter(x => x % 2 == 0)\n     \
    \   if (evens.isEmpty) return List[Long]()\n        val min = evens.min\n    \
    \    val index = arr.indexOf(min)\n        List[Long](min, index.toLong)", " \
    \       var min = Long.MaxValue\n        var minIndex = -1\n        for (i <-\
    \ 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n\
    \                min = arr(i)\n                minIndex = i\n            }\n \
    \       }\n        if (minIndex == -1) List() else List(min, minIndex)", "   \
    \     // Fill up this function body\n        // You can add another function as\
    \ well, if required\n        var min = Long.MaxValue\n        var index = -1\n\
    \        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                index = i\n        \
    \    }\n        }\n        if (index == -1) List() else List(min, index)", " \
    \       val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return\
    \ List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        val evens = arr.filter(x => x % 2 == 0)\n\
    \        if (evens.isEmpty) return List()\n        val min = evens.min\n     \
    \   val index = arr.indexOf(min)\n        List(min, index)", "        if (arr.isEmpty)\
    \ return List[Long]()\n        val evens = arr.filter(_ % 2 == 0)\n        if\
    \ (evens.isEmpty) return List[Long]()\n        val min = evens.min\n        val\
    \ index = arr.indexOf(min)\n        List[Long](min, index.toLong)", "        val\
    \ evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return List()\n \
    \       val min = evens.min\n        val index = arr.indexOf(min)\n        List(min,\
    \ index)", "        var ans = List[Long]()\n        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex !=\
    \ -1) {\n            ans = List(min, minIndex)\n        }\n        ans", "   \
    \     val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) List()\n\
    \        else {\n            val min = evens.min\n            val index = arr.indexOf(min)\n\
    \            List(min, index)\n        }", "        // Write your code here\n\
    \        // To print results to the standard output you can use Console.println\n\
    \        // Example:\n        // Console.println(\"Hello world!\")\n        var\
    \ min = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) List()\n        else List(min, minIndex)", "        var min = Long.MaxValue\n\
    \        var index = -1\n        for (i <- 0 until arr.length) {\n           \
    \ if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n     \
    \           index = i\n            }\n        }\n        if (index == -1) List()\
    \ else List(min, index)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) return List()\n \
    \       return List(min, minIndex)", "        val evens = arr.filter(_ % 2 ==\
    \ 0)\n        if (evens.isEmpty) {\n            List()\n        } else {\n   \
    \         val min = evens.min\n            val index = arr.indexOf(min)\n    \
    \        List(min, index)\n        }", "        var min = Long.MaxValue\n    \
    \    var index = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n                index\
    \ = i\n            }\n        }\n        if (index == -1) List() else List(min,\
    \ index)", "        var min = Long.MaxValue\n        var minIndex = -1\n     \
    \   for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) List() else List(min, minIndex)",
  "        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) return List()\n\
    \        val min = evens.min\n        val index = arr.indexOf(min)\n        List(min,\
    \ index)", "        val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty)\
    \ List()\n        else {\n            val min = evens.min\n            val index\
    \ = arr.indexOf(min)\n            List(min, index)\n        }", "        if (arr.isEmpty)\
    \ return List[Long]()\n        val evens = arr.filter(x => x % 2 == 0)\n     \
    \   if (evens.isEmpty) return List[Long]()\n        val min = evens.min\n    \
    \    val index = arr.indexOf(min)\n        return List(min, index.toLong)", " \
    \       val evens = arr.filter(_ % 2 == 0)\n        if (evens.isEmpty) List()\n\
    \        else {\n            val min = evens.min\n            val index = arr.indexOf(min)\n\
    \            List(min, index)\n        }", "        val evens = arr.filter(_ %\
    \ 2 == 0)\n        if (evens.isEmpty) List()\n        else {\n            val\
    \ min = evens.min\n            val index = arr.indexOf(min)\n            List(min,\
    \ index)\n        }", "        val evens = arr.filter(_ % 2 == 0)\n        if\
    \ (evens.isEmpty) List()\n        else {\n            val min = evens.min\n  \
    \          val index = arr.indexOf(min)\n            List(min, index)\n      \
    \  }", "        var min = Long.MaxValue\n        var minIndex = -1\n        for\
    \ (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < min)\
    \ {\n                min = arr(i)\n                minIndex = i\n            }\n\
    \        }\n        if (minIndex == -1) return List()\n        return List(min,\
    \ minIndex)", "        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty)\
    \ List()\n        else {\n            val min = evens.min\n            val index\
    \ = arr.indexOf(min)\n            List(min, index)\n        }", "        var min\
    \ = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) List() else List(min, minIndex)", "        val evens = arr.filter(_ %\
    \ 2 == 0)\n        if (evens.isEmpty) List[Long]()\n        else {\n         \
    \   val min = evens.min\n            val index = arr.indexOf(min)\n          \
    \  List(min, index)\n        }", "        var min = Long.MaxValue\n        var\
    \ minIndex = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) return List[Long]()\n\
    \        return List[Long](min, minIndex)", "        var min = arr.filter(_ %\
    \ 2 == 0).min\n        if (min == Long.MaxValue) return List()\n        var index\
    \ = arr.indexOf(min)\n        return List(min, index)", "        val evens = arr.filter(_\
    \ % 2 == 0)\n        if (evens.isEmpty) List()\n        else {\n            val\
    \ min = evens.min\n            val index = arr.indexOf(min)\n            List(min,\
    \ index)\n        }", "        var min = Long.MaxValue\n        var minIndex =\
    \ -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0\
    \ && arr(i) < min) {\n                min = arr(i)\n                minIndex =\
    \ i\n            }\n        }\n        if (minIndex == -1) List() else List(min,\
    \ minIndex)", "        // Fill up this function body\n        // You can add another\
    \ function as well, if required\n        var min = Long.MaxValue\n        var\
    \ index = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n                index\
    \ = i\n            }\n        }\n        if (index == -1) List() else List(min,\
    \ index)", "        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty)\
    \ return List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        val evens = arr.filter(x => x % 2 == 0)\n\
    \        if (evens.isEmpty) return List()\n        val min = evens.min\n     \
    \   val index = arr.indexOf(min)\n        List(min, index)", "        var min\
    \ = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) List() else List(min, minIndex)", "        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) List() else List(min, minIndex)", "        // Fill up this function body\n\
    \        // You can add another function as well, if required\n        var min\
    \ = Long.MaxValue\n        var minIndex = -1\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) % 2 == 0 && arr(i) < min) {\n                min =\
    \ arr(i)\n                minIndex = i\n            }\n        }\n        if (minIndex\
    \ == -1) List() else List(min, minIndex)", "        val evens = arr.filter(x =>\
    \ x % 2 == 0)\n        if (evens.isEmpty) return List()\n        val min = evens.min\n\
    \        val index = arr.indexOf(min)\n        return List(min, index.toLong)",
  "        val evens = arr.filter(x => x % 2 == 0)\n        if (evens.isEmpty) return\
    \ List()\n        val min = evens.min\n        val index = arr.indexOf(min)\n\
    \        List(min, index)", "        var min = Long.MaxValue\n        var minIndex\
    \ = -1\n        for (i <- 0 until arr.length) {\n            if (arr(i) % 2 ==\
    \ 0 && arr(i) < min) {\n                min = arr(i)\n                minIndex\
    \ = i\n            }\n        }\n        if (minIndex == -1) List() else List(min,\
    \ minIndex)", "        var min = Long.MaxValue\n        var minIndex = -1\n  \
    \      for (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i)\
    \ < min) {\n                min = arr(i)\n                minIndex = i\n     \
    \       }\n        }\n        if (minIndex == -1) List() else List(min, minIndex)",
  "        if (arr.isEmpty) return List[Long]()\n        var min = Long.MaxValue\n\
    \        var minIndex = -1\n        for (i <- 0 until arr.length) {\n        \
    \    if (arr(i) % 2 == 0 && arr(i) < min) {\n                min = arr(i)\n  \
    \              minIndex = i\n            }\n        }\n        if (minIndex ==\
    \ -1) return List[Long]()\n        return List[Long](min, minIndex.toLong)", " \
    \       var minEven = Long.MaxValue\n        var minEvenIndex = -1\n        for\
    \ (i <- 0 until arr.length) {\n            if (arr(i) % 2 == 0 && arr(i) < minEven)\
    \ {\n                minEven = arr(i)\n                minEvenIndex = i\n    \
    \        }\n        }\n        if (minEvenIndex == -1) return List()\n       \
    \ return List(minEven, minEvenIndex)"]
stop_tokens:
- "\n    }\n"
