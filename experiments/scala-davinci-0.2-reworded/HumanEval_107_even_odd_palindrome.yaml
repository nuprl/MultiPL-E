name: HumanEval_107_even_odd_palindrome
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer n, return a tuple that has the number of even and\
  \ odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n\
  \    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    //\
  \ Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and\
  \ two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n\
  \    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3,\
  \ 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n\
  \    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd\
  \ integer palindromes respectively.\n    def evenOddPalindrome(n : Long) : Tuple2[Long,\
  \ Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(evenOddPalindrome((123l)).equals(((8l,\
  \ 13l))));\n    assert(evenOddPalindrome((12l)).equals(((4l, 6l))));\n    assert(evenOddPalindrome((3l)).equals(((1l,\
  \ 2l))));\n    assert(evenOddPalindrome((63l)).equals(((6l, 8l))));\n    assert(evenOddPalindrome((25l)).equals(((5l,\
  \ 6l))));\n    assert(evenOddPalindrome((19l)).equals(((4l, 6l))));\n    assert(evenOddPalindrome((9l)).equals(((4l,\
  \ 5l))));\n    assert(evenOddPalindrome((1l)).equals(((0l, 1l))));\n    }\n\n}\n"
completions: ["        // Fill up this function body\n        // `even` is the number\
    \ of even palindromes\n        // `odd` is the number of odd palindromes\n   \
    \     var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n\
    \            if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n\
    \                else odd += 1\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `even` is the number of even\
    \ integer palindromes\n        // `odd` is the number of odd integer palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) even\
    \ += 1\n                else odd += 1\n            }\n        }\n        (even,\
    \ odd)", "        // Fill up this function body\n        // `even` is the number\
    \ of even palindromes\n        // `odd` is the number of odd palindromes\n   \
    \     var even : Long = 0\n        var odd : Long = 0\n        for (i <- 1 to\
    \ n.toInt) {\n            if (isPalindrome(i)) {\n                if (i % 2 ==\
    \ 0) even += 1\n                else odd += 1\n            }\n        }\n    \
    \    return (even, odd)", "        // Fill up this function body\n        // `0`\
    \ indicates the number of even palindromes, and `1` indicates the number of odd\
    \ palindromes.\n        val result = new Array[Long](2)\n        for (i <- 1 to\
    \ n.toInt) {\n            if (isPalindrome(i)) {\n                if (i % 2 ==\
    \ 0) result(0) += 1\n                else result(1) += 1\n            }\n    \
    \    }\n        (result(0), result(1))", "        // Fill up this function body\n\
    \        // `even` is the number of even integer palindromes\n        // `odd`\
    \ is the number of odd integer palindromes\n        var even = 0l\n        var\
    \ odd = 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `n` is the upper bound of the range\n        // You can use\
    \ `isPalindrome` function to check if a number is palindrome\n        // You can\
    \ use `isEven` function to check if a number is even\n        // You can use `isOdd`\
    \ function to check if a number is odd\n        // You can use `isPrime` function\
    \ to check if a number is prime\n        // You can use `isComposite` function\
    \ to check if a number is composite\n        // You can use `isPerfectSquare`\
    \ function to check if a number is perfect square\n        // You can use `isPerfectCube`\
    \ function to check if a number is perfect cube\n        // You can use `isFibonacci`\
    \ function to check if a number is fibonacci\n        // You can use `isHappy`\
    \ function to check if a number is happy\n        // You can use `isTriangular`\
    \ function to check if a number is triangular\n        // You can use `isSquare`\
    \ function to check if a number is square\n        // You can use `isPentagonal`\
    \ function to check if a number is pentagonal\n        // You can use `isHexagonal`\
    \ function to check if a number is hexagonal\n        // You can use `isHeptagonal`\
    \ function to check if a number is heptagonal\n        // You can use `isOctagonal`\
    \ function to check if a number is octagonal\n        // You can use `isNonagonal`\
    \ function to check if a number is nonagonal\n        // You can use `isDecagonal`\
    \ function to check if a number is decagonal\n        // You can use `isUndecagonal`\
    \ function to check if a number is undecagonal\n        // You can use `isDodecagonal`\
    \ function to check if a number is dodecagonal\n        // You can use `isTridecagonal`\
    \ function to check if a number is tridecagonal\n        // You can use `isTetradecagonal`\
    \ function to check if a number is tetradecagonal\n        // You can use `isPentadecagonal`\
    \ function to check if a number is pentadecagonal\n        // You can use `isHexadecagonal`\
    \ function to check if a number is hexadecagonal\n        // You can use `", " \
    \       // Fill up this function body\n        // `even` is the number of even\
    \ integer palindromes\n        // `odd` is the number of odd integer palindromes\n\
    \        var even : Long = 0\n        var odd : Long = 0\n        for (i <- 1\
    \ to n.toInt) {\n            if (isPalindrome(i)) {\n                if (i % 2\
    \ == 0) even += 1\n                else odd += 1\n            }\n        }\n \
    \       (even, odd)", "        // Fill up this function body\n        // `even`\
    \ is the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i.toString)) {\n                if (i % 2 ==\
    \ 0) even += 1\n                else odd += 1\n            }\n        }\n    \
    \    (even, odd)", "        // Fill up this function body\n        // `even` is\
    \ the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) even\
    \ += 1\n                else odd += 1\n            }\n        }\n        (even,\
    \ odd)", "        // Fill up this function body\n        // `even` is the number\
    \ of even integer palindromes\n        // `odd` is the number of odd integer palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i.toString)) {\n                if (i % 2 ==\
    \ 0) even += 1\n                else odd += 1\n            }\n        }\n    \
    \    (even, odd)", "        // Fill up this function body\n        // `even` is\
    \ the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) even\
    \ += 1\n                else odd += 1\n            }\n        }\n        (even,\
    \ odd)", "        // Fill up this function body\n        // `even` is the number\
    \ of even palindromes\n        // `odd` is the number of odd palindromes\n   \
    \     var even = 0l\n        var odd = 0l\n        for (i <- 1l to n) {\n    \
    \        if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n \
    \               else odd += 1\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `n` is the upper bound of the\
    \ range\n        // You can use the `isPalindrome` function defined in the next\
    \ cell\n        // You can use the `isEven` function defined in the next cell\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (isEven(i)) {\n  \
    \                  even += 1\n                } else {\n                    odd\
    \ += 1\n                }\n            }\n        }\n        (even, odd)", " \
    \       // Fill up this function body\n        // `even` is the number of even\
    \ integer palindromes\n        // `odd` is the number of odd integer palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) even\
    \ += 1\n                else odd += 1\n            }\n        }\n        (even,\
    \ odd)", "        // Fill up this function body\n        // `even` is the number\
    \ of even palindromes\n        // `odd` is the number of odd palindromes\n   \
    \     var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n\
    \            if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n\
    \                else odd += 1\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `n` is the input number\n   \
    \     // You have to return a tuple of two numbers\n        // First number is\
    \ the number of even palindromes\n        // Second number is the number of odd\
    \ palindromes\n        var even = 0l\n        var odd = 0l\n        for (i <-\
    \ 1 to n.toInt) {\n            if (isPalindrome(i)) {\n                if (i %\
    \ 2 == 0) even += 1\n                else odd += 1\n            }\n        }\n\
    \        (even, odd)", "        // Fill up this function body\n        // `even`\
    \ is the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1l to n) {\n \
    \           if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n\
    \                else odd += 1\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `0` is a placeholder. Please\
    \ modify it.\n        (0l, 0l)", "        // Fill up this function body\n    \
    \    // `n` is the input number\n        // You have to return a tuple of type\
    \ Tuple2[Long, Long]\n        // The first element of the tuple should be the\
    \ number of even palindromes\n        // The second element of the tuple should\
    \ be the number of odd palindromes\n        var even = 0\n        var odd = 0\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n     \
    \           if (i % 2 == 0) even += 1\n                else odd += 1\n       \
    \     }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even palindromes\n        // `odd` is the\
    \ number of odd palindromes\n        var even = 0l\n        var odd = 0l\n   \
    \     for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n        \
    \        if (i % 2 == 0) even += 1\n                else odd += 1\n          \
    \  }\n        }\n        (even, odd)"]
stop_tokens:
- "\n    }\n"
