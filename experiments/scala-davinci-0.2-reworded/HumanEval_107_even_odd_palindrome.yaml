name: HumanEval_107_even_odd_palindrome
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer n, return a tuple that has the number of even and\
  \ odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n\
  \    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    //\
  \ Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and\
  \ two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n\
  \    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3,\
  \ 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n\
  \    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd\
  \ integer palindromes respectively.\n    def evenOddPalindrome(n : Long) : Tuple2[Long,\
  \ Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(evenOddPalindrome((123l)).equals(((8l,\
  \ 13l))));\n    assert(evenOddPalindrome((12l)).equals(((4l, 6l))));\n    assert(evenOddPalindrome((3l)).equals(((1l,\
  \ 2l))));\n    assert(evenOddPalindrome((63l)).equals(((6l, 8l))));\n    assert(evenOddPalindrome((25l)).equals(((5l,\
  \ 6l))));\n    assert(evenOddPalindrome((19l)).equals(((4l, 6l))));\n    assert(evenOddPalindrome((9l)).equals(((4l,\
  \ 5l))));\n    assert(evenOddPalindrome((1l)).equals(((0l, 1l))));\n    }\n\n}\n"
completions: ["        // Fill up this function body\n        // `even` is the number\
    \ of even palindromes\n        // `odd` is the number of odd palindromes\n   \
    \     var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n\
    \            if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n\
    \                else odd += 1\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `even` is the number of even\
    \ integer palindromes\n        // `odd` is the number of odd integer palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) even\
    \ += 1\n                else odd += 1\n            }\n        }\n        (even,\
    \ odd)", "        // Fill up this function body\n        // `even` is the number\
    \ of even palindromes\n        // `odd` is the number of odd palindromes\n   \
    \     var even : Long = 0\n        var odd : Long = 0\n        for (i <- 1 to\
    \ n.toInt) {\n            if (isPalindrome(i)) {\n                if (i % 2 ==\
    \ 0) even += 1\n                else odd += 1\n            }\n        }\n    \
    \    return (even, odd)", "        // Fill up this function body\n        // `0`\
    \ indicates the number of even palindromes, and `1` indicates the number of odd\
    \ palindromes.\n        val result = new Array[Long](2)\n        for (i <- 1 to\
    \ n.toInt) {\n            if (isPalindrome(i)) {\n                if (i % 2 ==\
    \ 0) result(0) += 1\n                else result(1) += 1\n            }\n    \
    \    }\n        (result(0), result(1))", "        // Fill up this function body\n\
    \        // `even` is the number of even integer palindromes\n        // `odd`\
    \ is the number of odd integer palindromes\n        var even = 0l\n        var\
    \ odd = 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `n` is the upper bound of the range\n        // You can use\
    \ `isPalindrome` function to check if a number is palindrome\n        // You can\
    \ use `isEven` function to check if a number is even\n        // You can use `isOdd`\
    \ function to check if a number is odd\n        // You can use `isPrime` function\
    \ to check if a number is prime\n        // You can use `isComposite` function\
    \ to check if a number is composite\n        // You can use `isPerfectSquare`\
    \ function to check if a number is perfect square\n        // You can use `isPerfectCube`\
    \ function to check if a number is perfect cube\n        // You can use `isFibonacci`\
    \ function to check if a number is fibonacci\n        // You can use `isHappy`\
    \ function to check if a number is happy\n        // You can use `isTriangular`\
    \ function to check if a number is triangular\n        // You can use `isSquare`\
    \ function to check if a number is square\n        // You can use `isPentagonal`\
    \ function to check if a number is pentagonal\n        // You can use `isHexagonal`\
    \ function to check if a number is hexagonal\n        // You can use `isHeptagonal`\
    \ function to check if a number is heptagonal\n        // You can use `isOctagonal`\
    \ function to check if a number is octagonal\n        // You can use `isNonagonal`\
    \ function to check if a number is nonagonal\n        // You can use `isDecagonal`\
    \ function to check if a number is decagonal\n        // You can use `isUndecagonal`\
    \ function to check if a number is undecagonal\n        // You can use `isDodecagonal`\
    \ function to check if a number is dodecagonal\n        // You can use `isTridecagonal`\
    \ function to check if a number is tridecagonal\n        // You can use `isTetradecagonal`\
    \ function to check if a number is tetradecagonal\n        // You can use `isPentadecagonal`\
    \ function to check if a number is pentadecagonal\n        // You can use `isHexadecagonal`\
    \ function to check if a number is hexadecagonal\n        // You can use `", " \
    \       // Fill up this function body\n        // `even` is the number of even\
    \ integer palindromes\n        // `odd` is the number of odd integer palindromes\n\
    \        var even : Long = 0\n        var odd : Long = 0\n        for (i <- 1\
    \ to n.toInt) {\n            if (isPalindrome(i)) {\n                if (i % 2\
    \ == 0) even += 1\n                else odd += 1\n            }\n        }\n \
    \       (even, odd)", "        // Fill up this function body\n        // `even`\
    \ is the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i.toString)) {\n                if (i % 2 ==\
    \ 0) even += 1\n                else odd += 1\n            }\n        }\n    \
    \    (even, odd)", "        // Fill up this function body\n        // `even` is\
    \ the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) even\
    \ += 1\n                else odd += 1\n            }\n        }\n        (even,\
    \ odd)", "        // Fill up this function body\n        // `even` is the number\
    \ of even integer palindromes\n        // `odd` is the number of odd integer palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i.toString)) {\n                if (i % 2 ==\
    \ 0) even += 1\n                else odd += 1\n            }\n        }\n    \
    \    (even, odd)", "        // Fill up this function body\n        // `even` is\
    \ the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) even\
    \ += 1\n                else odd += 1\n            }\n        }\n        (even,\
    \ odd)", "        // Fill up this function body\n        // `even` is the number\
    \ of even palindromes\n        // `odd` is the number of odd palindromes\n   \
    \     var even = 0l\n        var odd = 0l\n        for (i <- 1l to n) {\n    \
    \        if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n \
    \               else odd += 1\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `n` is the upper bound of the\
    \ range\n        // You can use the `isPalindrome` function defined in the next\
    \ cell\n        // You can use the `isEven` function defined in the next cell\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (isEven(i)) {\n  \
    \                  even += 1\n                } else {\n                    odd\
    \ += 1\n                }\n            }\n        }\n        (even, odd)", " \
    \       // Fill up this function body\n        // `even` is the number of even\
    \ integer palindromes\n        // `odd` is the number of odd integer palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) even\
    \ += 1\n                else odd += 1\n            }\n        }\n        (even,\
    \ odd)", "        // Fill up this function body\n        // `even` is the number\
    \ of even palindromes\n        // `odd` is the number of odd palindromes\n   \
    \     var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n\
    \            if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n\
    \                else odd += 1\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `n` is the input number\n   \
    \     // You have to return a tuple of two numbers\n        // First number is\
    \ the number of even palindromes\n        // Second number is the number of odd\
    \ palindromes\n        var even = 0l\n        var odd = 0l\n        for (i <-\
    \ 1 to n.toInt) {\n            if (isPalindrome(i)) {\n                if (i %\
    \ 2 == 0) even += 1\n                else odd += 1\n            }\n        }\n\
    \        (even, odd)", "        // Fill up this function body\n        // `even`\
    \ is the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1l to n) {\n \
    \           if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n\
    \                else odd += 1\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `0` is a placeholder. Please\
    \ modify it.\n        (0l, 0l)", "        // Fill up this function body\n    \
    \    // `n` is the input number\n        // You have to return a tuple of type\
    \ Tuple2[Long, Long]\n        // The first element of the tuple should be the\
    \ number of even palindromes\n        // The second element of the tuple should\
    \ be the number of odd palindromes\n        var even = 0\n        var odd = 0\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n     \
    \           if (i % 2 == 0) even += 1\n                else odd += 1\n       \
    \     }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even palindromes\n        // `odd` is the\
    \ number of odd palindromes\n        var even = 0l\n        var odd = 0l\n   \
    \     for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n        \
    \        if (i % 2 == 0) even += 1\n                else odd += 1\n          \
    \  }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `n` is the number of elements in the range(1, n)\n        // `even`\
    \ is the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) even\
    \ += 1\n                else odd += 1\n            }\n        }\n        return\
    \ (even, odd)", "        // Fill up this function body\n        // `even` is the\
    \ number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even : Long = 0\n        var odd : Long = 0\n        for (i <- 1\
    \ to n.toInt) {\n            if (isPalindrome(i.toString)) {\n               \
    \ if (i % 2 == 0) even += 1\n                else odd += 1\n            }\n  \
    \      }\n        (even, odd)", "        // Fill up this function body\n     \
    \   // `even` is the number of even palindromes\n        // `odd` is the number\
    \ of odd palindromes\n        var even : Long = 0\n        var odd : Long = 0\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n     \
    \           if (i % 2 == 0) even += 1\n                else odd += 1\n       \
    \     }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `n` is the given number\n        // You have to return a tuple of\
    \ 2 longs\n        // First long is the number of even palindromes\n        //\
    \ Second long is the number of odd palindromes\n        // For example, if n =\
    \ 12, then you have to return (4, 6)\n        // because there are 4 even palindromes\
    \ and 6 odd palindromes\n        // between 1 and 12, inclusive.\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n       \
    \     if (isPalindrome(i.toString)) {\n                if (i % 2 == 0) even +=\
    \ 1\n                else odd += 1\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `n` is the upper bound of the\
    \ range\n        // You can use `isPalindrome` function to check if a number is\
    \ palindrome or not\n        // You can use `isEven` function to check if a number\
    \ is even or not\n        var even = 0\n        var odd = 0\n        for (i <-\
    \ 1 to n.toInt) {\n            if (isPalindrome(i)) {\n                if (isEven(i))\
    \ {\n                    even += 1\n                } else {\n               \
    \     odd += 1\n                }\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `n` is the input number\n   \
    \     // You have to return a tuple of two numbers, the first one is the number\
    \ of even palindromes,\n        // the second one is the number of odd palindromes.\n\
    \        (0l, 0l)", "        // Fill up this function body\n        // `n` is\
    \ the input number\n        // You have to return a tuple of Long type\n     \
    \   // Do not print anything in the function\n        // Constraints are as mentioned\
    \ in the problem statement\n        var even = 0l\n        var odd = 0l\n    \
    \    for (i <- 1 to n.toInt) {\n            if (isPalindrome(i.toString)) {\n\
    \                if (i % 2 == 0) even += 1\n                else odd += 1\n  \
    \          }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `n` is the upper bound of the range\n        // You can use\
    \ `isPalindrome` function to check if a number is palindrome\n        // You can\
    \ use `isEven` function to check if a number is even\n        // You can use `isOdd`\
    \ function to check if a number is odd\n        // You can use `isPrime` function\
    \ to check if a number is prime\n        // You can use `isComposite` function\
    \ to check if a number is composite\n        // You can use `isPerfectSquare`\
    \ function to check if a number is perfect square\n        // You can use `isPerfectCube`\
    \ function to check if a number is perfect cube\n        // You can use `isFibonacci`\
    \ function to check if a number is fibonacci\n        // You can use `isHappy`\
    \ function to check if a number is happy\n        // You can use `isTriangular`\
    \ function to check if a number is triangular\n        // You can use `isSquare`\
    \ function to check if a number is square\n        // You can use `isPentagonal`\
    \ function to check if a number is pentagonal\n        // You can use `isHexagonal`\
    \ function to check if a number is hexagonal\n        // You can use `isHeptagonal`\
    \ function to check if a number is heptagonal\n        // You can use `isOctagonal`\
    \ function to check if a number is octagonal\n        // You can use `isNonagonal`\
    \ function to check if a number is nonagonal\n        // You can use `isDecagonal`\
    \ function to check if a number is decagonal\n        // You can use `isUndecagonal`\
    \ function to check if a number is undecagonal\n        // You can use `isDodecagonal`\
    \ function to check if a number is dodecagonal\n        // You can use `isTridecagonal`\
    \ function to check if a number is tridecagonal\n        // You can use `isTetradecagonal`\
    \ function to check if a number is tetradecagonal\n        // You can use `isPentadecagonal`\
    \ function to check if a number is pentadecagonal\n        // You can use `isHexadecagonal`\
    \ function to check if a number is hexadecagonal\n        // You can use `", " \
    \       // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even : Long = 0\n        var odd : Long = 0\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) even\
    \ += 1\n                else odd += 1\n            }\n        }\n        (even,\
    \ odd)", "        // Fill up this function body\n        // `even` is the number\
    \ of even integer palindromes\n        // `odd` is the number of odd integer palindromes\n\
    \        var even : Long = 0\n        var odd : Long = 0\n        for (i <- 1\
    \ to n.toInt) {\n            if (isPalindrome(i)) {\n                if (i % 2\
    \ == 0) even += 1\n                else odd += 1\n            }\n        }\n \
    \       (even, odd)", "        // Fill up this function body\n        // `0` is\
    \ a placeholder. Please modify it.\n        (0l, 0l)", "        // Fill up this\
    \ function body\n        // `even` is the number of even palindromes\n       \
    \ // `odd` is the number of odd palindromes\n        var even = 0l\n        var\
    \ odd = 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i.toString))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n     \
    \           if (i % 2 == 0) even += 1\n                else odd += 1\n       \
    \     }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `n` is the input number\n        // You have to return a tuple of\
    \ two numbers, first number is the number of even palindromes\n        // and\
    \ the second number is the number of odd palindromes\n        var even = 0l\n\
    \        var odd = 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even integer palindromes\n        //\
    \ `odd` is the number of odd integer palindromes\n        var even = 0l\n    \
    \    var odd = 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `n` is the upper bound of the range\n        var even = 0\n\
    \        var odd = 0\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        return (even, odd)", "        var even = 0l\n\
    \        var odd = 0l\n        for (i <- 1 to n.toInt) {\n            if (i.toString\
    \ == i.toString.reverse) {\n                if (i % 2 == 0) even += 1\n      \
    \          else odd += 1\n            }\n        }\n        (even, odd)", "  \
    \      // Fill up this function body\n        // `n` is the upper bound of the\
    \ range\n        // You can use `isPalindrome` function to check if a number is\
    \ palindrome\n        // You can use `isEven` function to check if a number is\
    \ even\n        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (isEven(i)) {\n  \
    \                  even += 1\n                } else {\n                    odd\
    \ += 1\n                }\n            }\n        }\n        (even, odd)", " \
    \       // Fill up this function body\n        // `even` is the number of even\
    \ integer palindromes\n        // `odd` is the number of odd integer palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) even\
    \ += 1\n                else odd += 1\n            }\n        }\n        (even,\
    \ odd)", "        // Fill up this function body\n        // `even` is the number\
    \ of even palindromes\n        // `odd` is the number of odd palindromes\n   \
    \     var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n\
    \            if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n\
    \                else odd += 1\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n       \
    \     if (i.toString == i.toString.reverse) {\n                if (i % 2 == 0)\
    \ even += 1\n                else odd += 1\n            }\n        }\n       \
    \ (even, odd)", "        // Fill up this function body\n        // `even` is the\
    \ number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) even\
    \ += 1\n                else odd += 1\n            }\n        }\n        (even,\
    \ odd)", "        // Fill up this function body\n        // `0` is a placeholder.\
    \ Please modify it\n        (0l, 0l)", "        // Fill up this function body\n\
    \        // `even` is the number of even integer palindromes\n        // `odd`\
    \ is the number of odd integer palindromes\n        var even = 0l\n        var\
    \ odd = 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `n` is the upper bound of the range\n        // You can use\
    \ `isPalindrome` function to check if a number is a palindrome\n        // You\
    \ can use `isEven` function to check if a number is even\n        // You can use\
    \ `isOdd` function to check if a number is odd\n        var even = 0\n       \
    \ var odd = 0\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (isEven(i)) {\n                    even += 1\n       \
    \         } else {\n                    odd += 1\n                }\n        \
    \    }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even palindromes\n        // `odd` is the\
    \ number of odd palindromes\n        var even = 0l\n        var odd = 0l\n   \
    \     for (i <- 1 to n.toInt) {\n            if (isPalindrome(i.toString)) {\n\
    \                if (i % 2 == 0) even += 1\n                else odd += 1\n  \
    \          }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `n` is the upper bound of the range\n        // You can use\
    \ the `isPalindrome` function provided below\n        // You can use the `isEven`\
    \ function provided below\n        var even = 0\n        var odd = 0\n       \
    \ for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n            \
    \    if (isEven(i)) {\n                    even += 1\n                } else {\n\
    \                    odd += 1\n                }\n            }\n        }\n \
    \       (even, odd)", "        // Fill up this function body\n        // `even`\
    \ is the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i.toString)) {\n                if (i % 2 ==\
    \ 0) even += 1\n                else odd += 1\n            }\n        }\n    \
    \    (even, odd)", "        // Fill up this function body\n        // `n` is the\
    \ upper bound of the range of integers.\n        // You can use the helper function\
    \ `isPalindrome` to check if a number is a palindrome.\n        // You can use\
    \ the helper function `isEven` to check if a number is even.\n        // You can\
    \ use the helper function `isOdd` to check if a number is odd.\n        var even\
    \ = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n            if\
    \ (isPalindrome(i)) {\n                if (isEven(i)) {\n                    even\
    \ += 1\n                } else {\n                    odd += 1\n             \
    \   }\n            }\n        }\n        (even, odd)", "        // Fill up this\
    \ function body\n        // `n` is the upper bound of the range\n        // You\
    \ can use `isPalindrome` function to check if a number is palindrome or not\n\
    \        // You can use `isEven` function to check if a number is even or not\n\
    \        // You can use `isOdd` function to check if a number is odd or not\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (isEven(i)) {\n  \
    \                  even += 1\n                } else {\n                    odd\
    \ += 1\n                }\n            }\n        }\n        (even, odd)", " \
    \       // Fill up this function body\n        // `n` is the upper bound of the\
    \ range\n        // You can use `isPalindrome` function to check if a number is\
    \ palindrome\n        // You can use `isEven` function to check if a number is\
    \ even\n        var even = 0\n        var odd = 0\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (isEven(i)) {\n  \
    \                  even += 1\n                } else {\n                    odd\
    \ += 1\n                }\n            }\n        }\n        (even, odd)", " \
    \       // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n       \
    \     if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n    \
    \            else odd += 1\n            }\n        }\n        (even, odd)", " \
    \       // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n       \
    \     if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n    \
    \            else odd += 1\n            }\n        }\n        (even, odd)", " \
    \       // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n       \
    \     if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n    \
    \            else odd += 1\n            }\n        }\n        (even, odd)", " \
    \       // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n       \
    \     if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n    \
    \            else odd += 1\n            }\n        }\n        (even, odd)", " \
    \       // Fill up this function body\n        // `n` is the upper bound of the\
    \ range of numbers\n        // You have to return a tuple of two numbers,\n  \
    \      // the first number is the number of even palindromes,\n        // the\
    \ second number is the number of odd palindromes.\n        // For example, if\
    \ n = 12, then the range is [1, 12],\n        // and there are 4 even palindromes\
    \ and 6 odd palindromes.\n        // So you should return (4, 6).\n        val\
    \ even = (1 to n.toInt).filter(x => x.toString == x.toString.reverse && x % 2\
    \ == 0).size\n        val odd = (1 to n.toInt).filter(x => x.toString == x.toString.reverse\
    \ && x % 2 != 0).size\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n     \
    \           if (i % 2 == 0) even += 1\n                else odd += 1\n       \
    \     }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `n` is the upper bound of the range, inclusive.\n        // You have\
    \ to return a tuple that has the number of even and odd integer palindromes respectively.\n\
    \        // For example, if n is 3, then the range is (1, 3), and the integer\
    \ palindromes are 1, 2, 3.\n        // There is one even integer palindrome, and\
    \ two odd integer palindromes.\n        // So, you have to return (1, 2).\n  \
    \      // You can use `isPalindrome` function to check if a number is palindrome\
    \ or not.\n        // You can use `isEven` function to check if a number is even\
    \ or not.\n        // You can use `isOdd` function to check if a number is odd\
    \ or not.\n        var even = 0\n        var odd = 0\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (isEven(i)) {\n  \
    \                  even += 1\n                } else {\n                    odd\
    \ += 1\n                }\n            }\n        }\n        (even, odd)", " \
    \       // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n       \
    \     if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n    \
    \            else odd += 1\n            }\n        }\n        return (even, odd)",
  "        // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n       \
    \     if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n    \
    \            else odd += 1\n            }\n        }\n        (even, odd)", " \
    \       // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n       \
    \     if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n    \
    \            else odd += 1\n            }\n        }\n        (even, odd)", " \
    \       // Fill up this function body\n        // `n` is the upper bound of the\
    \ range\n        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i.toString)) {\n                if (i % 2 ==\
    \ 0) even += 1\n                else odd += 1\n            }\n        }\n    \
    \    (even, odd)", "        // Fill up this function body\n        // `even` is\
    \ the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i.toString)) {\n                if (i % 2 ==\
    \ 0) even += 1\n                else odd += 1\n            }\n        }\n    \
    \    (even, odd)", "        // Fill up this function body\n        // `even` is\
    \ the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) even\
    \ += 1\n                else odd += 1\n            }\n        }\n        (even,\
    \ odd)", "        // Fill up this function body\n        // `even` is the number\
    \ of even palindromes\n        // `odd` is the number of odd palindromes\n   \
    \     var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n\
    \            if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n\
    \                else odd += 1\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `n` is the upper limit of the\
    \ range\n        // You can use `isPalindrome` function to check if a number is\
    \ palindrome or not\n        // You can use `isEven` function to check if a number\
    \ is even or not\n        var even = 0\n        var odd = 0\n        for (i <-\
    \ 1 to n.toInt) {\n            if (isPalindrome(i)) {\n                if (isEven(i))\
    \ {\n                    even += 1\n                } else {\n               \
    \     odd += 1\n                }\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `n` is the upper bound of the\
    \ range\n        // `n` is guaranteed to be a positive integer\n        // `n`\
    \ is guaranteed to be less than or equal to 10^3\n        // The returned tuple\
    \ has the number of even and odd integer palindromes respectively.\n        //\
    \ For example, if n = 3, the returned tuple should be (1, 2)\n        // because\
    \ there is 1 even integer palindrome and 2 odd integer palindromes in the range\
    \ (1, 3)\n        // Hint:\n        // 1. You can use the function `isPalindrome`\
    \ to check if a number is a palindrome.\n        // 2. You can use the function\
    \ `isEven` to check if a number is even.\n        (0l, 0l)", "        // Fill\
    \ up this function body\n        // `even` is the number of even palindromes\n\
    \        // `odd` is the number of odd palindromes\n        var even = 0l\n  \
    \      var odd = 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n     \
    \           if (i % 2 == 0) even += 1\n                else odd += 1\n       \
    \     }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even palindromes\n        // `odd` is the\
    \ number of odd palindromes\n        var even = 0l\n        var odd = 0l\n   \
    \     for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n             \
    \   if (i % 2 == 0) even += 1\n                else odd += 1\n            }\n\
    \        }\n        (even, odd)", "        // Fill up this function body\n   \
    \     // `even` is the number of even palindromes\n        // `odd` is the number\
    \ of odd palindromes\n        var even = 0l\n        var odd = 0l\n        for\
    \ (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n                if\
    \ (i % 2 == 0) even += 1 else odd += 1\n            }\n        }\n        (even,\
    \ odd)", "        // Fill up this function body\n        // `n` is the upper bound\
    \ of the range\n        // You can use `isPalindrome` function to check if a number\
    \ is palindrome\n        // You can use `isEven` function to check if a number\
    \ is even\n        // You can use `isOdd` function to check if a number is odd\n\
    \        (0l, 0l)", "        // Fill up this function body\n        // `even`\
    \ is the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1l to n) {\n \
    \           if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\
    \ else odd += 1\n            }\n        }\n        (even, odd)", "        // Fill\
    \ up this function body\n        // `even` is the number of even palindromes\n\
    \        // `odd` is the number of odd palindromes\n        var even = 0l\n  \
    \      var odd = 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i.toString))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `n` is the input number\n        // You have to return a tuple\
    \ of (Long, Long)\n        // (number of even palindromes, number of odd palindromes)\n\
    \        var even = 0\n        var odd = 0\n        for (i <- 1 to n.toInt) {\n\
    \            if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n\
    \                else odd += 1\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `n` is the upper bound of the\
    \ range\n        var even = 0\n        var odd = 0\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i.toString)) {\n                if (i % 2 ==\
    \ 0) {\n                    even += 1\n                } else {\n            \
    \        odd += 1\n                }\n            }\n        }\n        (even,\
    \ odd)", "        // Fill up this function body\n        // `even` is the number\
    \ of even palindromes\n        // `odd` is the number of odd palindromes\n   \
    \     var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n\
    \            if (isPalindrome(i.toString)) {\n                if (i % 2 == 0)\
    \ even += 1\n                else odd += 1\n            }\n        }\n       \
    \ (even, odd)", "        // Fill up this function body\n        // `0` indicates\
    \ the number of even integer palindromes\n        // `1` indicates the number\
    \ of odd integer palindromes\n        (0l, 0l)", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even : Long = 0\n        var odd\
    \ : Long = 0\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even integer palindromes\n        //\
    \ `odd` is the number of odd integer palindromes\n        var even : Long = 0\n\
    \        var odd : Long = 0\n        for (i <- 1 to n.toInt) {\n            if\
    \ (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n           \
    \     else odd += 1\n            }\n        }\n        (even, odd)", "       \
    \ // Fill up this function body\n        // `n` is the input number\n        //\
    \ You have to return a tuple of two numbers.\n        // The first number is the\
    \ number of even integer palindromes.\n        // The second number is the number\
    \ of odd integer palindromes.\n        var even = 0\n        var odd = 0\n   \
    \     for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n        \
    \        if (i % 2 == 0) even += 1\n                else odd += 1\n          \
    \  }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even palindromes\n        // `odd` is the\
    \ number of odd palindromes\n        var even: Long = 0\n        var odd: Long\
    \ = 0\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n\
    \                if (i % 2 == 0) {\n                    even += 1\n          \
    \      } else {\n                    odd += 1\n                }\n           \
    \ }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even palindromes\n        // `odd` is the\
    \ number of odd palindromes\n        var even = 0l\n        var odd = 0l\n   \
    \     for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n        \
    \        if (i % 2 == 0) even += 1\n                else odd += 1\n          \
    \  }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `n` is the upper bound of the range, inclusive.\n        // You can\
    \ use `isPalindrome` function to check if a number is palindrome.\n        //\
    \ You can use `isEven` function to check if a number is even.\n        // You\
    \ can use `isOdd` function to check if a number is odd.\n        var even = 0\n\
    \        var odd = 0\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (isEven(i)) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `n` is the upper bound of the range, inclusive.\n        //\
    \ You have to return a tuple that has the number of even and odd integer palindromes\
    \ respectively.\n        var even = 0l\n        var odd = 0l\n        for (i <-\
    \ 1 to n.toInt) {\n            if (i.toString == i.toString.reverse) {\n     \
    \           if (i % 2 == 0) even += 1\n                else odd += 1\n       \
    \     }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even integer palindromes\n        // `odd`\
    \ is the number of odd integer palindromes\n        var even = 0l\n        var\
    \ odd = 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i.toString))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1 to n.toInt) {\n            if (i.toString == i.toString.reverse)\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n     \
    \           if (i % 2 == 0) even += 1\n                else odd += 1\n       \
    \     }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even palindromes\n        // `odd` is the\
    \ number of odd palindromes\n        var even = 0l\n        var odd = 0l\n   \
    \     for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n             \
    \   if (i % 2 == 0) even += 1\n                else odd += 1\n            }\n\
    \        }\n        (even, odd)", "        // Fill up this function body\n   \
    \     // `even` is the number of even palindromes\n        // `odd` is the number\
    \ of odd palindromes\n        var even = 0l\n        var odd = 0l\n        for\
    \ (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n                if\
    \ (i % 2 == 0) even += 1\n                else odd += 1\n            }\n     \
    \   }\n        (even, odd)", "        // Fill up this function body\n        //\
    \ `even` is the number of even integer palindromes\n        // `odd` is the number\
    \ of odd integer palindromes\n        var even : Long = 0\n        var odd : Long\
    \ = 0\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n\
    \                if (i % 2 == 0) even += 1\n                else odd += 1\n  \
    \          }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n     \
    \           if (i % 2 == 0) {\n                    even += 1\n               \
    \ } else {\n                    odd += 1\n                }\n            }\n \
    \       }\n        (even, odd)", "        // Fill up this function body\n    \
    \    // `even` is the number of even integer palindromes\n        // `odd` is\
    \ the number of odd integer palindromes\n        var even : Long = 0\n       \
    \ var odd : Long = 0\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i.toString))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `0` indicates the number of even palindromes\n        // `1`\
    \ indicates the number of odd palindromes\n        val result = Array(0l, 0l)\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n     \
    \           if (i % 2 == 0) result(0) += 1\n                else result(1) +=\
    \ 1\n            }\n        }\n        (result(0), result(1))", "        // Fill\
    \ up this function body\n        // `even` is the number of even palindromes\n\
    \        // `odd` is the number of odd palindromes\n        var even = 0l\n  \
    \      var odd = 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i.toString))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i.toString))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n     \
    \           if (i % 2 == 0) even += 1\n                else odd += 1\n       \
    \     }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even palindromes\n        // `odd` is the\
    \ number of odd palindromes\n        var even = 0l\n        var odd = 0l\n   \
    \     for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n        \
    \        if (i % 2 == 0) even += 1\n                else odd += 1\n          \
    \  }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even integer palindromes\n        // `odd`\
    \ is the number of odd integer palindromes\n        var even : Long = 0\n    \
    \    var odd : Long = 0\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i.toString))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Write your code here\n\
    \        return (0l, 0l)", "        // Fill up this function body\n        //\
    \ `0` is a placeholder, replace it with your answer\n        (0l, 0l)", "    \
    \    // Fill up this function body\n        // `even` is the number of even palindromes\n\
    \        // `odd` is the number of odd palindromes\n        var even = 0l\n  \
    \      var odd = 0l\n        for (i <- 1l to n) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even integer palindromes\n        //\
    \ `odd` is the number of odd integer palindromes\n        var even = 0l\n    \
    \    var odd = 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i.toString))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `n` is the upper bound of the range\n        // You can use\
    \ `isPalindrome` function\n        // You can use `isEven` function\n        var\
    \ even = 0\n        var odd = 0\n        for (i <- 1 to n.toInt) {\n         \
    \   if (isPalindrome(i) && isEven(i)) {\n                even += 1\n         \
    \   } else if (isPalindrome(i) && !isEven(i)) {\n                odd += 1\n  \
    \          }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `n` is the upper bound of the range\n        var even = 0\n\
    \        var odd = 0\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even integer palindromes\n        //\
    \ `odd` is the number of odd integer palindromes\n        var even = 0l\n    \
    \    var odd = 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `n` is the upper bound of the range\n        // You can use\
    \ the helper function `isPalindrome` to check if a number is a palindrome\n  \
    \      // You can use the helper function `isEven` to check if a number is even\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (isEven(i)) {\n  \
    \                  even += 1\n                } else {\n                    odd\
    \ += 1\n                }\n            }\n        }\n        (even, odd)", " \
    \       // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n       \
    \     if (isPalindrome(i.toString)) {\n                if (i % 2 == 0) even +=\
    \ 1\n                else odd += 1\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `even` is the number of even\
    \ integer palindromes\n        // `odd` is the number of odd integer palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) even\
    \ += 1\n                else odd += 1\n            }\n        }\n        (even,\
    \ odd)", "        // Fill up this function body\n        // `even` is the number\
    \ of even integer palindromes\n        // `odd` is the number of odd integer palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i.toString == i.toString.reverse) {\n                if (i\
    \ % 2 == 0) even += 1\n                else odd += 1\n            }\n        }\n\
    \        (even, odd)", "        // Fill up this function body\n        // `n`\
    \ is the upper bound of the range of numbers\n        // You should return a tuple\
    \ of two numbers\n        // The first number is the number of even palindromes\n\
    \        // The second number is the number of odd palindromes\n        var even\
    \ = 0\n        var odd = 0\n        for (i <- 1 to n.toInt) {\n            if\
    \ (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n           \
    \     else odd += 1\n            }\n        }\n        (even, odd)", "       \
    \ // Fill up this function body\n        // `even` is the number of even palindromes\n\
    \        // `odd` is the number of odd palindromes\n        val even = 0l\n  \
    \      val odd = 0l\n        (even, odd)", "        // Fill up this function body\n\
    \        // `n` is the given number\n        // You have to return a tuple of\
    \ two numbers\n        // The first number is the number of even palindromes\n\
    \        // The second number is the number of odd palindromes\n        var even\
    \ = 0\n        var odd = 0\n        for (i <- 1 to n.toInt) {\n            if\
    \ (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n           \
    \     else odd += 1\n            }\n        }\n        (even, odd)", "       \
    \ // Fill up this function body\n        // `even` is the number of even integer\
    \ palindromes\n        // `odd` is the number of odd integer palindromes\n   \
    \     var even : Long = 0\n        var odd : Long = 0\n        for (i <- 1 to\
    \ n.toInt) {\n            if (isPalindrome(i)) {\n                if (i % 2 ==\
    \ 0) even += 1\n                else odd += 1\n            }\n        }\n    \
    \    (even, odd)", "        // Fill up this function body\n        // `even` is\
    \ the number of even integer palindromes\n        // `odd` is the number of odd\
    \ integer palindromes\n        var even = 0l\n        var odd = 0l\n        for\
    \ (i <- 1 to n.toInt) {\n            if (isPalindrome(i.toString)) {\n       \
    \         if (i % 2 == 0) even += 1\n                else odd += 1\n         \
    \   }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `n` is the upper bound of the range\n        // You can use `isPalindrome`\
    \ function to check if a number is palindrome\n        // You can use `isEven`\
    \ function to check if a number is even\n        // You can use `isOdd` function\
    \ to check if a number is odd\n        var even = 0\n        var odd = 0\n   \
    \     for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n        \
    \        if (isEven(i)) {\n                    even += 1\n                } else\
    \ {\n                    odd += 1\n                }\n            }\n        }\n\
    \        (even, odd)", "        // Fill up this function body\n        // `even`\
    \ is the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i.toString)) {\n                if (i % 2 ==\
    \ 0) even += 1\n                else odd += 1\n            }\n        }\n    \
    \    (even, odd)", "        // Fill up this function body\n        // `even` is\
    \ the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n \
    \                   even += 1\n                } else {\n                    odd\
    \ += 1\n                }\n            }\n        }\n        (even, odd)", " \
    \       // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n       \
    \     if (isPalindrome(i.toString)) {\n                if (i % 2 == 0) even +=\
    \ 1\n                else odd += 1\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `even` is the number of even\
    \ integer palindromes\n        // `odd` is the number of odd integer palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i.toString)) {\n                if (i % 2 ==\
    \ 0) even += 1\n                else odd += 1\n            }\n        }\n    \
    \    (even, odd)", "        // Fill up this function body\n        // `even` is\
    \ the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i.toString)) {\n                if (i % 2 ==\
    \ 0) even += 1\n                else odd += 1\n            }\n        }\n    \
    \    (even, odd)", "        // Fill up this function body\n        // `even` is\
    \ the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i.toString)) {\n                if (i % 2 ==\
    \ 0) even += 1\n                else odd += 1\n            }\n        }\n    \
    \    (even, odd)", "        // Fill up this function body\n        // `n` is the\
    \ input number\n        // You have to return a tuple of two numbers, first number\
    \ is the number of even palindromes, second number is the number of odd palindromes.\n\
    \        // You can use `isPalindrome` function to check if a number is palindrome\
    \ or not.\n        // You can use `isEven` function to check if a number is even\
    \ or not.\n        var even = 0l\n        var odd = 0l\n        for (i <- 1 to\
    \ n.toInt) {\n            if (isPalindrome(i)) {\n                if (isEven(i))\
    \ {\n                    even += 1\n                } else {\n               \
    \     odd += 1\n                }\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `n` is the input number\n   \
    \     // You have to return a tuple of Long type\n        // Do not use any inbuilt\
    \ functions\n        var even = 0l\n        var odd = 0l\n        for (i <- 1\
    \ to n.toInt) {\n            if (isPalindrome(i)) {\n                if (i % 2\
    \ == 0) even += 1\n                else odd += 1\n            }\n        }\n \
    \       (even, odd)", "        // Fill up this function body\n        // `even`\
    \ is the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) even\
    \ += 1\n                else odd += 1\n            }\n        }\n        (even,\
    \ odd)", "        // Fill up this function body\n        // `even` is the number\
    \ of even palindromes\n        // `odd` is the number of odd palindromes\n   \
    \     // You can change the return type of this function.\n        var even =\
    \ 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n            if\
    \ (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n           \
    \     else odd += 1\n            }\n        }\n        (even, odd)", "       \
    \ // Fill up this function body\n        // `even` is the number of even palindromes\n\
    \        // `odd` is the number of odd palindromes\n        var even = 0l\n  \
    \      var odd = 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n     \
    \           if (i % 2 == 0) even += 1\n                else odd += 1\n       \
    \     }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `0` is placeholder, replace it with your answer\n        (0l, 0l)",
  "        // Fill up this function body\n        // `n` is the given number\n   \
    \     // You have to return a tuple of two numbers\n        // The first number\
    \ is the number of even palindromes\n        // The second number is the number\
    \ of odd palindromes\n        // For example, if n = 3, then the even palindromes\
    \ are 2, and the odd palindromes are 1 and 3\n        // So the function should\
    \ return (1, 2)\n        (0l, 0l)", "        // Fill up this function body\n \
    \       // `n` is the upper bound of the range\n        // You should return a\
    \ tuple of two numbers, the first being the number of even\n        // palindromes\
    \ and the second being the number of odd palindromes.\n        (0l, 0l)", "  \
    \      // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n       \
    \     if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1 else odd\
    \ += 1\n            }\n        }\n        (even, odd)", "        // Write your\
    \ code here\n        return (0l, 0l)", "        // Fill up this function body\n\
    \        // `n` is the upper bound of the range, inclusive.\n        // If you\
    \ have trouble with Scala syntax, look up \"Tuple\" in Scaladoc.\n        // You\
    \ can also look up \"case class\" in the Scala language specification.\n     \
    \   // You can also look up \"for comprehension\" in the Scala language specification.\n\
    \        // You can also look up \"if expression\" in the Scala language specification.\n\
    \        // You can also look up \"anonymous function\" in the Scala language\
    \ specification.\n        // You can also look up \"function literal\" in the\
    \ Scala language specification.\n        // You can also look up \"function value\"\
    \ in the Scala language specification.\n        // You can also look up \"function\
    \ application\" in the Scala language specification.\n        // You can also\
    \ look up \"partial function\" in the Scala language specification.\n        //\
    \ You can also look up \"currying\" in the Scala language specification.\n   \
    \     // You can also look up \"by-name parameter\" in the Scala language specification.\n\
    \        // You can also look up \"lazy val\" in the Scala language specification.\n\
    \        // You can also look up \"lazy evaluation\" in the Scala language specification.\n\
    \        // You can also look up \"call-by-name\" in the Scala language specification.\n\
    \        // You can also look up \"call-by-value\" in the Scala language specification.\n\
    \        // You can also look up \"tail recursion\" in the Scala language specification.\n\
    \        // You can also look up \"tail call\" in the Scala language specification.\n\
    \        // You can also look up \"tail call optimization\" in the Scala language\
    \ specification.\n        // You can also look up \"tail call elimination\" in\
    \ the Scala language specification.\n        // You can also look up \"tail recursion\
    \ elimination\" in the Scala language specification.\n        // You can also\
    \ look up \"tail call modulo cons\" in the Scala language specification.\n   \
    \     // You can also look up \"tail call modulo cons transformation\" in the\
    \ Scala language specification.\n        // You can also look up \"tail call modulo\
    \ cons optimization\" in the Scala language specification.\n        // You can\
    \ also look up \"tail call modulo cons elimination\" in the Scala language specification.\n\
    \        // You can also look up \"tail recursion modulo cons\" in the Scala language\
    \ specification", "        // Fill up this function body\n        // `even` is\
    \ the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) even\
    \ += 1\n                else odd += 1\n            }\n        }\n        (even,\
    \ odd)", "        // Fill up this function body\n        // `even` is the number\
    \ of even palindromes\n        // `odd` is the number of odd palindromes\n   \
    \     var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n\
    \            if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n\
    \                else odd += 1\n            }\n        }\n        (even, odd)",
  "        // Write your code here\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n     \
    \           if (i % 2 == 0) even += 1\n                else odd += 1\n       \
    \     }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `n` is the upper bound of the range\n        // You can use `isPalindrome`\
    \ function to check if a number is palindrome or not\n        var even = 0\n \
    \       var odd = 0\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even integer palindromes\n        //\
    \ `odd` is the number of odd integer palindromes\n        var even = 0l\n    \
    \    var odd = 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i.toString))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n          \
    \      if (i % 2 == 0) even += 1\n                else odd += 1\n            }\n\
    \        }\n        (even, odd)", "        // Fill up this function body\n   \
    \     // `n` is the upper bound of the range\n        // You have to return a\
    \ tuple of two long integers\n        // The first long integer is the number\
    \ of even palindromes\n        // The second long integer is the number of odd\
    \ palindromes\n        var even = 0\n        var odd = 0\n        for (i <- 1\
    \ to n.toInt) {\n            if (isPalindrome(i)) {\n                if (i % 2\
    \ == 0) even += 1\n                else odd += 1\n            }\n        }\n \
    \       (even, odd)", "        // Fill up this function body\n        // `even`\
    \ is the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) even\
    \ += 1\n                else odd += 1\n            }\n        }\n        (even,\
    \ odd)", "        // Fill up this function body\n        // `even` is the number\
    \ of even palindromes\n        // `odd` is the number of odd palindromes\n   \
    \     var even : Long = 0\n        var odd : Long = 0\n        for (i <- 1 to\
    \ n.toInt) {\n            if (isPalindrome(i)) {\n                if (i % 2 ==\
    \ 0) even += 1\n                else odd += 1\n            }\n        }\n    \
    \    (even, odd)", "        // Fill up this function body\n        // `n` is the\
    \ upper bound of the range\n        // `n` is guaranteed to be a positive integer\n\
    \        // `n` is guaranteed to be less than or equal to 10^3\n        // You\
    \ can assume that `n` is less than or equal to 10^3\n        // You can assume\
    \ that `n` is a positive integer\n        // You can assume that `n` is less than\
    \ or equal to 10^3\n        // You can assume that `n` is a positive integer\n\
    \        // You can assume that `n` is less than or equal to 10^3\n        //\
    \ You can assume that `n` is a positive integer\n        // You can assume that\
    \ `n` is less than or equal to 10^3\n        // You can assume that `n` is a positive\
    \ integer\n        // You can assume that `n` is less than or equal to 10^3\n\
    \        // You can assume that `n` is a positive integer\n        // You can\
    \ assume that `n` is less than or equal to 10^3\n        // You can assume that\
    \ `n` is a positive integer\n        // You can assume that `n` is less than or\
    \ equal to 10^3\n        // You can assume that `n` is a positive integer\n  \
    \      // You can assume that `n` is less than or equal to 10^3\n        // You\
    \ can assume that `n` is a positive integer\n        // You can assume that `n`\
    \ is less than or equal to 10^3\n        // You can assume that `n` is a positive\
    \ integer\n        // You can assume that `n` is less than or equal to 10^3\n\
    \        // You can assume that `n` is a positive integer\n        // You can\
    \ assume that `n` is less than or equal to 10^3\n        // You can assume that\
    \ `n` is a positive integer\n        // You can assume that `n` is less than or\
    \ equal to 10^3\n        // You can assume that `n` is a positive integer\n  \
    \      // You can assume that `n` is less than or equal to 10^3\n        // You\
    \ can assume that `n` is a positive integer\n        // You can assume that `n`\
    \ is less than or equal to 10^3\n        // You can assume that `n` is a", " \
    \       // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n       \
    \     if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n    \
    \            else odd += 1\n            }\n        }\n        (even, odd)", " \
    \       // Fill up this function body\n        // `n` is the input number\n  \
    \      // You have to return a tuple of two numbers, where the first number is\
    \ the number of even palindromes\n        // and the second number is the number\
    \ of odd palindromes.\n        var even = 0l\n        var odd = 0l\n        for\
    \ (i <- 1l to n) {\n            if (isPalindrome(i.toString)) {\n            \
    \    if (i % 2 == 0) even += 1\n                else odd += 1\n            }\n\
    \        }\n        (even, odd)", "        // Fill up this function body\n   \
    \     // `n` is the number of elements in the range(1, n)\n        // `n` is the\
    \ number of elements in the range(1, n)\n        // `n` is the number of elements\
    \ in the range(1, n)\n        // `n` is the number of elements in the range(1,\
    \ n)\n        // `n` is the number of elements in the range(1, n)\n        //\
    \ `n` is the number of elements in the range(1, n)\n        // `n` is the number\
    \ of elements in the range(1, n)\n        // `n` is the number of elements in\
    \ the range(1, n)\n        // `n` is the number of elements in the range(1, n)\n\
    \        // `n` is the number of elements in the range(1, n)\n        // `n` is\
    \ the number of elements in the range(1, n)\n        // `n` is the number of elements\
    \ in the range(1, n)\n        // `n` is the number of elements in the range(1,\
    \ n)\n        // `n` is the number of elements in the range(1, n)\n        //\
    \ `n` is the number of elements in the range(1, n)\n        // `n` is the number\
    \ of elements in the range(1, n)\n        // `n` is the number of elements in\
    \ the range(1, n)\n        // `n` is the number of elements in the range(1, n)\n\
    \        // `n` is the number of elements in the range(1, n)\n        // `n` is\
    \ the number of elements in the range(1, n)\n        // `n` is the number of elements\
    \ in the range(1, n)\n        // `n` is the number of elements in the range(1,\
    \ n)\n        // `n` is the number of elements in the range(1, n)\n        //\
    \ `n` is the number of elements in the range(1, n)\n        // `n` is the number\
    \ of elements in the range(1, n)\n        // `n` is the number of elements in\
    \ the range(1, n)\n        // `n` is the number of", "        // Fill up this\
    \ function body\n        // `0` is a placeholder. Please modify it.\n        (0l,\
    \ 0l)", "        // Fill up this function body\n        // `n` is the upper limit\
    \ of the range\n        // `n` is a positive integer\n        // For example,\
    \ if `n` is 3, the range is (1, 3)\n        // If `n` is 12, the range is (1,\
    \ 12)\n        // You should return a tuple that has the number of even and odd\
    \ integer palindromes respectively\n        // For example, if `n` is 3, the answer\
    \ is (1, 2)\n        // If `n` is 12, the answer is (4, 6)\n        // You can\
    \ assume that 1 <= n <= 10^3\n        // You can assume that the answer will fit\
    \ in a 64-bit signed integer\n        var even = 0\n        var odd = 0\n    \
    \    for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n         \
    \       if (i % 2 == 0) even += 1\n                else odd += 1\n           \
    \ }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even palindromes\n        // `odd` is the\
    \ number of odd palindromes\n        var even = 0l\n        var odd = 0l\n   \
    \     for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n        \
    \        if (i % 2 == 0) even += 1\n                else odd += 1\n          \
    \  }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `n` is the upper bound of the range\n        // You should return\
    \ a tuple of two numbers, the first number is the number of even integer palindromes,\n\
    \        // the second number is the number of odd integer palindromes.\n    \
    \    var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n\
    \            if (isPalindrome(i.toString)) {\n                if (i % 2 == 0)\
    \ even += 1\n                else odd += 1\n            }\n        }\n       \
    \ (even, odd)", "        // Fill up this function body\n        // `even` is the\
    \ number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i.toString)) {\n                if (i % 2 ==\
    \ 0) even += 1\n                else odd += 1\n            }\n        }\n    \
    \    (even, odd)", "        // Fill up this function body\n        // `n` is the\
    \ upper limit of the range\n        // You can use the `isPalindrome` function\
    \ to check if a number is palindrome\n        // You can use the `isEven` function\
    \ to check if a number is even\n        // You can use the `isOdd` function to\
    \ check if a number is odd\n        // You can use the `range` function to generate\
    \ a range of numbers\n        // You can use the `filter` function to filter a\
    \ collection\n        // You can use the `length` function to get the length of\
    \ a collection\n        // You can use the `Tuple2` class to create a tuple\n\
    \        // You can use the `Tuple2._1` and `Tuple2._2` to access the first and\
    \ second element of a tuple\n        // You can use the `Tuple2.apply` to create\
    \ a tuple\n        // You can use the `Tuple2.unapply` to deconstruct a tuple\
    \ to a pair of values\n        // You can use the `Tuple2.swap` to swap the order\
    \ of a tuple\n        // You can use the `Tuple2.unapplySeq` to deconstruct a\
    \ tuple to a sequence of values\n        // You can use the `Tuple2.toString`\
    \ to get the string representation of a tuple\n        // You can use the `Tuple2.equals`\
    \ to check if two tuples are equal\n        // You can use the `Tuple2.hashCode`\
    \ to get the hash code of a tuple\n        // You can use the `Tuple2.compare`\
    \ to compare two tuples\n        // You can use the `Tuple2.canEqual` to check\
    \ if a tuple can be compared with another object\n        // You can use the `Tuple2.productArity`\
    \ to get the number of elements in the tuple\n        // You can use the `Tuple2.productElement`\
    \ to get the n-th element of the tuple\n        // You can use the `Tuple2.productPrefix`\
    \ to get the class name of the tuple\n        // You can use the `Tuple2.productIterator`\
    \ to get an iterator for the tuple\n        // You can use the `Tuple2.productElementName`\
    \ to get the name of the n-th element", "        // Fill up this function body\n\
    \        // `even` is the number of even palindromes\n        // `odd` is the\
    \ number of odd palindromes\n        var even = 0l\n        var odd = 0l\n   \
    \     for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n        \
    \        if (i % 2 == 0) even += 1\n                else odd += 1\n          \
    \  }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even palindromes\n        // `odd` is the\
    \ number of odd palindromes\n        var even = 0l\n        var odd = 0l\n   \
    \     for (i <- 1 to n.toInt) {\n            if (isPalindrome(i.toString)) {\n\
    \                if (i % 2 == 0) even += 1 else odd += 1\n            }\n    \
    \    }\n        (even, odd)", "        // Fill up this function body\n       \
    \ // `even` is the number of even palindromes\n        // `odd` is the number\
    \ of odd palindromes\n        var even = 0l\n        var odd = 0l\n        for\
    \ (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n                if\
    \ (i % 2 == 0) even += 1\n                else odd += 1\n            }\n     \
    \   }\n        (even, odd)", "        // Fill up this function body\n        //\
    \ `even` is the number of even integer palindromes\n        // `odd` is the number\
    \ of odd integer palindromes\n        var even = 0l\n        var odd = 0l\n  \
    \      for (i <- 1 to n.toInt) {\n            if (isPalindrome(i.toString)) {\n\
    \                if (i % 2 == 0) even += 1\n                else odd += 1\n  \
    \          }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i.toString))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        val even = 0l\n        val odd = 0l\n\
    \        (even, odd)", "        // Fill up this function body\n        // `even`\
    \ is the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i.toString)) {\n                if (i % 2 ==\
    \ 0) even += 1\n                else odd += 1\n            }\n        }\n    \
    \    (even, odd)", "        // Fill up this function body\n        // `even` is\
    \ the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) even\
    \ += 1\n                else odd += 1\n            }\n        }\n        (even,\
    \ odd)", "        // Fill up this function body\n        // `0` is placeholder,\
    \ replace it with your answer\n        (0l, 0l)", "        // Fill up this function\
    \ body\n        // `0` is placeholder, replace it with your answer\n        (0l,\
    \ 0l)", "        // Fill up this function body\n        // `n` is the input number\n\
    \        // You have to return a tuple that has the number of even and odd integer\
    \ palindromes respectively.\n        var even = 0\n        var odd = 0\n     \
    \   for (i <- 1 to n.toInt) {\n            if (isPalindrome(i.toString)) {\n \
    \               if (i % 2 == 0) even += 1\n                else odd += 1\n   \
    \         }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n     \
    \           if (i % 2 == 0) even += 1\n                else odd += 1\n       \
    \     }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even palindromes\n        // `odd` is the\
    \ number of odd palindromes\n        var even = 0l\n        var odd = 0l\n   \
    \     for (i <- 1 to n.toInt) {\n            if (isPalindrome(i.toString)) {\n\
    \                if (i % 2 == 0) even += 1\n                else odd += 1\n  \
    \          }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n     \
    \           if (i % 2 == 0) even += 1\n                else odd += 1\n       \
    \     }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even palindromes\n        // `odd` is the\
    \ number of odd palindromes\n        var even = 0l\n        var odd = 0l\n   \
    \     for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n        \
    \        if (i % 2 == 0) even += 1\n                else odd += 1\n          \
    \  }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `n` is the upper bound of the range, inclusive.\n        // You have\
    \ to return a tuple that has the number of even and odd integer palindromes respectively.\n\
    \        (0l, 0l)", "        // Fill up this function body\n        // `n` is\
    \ the input number\n        // You have to return a tuple of 2 numbers\n     \
    \   // First number is the number of even integer palindromes\n        // Second\
    \ number is the number of odd integer palindromes\n        (0l, 0l)", "      \
    \  var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n  \
    \          if (isPalindrome(i.toString)) {\n                if (i % 2 == 0) even\
    \ += 1\n                else odd += 1\n            }\n        }\n        (even,\
    \ odd)", "        // Fill up this function body\n        // `n` is the upper bound\
    \ of the range, inclusive.\n        // You have to return a tuple.\n        //\
    \ The first element of the tuple is the number of even palindromes.\n        //\
    \ The second element of the tuple is the number of odd palindromes.\n        (0l,\
    \ 0l)", "        // Fill up this function body\n        // `even` is the number\
    \ of even palindromes\n        // `odd` is the number of odd palindromes\n   \
    \     var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n\
    \            if (isPalindrome(i.toString)) {\n                if (i % 2 == 0)\
    \ even += 1\n                else odd += 1\n            }\n        }\n       \
    \ (even, odd)", "        // Fill up this function body\n        // `n` is the\
    \ upper bound of the range, inclusive.\n        // You have to return a tuple\
    \ that has the number of even and odd integer palindromes respectively.\n    \
    \    // You can use `isPalindrome` function to check if a number is palindrome\
    \ or not.\n        // You can use `isEven` function to check if a number is even\
    \ or not.\n        var even = 0\n        var odd = 0\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (isEven(i)) {\n  \
    \                  even += 1\n                } else {\n                    odd\
    \ += 1\n                }\n            }\n        }\n        (even, odd)", " \
    \       // Fill up this function body\n        // `0` indicates the number of\
    \ even palindromes\n        // `1` indicates the number of odd palindromes\n \
    \       val result = Array(0l, 0l)\n        for (i <- 1 to n.toInt) {\n      \
    \      if (isPalindrome(i)) {\n                if (i % 2 == 0) result(0) += 1\n\
    \                else result(1) += 1\n            }\n        }\n        (result(0),\
    \ result(1))", "        // Fill up this function body\n        // `n` is the upper\
    \ bound of the range\n        // You can create new functions as you wish\n  \
    \      // You can create new classes as you wish\n        // You can import any\
    \ library you want\n        // Your solution will be evaluated using `sbt test`\n\
    \        // You can use the `Test` class to debug your solution\n        // You\
    \ can use the `Reporter` class to report your solution\n        // You can use\
    \ the `Benchmark` class to benchmark your solution\n        // You can use the\
    \ `Visualizer` class to visualize your solution\n        // You can use the `Solution`\
    \ class to submit your solution\n        (0l, 0l)", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n     \
    \           if (i % 2 == 0) even += 1\n                else odd += 1\n       \
    \     }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `0` indicates the number of even palindromes\n        // `1` indicates\
    \ the number of odd palindromes\n        var result = Array(0l, 0l)\n        for\
    \ (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n                if\
    \ (i % 2 == 0) result(0) += 1\n                else result(1) += 1\n         \
    \   }\n        }\n        (result(0), result(1))", "        // Fill up this function\
    \ body\n        // `n` is the upper bound of the range\n        // You can use\
    \ `isPalindrome` function to check if a number is palindrome\n        // You can\
    \ use `isEven` function to check if a number is even\n        // You can use `isOdd`\
    \ function to check if a number is odd\n        // You can use `toString` function\
    \ to convert a number to string\n        // You can use `toLong` function to convert\
    \ a string to long\n        // You can use `reverse` function to reverse a string\n\
    \        // You can use `toCharArray` function to convert a string to char array\n\
    \        // You can use `mkString` function to convert a char array to string\n\
    \        // You can use `toLong` function to convert a string to long\n      \
    \  // You can use `abs` function to get absolute value of a number\n        //\
    \ You can use `min` function to get minimum of two numbers\n        // You can\
    \ use `max` function to get maximum of two numbers\n        // You can use `sum`\
    \ function to get sum of two numbers\n        // You can use `product` function\
    \ to get product of two numbers\n        // You can use `size` function to get\
    \ size of a number\n        // You can use `toInt` function to convert a number\
    \ to int\n        // You can use `toDouble` function to convert a number to double\n\
    \        // You can use `toFloat` function to convert a number to float\n    \
    \    // You can use `toShort` function to convert a number to short\n        //\
    \ You can use `toByte` function to convert a number to byte\n        // You can\
    \ use `toChar` function to convert a number to char\n        // You can use `toString`\
    \ function to convert a number to string\n        // You can use `toLong` function\
    \ to convert a string to long\n        // You can use `reverse` function to reverse\
    \ a string\n        // You can use `toCharArray` function to convert a string\
    \ to char array\n        // You can use `mkString` function to convert a char\
    \ array to string\n        // You can use `toLong` function to convert a string\
    \ to long\n        // You can use `abs` function to get absolute value of a number\n\
    \        // You can use `min` function to get", "        // Fill up this function\
    \ body\n        // `n` is the upper bound of the range, inclusive.\n        //\
    \ You have to return a tuple that has the number of even and odd integer palindromes\
    \ respectively.\n        var even = 0\n        var odd = 0\n        for (i <-\
    \ 1 to n.toInt) {\n            if (isPalindrome(i)) {\n                if (i %\
    \ 2 == 0) even += 1\n                else odd += 1\n            }\n        }\n\
    \        (even, odd)", "        // Fill up this function body\n        // `even`\
    \ is the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) even\
    \ += 1\n                else odd += 1\n            }\n        }\n        (even,\
    \ odd)", "        // Fill up this function body\n        // `even` is the number\
    \ of even palindromes\n        // `odd` is the number of odd palindromes\n   \
    \     var even : Long = 0\n        var odd : Long = 0\n        for (i <- 1 to\
    \ n.toInt) {\n            if (isPalindrome(i)) {\n                if (i % 2 ==\
    \ 0) even += 1\n                else odd += 1\n            }\n        }\n    \
    \    (even, odd)", "        // Fill up this function body\n        // `even` is\
    \ the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) even\
    \ += 1\n                else odd += 1\n            }\n        }\n        (even,\
    \ odd)", "        // Fill up this function body\n        // `even` is the number\
    \ of even palindromes\n        // `odd` is the number of odd palindromes\n   \
    \     var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n\
    \            if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n\
    \                else odd += 1\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `0` is placeholder, replace it\
    \ with your answer\n        (0l, 0l)", "        // Fill up this function body\n\
    \        // `even` is the number of even palindromes\n        // `odd` is the\
    \ number of odd palindromes\n        var even : Long = 0\n        var odd : Long\
    \ = 0\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n\
    \                if (i % 2 == 0) even += 1\n                else odd += 1\n  \
    \          }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `0` indicates the number of even palindromes\n        // `1`\
    \ indicates the number of odd palindromes\n        val result = Array.fill(2)(0l)\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n     \
    \           if (i % 2 == 0) result(0) += 1 else result(1) += 1\n            }\n\
    \        }\n        (result(0), result(1))", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n     \
    \           if (i % 2 == 0) even += 1\n                else odd += 1\n       \
    \     }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even palindromes\n        // `odd` is the\
    \ number of odd palindromes\n        var even = 0l\n        var odd = 0l\n   \
    \     for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n        \
    \        if (i % 2 == 0) even += 1\n                else odd += 1\n          \
    \  }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even palindromes\n        // `odd` is the\
    \ number of odd palindromes\n        var even = 0l\n        var odd = 0l\n   \
    \     for (i <- 1 to n.toInt) {\n            if (isPalindrome(i.toString)) {\n\
    \                if (i % 2 == 0) even += 1\n                else odd += 1\n  \
    \          }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n     \
    \           if (i % 2 == 0) even += 1\n                else odd += 1\n       \
    \     }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `n` is the upper bound of the range\n        // You have to return\
    \ a tuple. First element of the tuple should be the number of even palindromes\n\
    \        // Second element of the tuple should be the number of odd palindromes\n\
    \        var even = 0\n        var odd = 0\n        for (i <- 1 to n.toInt) {\n\
    \            if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n\
    \                else odd += 1\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `n` is the upper bound of the\
    \ range\n        // You can use the `isPalindrome` function provided below\n \
    \       // You can use the `isEven` function provided below\n        // You can\
    \ use the `isOdd` function provided below\n        // You can use the `range`\
    \ function provided below\n        // You can use the `filter` function provided\
    \ below\n        // You can use the `length` function provided below\n       \
    \ // You can use the `tuple` function provided below\n        // You can use the\
    \ `isEven` function provided below\n        // You can use the `isOdd` function\
    \ provided below\n        // You can use the `range` function provided below\n\
    \        // You can use the `filter` function provided below\n        // You can\
    \ use the `length` function provided below\n        // You can use the `tuple`\
    \ function provided below\n        val evens = range(1, n).filter(isEven).length\n\
    \        val odds = range(1, n).filter(isOdd).length\n        tuple(evens, odds)",
  "        // Fill up this function body\n        // `0` is a placeholder. Please\
    \ modify it.\n        (0l, 0l)", "        // Fill up this function body\n    \
    \    // `n` is the upper bound of the range\n        // You can use `isPalindrome`\
    \ function to check if a number is palindrome\n        // You can use `isEven`\
    \ function to check if a number is even\n        // You can use `isOdd` function\
    \ to check if a number is odd\n        // You can use `isEven` and `isOdd` functions\
    \ to check if a number is even or odd\n        // You can use `Tuple2` to create\
    \ a tuple\n        // You can use `Tuple2._1` and `Tuple2._2` to access the elements\
    \ of a tuple\n        var even = 0\n        var odd = 0\n        for (i <- 1 to\
    \ n.toInt) {\n            if (isPalindrome(i)) {\n                if (isEven(i))\
    \ {\n                    even += 1\n                } else {\n               \
    \     odd += 1\n                }\n            }\n        }\n        (even, odd)",
  "        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n\
    \            if (isPalindrome(i.toString)) {\n                if (i % 2 == 0)\
    \ even += 1\n                else odd += 1\n            }\n        }\n       \
    \ (even, odd)", "        // Fill up this function body\n        // `even` is the\
    \ number of even integer palindromes\n        // `odd` is the number of odd integer\
    \ palindromes\n        var even = 0l\n        var odd = 0l\n        for (i <-\
    \ 1 to n.toInt) {\n            if (i.toString == i.toString.reverse) {\n     \
    \           if (i % 2 == 0) even += 1\n                else odd += 1\n       \
    \     }\n        }\n        (even, odd)"]
stop_tokens:
- "\n    }\n"
