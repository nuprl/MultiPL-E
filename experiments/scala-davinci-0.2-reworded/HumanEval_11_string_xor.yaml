name: HumanEval_11_string_xor
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform\
  \ binary XOR on these inputs and return result also as a string.\n    // >>> stringXor((\"\
  010\"), (\"110\"))\n    // (\"100\")\n    def stringXor(a : String, b : String)\
  \ : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(stringXor((\"111000\"\
  ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"\
  0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n   \
  \ }\n\n}\n"
completions: ["        val a_bytes = a.getBytes\n        val b_bytes = b.getBytes\n\
    \        val c_bytes = new Array[Byte](a_bytes.length)\n        for (i <- 0 until\
    \ a_bytes.length) {\n            c_bytes(i) = (a_bytes(i) ^ b_bytes(i)).toByte\n\
    \        }\n        new String(c_bytes)", "        var result = \"\"\n       \
    \ for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result += \"0\"\
    \n            else result += \"1\"\n        }\n        return result", "     \
    \   val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b\
    \ => b.toString).reduceLeft(_ + _)", "        val aBits = a.map(x => x.toString.toInt)\n\
    \        val bBits = b.map(x => x.toString.toInt)\n        val result = aBits.zip(bBits).map(x\
    \ => x._1 ^ x._2)\n        result.map(x => x.toString).reduceLeft(_ + _)", " \
    \       val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        var result = \"\"\n      \
    \  for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result += \"0\"\
    \n            else result += \"1\"\n        }\n        return result", "     \
    \   val aBits = a.toList.map(c => c.toString.toInt)\n        val bBits = b.toList.map(c\
    \ => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^\
    \ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val\
    \ aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.mkString",
  "        val aBits = a.toList.map(x => x.toString.toInt)\n        val bBits = b.toList.map(x\
    \ => x.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(x => x._1 ^\
    \ x._2)\n        xorBits.map(x => x.toString).reduceLeft(_ + _)", "        var\
    \ result = \"\"\n        for (i <- 0 until a.length) {\n            if (a(i) ==\
    \ b(i)) result += \"0\"\n            else result += \"1\"\n        }\n       \
    \ return result", "        val aBits = a.map(c => c.toString.toInt)\n        val\
    \ bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val n = a.length\n        val c = new Array[Char](n)\n        for (i <-\
    \ 0 until n) {\n            if (a(i) == b(i)) c(i) = '0'\n            else c(i)\
    \ = '1'\n        }\n        c.mkString", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        require(a.length == b.length)\n\
    \        val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(t\
    \ => t._1 ^ t._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val aBits = a.toList.map(x => x.toString.toInt)\n        val bBits = b.toList.map(x\
    \ => x.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(x => x._1 ^\
    \ x._2)\n        xorBits.map(x => x.toString).reduceLeft(_ + _)", "        val\
    \ aa = a.toCharArray\n        val bb = b.toCharArray\n        val cc = new Array[Char](aa.length)\n\
    \        for (i <- 0 until aa.length) {\n            if (aa(i) == bb(i)) cc(i)\
    \ = '0'\n            else cc(i) = '1'\n        }\n        return cc.mkString",
  "        val sb = new StringBuilder\n        for (i <- 0 until a.length) {\n   \
    \         if (a(i) == b(i)) sb.append(\"0\")\n            else sb.append(\"1\"\
    )\n        }\n        sb.toString", "        val c = new StringBuilder\n     \
    \   for (i <- 0 until a.length) {\n            if (a(i) == b(i)) c.append(\"0\"\
    )\n            else c.append(\"1\")\n        }\n        c.toString", "       \
    \ val result = new StringBuilder\n        for (i <- 0 until a.length) {\n    \
    \        if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(t\
    \ => t._1 ^ t._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c\
    \ => c.toString.toInt)\n        val xor = aBits.zip(bBits).map(p => p._1 ^ p._2)\n\
    \        xor.map(b => b.toString).reduceLeft(_ + _)", "        val result = new\
    \ StringBuilder\n        for (i <- 0 until a.length) {\n            if (a(i) ==\
    \ b(i)) result.append(\"0\")\n            else result.append(\"1\")\n        }\n\
    \        result.toString", "        var result = \"\"\n        for (i <- 0 until\
    \ a.length) {\n            if (a(i) == b(i)) result += \"0\"\n            else\
    \ result += \"1\"\n        }\n        return result", "        var result = \"\
    \"\n        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result\
    \ += \"0\"\n            else result += \"1\"\n        }\n        return result",
  "        val aBinary = a.toInt(2)\n        val bBinary = b.toInt(2)\n        val\
    \ result = aBinary ^ bBinary\n        result.toBinaryString", "        val result\
    \ = new StringBuilder\n        for (i <- 0 until a.length) {\n            if (a(i)\
    \ == b(i)) result.append(\"0\")\n            else result.append(\"1\")\n     \
    \   }\n        result.toString", "        def xor(a : Char, b : Char) : Char =\
    \ {\n            if (a == b) '0' else '1'\n        }\n        a.zip(b).map(x =>\
    \ xor(x._1, x._2)).mkString", "        val a_bits = a.map(c => c.toString.toInt)\n\
    \        val b_bits = b.map(c => c.toString.toInt)\n        val c_bits = a_bits.zip(b_bits).map(p\
    \ => p._1 ^ p._2)\n        c_bits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val c = new StringBuilder\n        for (i <- 0 until a.length) {\n   \
    \         c.append((a(i) - '0') ^ (b(i) - '0'))\n        }\n        c.toString",
  "        val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c =>\
    \ c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(t => t._1 ^ t._2)\n\
    \        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        if (a.length\
    \ != b.length) throw new Exception(\"Inputs must be of equal length\")\n     \
    \   var result = \"\"\n        for (i <- 0 until a.length) {\n            result\
    \ += (if (a(i) == b(i)) \"0\" else \"1\")\n        }\n        result", "     \
    \   val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(t => t._1 ^ t._2)\n        xorBits.map(b\
    \ => b.toString).reduceLeft(_ + _)", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val a_int = a.toInt(2)\n        val b_int = b.toInt(2)\n        val c_int\
    \ = a_int ^ b_int\n        val c = c_int.toBinaryString\n        return c", " \
    \       val aBits = a.map(c => if (c == '1') 1 else 0)\n        val bBits = b.map(c\
    \ => if (c == '1') 1 else 0)\n        val cBits = aBits.zip(bBits).map(p => if\
    \ (p._1 == p._2) 0 else 1)\n        cBits.map(c => if (c == 1) '1' else '0').mkString",
  "        val aBits = a.toList.map(c => c.toString.toInt)\n        val bBits = b.toList.map(c\
    \ => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^\
    \ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        if\
    \ (a.length != b.length) throw new IllegalArgumentException\n        val aBits\
    \ = a.map(c => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b\
    \ => b.toString).reduceLeft(_ + _)", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val a_array = a.toCharArray\n        val b_array = b.toCharArray\n    \
    \    var result = \"\"\n        for (i <- 0 until a_array.length) {\n        \
    \    if (a_array(i) == b_array(i)) result += \"0\"\n            else result +=\
    \ \"1\"\n        }\n        result", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            result.append(if (a(i) ==\
    \ b(i)) '0' else '1')\n        }\n        result.toString", "        val result\
    \ = new StringBuilder\n        for (i <- 0 until a.length) {\n            if (a(i)\
    \ == b(i)) result.append(\"0\")\n            else result.append(\"1\")\n     \
    \   }\n        result.toString", "        val a_int = Integer.parseInt(a, 2)\n\
    \        val b_int = Integer.parseInt(b, 2)\n        val c_int = a_int ^ b_int\n\
    \        val c = Integer.toBinaryString(c_int)\n        return c", "        val\
    \ result = new StringBuilder\n        for (i <- 0 until a.length) {\n        \
    \    if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(t\
    \ => t._1 ^ t._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val a_array = a.toCharArray\n\
    \        val b_array = b.toCharArray\n        val result = new Array[Char](a_array.length)\n\
    \        for (i <- 0 until a_array.length) {\n            if (a_array(i) == b_array(i))\
    \ result(i) = '0'\n            else result(i) = '1'\n        }\n        result.mkString",
  "        val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val sb = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) sb.append(\"\
    0\")\n            else sb.append(\"1\")\n        }\n        sb.toString", "  \
    \      val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c =>\
    \ c.toString.toInt)\n        val cBits = aBits.zip(bBits).map(c => c._1 ^ c._2)\n\
    \        cBits.mkString", "        val result = new StringBuilder\n        for\
    \ (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"0\"\
    )\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c =>\
    \ c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n\
    \        xorBits.map(b => b.toString).mkString", "        val aBits = a.toList.map(c\
    \ => c.toString.toInt)\n        val bBits = b.toList.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b\
    \ => b.toString).reduceLeft(_ + _)", "        val c = new StringBuilder\n    \
    \    for (i <- 0 until a.length) {\n            if (a(i) == b(i)) c.append(\"\
    0\")\n            else c.append(\"1\")\n        }\n        c.toString", "    \
    \    val aBits = a.toList.map(c => c.toString.toInt)\n        val bBits = b.toList.map(c\
    \ => c.toString.toInt)\n        val cBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n\
    \        cBits.map(c => c.toString).reduceLeft(_ + _)", "        val aBits = a.toList.map(c\
    \ => c.toString.toInt)\n        val bBits = b.toList.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b\
    \ => b.toString).reduceLeft(_ + _)", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c\
    \ => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^\
    \ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val\
    \ a_array = a.toCharArray\n        val b_array = b.toCharArray\n        val result\
    \ = new StringBuilder\n        for (i <- 0 until a_array.length) {\n         \
    \   if (a_array(i) == b_array(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val c = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            c.append((if (a(i) == '1')\
    \ 1 else 0) ^ (if (b(i) == '1') 1 else 0))\n        }\n        c.toString", " \
    \       val a_int = Integer.parseInt(a, 2)\n        val b_int = Integer.parseInt(b,\
    \ 2)\n        val c_int = a_int ^ b_int\n        val c = c_int.toBinaryString\n\
    \        return c", "        val aBits = a.toList.map(c => c.toString.toInt)\n\
    \        val bBits = b.toList.map(c => c.toString.toInt)\n        val xorBits\
    \ = aBits.zip(bBits).map(t => t._1 ^ t._2)\n        xorBits.map(b => b.toString).reduceLeft(_\
    \ + _)", "        val aBits = a.toList.map(c => c.toString.toInt)\n        val\
    \ bBits = b.toList.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).mkString", "        val\
    \ aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b\
    \ => b.toString).reduceLeft(_ + _)", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(c\
    \ => c._1 ^ c._2)\n        xorBits.map(c => c.toString).reduceLeft(_ + _)", " \
    \       if (a.length != b.length) throw new Exception(\"Inputs must be of equal\
    \ length\")\n        var result = \"\"\n        for (i <- 0 until a.length) {\n\
    \            result += (if (a(i) == b(i)) \"0\" else \"1\")\n        }\n     \
    \   result", "        var result = \"\"\n        for (i <- 0 until a.length) {\n\
    \            result += if (a(i) == b(i)) \"0\" else \"1\"\n        }\n       \
    \ return result", "        val aBits = a.map(c => c.toString.toInt)\n        val\
    \ bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val a_int = Integer.parseInt(a, 2)\n        val b_int = Integer.parseInt(b,\
    \ 2)\n        val c_int = a_int ^ b_int\n        val c = Integer.toBinaryString(c_int)\n\
    \        return c", "        val aBits = a.toList.map(c => c.toString.toInt)\n\
    \        val bBits = b.toList.map(c => c.toString.toInt)\n        val xorBits\
    \ = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_\
    \ + _)", "        var result = \"\"\n        for (i <- 0 until a.length) {\n \
    \           if (a(i) == b(i)) result += \"0\"\n            else result += \"1\"\
    \n        }\n        return result", "        val sb = new StringBuilder\n   \
    \     for (i <- 0 until a.length) {\n            if (a(i) == b(i)) sb.append(\"\
    0\")\n            else sb.append(\"1\")\n        }\n        sb.toString", "  \
    \      val aBinary = a.toList.map(x => x.toString.toInt)\n        val bBinary\
    \ = b.toList.map(x => x.toString.toInt)\n        val cBinary = aBinary.zip(bBinary).map(x\
    \ => x._1 ^ x._2)\n        cBinary.map(x => x.toString).mkString", "        val\
    \ aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b\
    \ => b.toString).reduceLeft(_ + _)", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val cBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        cBits.map(b => b.toString).reduceLeft(_ + _)", "  \
    \      val a_array = a.toCharArray\n        val b_array = b.toCharArray\n    \
    \    val result = new StringBuilder\n        for (i <- 0 until a_array.length)\
    \ {\n            if (a_array(i) == b_array(i)) result.append(\"0\")\n        \
    \    else result.append(\"1\")\n        }\n        result.toString", "       \
    \ val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b\
    \ => b.toString).reduce(_ + _)", "        val result = new StringBuilder\n   \
    \     for (i <- 0 until a.length) {\n            result.append(if (a(i) == b(i))\
    \ '0' else '1')\n        }\n        result.toString", "        var result = \"\
    \"\n        for (i <- 0 until a.length) {\n            result += (if (a(i) ==\
    \ b(i)) \"0\" else \"1\")\n        }\n        return result", "        val aBits\
    \ = a.map(c => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b\
    \ => b.toString).reduceLeft(_ + _)", "        val aBits = a.toList.map(c => c.toString.toInt)\n\
    \        val bBits = b.toList.map(c => c.toString.toInt)\n        val xorBits\
    \ = (aBits zip bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_\
    \ + _)", "        val result = new StringBuilder\n        for (i <- 0 until a.length)\
    \ {\n            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val sb = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            sb.append((a(i) - '0') ^ (b(i)\
    \ - '0'))\n        }\n        sb.toString", "        val aBits = a.toList.map(c\
    \ => c.toString.toInt)\n        val bBits = b.toList.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b\
    \ => b.toString).mkString", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xor = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xor.map(i => i.toString).reduceLeft(_ + _)", "    \
    \    val result = new StringBuilder\n        for (i <- 0 until a.length) {\n \
    \           if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val sb = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) sb.append(\"\
    0\")\n            else sb.append(\"1\")\n        }\n        sb.toString", "  \
    \      val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        var result = \"\"\n      \
    \  for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result += \"0\"\
    \n            else result += \"1\"\n        }\n        return result", "     \
    \   val c = new StringBuilder\n        for (i <- 0 until a.length) {\n       \
    \     c.append((a(i) - '0') ^ (b(i) - '0'))\n        }\n        c.toString", " \
    \       val aBits = a.toList.map(c => c.toString.toInt)\n        val bBits = b.toList.map(c\
    \ => c.toString.toInt)\n        val cBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n\
    \        cBits.map(c => c.toString).reduceLeft(_ + _)", "        val aBits = a.map(c\
    \ => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n   \
    \     val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b\
    \ => b.toString).reduceLeft(_ + _)", "        var result = \"\"\n        for (i\
    \ <- 0 until a.length) {\n            if (a(i) == b(i)) result += \"0\"\n    \
    \        else result += \"1\"\n        }\n        return result", "        val\
    \ c = new StringBuilder\n        for (i <- 0 until a.length) {\n            if\
    \ (a(i) == b(i)) c.append(\"0\")\n            else c.append(\"1\")\n        }\n\
    \        c.toString", "        val result = new StringBuilder\n        for (i\
    \ <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"0\")\n\
    \            else result.append(\"1\")\n        }\n        result.toString", " \
    \       val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c\
    \ => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^\
    \ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val\
    \ aBits = a.toList.map(c => if (c == '1') 1 else 0)\n        val bBits = b.toList.map(c\
    \ => if (c == '1') 1 else 0)\n        val xorBits = aBits.zip(bBits).map(p =>\
    \ p._1 ^ p._2)\n        xorBits.map(b => if (b == 1) '1' else '0').mkString",
  "        val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            result.append(if (a(i) == b(i)) \"0\" else \"1\")\n        }\n  \
    \      result.toString", "        val result = new StringBuilder\n        for\
    \ (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"0\"\
    )\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val aBits = a.toList.map(x\
    \ => x.toString.toInt)\n        val bBits = b.toList.map(x => x.toString.toInt)\n\
    \        val xorBits = (aBits zip bBits).map(x => x._1 ^ x._2)\n        xorBits.map(x\
    \ => x.toString).reduceLeft(_ + _)", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            result.append(if (a(i) == b(i)) '0' else '1')\n        }\n      \
    \  result.toString", "        val result = new StringBuilder\n        for (i <-\
    \ 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"0\")\n  \
    \          else result.append(\"1\")\n        }\n        result.toString", " \
    \       val aBits = a.toList.map(c => c.toString.toInt)\n        val bBits = b.toList.map(c\
    \ => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(c => c._1 ^\
    \ c._2)\n        xorBits.map(c => c.toString).reduceLeft(_ + _)", "        val\
    \ aa = a.toList.map(x => x.toString.toInt)\n        val bb = b.toList.map(x =>\
    \ x.toString.toInt)\n        val cc = aa.zip(bb).map(x => (x._1 + x._2) % 2)\n\
    \        cc.mkString", "        val result = new StringBuilder\n        for (i\
    \ <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"0\")\n\
    \            else result.append(\"1\")\n        }\n        result.toString", " \
    \       val a_int = Integer.parseInt(a, 2)\n        val b_int = Integer.parseInt(b,\
    \ 2)\n        val c_int = a_int ^ b_int\n        val c = Integer.toBinaryString(c_int)\n\
    \        return c", "        val aBits = a.map(c => c.toString.toInt)\n      \
    \  val bBits = b.map(c => c.toString.toInt)\n        val cBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        cBits.map(b => b.toString).reduceLeft(_ + _)", "  \
    \      val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val aa = a.toCharArray\n        val bb = b.toCharArray\n        val cc\
    \ = new Array[Char](aa.length)\n        for (i <- 0 until aa.length) {\n     \
    \       if (aa(i) == bb(i)) cc(i) = '0'\n            else cc(i) = '1'\n      \
    \  }\n        return cc.mkString", "        val aBits = a.toList.map(x => x.toString.toInt)\n\
    \        val bBits = b.toList.map(x => x.toString.toInt)\n        val xorBits\
    \ = (aBits zip bBits).map(x => x._1 ^ x._2)\n        xorBits.map(x => x.toString).reduceLeft(_\
    \ + _)", "        val result = new StringBuilder\n        for (i <- 0 until a.length)\
    \ {\n            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val aBits = a.map(c => if (c == '1') 1 else 0)\n        val bBits = b.map(c\
    \ => if (c == '1') 1 else 0)\n        val xorBits = (aBits zip bBits).map(t =>\
    \ t._1 ^ t._2)\n        xorBits.map(b => if (b == 1) '1' else '0').mkString",
  "        val sb = new StringBuilder\n        for (i <- 0 until a.length) {\n   \
    \         if (a(i) == b(i)) sb.append(\"0\")\n            else sb.append(\"1\"\
    )\n        }\n        sb.toString", "        val aBits = a.map(c => if (c == '1')\
    \ 1 else 0)\n        val bBits = b.map(c => if (c == '1') 1 else 0)\n        val\
    \ xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b => if\
    \ (b == 1) '1' else '0').mkString", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val aBits = a.toList.map(x => x.toString.toInt)\n        val bBits = b.toList.map(x\
    \ => x.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(x => x._1 ^\
    \ x._2)\n        xorBits.map(x => x.toString).reduceLeft(_ + _)", "        val\
    \ aBits = a.toList.map(c => c.toString.toInt)\n        val bBits = b.toList.map(c\
    \ => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^\
    \ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val\
    \ a1 = a.toList\n        val b1 = b.toList\n        val c = a1.zip(b1).map(x =>\
    \ if (x._1 == x._2) '0' else '1').mkString\n        return c", "        val aBits\
    \ = a.map(c => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b\
    \ => b.toString).reduceLeft(_ + _)", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result += '0'\n            else result += '1'\n\
    \        }\n        result.toString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        var result = \"\"\n        for (i <- 0 until a.length) {\n            if\
    \ (a(i) == b(i)) result += \"0\"\n            else result += \"1\"\n        }\n\
    \        return result", "        var result = \"\"\n        for (i <- 0 until\
    \ a.length) {\n            if (a(i) == b(i)) result += \"0\"\n            else\
    \ result += \"1\"\n        }\n        return result", "        var result = \"\
    \"\n        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result\
    \ += \"0\"\n            else result += \"1\"\n        }\n        return result",
  "        val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val a_b = a.zip(b)\n     \
    \   val c = a_b.map(x => if (x._1 == x._2) \"0\" else \"1\")\n        c.mkString",
  "        val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c =>\
    \ c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n\
    \        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val result\
    \ = new StringBuilder\n        for (i <- 0 until a.length) {\n            if (a(i)\
    \ == b(i)) result += '0'\n            else result += '1'\n        }\n        result.toString",
  "        val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c =>\
    \ c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(t => t._1 ^ t._2)\n\
    \        xorBits.map(b => b.toString).mkString", "        require(a.length ==\
    \ b.length)\n        val c = new StringBuilder\n        for (i <- 0 until a.length)\
    \ {\n            c.append((a(i) - '0') ^ (b(i) - '0'))\n        }\n        c.toString",
  "        val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       if (a.length != b.length) throw new Exception(\"Strings are not of equal\
    \ length\")\n        val result = new StringBuilder\n        for (i <- 0 until\
    \ a.length) {\n            if (a(i) == b(i)) result += '0'\n            else result\
    \ += '1'\n        }\n        result.toString", "        val aBits = a.toList.map(x\
    \ => x.toString.toInt)\n        val bBits = b.toList.map(x => x.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(x => x._1 ^ x._2)\n        xorBits.map(x\
    \ => x.toString).reduceLeft(_ + _)", "        val aBits = a.toList.map(c => c.toString.toInt)\n\
    \        val bBits = b.toList.map(c => c.toString.toInt)\n        val xorBits\
    \ = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_\
    \ + _)", "        val a_arr = a.toCharArray\n        val b_arr = b.toCharArray\n\
    \        val result = new Array[Char](a_arr.length)\n        for (i <- 0 until\
    \ a_arr.length) {\n            if (a_arr(i) == b_arr(i)) result(i) = '0'\n   \
    \         else result(i) = '1'\n        }\n        result.mkString", "       \
    \ val aBits = a.map(c => if (c == '1') 1 else 0)\n        val bBits = b.map(c\
    \ => if (c == '1') 1 else 0)\n        val xorBits = aBits.zip(bBits).map(p =>\
    \ if (p._1 == p._2) 0 else 1)\n        xorBits.map(b => if (b == 1) '1' else '0').mkString",
  "        val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val c = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) c.append(\"\
    0\")\n            else c.append(\"1\")\n        }\n        c.toString", "    \
    \    val a_ = a.toList.map(_.toString.toInt)\n        val b_ = b.toList.map(_.toString.toInt)\n\
    \        val c = a_.zip(b_).map(x => x._1 ^ x._2)\n        c.map(_.toString).reduce(_\
    \ + _)", "        val result = new StringBuilder\n        for (i <- 0 until a.length)\
    \ {\n            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val a_array = a.toCharArray\n\
    \        val b_array = b.toCharArray\n        val result = new Array[Char](a_array.length)\n\
    \        for (i <- 0 until a_array.length) {\n            result(i) = if (a_array(i)\
    \ == b_array(i)) '0' else '1'\n        }\n        result.mkString", "        val\
    \ aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(c => c._1 ^ c._2)\n        xorBits.map(c\
    \ => c.toString).reduceLeft(_ + _)", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result +=\
    \ '0'\n            else result += '1'\n        }\n        result.toString", " \
    \       val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c\
    \ => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^\
    \ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val\
    \ aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b\
    \ => b.toString).reduceLeft(_ + _)", "        var result = \"\"\n        for (i\
    \ <- 0 until a.length) {\n            if (a(i) == b(i)) result += \"0\"\n    \
    \        else result += \"1\"\n        }\n        return result", "        //\
    \ Convert to array of integers\n        val a_int = a.map(x => x.toString.toInt)\n\
    \        val b_int = b.map(x => x.toString.toInt)\n        // XOR\n        val\
    \ c_int = a_int.zip(b_int).map(x => x._1 ^ x._2)\n        // Convert back to string\n\
    \        c_int.map(x => x.toString).reduceLeft(_ + _)", "        val aa = a.toList\n\
    \        val bb = b.toList\n        val cc = aa.zip(bb).map(x => if (x._1 == x._2)\
    \ \"0\" else \"1\").mkString\n        return cc", "        val aBits = a.map(c\
    \ => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n   \
    \     val xorBits = aBits.zip(bBits).map(pair => pair._1 ^ pair._2)\n        xorBits.map(i\
    \ => i.toString).reduceLeft(_ + _)", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val c = new StringBuilder\n        for (i <- 0 until a.length) {\n   \
    \         if (a(i) == b(i)) c.append(\"0\")\n            else c.append(\"1\")\n\
    \        }\n        c.toString", "        val result = new StringBuilder\n   \
    \     for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val n = a.length\n        val c = new Array[Char](n)\n        for (i <-\
    \ 0 until n) {\n            c(i) = if (a(i) == b(i)) '0' else '1'\n        }\n\
    \        c.mkString", "        val aBits = a.toList.map(c => c.toString.toInt)\n\
    \        val bBits = b.toList.map(c => c.toString.toInt)\n        val xorBits\
    \ = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_\
    \ + _)", "        val aBits = a.map(c => c.toString.toInt)\n        val bBits\
    \ = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val a_array = a.toCharArray\n        val b_array = b.toCharArray\n   \
    \     val result = new StringBuilder\n        for (i <- 0 until a_array.length)\
    \ {\n            if (a_array(i) == b_array(i)) result.append(\"0\")\n        \
    \    else result.append(\"1\")\n        }\n        result.toString", "       \
    \ val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n\
    \        val xorBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        xorBits.map(b\
    \ => b.toString).reduceLeft(_ + _)", "        val aBits = a.map(x => x.toString.toInt)\n\
    \        val bBits = b.map(x => x.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(x\
    \ => x._1 ^ x._2)\n        xorBits.mkString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result +=\
    \ '0'\n            else result += '1'\n        }\n        result.toString", " \
    \       val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c\
    \ => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^\
    \ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        var\
    \ result = \"\"\n        for (i <- 0 until a.length) {\n            if (a(i) ==\
    \ b(i)) result += \"0\"\n            else result += \"1\"\n        }\n       \
    \ return result", "        var result = \"\"\n        for (i <- 0 until a.length)\
    \ {\n            if (a(i) == b(i)) result += \"0\"\n            else result +=\
    \ \"1\"\n        }\n        return result", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result +=\
    \ '0'\n            else result += '1'\n        }\n        result.toString", " \
    \       val a_bin = BigInt(a, 2)\n        val b_bin = BigInt(b, 2)\n        val\
    \ c_bin = a_bin ^ b_bin\n        c_bin.toString(2)", "        val aBits = a.toList.map(_.toString.toInt)\n\
    \        val bBits = b.toList.map(_.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(x\
    \ => x._1 ^ x._2)\n        xorBits.map(_.toString).reduceLeft(_ + _)", "     \
    \   val c = new StringBuilder\n        for (i <- 0 until a.length) {\n       \
    \     if (a(i) == b(i)) c.append(\"0\")\n            else c.append(\"1\")\n  \
    \      }\n        c.toString", "        if (a.length != b.length) throw new Exception(\"\
    Strings must be of equal length.\")\n        var result = \"\"\n        for (i\
    \ <- 0 until a.length) {\n            if (a(i) == b(i)) result += \"0\"\n    \
    \        else result += \"1\"\n        }\n        return result", "        val\
    \ result = new StringBuilder\n        for (i <- 0 until a.length) {\n        \
    \    if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val aBinary = a.toList.map(x\
    \ => x.toString.toInt)\n        val bBinary = b.toList.map(x => x.toString.toInt)\n\
    \        val result = aBinary.zip(bBinary).map(x => x._1 ^ x._2)\n        result.map(x\
    \ => x.toString).reduceLeft(_ + _)", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(t\
    \ => t._1 ^ t._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c\
    \ => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p => p._1 ^\
    \ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", "        val\
    \ sb = new StringBuilder\n        for (i <- 0 until a.length) {\n            sb.append((a(i)\
    \ - '0') ^ (b(i) - '0'))\n        }\n        sb.toString", "        val result\
    \ = new StringBuilder\n        for (i <- 0 until a.length) {\n            if (a(i)\
    \ == b(i)) result.append(\"0\")\n            else result.append(\"1\")\n     \
    \   }\n        result.toString", "        val result = new StringBuilder\n   \
    \     for (i <- 0 until a.length) {\n            result += (if (a(i) == b(i))\
    \ '0' else '1')\n        }\n        result.toString", "        val aBits = a.map(c\
    \ => c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n   \
    \     val cBits = aBits.zip(bBits).map(p => p._1 ^ p._2)\n        cBits.map(b\
    \ => b.toString).reduceLeft(_ + _)", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result +=\
    \ '0'\n            else result += '1'\n        }\n        result.toString", " \
    \       val aBits = a.map(c => c.toString.toInt)\n        val bBits = b.map(c\
    \ => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(t => t._1 ^\
    \ t._2)\n        xorBits.map(b => b.toString).mkString", "        val c = new\
    \ StringBuilder\n        for (i <- 0 until a.length) {\n            c.append((a(i)\
    \ ^ b(i)).toString)\n        }\n        c.toString", "        require(a.length\
    \ == b.length)\n        val result = new StringBuilder\n        for (i <- 0 until\
    \ a.length) {\n            if (a(i) == b(i)) result += '0'\n            else result\
    \ += '1'\n        }\n        result.toString", "        val aBits = a.map(c =>\
    \ c.toString.toInt)\n        val bBits = b.map(c => c.toString.toInt)\n      \
    \  val xorBits = aBits.zip(bBits).map(t => t._1 ^ t._2)\n        xorBits.map(b\
    \ => b.toString).reduceLeft(_ + _)", "        val result = new StringBuilder\n\
    \        for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result.append(\"\
    0\")\n            else result.append(\"1\")\n        }\n        result.toString",
  "        val result = new StringBuilder\n        for (i <- 0 until a.length) {\n\
    \            if (a(i) == b(i)) result.append(\"0\")\n            else result.append(\"\
    1\")\n        }\n        result.toString", "        val aBits = a.map(c => c.toString.toInt)\n\
    \        val bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.mkString", "        var result = \"\"\n   \
    \     for (i <- 0 until a.length) {\n            if (a(i) == b(i)) result += \"\
    0\"\n            else result += \"1\"\n        }\n        return result", "  \
    \      val c = a.zip(b).map(x => (x._1.toInt ^ x._2.toInt).toString)\n       \
    \ c.mkString", "        val aBits = a.map(c => c.toString.toInt)\n        val\
    \ bBits = b.map(c => c.toString.toInt)\n        val xorBits = aBits.zip(bBits).map(p\
    \ => p._1 ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)", " \
    \       val aBits = a.toList.map(c => c.toString.toInt)\n        val bBits = b.toList.map(c\
    \ => c.toString.toInt)\n        val xorBits = (aBits zip bBits).map(p => p._1\
    \ ^ p._2)\n        xorBits.map(b => b.toString).reduceLeft(_ + _)"]
stop_tokens:
- "\n    }\n"
