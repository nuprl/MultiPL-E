name: HumanEval_160_do_algebra
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given two lists operator, and operand. The first list has basic algebra\
  \ operations, and \n    // the second list is a list of integers. Use the two given\
  \ lists to build the algebric \n    // expression and return the evaluation of this\
  \ expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n  \
  \  // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division (\
  \ // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*',\
  \ '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result\
  \ = 9\n    // Note:\n    // The length of operator list is equal to the length of\
  \ operand list minus one.\n    // Operand is a list of of non-negative integers.\n\
  \    // Operator list has at least one operator, and operand list has at least two\
  \ operands.\n    def doAlgebra(op : List[String], operand : List[Long]) : Long =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
  **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
  \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
  \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
  //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
  \n}\n"
completions: ["        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        val stack\
    \ = new Stack[Long]\n        for (i <- 0 until op.length) {\n            val a\
    \ = stack.pop\n            val b = operand(i + 1)\n            stack.push(op(i)\
    \ match {\n                case \"+\" => a + b\n                case \"-\" =>\
    \ a - b\n                case \"*\" => a * b\n                case \"//\" => a\
    \ / b\n                case \"**\" => pow(a, b).toLong\n            })\n     \
    \   }\n        stack.pop", "        var result = operand(0)\n        for (i <-\
    \ 0 until op.length) {\n            op(i) match {\n                case \"+\"\
    \ => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val a = stack.pop\n            val b = operand(i + 1)\n          \
    \  val c = op(i) match {\n                case \"+\" => a + b\n              \
    \  case \"-\" => a - b\n                case \"*\" => a * b\n                case\
    \ \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n         \
    \   }\n            stack.push(c)\n        }\n        stack.pop", "        var\
    \ result = operand(0)\n        for (i <- 0 until op.length) {\n            op(i)\
    \ match {\n                case \"+\" => result += operand(i + 1)\n          \
    \      case \"-\" => result -= operand(i + 1)\n                case \"*\" => result\
    \ *= operand(i + 1)\n                case \"//\" => result /= operand(i + 1)\n\
    \                case \"**\" => result = pow(result, operand(i + 1)).toLong\n\
    \            }\n        }\n        result", "        var result = operand(0)\n\
    \        for (i <- 1 until operand.length) {\n            op(i - 1) match {\n\
    \                case \"+\" => result += operand(i)\n                case \"-\"\
    \ => result -= operand(i)\n                case \"*\" => result *= operand(i)\n\
    \                case \"//\" => result /= operand(i)\n                case \"\
    **\" => result = pow(result, operand(i)).toLong\n            }\n        }\n  \
    \      result", "        if (op.isEmpty) return operand.head\n        val opHead\
    \ = op.head\n        val opTail = op.tail\n        val operandHead = operand.head\n\
    \        val operandTail = operand.tail\n        val operandTailHead = operandTail.head\n\
    \        val operandTailTail = operandTail.tail\n        val result = opHead match\
    \ {\n            case \"+\" => operandHead + operandTailHead\n            case\
    \ \"-\" => operandHead - operandTailHead\n            case \"*\" => operandHead\
    \ * operandTailHead\n            case \"//\" => operandHead / operandTailHead\n\
    \            case \"**\" => pow(operandHead, operandTailHead).toLong\n       \
    \ }\n        doAlgebra(opTail, result :: operandTailTail)", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            op(i) match\
    \ {\n                case \"+\" => result += operand(i + 1)\n                case\
    \ \"-\" => result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var stack = new Stack[Long]\n        for\
    \ (i <- 0 until op.length) {\n            val a = stack.pop\n            val b\
    \ = operand(i + 1)\n            op(i) match {\n                case \"+\" => stack.push(a\
    \ + b)\n                case \"-\" => stack.push(a - b)\n                case\
    \ \"*\" => stack.push(a * b)\n                case \"//\" => stack.push(a / b)\n\
    \                case \"**\" => stack.push(pow(a, b).toLong)\n            }\n\
    \        }\n        stack.pop", "        if (op.length != operand.length - 1)\
    \ throw new Exception(\"Invalid input\")\n        var result = operand(0)\n  \
    \      for (i <- 0 until op.length) {\n            op(i) match {\n           \
    \     case \"+\" => result += operand(i + 1)\n                case \"-\" => result\
    \ -= operand(i + 1)\n                case \"*\" => result *= operand(i + 1)\n\
    \                case \"//\" => result /= operand(i + 1)\n                case\
    \ \"**\" => result = pow(result, operand(i + 1)).toLong\n                case\
    \ _ => throw new Exception(\"Invalid operator\")\n            }\n        }\n \
    \       result", "        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var result\
    \ = operand(0)\n        for (i <- 1 until operand.length) {\n            result\
    \ = op(i - 1) match {\n                case \"+\" => result + operand(i)\n   \
    \             case \"-\" => result - operand(i)\n                case \"*\" =>\
    \ result * operand(i)\n                case \"//\" => result / operand(i)\n  \
    \              case \"**\" => pow(result, operand(i)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 0 until op.length) {\n            op(i) match {\n                case \"\
    +\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val a = stack.pop\n            val b = operand(i + 1)\n          \
    \  op(i) match {\n                case \"+\" => stack.push(a + b)\n          \
    \      case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop",
  "        var result = operand(0)\n        for (i <- 1 until operand.length) {\n\
    \            op(i - 1) match {\n                case \"+\" => result += operand(i)\n\
    \                case \"-\" => result -= operand(i)\n                case \"*\"\
    \ => result *= operand(i)\n                case \"//\" => result /= operand(i)\n\
    \                case \"**\" => result = pow(result, operand(i)).toLong\n    \
    \        }\n        }\n        result", "        var result = operand(0)\n   \
    \     for (i <- 0 until op.length) {\n            op(i) match {\n            \
    \    case \"+\" => result += operand(i + 1)\n                case \"-\" => result\
    \ -= operand(i + 1)\n                case \"*\" => result *= operand(i + 1)\n\
    \                case \"//\" => result /= operand(i + 1)\n                case\
    \ \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n     \
    \   }\n        result", "        var result = operand(0)\n        for (i <- 0\
    \ until op.length) {\n            op(i) match {\n                case \"+\" =>\
    \ result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            if (op(i)\
    \ == \"+\") result += operand(i + 1)\n            else if (op(i) == \"-\") result\
    \ -= operand(i + 1)\n            else if (op(i) == \"*\") result *= operand(i\
    \ + 1)\n            else if (op(i) == \"//\") result /= operand(i + 1)\n     \
    \       else if (op(i) == \"**\") result = pow(result, operand(i + 1)).toLong\n\
    \        }\n        return result", "        var stack = new Stack[Long]\n   \
    \     for (i <- 0 until op.length) {\n            val o1 = stack.pop\n       \
    \     val o2 = operand(i + 1)\n            val result = op(i) match {\n      \
    \          case \"+\" => o1 + o2\n                case \"-\" => o1 - o2\n    \
    \            case \"*\" => o1 * o2\n                case \"//\" => o1 / o2\n \
    \               case \"**\" => pow(o1, o2).toLong\n            }\n           \
    \ stack.push(result)\n        }\n        stack.pop", "        var result = operand(0)\n\
    \        for (i <- 0 until op.length) {\n            op(i) match {\n         \
    \       case \"+\" => result += operand(i + 1)\n                case \"-\" =>\
    \ result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        val stack = new Stack[Long]\n        for\
    \ (i <- 0 until op.length) {\n            val o = op(i)\n            val a = operand(i)\n\
    \            val b = operand(i + 1)\n            if (o == \"+\") stack.push(a\
    \ + b)\n            else if (o == \"-\") stack.push(a - b)\n            else if\
    \ (o == \"*\") stack.push(a * b)\n            else if (o == \"//\") stack.push(a\
    \ / b)\n            else if (o == \"**\") stack.push(pow(a, b).toLong)\n     \
    \   }\n        stack.pop", "        var stack = new Stack[Long]\n        for (i\
    \ <- 0 until op.length) {\n            val o = op(i)\n            val a = operand(i)\n\
    \            val b = operand(i + 1)\n            if (o == \"+\") stack.push(a\
    \ + b)\n            else if (o == \"-\") stack.push(a - b)\n            else if\
    \ (o == \"*\") stack.push(a * b)\n            else if (o == \"//\") stack.push(a\
    \ / b)\n            else if (o == \"**\") stack.push(pow(a, b).toLong)\n     \
    \   }\n        stack.pop", "        var result = operand(0)\n        for (i <-\
    \ 0 until op.length) {\n            op(i) match {\n                case \"+\"\
    \ => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var stack\
    \ = new Stack[Long]\n        stack.push(operand(0))\n        for (i <- 1 until\
    \ operand.length) {\n            val o = op(i - 1)\n            val n = operand(i)\n\
    \            if (o == \"+\") stack.push(stack.pop + n)\n            else if (o\
    \ == \"-\") stack.push(stack.pop - n)\n            else if (o == \"*\") stack.push(stack.pop\
    \ * n)\n            else if (o == \"//\") stack.push(stack.pop / n)\n        \
    \    else if (o == \"**\") stack.push(pow(stack.pop, n).toLong)\n        }\n \
    \       stack.pop", "        var result = operand(0)\n        for (i <- 1 until\
    \ operand.length) {\n            if (op(i - 1) == \"+\") result += operand(i)\n\
    \            else if (op(i - 1) == \"-\") result -= operand(i)\n            else\
    \ if (op(i - 1) == \"*\") result *= operand(i)\n            else if (op(i - 1)\
    \ == \"//\") result /= operand(i)\n            else if (op(i - 1) == \"**\") result\
    \ = pow(result, operand(i)).toLong\n        }\n        return result", "     \
    \   var result = operand(0)\n        for (i <- 1 until operand.length) {\n   \
    \         op(i - 1) match {\n                case \"+\" => result += operand(i)\n\
    \                case \"-\" => result -= operand(i)\n                case \"*\"\
    \ => result *= operand(i)\n                case \"//\" => result /= operand(i)\n\
    \                case \"**\" => result = pow(result, operand(i)).toLong\n    \
    \        }\n        }\n        result", "        var result = operand(0)\n   \
    \     for (i <- 1 until operand.length) {\n            result = op(i - 1) match\
    \ {\n                case \"+\" => result + operand(i)\n                case \"\
    -\" => result - operand(i)\n                case \"*\" => result * operand(i)\n\
    \                case \"//\" => result / operand(i)\n                case \"**\"\
    \ => pow(result, operand(i)).toLong\n            }\n        }\n        result",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var result\
    \ = operand(0)\n        for (i <- 1 until operand.length) {\n            op(i\
    \ - 1) match {\n                case \"+\" => result += operand(i)\n         \
    \       case \"-\" => result -= operand(i)\n                case \"*\" => result\
    \ *= operand(i)\n                case \"//\" => result /= operand(i)\n       \
    \         case \"**\" => result = pow(result, operand(i)).toLong\n           \
    \ }\n        }\n        result", "        var result = operand(0)\n        for\
    \ (i <- 0 until op.length) {\n            op(i) match {\n                case\
    \ \"+\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var result = operand(0)\n        for (i <- 1 until operand.length) {\n\
    \            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result", "        var stack = new Stack[Long]\n\
    \        for (i <- 0 until op.length) {\n            val a = stack.pop\n     \
    \       val b = operand(i + 1)\n            op(i) match {\n                case\
    \ \"+\" => stack.push(a + b)\n                case \"-\" => stack.push(a - b)\n\
    \                case \"*\" => stack.push(a * b)\n                case \"//\"\
    \ => stack.push(a / b)\n                case \"**\" => stack.push(pow(a, b).toLong)\n\
    \            }\n        }\n        stack.pop", "        val stack = new Stack[Long]\n\
    \        for (i <- 0 until op.length) {\n            val a = stack.pop\n     \
    \       val b = operand(i + 1)\n            val c = op(i) match {\n          \
    \      case \"+\" => a + b\n                case \"-\" => a - b\n            \
    \    case \"*\" => a * b\n                case \"//\" => a / b\n             \
    \   case \"**\" => pow(a, b).toLong\n            }\n            stack.push(c)\n\
    \        }\n        stack.pop", "        val stack = new Stack[Long]\n       \
    \ for (i <- 0 until op.length) {\n            val num1 = stack.pop\n         \
    \   val num2 = operand(i + 1)\n            val result = op(i) match {\n      \
    \          case \"+\" => num1 + num2\n                case \"-\" => num1 - num2\n\
    \                case \"*\" => num1 * num2\n                case \"//\" => num1\
    \ / num2\n                case \"**\" => pow(num1, num2).toLong\n            }\n\
    \            stack.push(result)\n        }\n        stack.pop", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            op(i) match\
    \ {\n                case \"+\" => result += operand(i + 1)\n                case\
    \ \"-\" => result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var stack = new Stack[Long]\n        for\
    \ (i <- 0 until op.length) {\n            val a = stack.pop\n            val b\
    \ = operand(i + 1)\n            val c = op(i) match {\n                case \"\
    +\" => a + b\n                case \"-\" => a - b\n                case \"*\"\
    \ => a * b\n                case \"//\" => a / b\n                case \"**\"\
    \ => pow(a, b).toLong\n            }\n            stack.push(c)\n        }\n \
    \       stack.pop", "        val stack = new Stack[Long]\n        for (i <- 0\
    \ until op.length) {\n            val x = operand(i)\n            val y = operand(i\
    \ + 1)\n            op(i) match {\n                case \"+\" => stack.push(x\
    \ + y)\n                case \"-\" => stack.push(x - y)\n                case\
    \ \"*\" => stack.push(x * y)\n                case \"//\" => stack.push(x / y)\n\
    \                case \"**\" => stack.push(pow(x, y).toLong)\n            }\n\
    \        }\n        stack.pop", "        var result = operand(0)\n        for\
    \ (i <- 0 until op.length) {\n            op(i) match {\n                case\
    \ \"+\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            op(i) match\
    \ {\n                case \"+\" => result += operand(i + 1)\n                case\
    \ \"-\" => result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var stack = new Stack[Long]\n        for\
    \ (i <- 0 until op.length) {\n            val a = stack.pop\n            val b\
    \ = operand(i + 1)\n            val c = op(i) match {\n                case \"\
    +\" => a + b\n                case \"-\" => a - b\n                case \"*\"\
    \ => a * b\n                case \"//\" => a / b\n                case \"**\"\
    \ => pow(a, b).toLong\n            }\n            stack.push(c)\n        }\n \
    \       stack.pop", "        var result = operand(0)\n        for (i <- 0 until\
    \ op.length) {\n            op(i) match {\n                case \"+\" => result\
    \ += operand(i + 1)\n                case \"-\" => result -= operand(i + 1)\n\
    \                case \"*\" => result *= operand(i + 1)\n                case\
    \ \"//\" => result /= operand(i + 1)\n                case \"**\" => result =\
    \ pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        val stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val a = stack.pop\n            val b = operand(i + 1)\n          \
    \  op(i) match {\n                case \"+\" => stack.push(a + b)\n          \
    \      case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop",
  "        // Fill up this function body\n        // `op` is a list of operators\n\
    \        // `operand` is a list of operands\n        // You have to return the\
    \ result of the algebraic expression\n        // You can use the following functions:\n\
    \        // `+` `-` `*` `/` `%` `**`\n        // Example:\n        // `2 + 3 *\
    \ 4 - 5`\n        // `op = ['+', '*', '-']`\n        // `operand = [2, 3, 4, 5]`\n\
    \        // `return 9`\n        var result = operand(0)\n        for (i <- 0 until\
    \ op.length) {\n            if (op(i) == \"+\") {\n                result += operand(i\
    \ + 1)\n            } else if (op(i) == \"-\") {\n                result -= operand(i\
    \ + 1)\n            } else if (op(i) == \"*\") {\n                result *= operand(i\
    \ + 1)\n            } else if (op(i) == \"/\") {\n                result /= operand(i\
    \ + 1)\n            } else if (op(i) == \"%\") {\n                result %= operand(i\
    \ + 1)\n            } else if (op(i) == \"**\") {\n                result = pow(result,\
    \ operand(i + 1)).toLong\n            }\n        }\n        result", "       \
    \ var result = operand(0)\n        for (i <- 0 until op.length) {\n          \
    \  op(i) match {\n                case \"+\" => result += operand(i + 1)\n   \
    \             case \"-\" => result -= operand(i + 1)\n                case \"\
    *\" => result *= operand(i + 1)\n                case \"//\" => result /= operand(i\
    \ + 1)\n                case \"**\" => result = pow(result, operand(i + 1)).toLong\n\
    \            }\n        }\n        result", "        val opStack = new Stack[String]\n\
    \        val operandStack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            if (op(i) == \"*\") {\n                operandStack.push(operandStack.pop\
    \ * operand(i + 1))\n            } else if (op(i) == \"//\") {\n             \
    \   operandStack.push(operandStack.pop / operand(i + 1))\n            } else if\
    \ (op(i) == \"**\") {\n                operandStack.push(pow(operandStack.pop,\
    \ operand(i + 1)).toLong)\n            } else {\n                opStack.push(op(i))\n\
    \                operandStack.push(operand(i + 1))\n            }\n        }\n\
    \        var result = operandStack.pop\n        while (!opStack.isEmpty) {\n \
    \           if (opStack.pop == \"+\") result += operandStack.pop\n           \
    \ else result -= operandStack.pop\n        }\n        result", "        var stack\
    \ = new Stack[Long]\n        for (i <- 0 until op.length) {\n            val a\
    \ = stack.pop\n            val b = operand(i + 1)\n            val c = op(i) match\
    \ {\n                case \"+\" => a + b\n                case \"-\" => a - b\n\
    \                case \"*\" => a * b\n                case \"//\" => a / b\n \
    \               case \"**\" => pow(a, b).toLong\n            }\n            stack.push(c)\n\
    \        }\n        stack.pop", "        var stack = new Stack[Long]\n       \
    \ for (i <- 0 until op.length) {\n            val a = stack.pop\n            val\
    \ b = operand(i + 1)\n            op(i) match {\n                case \"+\" =>\
    \ stack.push(a + b)\n                case \"-\" => stack.push(a - b)\n       \
    \         case \"*\" => stack.push(a * b)\n                case \"//\" => stack.push(a\
    \ / b)\n                case \"**\" => stack.push(pow(a, b).toLong)\n        \
    \    }\n        }\n        stack.pop", "        var result = operand(0)\n    \
    \    for (i <- 0 until op.length) {\n            op(i) match {\n             \
    \   case \"+\" => result += operand(i + 1)\n                case \"-\" => result\
    \ -= operand(i + 1)\n                case \"*\" => result *= operand(i + 1)\n\
    \                case \"//\" => result /= operand(i + 1)\n                case\
    \ \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n     \
    \   }\n        result", "        val stack = new Stack[Long]\n        for (i <-\
    \ 0 until op.length) {\n            val b = stack.pop\n            val a = stack.pop\n\
    \            val c = op(i) match {\n                case \"+\" => a + b\n    \
    \            case \"-\" => a - b\n                case \"*\" => a * b\n      \
    \          case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n\
    \            }\n            stack.push(c)\n        }\n        stack.pop", "  \
    \      var stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val o1 = stack.pop\n            val o2 = operand(i + 1)\n        \
    \    val r = op(i) match {\n                case \"+\" => o1 + o2\n          \
    \      case \"-\" => o1 - o2\n                case \"*\" => o1 * o2\n        \
    \        case \"//\" => o1 / o2\n                case \"**\" => pow(o1, o2).toLong\n\
    \            }\n            stack.push(r)\n        }\n        stack.pop", "  \
    \      var stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val a = stack.pop\n            val b = operand(i + 1)\n          \
    \  val c = op(i) match {\n                case \"+\" => a + b\n              \
    \  case \"-\" => a - b\n                case \"*\" => a * b\n                case\
    \ \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n         \
    \   }\n            stack.push(c)\n        }\n        stack.pop", "        var\
    \ result = operand(0)\n        for (i <- 0 until op.length) {\n            op(i)\
    \ match {\n                case \"+\" => result += operand(i + 1)\n          \
    \      case \"-\" => result -= operand(i + 1)\n                case \"*\" => result\
    \ *= operand(i + 1)\n                case \"//\" => result /= operand(i + 1)\n\
    \                case \"**\" => result = pow(result, operand(i + 1)).toLong\n\
    \            }\n        }\n        result", "        var stack = new Stack[Long]\n\
    \        for (i <- 0 until op.length) {\n            val a = stack.pop\n     \
    \       val b = operand(i + 1)\n            op(i) match {\n                case\
    \ \"+\" => stack.push(a + b)\n                case \"-\" => stack.push(a - b)\n\
    \                case \"*\" => stack.push(a * b)\n                case \"//\"\
    \ => stack.push(a / b)\n                case \"**\" => stack.push(pow(a, b).toLong)\n\
    \            }\n        }\n        stack.pop", "        var result = operand(0)\n\
    \        for (i <- 0 until op.length) {\n            op(i) match {\n         \
    \       case \"+\" => result += operand(i + 1)\n                case \"-\" =>\
    \ result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 1 until operand.length) {\n            result = op(i - 1) match {\n     \
    \           case \"+\" => result + operand(i)\n                case \"-\" => result\
    \ - operand(i)\n                case \"*\" => result * operand(i)\n          \
    \      case \"//\" => result / operand(i)\n                case \"**\" => pow(result,\
    \ operand(i)).toLong\n            }\n        }\n        result", "        var\
    \ result = operand(0)\n        for (i <- 0 until op.length) {\n            op(i)\
    \ match {\n                case \"+\" => result += operand(i + 1)\n          \
    \      case \"-\" => result -= operand(i + 1)\n                case \"*\" => result\
    \ *= operand(i + 1)\n                case \"//\" => result /= operand(i + 1)\n\
    \                case \"**\" => result = pow(result, operand(i + 1)).toLong\n\
    \            }\n        }\n        result", "        var stack = new Stack[Long]\n\
    \        for (i <- 0 until op.length) {\n            val x = operand(i)\n    \
    \        val y = operand(i + 1)\n            op(i) match {\n                case\
    \ \"+\" => stack.push(x + y)\n                case \"-\" => stack.push(x - y)\n\
    \                case \"*\" => stack.push(x * y)\n                case \"//\"\
    \ => stack.push(x / y)\n                case \"**\" => stack.push(pow(x, y).toLong)\n\
    \            }\n        }\n        stack.pop", "        var result = operand(0)\n\
    \        for (i <- 1 until operand.length) {\n            op(i - 1) match {\n\
    \                case \"+\" => result += operand(i)\n                case \"-\"\
    \ => result -= operand(i)\n                case \"*\" => result *= operand(i)\n\
    \                case \"//\" => result /= operand(i)\n                case \"\
    **\" => result = pow(result, operand(i)).toLong\n            }\n        }\n  \
    \      result", "        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            op(i) match\
    \ {\n                case \"+\" => result += operand(i + 1)\n                case\
    \ \"-\" => result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 1 until operand.length) {\n            result = op(i - 1) match {\n     \
    \           case \"+\" => result + operand(i)\n                case \"-\" => result\
    \ - operand(i)\n                case \"*\" => result * operand(i)\n          \
    \      case \"//\" => result / operand(i)\n                case \"**\" => pow(result,\
    \ operand(i)).toLong\n            }\n        }\n        result", "        var\
    \ result = operand(0)\n        for (i <- 0 until op.length) {\n            op(i)\
    \ match {\n                case \"+\" => result += operand(i + 1)\n          \
    \      case \"-\" => result -= operand(i + 1)\n                case \"*\" => result\
    \ *= operand(i + 1)\n                case \"//\" => result /= operand(i + 1)\n\
    \                case \"**\" => result = pow(result, operand(i + 1)).toLong\n\
    \            }\n        }\n        result", "        var result = operand(0)\n\
    \        for (i <- 0 until op.length) {\n            op(i) match {\n         \
    \       case \"+\" => result += operand(i + 1)\n                case \"-\" =>\
    \ result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        val stack = new Stack[Long]\n        for\
    \ (i <- 0 until op.length) {\n            val a = stack.pop\n            val b\
    \ = operand(i + 1)\n            op(i) match {\n                case \"+\" => stack.push(a\
    \ + b)\n                case \"-\" => stack.push(a - b)\n                case\
    \ \"*\" => stack.push(a * b)\n                case \"//\" => stack.push(a / b)\n\
    \                case \"**\" => stack.push(pow(a, b).toLong)\n            }\n\
    \        }\n        stack.pop", "        var result = operand(0)\n        for\
    \ (i <- 0 until op.length) {\n            op(i) match {\n                case\
    \ \"+\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        def doAlgebra(op : List[String], operand : List[Long], result : Long) :\
    \ Long = {\n            if (op.isEmpty) result\n            else {\n         \
    \       val newResult = op.head match {\n                    case \"+\" => result\
    \ + operand.head\n                    case \"-\" => result - operand.head\n  \
    \                  case \"*\" => result * operand.head\n                    case\
    \ \"//\" => result / operand.head\n                    case \"**\" => pow(result,\
    \ operand.head).toLong\n                }\n                doAlgebra(op.tail,\
    \ operand.tail, newResult)\n            }\n        }\n        doAlgebra(op, operand.tail,\
    \ operand.head)", "        var result = operand(0)\n        for (i <- 0 until\
    \ op.length) {\n            op(i) match {\n                case \"+\" => result\
    \ += operand(i + 1)\n                case \"-\" => result -= operand(i + 1)\n\
    \                case \"*\" => result *= operand(i + 1)\n                case\
    \ \"//\" => result /= operand(i + 1)\n                case \"**\" => result =\
    \ pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val a = stack.pop\n            val b = operand(i + 1)\n          \
    \  op(i) match {\n                case \"+\" => stack.push(a + b)\n          \
    \      case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            op(i) match\
    \ {\n                case \"+\" => result += operand(i + 1)\n                case\
    \ \"-\" => result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 1 until operand.length) {\n            result = op(i - 1) match {\n     \
    \           case \"+\" => result + operand(i)\n                case \"-\" => result\
    \ - operand(i)\n                case \"*\" => result * operand(i)\n          \
    \      case \"//\" => result / operand(i)\n                case \"**\" => pow(result,\
    \ operand(i)).toLong\n            }\n        }\n        result", "        var\
    \ result = operand(0)\n        for (i <- 1 until operand.length) {\n         \
    \   op(i - 1) match {\n                case \"+\" => result += operand(i)\n  \
    \              case \"-\" => result -= operand(i)\n                case \"*\"\
    \ => result *= operand(i)\n                case \"//\" => result /= operand(i)\n\
    \                case \"**\" => result = pow(result, operand(i)).toLong\n    \
    \        }\n        }\n        result", "        var stack = new Stack[Long]\n\
    \        for (i <- 0 until op.length) {\n            val a = stack.pop\n     \
    \       val b = operand(i + 1)\n            op(i) match {\n                case\
    \ \"+\" => stack.push(a + b)\n                case \"-\" => stack.push(a - b)\n\
    \                case \"*\" => stack.push(a * b)\n                case \"//\"\
    \ => stack.push(a / b)\n                case \"**\" => stack.push(pow(a, b).toLong)\n\
    \            }\n        }\n        stack.pop", "        var result = operand(0)\n\
    \        for (i <- 0 until op.length) {\n            op(i) match {\n         \
    \       case \"+\" => result += operand(i + 1)\n                case \"-\" =>\
    \ result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 1 until operand.length) {\n            result = op(i - 1) match {\n     \
    \           case \"+\" => result + operand(i)\n                case \"-\" => result\
    \ - operand(i)\n                case \"*\" => result * operand(i)\n          \
    \      case \"//\" => result / operand(i)\n                case \"**\" => pow(result,\
    \ operand(i)).toLong\n            }\n        }\n        result", "        var\
    \ stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n          \
    \  val a = stack.pop\n            val b = operand(i + 1)\n            val c =\
    \ op(i) match {\n                case \"+\" => a + b\n                case \"\
    -\" => a - b\n                case \"*\" => a * b\n                case \"//\"\
    \ => a / b\n                case \"**\" => pow(a, b).toLong\n            }\n \
    \           stack.push(c)\n        }\n        stack.pop", "        var stack =\
    \ new Stack[Long]\n        for (i <- 0 until op.length) {\n            val a =\
    \ stack.pop\n            val b = operand(i + 1)\n            val c = op(i) match\
    \ {\n                case \"+\" => a + b\n                case \"-\" => a - b\n\
    \                case \"*\" => a * b\n                case \"//\" => a / b\n \
    \               case \"**\" => pow(a, b).toLong\n            }\n            stack.push(c)\n\
    \        }\n        stack.pop", "        var result = operand(0)\n        for\
    \ (i <- 0 until op.length) {\n            op(i) match {\n                case\
    \ \"+\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var stack = new Stack[Long]\n        stack.push(operand(0))\n        for\
    \ (i <- 1 until operand.length) {\n            val num = operand(i)\n        \
    \    val opr = op(i - 1)\n            if (opr == \"+\") stack.push(stack.pop +\
    \ num)\n            else if (opr == \"-\") stack.push(stack.pop - num)\n     \
    \       else if (opr == \"*\") stack.push(stack.pop * num)\n            else if\
    \ (opr == \"//\") stack.push(stack.pop / num)\n            else if (opr == \"\
    **\") stack.push(pow(stack.pop, num).toLong)\n        }\n        stack.pop", " \
    \       val stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n\
    \            val a = stack.pop\n            val b = operand(i + 1)\n         \
    \   op(i) match {\n                case \"+\" => stack.push(a + b)\n         \
    \       case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        val stack\
    \ = new Stack[Long]\n        for (i <- 0 until op.length) {\n            val a\
    \ = stack.pop\n            val b = operand(i + 1)\n            stack.push(op(i)\
    \ match {\n                case \"+\" => a + b\n                case \"-\" =>\
    \ a - b\n                case \"*\" => a * b\n                case \"//\" => a\
    \ / b\n                case \"**\" => pow(a, b).toLong\n            })\n     \
    \   }\n        stack.pop", "        var stack = new Stack[Long]\n        for (i\
    \ <- 0 until op.length) {\n            val o1 = stack.pop\n            val o2\
    \ = operand(i + 1)\n            op(i) match {\n                case \"+\" => stack.push(o1\
    \ + o2)\n                case \"-\" => stack.push(o1 - o2)\n                case\
    \ \"*\" => stack.push(o1 * o2)\n                case \"//\" => stack.push(o1 /\
    \ o2)\n                case \"**\" => stack.push(pow(o1, o2).toLong)\n       \
    \     }\n        }\n        stack.pop", "        var result = operand(0)\n   \
    \     for (i <- 0 until op.length) {\n            op(i) match {\n            \
    \    case \"+\" => result += operand(i + 1)\n                case \"-\" => result\
    \ -= operand(i + 1)\n                case \"*\" => result *= operand(i + 1)\n\
    \                case \"//\" => result /= operand(i + 1)\n                case\
    \ \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n     \
    \   }\n        result", "        var result = operand(0)\n        for (i <- 0\
    \ until op.length) {\n            op(i) match {\n                case \"+\" =>\
    \ result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var stack\
    \ = new Stack[Long]\n        for (i <- 0 until op.length) {\n            val num1\
    \ = stack.pop\n            val num2 = operand(i + 1)\n            val result =\
    \ op(i) match {\n                case \"+\" => num1 + num2\n                case\
    \ \"-\" => num1 - num2\n                case \"*\" => num1 * num2\n          \
    \      case \"//\" => num1 / num2\n                case \"**\" => pow(num1, num2).toLong\n\
    \            }\n            stack.push(result)\n        }\n        stack.pop",
  "        var result = operand(0)\n        for (i <- 1 until operand.length) {\n\
    \            if (op(i - 1) == \"+\") result += operand(i)\n            else if\
    \ (op(i - 1) == \"-\") result -= operand(i)\n            else if (op(i - 1) ==\
    \ \"*\") result *= operand(i)\n            else if (op(i - 1) == \"//\") result\
    \ /= operand(i)\n            else if (op(i - 1) == \"**\") result = pow(result,\
    \ operand(i)).toLong\n        }\n        return result", "        var stack =\
    \ new Stack[Long]\n        for (i <- 0 until op.length) {\n            val a =\
    \ stack.pop\n            val b = operand(i + 1)\n            op(i) match {\n \
    \               case \"+\" => stack.push(a + b)\n                case \"-\" =>\
    \ stack.push(a - b)\n                case \"*\" => stack.push(a * b)\n       \
    \         case \"//\" => stack.push(a / b)\n                case \"**\" => stack.push(pow(a,\
    \ b).toLong)\n            }\n        }\n        stack.pop", "        var result\
    \ = operand(0)\n        for (i <- 1 until operand.length) {\n            result\
    \ = op(i - 1) match {\n                case \"+\" => result + operand(i)\n   \
    \             case \"-\" => result - operand(i)\n                case \"*\" =>\
    \ result * operand(i)\n                case \"//\" => result / operand(i)\n  \
    \              case \"**\" => pow(result, operand(i)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 0 until op.length) {\n            op(i) match {\n                case \"\
    +\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val o = op(i)\n            val a = operand(i)\n            val b =\
    \ operand(i + 1)\n            o match {\n                case \"+\" => stack.push(a\
    \ + b)\n                case \"-\" => stack.push(a - b)\n                case\
    \ \"*\" => stack.push(a * b)\n                case \"//\" => stack.push(a / b)\n\
    \                case \"**\" => stack.push(pow(a, b).toLong)\n            }\n\
    \        }\n        stack.pop", "        var result = operand(0)\n        for\
    \ (i <- 0 until op.length) {\n            op(i) match {\n                case\
    \ \"+\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var result = operand(0)\n        for (i <- 1 until operand.length) {\n\
    \            op(i - 1) match {\n                case \"+\" => result += operand(i)\n\
    \                case \"-\" => result -= operand(i)\n                case \"*\"\
    \ => result *= operand(i)\n                case \"//\" => result /= operand(i)\n\
    \                case \"**\" => result = pow(result, operand(i)).toLong\n    \
    \        }\n        }\n        result", "        var result = operand(0)\n   \
    \     for (i <- 1 until operand.length) {\n            result = op(i - 1) match\
    \ {\n                case \"+\" => result + operand(i)\n                case \"\
    -\" => result - operand(i)\n                case \"*\" => result * operand(i)\n\
    \                case \"//\" => result / operand(i)\n                case \"**\"\
    \ => pow(result, operand(i)).toLong\n            }\n        }\n        result",
  "        var stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val a = stack.pop\n            val b = operand(i + 1)\n          \
    \  op(i) match {\n                case \"+\" => stack.push(a + b)\n          \
    \      case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            op(i) match\
    \ {\n                case \"+\" => result += operand(i + 1)\n                case\
    \ \"-\" => result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 0 until op.length) {\n            op(i) match {\n                case \"\
    +\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            op(i) match\
    \ {\n                case \"+\" => result += operand(i + 1)\n                case\
    \ \"-\" => result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 0 until op.length) {\n            op(i) match {\n                case \"\
    +\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            op(i) match\
    \ {\n                case \"+\" => result += operand(i + 1)\n                case\
    \ \"-\" => result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 0 until op.length) {\n            op(i) match {\n                case \"\
    +\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val a = stack.pop\n            val b = operand(i + 1)\n          \
    \  op(i) match {\n                case \"+\" => stack.push(a + b)\n          \
    \      case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var result\
    \ = operand(0)\n        for (i <- 1 until operand.length) {\n            result\
    \ = op(i - 1) match {\n                case \"+\" => result + operand(i)\n   \
    \             case \"-\" => result - operand(i)\n                case \"*\" =>\
    \ result * operand(i)\n                case \"//\" => result / operand(i)\n  \
    \              case \"**\" => pow(result, operand(i)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 0 until op.length) {\n            op(i) match {\n                case \"\
    +\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var result\
    \ = operand(0)\n        for (i <- 1 until operand.length) {\n            result\
    \ = op(i - 1) match {\n                case \"+\" => result + operand(i)\n   \
    \             case \"-\" => result - operand(i)\n                case \"*\" =>\
    \ result * operand(i)\n                case \"//\" => result / operand(i)\n  \
    \              case \"**\" => pow(result, operand(i)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 0 until op.length) {\n            op(i) match {\n                case \"\
    +\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val a = stack.pop\n            val b = operand(i + 1)\n          \
    \  stack.push(op(i) match {\n                case \"+\" => a + b\n           \
    \     case \"-\" => a - b\n                case \"*\" => a * b\n             \
    \   case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n  \
    \          })\n        }\n        stack.pop", "        val stack = new Stack[Long]\n\
    \        for (i <- 0 until op.length) {\n            val a = stack.pop\n     \
    \       val b = operand(i + 1)\n            op(i) match {\n                case\
    \ \"+\" => stack.push(a + b)\n                case \"-\" => stack.push(a - b)\n\
    \                case \"*\" => stack.push(a * b)\n                case \"//\"\
    \ => stack.push(a / b)\n                case \"**\" => stack.push(pow(a, b).toLong)\n\
    \            }\n        }\n        stack.pop", "        var result = operand(0)\n\
    \        for (i <- 0 until op.length) {\n            op(i) match {\n         \
    \       case \"+\" => result += operand(i + 1)\n                case \"-\" =>\
    \ result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 0 until op.length) {\n            op(i) match {\n                case \"\
    +\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var stack\
    \ = new Stack[Long]\n        for (i <- 0 until op.length) {\n            val a\
    \ = stack.pop\n            val b = operand(i + 1)\n            op(i) match {\n\
    \                case \"+\" => stack.push(a + b)\n                case \"-\" =>\
    \ stack.push(a - b)\n                case \"*\" => stack.push(a * b)\n       \
    \         case \"//\" => stack.push(a / b)\n                case \"**\" => stack.push(pow(a,\
    \ b).toLong)\n            }\n        }\n        stack.pop", "        var result\
    \ = operand(0)\n        for (i <- 1 until operand.length) {\n            op(i\
    \ - 1) match {\n                case \"+\" => result += operand(i)\n         \
    \       case \"-\" => result -= operand(i)\n                case \"*\" => result\
    \ *= operand(i)\n                case \"//\" => result /= operand(i)\n       \
    \         case \"**\" => result = pow(result, operand(i)).toLong\n           \
    \ }\n        }\n        result", "        var result = operand(0)\n        for\
    \ (i <- 0 until op.length) {\n            op(i) match {\n                case\
    \ \"+\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val a = stack.pop\n            val b = operand(i + 1)\n          \
    \  op(i) match {\n                case \"+\" => stack.push(a + b)\n          \
    \      case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var result\
    \ = operand(0)\n        for (i <- 1 until operand.length) {\n            result\
    \ = op(i - 1) match {\n                case \"+\" => result + operand(i)\n   \
    \             case \"-\" => result - operand(i)\n                case \"*\" =>\
    \ result * operand(i)\n                case \"//\" => result / operand(i)\n  \
    \              case \"**\" => pow(result, operand(i)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 1 until operand.length) {\n            result = op(i - 1) match {\n     \
    \           case \"+\" => result + operand(i)\n                case \"-\" => result\
    \ - operand(i)\n                case \"*\" => result * operand(i)\n          \
    \      case \"//\" => result / operand(i)\n                case \"**\" => pow(result,\
    \ operand(i)).toLong\n            }\n        }\n        result", "        var\
    \ result = operand(0)\n        for (i <- 1 until operand.length) {\n         \
    \   result = op(i - 1) match {\n                case \"+\" => result + operand(i)\n\
    \                case \"-\" => result - operand(i)\n                case \"*\"\
    \ => result * operand(i)\n                case \"//\" => result / operand(i)\n\
    \                case \"**\" => pow(result, operand(i)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 1 until operand.length) {\n            op(i - 1) match {\n              \
    \  case \"+\" => result += operand(i)\n                case \"-\" => result -=\
    \ operand(i)\n                case \"*\" => result *= operand(i)\n           \
    \     case \"//\" => result /= operand(i)\n                case \"**\" => result\
    \ = pow(result, operand(i)).toLong\n            }\n        }\n        result",
  "        var stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val o = op(i)\n            val a = operand(i)\n            val b =\
    \ operand(i + 1)\n            val result = o match {\n                case \"\
    +\" => a + b\n                case \"-\" => a - b\n                case \"*\"\
    \ => a * b\n                case \"//\" => a / b\n                case \"**\"\
    \ => pow(a, b).toLong\n            }\n            stack.push(result)\n       \
    \ }\n        stack.pop", "        var stack = new Stack[Long]\n        for (i\
    \ <- 0 until op.length) {\n            val a = stack.pop\n            val b =\
    \ operand(i + 1)\n            val c = op(i) match {\n                case \"+\"\
    \ => a + b\n                case \"-\" => a - b\n                case \"*\" =>\
    \ a * b\n                case \"//\" => a / b\n                case \"**\" =>\
    \ pow(a, b).toLong\n            }\n            stack.push(c)\n        }\n    \
    \    stack.pop", "        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var stack\
    \ = new Stack[Long]\n        for (i <- 0 until op.length) {\n            val o1\
    \ = stack.pop\n            val o2 = operand(i + 1)\n            val result = op(i)\
    \ match {\n                case \"+\" => o1 + o2\n                case \"-\" =>\
    \ o1 - o2\n                case \"*\" => o1 * o2\n                case \"//\"\
    \ => o1 / o2\n                case \"**\" => pow(o1, o2).toLong\n            }\n\
    \            stack.push(result)\n        }\n        stack.pop", "        if (op.length\
    \ != operand.length - 1) throw new IllegalArgumentException(\"Operator list length\
    \ must be equal to operand list length minus one\")\n        if (op.length ==\
    \ 0) throw new IllegalArgumentException(\"Operator list must have at least one\
    \ operator\")\n        if (operand.length < 2) throw new IllegalArgumentException(\"\
    Operand list must have at least two operands\")\n        var result = operand(0)\n\
    \        for (i <- 0 until op.length) {\n            op(i) match {\n         \
    \       case \"+\" => result += operand(i + 1)\n                case \"-\" =>\
    \ result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            \
    \    case _ => throw new IllegalArgumentException(\"Invalid operator\")\n    \
    \        }\n        }\n        result", "        var stack = new Stack[Long]\n\
    \        for (i <- 0 until op.length) {\n            stack.push(operand(i))\n\
    \            stack.push(operand(i + 1))\n            val b = stack.pop\n     \
    \       val a = stack.pop\n            op(i) match {\n                case \"\
    +\" => stack.push(a + b)\n                case \"-\" => stack.push(a - b)\n  \
    \              case \"*\" => stack.push(a * b)\n                case \"//\" =>\
    \ stack.push(a / b)\n                case \"**\" => stack.push(pow(a, b).toLong)\n\
    \            }\n        }\n        stack.pop", "        var result = operand(0)\n\
    \        for (i <- 1 until operand.length) {\n            result = op(i - 1) match\
    \ {\n                case \"+\" => result + operand(i)\n                case \"\
    -\" => result - operand(i)\n                case \"*\" => result * operand(i)\n\
    \                case \"//\" => result / operand(i)\n                case \"**\"\
    \ => pow(result, operand(i)).toLong\n            }\n        }\n        result",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            op(i) match\
    \ {\n                case \"+\" => result += operand(i + 1)\n                case\
    \ \"-\" => result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 0 until op.length) {\n            op(i) match {\n                case \"\
    +\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val a = stack.pop\n            val b = operand(i + 1)\n          \
    \  op(i) match {\n                case \"+\" => stack.push(a + b)\n          \
    \      case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop",
  "        var stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val a = stack.pop\n            val b = operand(i + 1)\n          \
    \  op(i) match {\n                case \"+\" => stack.push(a + b)\n          \
    \      case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            op(i) match\
    \ {\n                case \"+\" => result += operand(i + 1)\n                case\
    \ \"-\" => result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var stack = new Stack[Long]\n        for\
    \ (i <- 0 until op.length) {\n            val o = op(i)\n            val a = operand(i)\n\
    \            val b = operand(i + 1)\n            if (o == \"+\") stack.push(a\
    \ + b)\n            else if (o == \"-\") stack.push(a - b)\n            else if\
    \ (o == \"*\") stack.push(a * b)\n            else if (o == \"//\") stack.push(a\
    \ / b)\n            else if (o == \"**\") stack.push(pow(a, b).toLong)\n     \
    \   }\n        stack.pop", "        var result = operand(0)\n        for (i <-\
    \ 0 until op.length) {\n            op(i) match {\n                case \"+\"\
    \ => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var result\
    \ = operand(0)\n        for (i <- 1 until operand.length) {\n            op(i\
    \ - 1) match {\n                case \"+\" => result += operand(i)\n         \
    \       case \"-\" => result -= operand(i)\n                case \"*\" => result\
    \ *= operand(i)\n                case \"//\" => result /= operand(i)\n       \
    \         case \"**\" => result = pow(result, operand(i)).toLong\n           \
    \ }\n        }\n        result", "        var stack = new Stack[Long]\n      \
    \  for (i <- 0 until op.length) {\n            val a = stack.pop\n           \
    \ val b = operand(i + 1)\n            val c = op(i) match {\n                case\
    \ \"+\" => a + b\n                case \"-\" => a - b\n                case \"\
    *\" => a * b\n                case \"//\" => a / b\n                case \"**\"\
    \ => pow(a, b).toLong\n            }\n            stack.push(c)\n        }\n \
    \       stack.pop", "        val stack = new Stack[Long]\n        for (i <- 0\
    \ until op.length) {\n            val a = stack.pop\n            val b = operand(i\
    \ + 1)\n            stack.push(op(i) match {\n                case \"+\" => a\
    \ + b\n                case \"-\" => a - b\n                case \"*\" => a *\
    \ b\n                case \"//\" => a / b\n                case \"**\" => pow(a,\
    \ b).toLong\n            })\n        }\n        stack.pop", "        val stack\
    \ = new Stack[Long]\n        for (i <- 0 until op.length) {\n            val a\
    \ = stack.pop\n            val b = operand(i + 1)\n            op(i) match {\n\
    \                case \"+\" => stack.push(a + b)\n                case \"-\" =>\
    \ stack.push(a - b)\n                case \"*\" => stack.push(a * b)\n       \
    \         case \"//\" => stack.push(a / b)\n                case \"**\" => stack.push(pow(a,\
    \ b).toLong)\n            }\n        }\n        stack.pop", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            op(i) match\
    \ {\n                case \"+\" => result += operand(i + 1)\n                case\
    \ \"-\" => result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 1 until operand.length) {\n            result = op(i - 1) match {\n     \
    \           case \"+\" => result + operand(i)\n                case \"-\" => result\
    \ - operand(i)\n                case \"*\" => result * operand(i)\n          \
    \      case \"//\" => result / operand(i)\n                case \"**\" => pow(result,\
    \ operand(i)).toLong\n            }\n        }\n        result", "        var\
    \ result = operand(0)\n        for (i <- 0 until op.length) {\n            op(i)\
    \ match {\n                case \"+\" => result += operand(i + 1)\n          \
    \      case \"-\" => result -= operand(i + 1)\n                case \"*\" => result\
    \ *= operand(i + 1)\n                case \"//\" => result /= operand(i + 1)\n\
    \                case \"**\" => result = pow(result, operand(i + 1)).toLong\n\
    \            }\n        }\n        result", "        var result = operand(0)\n\
    \        for (i <- 1 until operand.length) {\n            result = op(i - 1) match\
    \ {\n                case \"+\" => result + operand(i)\n                case \"\
    -\" => result - operand(i)\n                case \"*\" => result * operand(i)\n\
    \                case \"//\" => result / operand(i)\n                case \"**\"\
    \ => pow(result, operand(i)).toLong\n            }\n        }\n        result",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            op(i) match\
    \ {\n                case \"+\" => result += operand(i + 1)\n                case\
    \ \"-\" => result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var stack = new Stack[Long]\n        for\
    \ (i <- 0 until op.length) {\n            val b = stack.pop\n            val a\
    \ = stack.pop\n            stack.push(op(i) match {\n                case \"+\"\
    \ => a + b\n                case \"-\" => a - b\n                case \"*\" =>\
    \ a * b\n                case \"//\" => a / b\n                case \"**\" =>\
    \ pow(a, b).toLong\n            })\n        }\n        stack.pop", "        var\
    \ result = operand(0)\n        for (i <- 0 until op.length) {\n            op(i)\
    \ match {\n                case \"+\" => result += operand(i + 1)\n          \
    \      case \"-\" => result -= operand(i + 1)\n                case \"*\" => result\
    \ *= operand(i + 1)\n                case \"//\" => result /= operand(i + 1)\n\
    \                case \"**\" => result = pow(result, operand(i + 1)).toLong\n\
    \            }\n        }\n        result", "        if (op.length != operand.length\
    \ - 1) throw new IllegalArgumentException(\"Operator list length must be equal\
    \ to operand list length minus one.\")\n        if (op.length == 0) throw new\
    \ IllegalArgumentException(\"Operator list must have at least one operator.\"\
    )\n        if (operand.length < 2) throw new IllegalArgumentException(\"Operand\
    \ list must have at least two operands.\")\n        var result = operand(0)\n\
    \        for (i <- 0 until op.length) {\n            op(i) match {\n         \
    \       case \"+\" => result += operand(i + 1)\n                case \"-\" =>\
    \ result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            \
    \    case _ => throw new IllegalArgumentException(\"Invalid operator.\")\n   \
    \         }\n        }\n        result", "        var result = operand(0)\n  \
    \      for (i <- 1 until operand.length) {\n            result = op(i - 1) match\
    \ {\n                case \"+\" => result + operand(i)\n                case \"\
    -\" => result - operand(i)\n                case \"*\" => result * operand(i)\n\
    \                case \"//\" => result / operand(i)\n                case \"**\"\
    \ => pow(result, operand(i)).toLong\n            }\n        }\n        result",
  "        var stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val a = stack.pop\n            val b = operand(i + 1)\n          \
    \  op(i) match {\n                case \"+\" => stack.push(a + b)\n          \
    \      case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        val stack\
    \ = new Stack[Long]\n        for (i <- 0 until op.length) {\n            val a\
    \ = stack.pop\n            val b = operand(i + 1)\n            val c = op(i) match\
    \ {\n                case \"+\" => a + b\n                case \"-\" => a - b\n\
    \                case \"*\" => a * b\n                case \"//\" => a / b\n \
    \               case \"**\" => pow(a, b).toLong\n            }\n            stack.push(c)\n\
    \        }\n        stack.pop", "        var result = operand(0)\n        for\
    \ (i <- 1 until operand.length) {\n            op(i - 1) match {\n           \
    \     case \"+\" => result += operand(i)\n                case \"-\" => result\
    \ -= operand(i)\n                case \"*\" => result *= operand(i)\n        \
    \        case \"//\" => result /= operand(i)\n                case \"**\" => result\
    \ = pow(result, operand(i)).toLong\n            }\n        }\n        result",
  "        val stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val a = stack.pop\n            val b = operand(i + 1)\n          \
    \  op(i) match {\n                case \"+\" => stack.push(a + b)\n          \
    \      case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var stack\
    \ = new Stack[Long]\n        for (i <- 0 until op.length) {\n            val a\
    \ = stack.pop\n            val b = operand(i + 1)\n            val c = op(i) match\
    \ {\n                case \"+\" => a + b\n                case \"-\" => a - b\n\
    \                case \"*\" => a * b\n                case \"//\" => a / b\n \
    \               case \"**\" => pow(a, b).toLong\n            }\n            stack.push(c)\n\
    \        }\n        stack.pop", "        var stack = new Stack[Long]\n       \
    \ for (i <- 0 until op.length) {\n            val op1 = stack.pop\n          \
    \  val op2 = operand(i + 1)\n            val res = op(i) match {\n           \
    \     case \"+\" => op1 + op2\n                case \"-\" => op1 - op2\n     \
    \           case \"*\" => op1 * op2\n                case \"//\" => op1 / op2\n\
    \                case \"**\" => pow(op1, op2).toLong\n            }\n        \
    \    stack.push(res)\n        }\n        stack.pop", "        var result = operand(0)\n\
    \        for (i <- 0 until op.length) {\n            op(i) match {\n         \
    \       case \"+\" => result += operand(i + 1)\n                case \"-\" =>\
    \ result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 0 until op.length) {\n            op(i) match {\n                case \"\
    +\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        val stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val a = stack.pop\n            val b = operand(i + 1)\n          \
    \  val c = op(i) match {\n                case \"+\" => a + b\n              \
    \  case \"-\" => a - b\n                case \"*\" => a * b\n                case\
    \ \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n         \
    \   }\n            stack.push(c)\n        }\n        stack.pop", "        var\
    \ stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n          \
    \  val a = stack.pop\n            val b = operand(i + 1)\n            val c =\
    \ op(i) match {\n                case \"+\" => a + b\n                case \"\
    -\" => a - b\n                case \"*\" => a * b\n                case \"//\"\
    \ => a / b\n                case \"**\" => pow(a, b).toLong\n            }\n \
    \           stack.push(c)\n        }\n        stack.pop", "        var stack =\
    \ new Stack[Long]\n        for (i <- 0 until op.length) {\n            val a =\
    \ stack.pop\n            val b = operand(i + 1)\n            val c = op(i) match\
    \ {\n                case \"+\" => a + b\n                case \"-\" => a - b\n\
    \                case \"*\" => a * b\n                case \"//\" => a / b\n \
    \               case \"**\" => pow(a, b).toLong\n            }\n            stack.push(c)\n\
    \        }\n        stack.pop", "        var stack = new Stack[Long]\n       \
    \ for (i <- 0 until op.length) {\n            val a = stack.pop\n            val\
    \ b = operand(i + 1)\n            val c = op(i) match {\n                case\
    \ \"+\" => a + b\n                case \"-\" => a - b\n                case \"\
    *\" => a * b\n                case \"//\" => a / b\n                case \"**\"\
    \ => pow(a, b).toLong\n            }\n            stack.push(c)\n        }\n \
    \       stack.pop", "        var result = operand(0)\n        for (i <- 0 until\
    \ op.length) {\n            op(i) match {\n                case \"+\" => result\
    \ += operand(i + 1)\n                case \"-\" => result -= operand(i + 1)\n\
    \                case \"*\" => result *= operand(i + 1)\n                case\
    \ \"//\" => result /= operand(i + 1)\n                case \"**\" => result =\
    \ pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        val stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val o = op(i)\n            val a = operand(i)\n            val b =\
    \ operand(i + 1)\n            o match {\n                case \"+\" => stack.push(a\
    \ + b)\n                case \"-\" => stack.push(a - b)\n                case\
    \ \"*\" => stack.push(a * b)\n                case \"//\" => stack.push(a / b)\n\
    \                case \"**\" => stack.push(pow(a, b).toLong)\n            }\n\
    \        }\n        stack.pop", "        var result = operand(0)\n        for\
    \ (i <- 0 until op.length) {\n            op(i) match {\n                case\
    \ \"+\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val a = stack.pop\n            val b = operand(i + 1)\n          \
    \  val c = op(i) match {\n                case \"+\" => a + b\n              \
    \  case \"-\" => a - b\n                case \"*\" => a * b\n                case\
    \ \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n         \
    \   }\n            stack.push(c)\n        }\n        stack.pop", "        var\
    \ result = operand(0)\n        for (i <- 1 until operand.length) {\n         \
    \   if (op(i - 1) == \"+\") result += operand(i)\n            else if (op(i -\
    \ 1) == \"-\") result -= operand(i)\n            else if (op(i - 1) == \"*\")\
    \ result *= operand(i)\n            else if (op(i - 1) == \"//\") result /= operand(i)\n\
    \            else if (op(i - 1) == \"**\") result = pow(result, operand(i)).toLong\n\
    \        }\n        return result", "        var result = operand(0)\n       \
    \ for (i <- 1 until operand.length) {\n            result = op(i - 1) match {\n\
    \                case \"+\" => result + operand(i)\n                case \"-\"\
    \ => result - operand(i)\n                case \"*\" => result * operand(i)\n\
    \                case \"//\" => result / operand(i)\n                case \"**\"\
    \ => pow(result, operand(i)).toLong\n            }\n        }\n        result",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            op(i) match\
    \ {\n                case \"+\" => result += operand(i + 1)\n                case\
    \ \"-\" => result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var stack = new Stack[Long]\n        for\
    \ (i <- 0 until op.length) {\n            val x = stack.pop\n            val y\
    \ = operand(i + 1)\n            op(i) match {\n                case \"+\" => stack.push(x\
    \ + y)\n                case \"-\" => stack.push(x - y)\n                case\
    \ \"*\" => stack.push(x * y)\n                case \"//\" => stack.push(x / y)\n\
    \                case \"**\" => stack.push(pow(x, y).toLong)\n            }\n\
    \        }\n        stack.pop", "        var result = operand(0)\n        for\
    \ (i <- 0 until op.length) {\n            op(i) match {\n                case\
    \ \"+\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var result = operand(0)\n        for (i <- 1 until operand.length) {\n\
    \            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result", "        var result = operand(0)\n\
    \        for (i <- 0 until op.length) {\n            op(i) match {\n         \
    \       case \"+\" => result += operand(i + 1)\n                case \"-\" =>\
    \ result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 0 until op.length) {\n            if (op(i) == \"+\") result += operand(i\
    \ + 1)\n            else if (op(i) == \"-\") result -= operand(i + 1)\n      \
    \      else if (op(i) == \"*\") result *= operand(i + 1)\n            else if\
    \ (op(i) == \"//\") result /= operand(i + 1)\n            else if (op(i) == \"\
    **\") result = pow(result, operand(i + 1)).toLong\n        }\n        return result",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var result\
    \ = operand(0)\n        for (i <- 1 until operand.length) {\n            op(i\
    \ - 1) match {\n                case \"+\" => result += operand(i)\n         \
    \       case \"-\" => result -= operand(i)\n                case \"*\" => result\
    \ *= operand(i)\n                case \"//\" => result /= operand(i)\n       \
    \         case \"**\" => result = pow(result, operand(i)).toLong\n           \
    \ }\n        }\n        result", "        var result = operand(0)\n        for\
    \ (i <- 0 until op.length) {\n            op(i) match {\n                case\
    \ \"+\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val x = stack.pop\n            val y = operand(i + 1)\n          \
    \  op(i) match {\n                case \"+\" => stack.push(x + y)\n          \
    \      case \"-\" => stack.push(x - y)\n                case \"*\" => stack.push(x\
    \ * y)\n                case \"//\" => stack.push(x / y)\n                case\
    \ \"**\" => stack.push(pow(x, y).toLong)\n            }\n        }\n        stack.pop",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            op(i) match\
    \ {\n                case \"+\" => result += operand(i + 1)\n                case\
    \ \"-\" => result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 0 until op.length) {\n            op(i) match {\n                case \"\
    +\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            op(i) match\
    \ {\n                case \"+\" => result += operand(i + 1)\n                case\
    \ \"-\" => result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 0 until op.length) {\n            op(i) match {\n                case \"\
    +\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        val stack\
    \ = new Stack[Long]\n        for (i <- 0 until op.length) {\n            val a\
    \ = stack.pop\n            val b = operand(i + 1)\n            op(i) match {\n\
    \                case \"+\" => stack.push(a + b)\n                case \"-\" =>\
    \ stack.push(a - b)\n                case \"*\" => stack.push(a * b)\n       \
    \         case \"//\" => stack.push(a / b)\n                case \"**\" => stack.push(pow(a,\
    \ b).toLong)\n            }\n        }\n        stack.pop", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            op(i) match\
    \ {\n                case \"+\" => result += operand(i + 1)\n                case\
    \ \"-\" => result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result"]
stop_tokens:
- "\n    }\n"
