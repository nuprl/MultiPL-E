name: HumanEval_139_special_factorial
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) =\
  \ n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n   \
  \ // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
  \ an integer as input and should return the special\n    // factorial of this integer.\n\
  \    def specialFactorial(n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
  \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
  \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n"
completions: ["        var result = 1l\n        for (i <- 1 to n.toInt) result *=\
    \ i\n        for (i <- 1 to n.toInt - 1) result *= i\n        result", "     \
    \   var result : Long = 1\n        for (i <- n to 1 by -1) {\n            result\
    \ *= i\n        }\n        result", "        var result = 1l\n        for (i <-\
    \ 1 to n.toInt) {\n            result *= factorial(i)\n        }\n        result",
  "        var result = 1l\n        for (i <- n to 1 by -1) result *= i\n        for\
    \ (i <- n - 1 to 1 by -1) result *= i\n        result", "        if (n == 0) 1\n\
    \        else n * specialFactorial(n - 1)", "        var result = 1l\n       \
    \ for (i <- 1 to n.toInt) {\n            result *= i\n            result *= i\
    \ - 1\n        }\n        result", "        var result = 1l\n        for (i <-\
    \ 1 to n.toInt) {\n            result *= factorial(i)\n        }\n        result",
  "        var result : Long = 1\n        for (i <- n to 1 by -1) {\n            result\
    \ *= i\n        }\n        result", "        var result : Long = 1\n        for\
    \ (i <- n to 1 by -1) {\n            result *= i\n        }\n        result",
  "        var result = 1l\n        for (i <- 1 to n.toInt) {\n            result\
    \ *= factorial(i)\n        }\n        result", "        var result = 1l\n    \
    \    for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n        }\n\
    \        result", "        var result : Long = 1\n        for (i <- n to 1 by\
    \ -1) {\n            result *= i\n        }\n        result", "        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result", "        var factorial = 1l\n        for (i <- 1\
    \ to n.toInt) {\n            factorial *= i\n        }\n        factorial * specialFactorial(n\
    \ - 1)", "        var result = 1l\n        for (i <- 1 to n.toInt) {\n       \
    \     result *= factorial(i)\n        }\n        result", "        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= i\n         \
    \   result *= factorial(i - 1)\n        }\n        result", "        var result\
    \ = 1l\n        for (i <- n to 1 by -1) result *= i\n        for (i <- n - 1 to\
    \ 1 by -1) result *= i\n        result", "        var result = 1l\n        for\
    \ (i <- 1 to n.toInt) {\n            result *= i\n            result *= factorial(i\
    \ - 1)\n        }\n        result", "        var result = 1l\n        for (i <-\
    \ 1 to n.toInt) {\n            result *= factorial(i)\n        }\n        result",
  "        var result = 1l\n        for (i <- 1 to n.toInt) {\n            result\
    \ *= i\n            result *= i - 1\n        }\n        result"]
stop_tokens:
- "\n    }\n"
