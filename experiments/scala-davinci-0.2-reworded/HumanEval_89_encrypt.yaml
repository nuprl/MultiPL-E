name: HumanEval_89_encrypt
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Create a function encrypt that takes a string as an argument and\n    //\
  \ returns a string encrypted with the alphabet being rotated. \n    // The alphabet\
  \ should be rotated in a manner such that the letters \n    // shift down by two\
  \ multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n\
  \    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n\
  \    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n \
  \   // (\"ix\")\n    def encrypt(s : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
  lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
  gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n   \
  \ assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
  hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
  )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
  a\")).equals((\"e\")));\n    }\n\n}\n"
completions: ["        var result = \"\"\n        for (i <- 0 until s.length) {\n\
    \            result += (s(i) + 2 * 2).toChar\n        }\n        result", "  \
    \      val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n        var encrypted =\
    \ \"\"\n        for (i <- 0 until s.length) {\n            var index = alphabet.indexOf(s(i))\n\
    \            encrypted += alphabet((index + 2) % 26)\n        }\n        encrypted",
  "        var result = \"\"\n        for (i <- 0 until s.length) {\n            var\
    \ c = s(i)\n            if (c == 'z') {\n                c = 'b'\n           \
    \ } else if (c == 'y') {\n                c = 'a'\n            } else {\n    \
    \            c = (c + 2).toChar\n            }\n            result += c\n    \
    \    }\n        return result", "        var result = \"\"\n        for (i <-\
    \ 0 until s.length) {\n            result += ((s(i).toInt + 2 * 2).toChar)\n \
    \       }\n        return result", "        var encrypted = \"\"\n        for\
    \ (i <- 0 until s.length) {\n            val c = s(i)\n            val ci = c.toInt\n\
    \            if (ci >= 97 && ci <= 122) {\n                val newCi = ci + 2\
    \ * 2\n                if (newCi > 122) {\n                    val diff = newCi\
    \ - 122\n                    encrypted += (96 + diff).toChar\n               \
    \ } else {\n                    encrypted += newCi.toChar\n                }\n\
    \            } else {\n                encrypted += c\n            }\n       \
    \ }\n        encrypted", "        var result = \"\"\n        for (c <- s) {\n\
    \            result += (c + 2).toChar\n        }\n        return result", "  \
    \      var result = \"\"\n        for (i <- 0 until s.length) {\n            result\
    \ += ((s(i) + 2 * 2).toChar)\n        }\n        return result", "        var\
    \ result = \"\"\n        for (c <- s) {\n            result += ((c.toInt - 97\
    \ + 2 * 2) % 26 + 97).toChar\n        }\n        result", "        val alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n        var result = \"\"\n        for (i\
    \ <- 0 until s.length) {\n            result += alphabet((alphabet.indexOf(s(i))\
    \ + 2 * 2) % 26)\n        }\n        result", "        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        var encrypted = \"\"\n        for (i <- 0 until s.length) {\n      \
    \      val index = alphabet.indexOf(s(i))\n            encrypted += alphabet((index\
    \ + 2) % 26)\n        }\n        encrypted", "        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        var encrypted = \"\"\n        for (i <- 0 until s.length) {\n      \
    \      val index = alphabet.indexOf(s(i))\n            encrypted += alphabet((index\
    \ + 2 * 2) % alphabet.length)\n        }\n        encrypted", "        var result\
    \ = \"\"\n        for (c <- s) {\n            result += ((c + 2 * 2).toChar)\n\
    \        }\n        return result", "        var result = \"\"\n        for (i\
    \ <- 0 until s.length) {\n            val c = s(i)\n            val n = c + 2\
    \ * 2\n            result += n.toChar\n        }\n        result", "        var\
    \ result = \"\"\n        for (i <- 0 until s.length) {\n            var c = s(i)\n\
    \            if (c >= 'a' && c <= 'z') {\n                c = (c + 2 * 2 - 'a')\
    \ % 26 + 'a'\n            }\n            result += c\n        }\n        result",
  "        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n        var encrypted =\
    \ \"\"\n        for (c <- s) {\n            var index = alphabet.indexOf(c)\n\
    \            index = (index + 2) * 2\n            if (index >= alphabet.length)\
    \ index -= alphabet.length\n            encrypted += alphabet(index)\n       \
    \ }\n        encrypted", "        var result = \"\"\n        for (c <- s) {\n\
    \            result += (c + 2).toChar\n        }\n        return result", "  \
    \      var result = \"\"\n        for (i <- 0 until s.length) {\n            result\
    \ += ((s(i) + 2 * 2).toChar)\n        }\n        return result", "        var\
    \ result = \"\"\n        for (c <- s) {\n            if (c == 'z') {\n       \
    \         result += 'b'\n            } else if (c == 'y') {\n                result\
    \ += 'a'\n            } else {\n                result += ((c.toInt + 2) % 26\
    \ + 'a'.toInt).toChar\n            }\n        }\n        result", "        var\
    \ result = \"\"\n        for (i <- 0 until s.length) {\n            result +=\
    \ (s(i) + 2 * 2).toChar\n        }\n        result", "        val alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        var result = \"\"\n        for (i <- 0 until\
    \ s.length) {\n            var index = alphabet.indexOf(s(i))\n            index\
    \ = (index + (2 * 2)) % 26\n            result += alphabet(index)\n        }\n\
    \        result"]
stop_tokens:
- "\n    }\n"
