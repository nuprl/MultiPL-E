name: HumanEval_77_iscube
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that takes an integer a and returns true \n    // if this\
  \ ingeger is a cube of some integer number.\n    // Note: you may assume the input\
  \ is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n \
  \   // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n\
  \    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n\
  \    // >>> iscube((180l))\n    // (false)\n    def iscube(a : Long) : Boolean =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
  \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n  \
  \  assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n  \
  \  assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n   \
  \ assert(iscube((1729l)) == (false));\n    }\n\n}\n"
completions: ["        val b = round(pow(a, 1.0 / 3.0))\n        b * b * b == a",
  "        val b = round(pow(a, 1.0 / 3.0))\n        b * b * b == a", "        val\
    \ b = round(pow(a, 1.0 / 3.0))\n        b * b * b == a", "        if (a == 0)\
    \ return true\n        var x = 1l\n        while (x * x * x <= abs(a)) {\n   \
    \         if (x * x * x == abs(a)) return true\n            x += 1\n        }\n\
    \        return false", "        val b = pow(a, 1.0 / 3)\n        b == b.toInt",
  "        val b = pow(a, 1.0 / 3)\n        b == b.toInt", "        val b = round(pow(a,\
    \ 1.0 / 3.0))\n        b * b * b == a", "        val b = cbrt(a)\n        b ==\
    \ b.toInt", "        val b = round(pow(a, 1.0 / 3.0))\n        b * b * b == a",
  "        val b = pow(a, 1.0 / 3.0)\n        b == b.toInt", "        val b = pow(a,\
    \ 1.0 / 3.0)\n        b == b.toInt", "        val b = round(pow(a, 1.0 / 3.0))\n\
    \        b * b * b == a", "        val b = pow(a, 1.0 / 3)\n        b == round(b)",
  "        val b = round(pow(a, 1.0 / 3))\n        b * b * b == a", "        val b\
    \ = round(pow(a, 1.0 / 3))\n        b * b * b == a", "        val b = round(pow(a,\
    \ 1.0 / 3.0))\n        return b * b * b == a", "        var b = a\n        if\
    \ (b < 0) b = -b\n        var c = 1\n        while (c * c * c <= b) {\n      \
    \      if (c * c * c == b) return true\n            c += 1\n        }\n      \
    \  return false", "        val b = pow(a, 1.0 / 3)\n        b == b.toInt", " \
    \       val b = round(pow(a, 1.0 / 3.0))\n        return b * b * b == a", "  \
    \      val b = pow(a, 1.0 / 3)\n        b == b.toInt"]
stop_tokens:
- "\n    }\n"
