name: HumanEval_77_iscube
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that takes an integer a and returns true \n    // if this\
  \ ingeger is a cube of some integer number.\n    // Note: you may assume the input\
  \ is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n \
  \   // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n\
  \    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n\
  \    // >>> iscube((180l))\n    // (false)\n    def iscube(a : Long) : Boolean =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
  \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n  \
  \  assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n  \
  \  assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n   \
  \ assert(iscube((1729l)) == (false));\n    }\n\n}\n"
completions: ["        val b = round(pow(a, 1.0 / 3.0))\n        b * b * b == a",
  "        val b = round(pow(a, 1.0 / 3.0))\n        b * b * b == a", "        val\
    \ b = round(pow(a, 1.0 / 3.0))\n        b * b * b == a", "        if (a == 0)\
    \ return true\n        var x = 1l\n        while (x * x * x <= abs(a)) {\n   \
    \         if (x * x * x == abs(a)) return true\n            x += 1\n        }\n\
    \        return false", "        val b = pow(a, 1.0 / 3)\n        b == b.toInt",
  "        val b = pow(a, 1.0 / 3)\n        b == b.toInt", "        val b = round(pow(a,\
    \ 1.0 / 3.0))\n        b * b * b == a", "        val b = cbrt(a)\n        b ==\
    \ b.toInt", "        val b = round(pow(a, 1.0 / 3.0))\n        b * b * b == a",
  "        val b = pow(a, 1.0 / 3.0)\n        b == b.toInt", "        val b = pow(a,\
    \ 1.0 / 3.0)\n        b == b.toInt", "        val b = round(pow(a, 1.0 / 3.0))\n\
    \        b * b * b == a", "        val b = pow(a, 1.0 / 3)\n        b == round(b)",
  "        val b = round(pow(a, 1.0 / 3))\n        b * b * b == a", "        val b\
    \ = round(pow(a, 1.0 / 3))\n        b * b * b == a", "        val b = round(pow(a,\
    \ 1.0 / 3.0))\n        return b * b * b == a", "        var b = a\n        if\
    \ (b < 0) b = -b\n        var c = 1\n        while (c * c * c <= b) {\n      \
    \      if (c * c * c == b) return true\n            c += 1\n        }\n      \
    \  return false", "        val b = pow(a, 1.0 / 3)\n        b == b.toInt", " \
    \       val b = round(pow(a, 1.0 / 3.0))\n        return b * b * b == a", "  \
    \      val b = pow(a, 1.0 / 3)\n        b == b.toInt", "        val b = round(pow(a,\
    \ 1.0 / 3.0))\n        b * b * b == a", "        val b = round(pow(a, 1.0 / 3.0))\n\
    \        b * b * b == a", "        val b = round(pow(a, 1.0 / 3.0))\n        b\
    \ * b * b == a", "        val b = pow(a, 1.0 / 3.0)\n        b == b.toInt", " \
    \       val b = pow(a, 1.0 / 3.0)\n        b == round(b)", "        val b = round(pow(a,\
    \ 1.0 / 3.0))\n        return b * b * b == a", "        val b = pow(a, 1.0 / 3.0)\n\
    \        b == b.toInt", "        val b = round(pow(a, 1.0 / 3.0))\n        b *\
    \ b * b == a", "        val b = pow(a, 1.0 / 3.0)\n        b == b.toInt", "  \
    \      val b = round(cbrt(a))\n        return b * b * b == a", "        val b\
    \ = round(pow(a, 1.0 / 3.0))\n        return b * b * b == a", "        val b =\
    \ pow(a, 1.0 / 3)\n        b == b.toInt", "        val b = round(pow(a, 1.0 /\
    \ 3.0))\n        return b * b * b == a", "        val b = round(pow(a, 1.0 / 3.0))\n\
    \        b * b * b == a", "        val b = round(pow(a, 1.0 / 3.0))\n        a\
    \ == b * b * b", "        val b = pow(a, 1.0 / 3.0)\n        b == b.toInt", " \
    \       val b = pow(a, 1.0 / 3.0)\n        b == b.toInt", "        if (a < 0)\
    \ return iscube(-a)\n        if (a == 0) return true\n        var l = 1l\n   \
    \     var r = a\n        while (l <= r) {\n            val m = (l + r) / 2\n \
    \           val v = m * m * m\n            if (v == a) return true\n         \
    \   if (v < a) l = m + 1\n            else r = m - 1\n        }\n        return\
    \ false", "        var b = 1l\n        while (b * b * b <= a) {\n            if\
    \ (b * b * b == a) return true\n            b += 1\n        }\n        return\
    \ false", "        val b = round(pow(a, 1.0 / 3.0))\n        b * b * b == a",
  "        val b = round(pow(a, 1.0 / 3.0))\n        return b * b * b == a", "   \
    \     if (a < 0) return iscube(-a)\n        if (a == 0) return true\n        var\
    \ b = 1l\n        while (b * b * b <= a) {\n            if (b * b * b == a) return\
    \ true\n            b += 1\n        }\n        return false", "        val b =\
    \ round(pow(a, 1.0 / 3.0))\n        b * b * b == a", "        val b = round(pow(a,\
    \ 1.0 / 3.0))\n        b * b * b == a", "        val b = round(pow(a, 1.0 / 3.0))\n\
    \        b * b * b == a", "        val b = pow(a, 1.0 / 3.0)\n        b == b.toInt",
  "        val b = round(pow(a, 1.0 / 3.0))\n        b * b * b == a", "        val\
    \ b = pow(a, 1.0 / 3.0)\n        b == b.toInt", "        val b = round(pow(a,\
    \ 1.0 / 3.0))\n        b * b * b == a", '        return (a >= 0) && (pow(round(pow(a,
    1.0 / 3.0)), 3) == a)', "        val b = round(pow(a, 1.0 / 3.0))\n        b *\
    \ b * b == a", "        val b = pow(a, 1.0 / 3)\n        b == b.toInt", "    \
    \    val b = pow(a, 1.0 / 3.0)\n        b == b.toInt", "        val b = round(pow(a,\
    \ 1.0 / 3.0))\n        b * b * b == a", "        // Write your code here\n   \
    \     return false", "        val b = round(pow(a, 1.0 / 3.0))\n        return\
    \ b * b * b == a", "        val b = round(pow(a, 1.0 / 3.0))\n        b * b *\
    \ b == a", "        val b = round(pow(a, 1.0 / 3.0))\n        b * b * b == a",
  "        val b = round(pow(a, 1.0 / 3.0))\n        b * b * b == a", "        val\
    \ b = pow(a, 1.0 / 3.0)\n        b == b.toInt", "        val b = round(pow(a,\
    \ 1.0 / 3.0))\n        b * b * b == a", "        val b = pow(a, 1.0 / 3.0)\n \
    \       b == b.toInt", "        val b = round(pow(a, 1.0 / 3.0))\n        b *\
    \ b * b == a", "        val b = round(pow(a, 1.0 / 3.0))\n        return b * b\
    \ * b == a", "        val b = a.abs\n        val c = pow(b, 1.0/3.0)\n       \
    \ c == c.toLong", "        if (a == 0) return true\n        if (a < 0) return\
    \ iscube(-a)\n        var i = 1l\n        while (i * i * i <= a) {\n         \
    \   if (i * i * i == a) return true\n            i += 1\n        }\n        return\
    \ false", '        return a == 0 || a == 1 || a == -1 || (a > 0 && a % 8 == 7
    && (a / 8) % 3 == 2)', "        // Write your code here\n        return true",
  "        val b = round(pow(a, 1.0 / 3.0))\n        b * b * b == a", "        val\
    \ b = round(pow(a, 1.0 / 3.0))\n        return b * b * b == a", "        if (a\
    \ < 0) return false\n        val b = round(pow(a, 1.0 / 3.0))\n        return\
    \ b * b * b == a", "        val b = round(pow(a, 1.0 / 3.0))\n        return b\
    \ * b * b == a", "        val b = pow(a, 1.0 / 3)\n        return b == b.toInt",
  "        val b = round(pow(a, 1.0 / 3.0))\n        b * b * b == a", "        val\
    \ b = round(pow(a, 1.0 / 3.0))\n        return b * b * b == a", "        val b\
    \ = round(pow(a, 1.0 / 3.0))\n        return b * b * b == a", "        val b =\
    \ pow(a, 1.0 / 3.0)\n        b == b.toInt", "        val b = pow(a, 1.0 / 3)\n\
    \        return b == round(b)", "        val b = round(pow(a, 1.0 / 3.0))\n  \
    \      b * b * b == a", "        val b = pow(a, 1.0 / 3.0)\n        b == b.toInt",
  "        val b = round(pow(a, 1.0 / 3.0))\n        b * b * b == a", "        val\
    \ b = pow(a, 1.0 / 3)\n        b == round(b)", "        val b = round(pow(a, 1.0\
    \ / 3.0))\n        b * b * b == a", "        val b = round(pow(a, 1.0 / 3.0))\n\
    \        return b * b * b == a", "        val b = round(pow(a, 1.0 / 3.0))\n \
    \       b * b * b == a", "        val b = pow(a, 1.0 / 3)\n        b == b.toInt",
  "        // Your code here\n        return false", "        val b = pow(a, 1.0 /\
    \ 3)\n        b == b.toInt", "        // Write your code here\n        return\
    \ false", "        val b = round(pow(a, 1.0 / 3.0))\n        b * b * b == a",
  "        val b = pow(a, 1.0 / 3.0)\n        b == b.toInt", "        val b = round(pow(a,\
    \ 1.0 / 3.0))\n        b * b * b == a", "        val b = round(pow(a, 1.0 / 3.0))\n\
    \        b * b * b == a", "        val b = round(pow(a, 1.0 / 3.0))\n        b\
    \ * b * b == a", "        val b = round(pow(a, 1.0 / 3.0))\n        b * b * b\
    \ == a", "        val b = round(pow(a, 1.0 / 3.0))\n        b * b * b == a", " \
    \       val b = pow(a, 1.0 / 3)\n        b == b.toInt", "        var b = a\n \
    \       if (b < 0) b = -b\n        var c = 0l\n        while (c * c * c < b) c\
    \ += 1\n        return c * c * c == b", "        if (a < 0) return iscube(-a)\n\
    \        if (a == 0) return true\n        var i = 1l\n        while (i * i * i\
    \ <= a) {\n            if (i * i * i == a) return true\n            i += 1\n \
    \       }\n        return false", "        val b = pow(a, 1.0 / 3.0)\n       \
    \ b == b.toInt", "        var b = 1l\n        while (b * b * b <= a) {\n     \
    \       if (b * b * b == a) return true\n            b += 1\n        }\n     \
    \   return false", "        val b = cbrt(a)\n        b == b.toInt", "        val\
    \ b = round(pow(a, 1.0 / 3.0))\n        return b * b * b == a", "        val b\
    \ = round(pow(a, 1.0 / 3.0))\n        return b * b * b == a", "        val b =\
    \ pow(a, 1.0 / 3.0)\n        b == b.toInt", "        val b = pow(a, 1.0 / 3.0)\n\
    \        b == b.toInt", "        val b = pow(a, 1.0 / 3.0)\n        b == b.toInt",
  "        val b = pow(a, 1.0 / 3.0)\n        b == b.toInt", "        val b = pow(a,\
    \ 1.0 / 3.0)\n        b == b.toInt", "        var b = a\n        if (b < 0) b\
    \ = -b\n        var c = 0\n        while (c * c * c < b) c += 1\n        c * c\
    \ * c == b", "        val b = cbrt(a)\n        b * b * b == a", "        val b\
    \ = round(pow(a, 1.0 / 3.0))\n        b * b * b == a", "        val b = pow(a,\
    \ 1.0 / 3.0)\n        b == b.toInt", "        val b = cbrt(a)\n        b * b *\
    \ b == a", "        val b = round(pow(a, 1.0 / 3.0))\n        return b * b * b\
    \ == a", "        val b = pow(a, 1.0 / 3)\n        b == b.toInt", "        val\
    \ b = round(pow(a, 1.0 / 3))\n        return (b * b * b == a)", "        val b\
    \ = pow(a, 1.0 / 3)\n        b == b.toInt", "        val b = pow(a, 1.0 / 3.0)\n\
    \        b == b.toInt", "        val b = pow(a, 1.0 / 3.0)\n        b == b.toInt",
  "        val b = round(pow(a, 1.0 / 3.0))\n        b * b * b == a", "        val\
    \ b = cbrt(a)\n        b == b.toInt", "        val b = round(pow(a, 1.0 / 3.0))\n\
    \        return b * b * b == a", "        val b = pow(a, 1.0 / 3)\n        b ==\
    \ b.toInt", "        var b = 1l\n        while (b * b * b <= a) {\n          \
    \  if (b * b * b == a) return true\n            b += 1\n        }\n        return\
    \ false", "        val b = round(pow(a, 1.0 / 3.0))\n        b * b * b == a",
  "        val b = pow(a, 1.0 / 3.0)\n        b == round(b)", "        val b = round(pow(a,\
    \ 1.0 / 3.0))\n        b * b * b == a", "        val b = pow(a, 1.0 / 3.0)\n \
    \       b % 1 == 0", "        if (a == 0) return true\n        if (a < 0) return\
    \ iscube(-a)\n        var l = 1l\n        var r = a\n        while (l <= r) {\n\
    \            val m = (l + r) / 2\n            val m3 = m * m * m\n           \
    \ if (m3 == a) return true\n            if (m3 < a) l = m + 1\n            else\
    \ r = m - 1\n        }\n        return false", "        val b = round(pow(a, 1.0\
    \ / 3.0))\n        b * b * b == a", "        val b = pow(a, 1.0 / 3.0)\n     \
    \   b == b.toInt", "        val b = round(pow(a, 1.0 / 3.0))\n        return b\
    \ * b * b == a", "        val b = pow(a, 1.0 / 3.0)\n        b == b.toInt", " \
    \       val b = round(pow(a, 1.0 / 3.0))\n        return b * b * b == a", '        return
    (cbrt(a) % 1 == 0)', "        val b = round(pow(a, 1.0 / 3))\n        b * b *\
    \ b == a", "        val b = pow(a, 1.0 / 3)\n        b == b.toInt", "        val\
    \ b = cbrt(a)\n        b == b.toInt", "        val b = cbrt(a)\n        b == b.toInt",
  "        val b = pow(a, 1.0 / 3)\n        b == b.toInt", "        val b = round(pow(a,\
    \ 1.0 / 3.0))\n        b * b * b == a", "        val b = round(pow(a, 1.0 / 3.0))\n\
    \        b * b * b == a", "        val b = cbrt(a)\n        b * b * b == a", " \
    \       val b = round(pow(a, 1.0 / 3.0))\n        b * b * b == a", "        val\
    \ b = round(pow(a, 1.0 / 3.0))\n        b * b * b == a", "        val b = round(pow(a,\
    \ 1.0 / 3.0))\n        return b * b * b == a", "        val b = pow(a, 1.0 / 3.0)\n\
    \        b == round(b)", "        val b = round(pow(a, 1.0 / 3.0))\n        b\
    \ * b * b == a", "        val b = round(pow(a, 1.0 / 3.0))\n        b * b * b\
    \ == a", "        val b = round(pow(a, 1.0 / 3.0))\n        b * b * b == a", " \
    \       var b = a.abs\n        var c = 0\n        while (c * c * c < b) {\n  \
    \          c += 1\n        }\n        return c * c * c == b", "        val b =\
    \ cbrt(a)\n        b == b.toInt", "        val b = round(pow(a, 1.0 / 3.0))\n\
    \        return b * b * b == a", "        val b = pow(a, 1.0 / 3.0)\n        b\
    \ == b.toInt", "        val b = round(pow(a, 1.0 / 3.0))\n        b * b * b ==\
    \ a", "        val b = round(pow(a, 1.0 / 3.0))\n        return b * b * b == a",
  "        val b = pow(a, 1.0 / 3)\n        b == b.toInt", '        return (cbrt(a)
    % 1 == 0)', "        val b = round(pow(a, 1.0 / 3.0))\n        b * b * b == a",
  "        val b = round(pow(a, 1.0 / 3.0))\n        return b * b * b == a", '        return
    (pow(round(pow(a, 1.0 / 3.0)), 3) == a)', "        // Your code here\n       \
    \ return false", "        val b = round(pow(a, 1.0 / 3.0))\n        return b *\
    \ b * b == a", "        val b = round(pow(a, 1.0 / 3.0))\n        b * b * b ==\
    \ a", "        val b = round(pow(a, 1.0 / 3))\n        b * b * b == a", "    \
    \    val b = round(pow(a, 1.0 / 3.0))\n        return b * b * b == a", "     \
    \   val b = round(pow(a, 1.0 / 3.0))\n        b * b * b == a", "        val b\
    \ = round(pow(a, 1.0 / 3.0))\n        b * b * b == a", "        val b = round(pow(a,\
    \ 1.0 / 3.0))\n        return b * b * b == a", "        val b = round(pow(a, 1.0\
    \ / 3.0))\n        b * b * b == a", "        val b = round(pow(a, 1.0 / 3.0))\n\
    \        b * b * b == a", "        val x = round(pow(a, 1.0 / 3.0))\n        return\
    \ x * x * x == a", "        val b = round(pow(a, 1.0 / 3.0))\n        b * b *\
    \ b == a", "        val b = round(pow(a, 1.0 / 3.0))\n        return b * b * b\
    \ == a", "        val b = round(pow(a, 1.0 / 3.0))\n        b * b * b == a", " \
    \       val b = cbrt(a)\n        b == b.toInt", "        val b = round(pow(a,\
    \ 1.0 / 3.0))\n        b * b * b == a", "        val b = cbrt(a)\n        b ==\
    \ b.toInt", "        var b = cbrt(a)\n        b == b.toInt", "        val b =\
    \ pow(a, 1.0 / 3.0)\n        b == b.toInt", "        val b = round(pow(a, 1.0\
    \ / 3.0))\n        return b * b * b == a", "        val b = round(pow(a, 1.0 /\
    \ 3.0))\n        return b * b * b == a", "        val b = round(pow(a, 1.0 / 3.0))\n\
    \        return b * b * b == a", "        val b = round(pow(a, 1.0 / 3.0))\n \
    \       b * b * b == a", "        val b = round(pow(a, 1.0 / 3.0))\n        return\
    \ b * b * b == a", "        val b = round(pow(a, 1.0 / 3.0))\n        b * b *\
    \ b == a", "        val b = pow(a, 1.0 / 3.0)\n        b == b.toInt", "      \
    \  val b = round(pow(a, 1.0 / 3.0))\n        return b * b * b == a", "       \
    \ val b = pow(a, 1.0 / 3)\n        b == b.toInt", "        val b = round(pow(a,\
    \ 1.0 / 3.0))\n        b * b * b == a", "        val b = round(pow(a, 1.0 / 3.0))\n\
    \        b * b * b == a", "        val b = round(pow(a, 1.0 / 3))\n        return\
    \ b * b * b == a", "        val b = round(pow(a, 1.0 / 3.0))\n        b * b *\
    \ b == a", "        val b = pow(a, 1.0 / 3.0)\n        b == b.toInt", "      \
    \  var b = 1l\n        while (b * b * b <= a) {\n            if (b * b * b ==\
    \ a) return true\n            b += 1\n        }\n        return false", '        return
    a == 0 || a == 1 || a == -1 || (a > 0 && a % 8 == 7 && pow(floor(pow(a, 1.0 /
    3)), 3) == a)', "        val b = round(pow(a, 1.0 / 3.0))\n        b * b * b ==\
    \ a", "        val b = cbrt(a)\n        b == b.toInt", "        val b = pow(a,\
    \ 1.0 / 3.0)\n        b == b.toInt"]
stop_tokens:
- "\n    }\n"
