name: HumanEval_145_order_by_points
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function which sorts the given list of integers\n    // in ascending\
  \ order according to the sum of their digits.\n    // Note: if there are several\
  \ items with similar sum of their digits,\n    // order them based on their index\
  \ in original list.\n    // For example:\n    // >>> orderByPoints((List[Long](1l.toLong,\
  \ 11l.toLong, -1l.toLong, -11l.toLong, -12l.toLong)))\n    // (List[Long](-1l.toLong,\
  \ -11l.toLong, 1l.toLong, -12l.toLong, 11l.toLong))\n    // >>> orderByPoints((List[Long]()))\n\
  \    // (List[Long]())\n    def orderByPoints(nums : List[Long]) : List[Long] =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(orderByPoints((List[Long](1l.toLong,\
  \ 11l.toLong, -1l.toLong, -11l.toLong, -12l.toLong))).equals((List[Long](-1l.toLong,\
  \ -11l.toLong, 1l.toLong, -12l.toLong, 11l.toLong))));\n    assert(orderByPoints((List[Long](1234l.toLong,\
  \ 423l.toLong, 463l.toLong, 145l.toLong, 2l.toLong, 423l.toLong, 423l.toLong, 53l.toLong,\
  \ 6l.toLong, 37l.toLong, 3457l.toLong, 3l.toLong, 56l.toLong, 0l.toLong, 46l.toLong))).equals((List[Long](0l.toLong,\
  \ 2l.toLong, 3l.toLong, 6l.toLong, 53l.toLong, 423l.toLong, 423l.toLong, 423l.toLong,\
  \ 1234l.toLong, 145l.toLong, 37l.toLong, 46l.toLong, 56l.toLong, 463l.toLong, 3457l.toLong))));\n\
  \    assert(orderByPoints((List[Long]())).equals((List[Long]())));\n    assert(orderByPoints((List[Long](1l.toLong,\
  \ -11l.toLong, -32l.toLong, 43l.toLong, 54l.toLong, -98l.toLong, 2l.toLong, -3l.toLong))).equals((List[Long](-3l.toLong,\
  \ -32l.toLong, -98l.toLong, -11l.toLong, 1l.toLong, 2l.toLong, 43l.toLong, 54l.toLong))));\n\
  \    assert(orderByPoints((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
  \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong))).equals((List[Long](1l.toLong,\
  \ 10l.toLong, 2l.toLong, 11l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong,\
  \ 7l.toLong, 8l.toLong, 9l.toLong))));\n    assert(orderByPoints((List[Long](0l.toLong,\
  \ 6l.toLong, 6l.toLong, -76l.toLong, -21l.toLong, 23l.toLong, 4l.toLong))).equals((List[Long](-76l.toLong,\
  \ -21l.toLong, 0l.toLong, 4l.toLong, 23l.toLong, 6l.toLong, 6l.toLong))));\n   \
  \ }\n\n}\n"
completions: ["        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            if (aSum ==\
    \ bSum) {\n                nums.indexOf(a) < nums.indexOf(b)\n            } else\
    \ {\n                aSum < bSum\n            }\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", "        nums.sortWith((a, b) => {\n            val\
    \ aSum = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) {\n                nums.indexOf(a) < nums.indexOf(b)\n\
    \            } else {\n                aSum < bSum\n            }\n        })",
  "        // Fill in the code here\n        nums.sortWith((a, b) => sumDigits(a)\
    \ < sumDigits(b))", '        nums.sortWith((a, b) => sumDigits(a) < sumDigits(b)
    || (sumDigits(a) == sumDigits(b) && nums.indexOf(a) < nums.indexOf(b)))', "  \
    \      // Fill in the code here\n        nums.sortWith((a, b) => sumDigits(a)\
    \ < sumDigits(b))", "        nums.sortWith((a, b) => {\n            val aSum =\
    \ a.toString.map(x => x.asDigit).sum\n            val bSum = b.toString.map(x\
    \ => x.asDigit).sum\n            if (aSum == bSum) {\n                nums.indexOf(a)\
    \ < nums.indexOf(b)\n            } else {\n                aSum < bSum\n     \
    \       }\n        })", "        nums.sortWith((a, b) => {\n            val aSum\
    \ = a.toString.map(_.asDigit).sum\n            val bSum = b.toString.map(_.asDigit).sum\n\
    \            if (aSum == bSum) a < b else aSum < bSum\n        })", "        //\
    \ Fill up this function body\n        // You can add another function as well,\
    \ if required\n        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(x\
    \ => x.asDigit).sum\n            val bSum = b.toString.map(x => x.asDigit).sum\n\
    \            if (aSum == bSum) {\n                nums.indexOf(a) < nums.indexOf(b)\n\
    \            } else {\n                aSum < bSum\n            }\n        })",
  '        nums.sortWith((a, b) => sumDigits(a) < sumDigits(b))', "        // Fill\
    \ up this function body\n        // You can add another function as well, if required\n\
    \        nums.sortWith((x, y) => (x.toString.map(_.asDigit).sum, x) < (y.toString.map(_.asDigit).sum,\
    \ y))", "        nums.sortWith((a, b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n\
    \            val bSum = b.toString.map(_.asDigit).sum\n            if (aSum ==\
    \ bSum) {\n                nums.indexOf(a) < nums.indexOf(b)\n            } else\
    \ {\n                aSum < bSum\n            }\n        })", "        nums.sortWith((x,\
    \ y) => {\n            val xs = x.toString.map(c => c.asDigit).sum\n         \
    \   val ys = y.toString.map(c => c.asDigit).sum\n            if (xs == ys) {\n\
    \                nums.indexOf(x) < nums.indexOf(y)\n            } else {\n   \
    \             xs < ys\n            }\n        })", "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(x => x.asDigit).sum\n       \
    \     val bSum = b.toString.map(x => x.asDigit).sum\n            if (aSum == bSum)\
    \ {\n                nums.indexOf(a) < nums.indexOf(b)\n            } else {\n\
    \                aSum < bSum\n            }\n        })", '        nums.zipWithIndex.sortBy(x
    => (x._1.toString.map(_.asDigit).sum, x._2)).map(_._1)', "        nums.sortWith((a,\
    \ b) => {\n            val aSum = a.toString.map(_.asDigit).sum\n            val\
    \ bSum = b.toString.map(_.asDigit).sum\n            if (aSum == bSum) a < b else\
    \ aSum < bSum\n        })", "        nums.sortWith((a, b) => {\n            val\
    \ aSum = a.toString.map(x => x.asDigit).sum\n            val bSum = b.toString.map(x\
    \ => x.asDigit).sum\n            if (aSum == bSum) {\n                nums.indexOf(a)\
    \ < nums.indexOf(b)\n            } else {\n                aSum < bSum\n     \
    \       }\n        })", "        nums.sortWith((a, b) => {\n            val aSum\
    \ = a.toString.map(x => x.asDigit).sum\n            val bSum = b.toString.map(x\
    \ => x.asDigit).sum\n            if (aSum == bSum) {\n                nums.indexOf(a)\
    \ < nums.indexOf(b)\n            } else {\n                aSum < bSum\n     \
    \       }\n        })", "        nums.sortWith((a, b) => {\n            val aSum\
    \ = a.toString.map(c => c.asDigit).sum\n            val bSum = b.toString.map(c\
    \ => c.asDigit).sum\n            if (aSum == bSum) {\n                nums.indexOf(a)\
    \ < nums.indexOf(b)\n            } else {\n                aSum < bSum\n     \
    \       }\n        })", "        // Fill up this function body\n        // You\
    \ can add another function as well, if required\n        var map = Map[Long, Long]()\n\
    \        for (i <- 0 until nums.length) {\n            var sum = 0l\n        \
    \    var num = nums(i)\n            while (num != 0) {\n                sum +=\
    \ num % 10\n                num /= 10\n            }\n            map += (sum\
    \ -> nums(i))\n        }\n        var list = List[Long]()\n        for (i <- map.keys.toList.sorted)\
    \ {\n            list = list :+ map(i)\n        }\n        list"]
stop_tokens:
- "\n    }\n"
