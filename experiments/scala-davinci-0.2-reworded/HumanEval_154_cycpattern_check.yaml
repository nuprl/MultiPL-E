name: HumanEval_154_cycpattern_check
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given 2 words. You need to return true if the second word or any\
  \ of its rotations is a substring in the first word\n    // >>> cycpatternCheck((\"\
  abcd\"), (\"abd\"))\n    // (false)\n    // >>> cycpatternCheck((\"hello\"), (\"\
  ell\"))\n    // (true)\n    // >>> cycpatternCheck((\"whassup\"), (\"psus\"))\n\
  \    // (false)\n    // >>> cycpatternCheck((\"abab\"), (\"baa\"))\n    // (true)\n\
  \    // >>> cycpatternCheck((\"efef\"), (\"eeff\"))\n    // (false)\n    // >>>\
  \ cycpatternCheck((\"himenss\"), (\"simen\"))\n    // (true)\n    def cycpatternCheck(a\
  \ : String, b : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(cycpatternCheck((\"\
  xyzw\"), (\"xyw\")) == (false));\n    assert(cycpatternCheck((\"yello\"), (\"ell\"\
  )) == (true));\n    assert(cycpatternCheck((\"whattup\"), (\"ptut\")) == (false));\n\
  \    assert(cycpatternCheck((\"efef\"), (\"fee\")) == (true));\n    assert(cycpatternCheck((\"\
  abab\"), (\"aabb\")) == (false));\n    assert(cycpatternCheck((\"winemtt\"), (\"\
  tinem\")) == (true));\n    }\n\n}\n"
completions: ["        if (a.length < b.length) return false\n        val bs = b.toCharArray\n\
    \        for (i <- 0 until bs.length) {\n            val temp = bs(0)\n      \
    \      for (j <- 0 until bs.length - 1) {\n                bs(j) = bs(j + 1)\n\
    \            }\n            bs(bs.length - 1) = temp\n            if (a.contains(bs.mkString))\
    \ return true\n        }\n        return false", "        val b2 = b + b\n   \
    \     b2.contains(a)", "        val len = b.length\n        val bb = b + b\n \
    \       for (i <- 0 until len) {\n            if (a.contains(bb.substring(i, i\
    \ + len))) return true\n        }\n        return false", "        var bb = b\n\
    \        for (i <- 0 until b.length) {\n            if (a.contains(bb)) return\
    \ true\n            bb = bb.tail + bb.head\n        }\n        return false",
  "        val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if\
    \ (a.substring(i, i + m) == b) return true\n        }\n        return false",
  "        if (a.length < b.length) return false\n        val bs = b.toSet\n     \
    \   for (i <- 0 until a.length) {\n            val sub = a.substring(i, i + b.length)\n\
    \            if (sub.toSet == bs) return true\n        }\n        return false",
  "        val bs = b.toCharArray\n        val as = a.toCharArray\n        val bslen\
    \ = bs.length\n        val aslen = as.length\n        if (bslen > aslen) return\
    \ false\n        for (i <- 0 until aslen) {\n            if (as(i) == bs(0)) {\n\
    \                var j = 0\n                while (j < bslen && as(i + j) == bs(j))\
    \ j += 1\n                if (j == bslen) return true\n            }\n       \
    \ }\n        return false", "        val n = a.length\n        val m = b.length\n\
    \        val s = a + a\n        for (i <- 0 until n) {\n            if (s.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        val n =\
    \ a.length\n        val m = b.length\n        if (n < m) return false\n      \
    \  val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if (a.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        val n =\
    \ a.length\n        val m = b.length\n        if (n < m) return false\n      \
    \  val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            val sub\
    \ = a.substring(i, i + m)\n            if (sub == b || bb.contains(sub)) return\
    \ true\n        }\n        return false", "        val bs = b.toCharArray\n  \
    \      for (i <- 0 until bs.length) {\n            val temp = bs(0)\n        \
    \    for (j <- 0 until bs.length - 1) {\n                bs(j) = bs(j + 1)\n \
    \           }\n            bs(bs.length - 1) = temp\n            if (a.contains(bs.mkString))\
    \ return true\n        }\n        return false", "        if (a.length < b.length)\
    \ return false\n        val bb = b + b\n        return bb.contains(a)", "    \
    \    val bs = b.toCharArray\n        for (i <- 0 until bs.length) {\n        \
    \    val temp = bs(0)\n            for (j <- 0 until bs.length - 1) {\n      \
    \          bs(j) = bs(j + 1)\n            }\n            bs(bs.length - 1) = temp\n\
    \            if (a.contains(bs.mkString)) return true\n        }\n        return\
    \ false", "        val bs = b.toCharArray\n        for (i <- 0 until bs.length)\
    \ {\n            val temp = bs(0)\n            for (j <- 0 until bs.length - 1)\
    \ {\n                bs(j) = bs(j + 1)\n            }\n            bs(bs.length\
    \ - 1) = temp\n            if (a.contains(bs.mkString)) return true\n        }\n\
    \        return false", "        val bb = b + b\n        bb.contains(a)", "  \
    \      val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n) {\n            if (a.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        val n =\
    \ a.length\n        val m = b.length\n        val bb = b + b\n        for (i <-\
    \ 0 until n - m + 1) {\n            if (a.substring(i, i + m) == b) return true\n\
    \        }\n        return false", "        if (a.length < b.length) return false\n\
    \        val bb = b + b\n        return bb.contains(a)", "        if (a.length\
    \ < b.length) return false\n        val b2 = b + b\n        if (b2.contains(a))\
    \ return true\n        return false", "        val bs = b.toList\n        val\
    \ as = a.toList\n        val bslen = bs.length\n        val aslen = as.length\n\
    \        val bsrot = bs.rotate(bslen - 1)\n        val bsrot2 = bs.rotate(bslen\
    \ - 2)\n        val bsrot3 = bs.rotate(bslen - 3)\n        val bsrot4 = bs.rotate(bslen\
    \ - 4)\n        val bsrot5 = bs.rotate(bslen - 5)\n        val bsrot6 = bs.rotate(bslen\
    \ - 6)\n        val bsrot7 = bs.rotate(bslen - 7)\n        val bsrot8 = bs.rotate(bslen\
    \ - 8)\n        val bsrot9 = bs.rotate(bslen - 9)\n        val bsrot10 = bs.rotate(bslen\
    \ - 10)\n        val bsrot11 = bs.rotate(bslen - 11)\n        val bsrot12 = bs.rotate(bslen\
    \ - 12)\n        val bsrot13 = bs.rotate(bslen - 13)\n        val bsrot14 = bs.rotate(bslen\
    \ - 14)\n        val bsrot15 = bs.rotate(bslen - 15)\n        val bsrot16 = bs.rotate(bslen\
    \ - 16)\n        val bsrot17 = bs.rotate(bslen - 17)\n        val bsrot18 = bs.rotate(bslen\
    \ - 18)\n        val bsrot19 = bs.rotate(bslen - 19)\n        val bsrot20 = bs.rotate(bslen\
    \ - 20)\n        val bsrot21 = bs.rotate(bslen - 21)\n        val bsrot22 = bs.rotate(bslen\
    \ - 22)\n        val bsrot23 = bs.rotate(bslen - 23)\n        val bsrot24 = bs.rotate(bslen\
    \ - 24)\n        val bsrot25 = bs.rotate(bslen - 25", "        val bb = b + b\n\
    \        bb.contains(a)", "        if (a.length < b.length) return false\n   \
    \     val bs = b.toSet\n        for (i <- 0 until a.length) {\n            val\
    \ s = a.substring(i, i + b.length)\n            if (s.toSet == bs) return true\n\
    \        }\n        return false", "        val n = a.length\n        val m =\
    \ b.length\n        if (n < m) return false\n        val bb = b + b\n        for\
    \ (i <- 0 until n - m + 1) {\n            if (a.substring(i, i + m) == b) return\
    \ true\n        }\n        return false", "        val n = a.length\n        val\
    \ m = b.length\n        val aa = a + a\n        for (i <- 0 to n - 1) {\n    \
    \        val s = aa.substring(i, i + m)\n            if (s == b) return true\n\
    \        }\n        return false", "        if (a.length < b.length) return false\n\
    \        val bs = b.toCharArray\n        for (i <- 0 until bs.length) {\n    \
    \        val c = bs(0)\n            for (j <- 0 until bs.length - 1) bs(j) = bs(j\
    \ + 1)\n            bs(bs.length - 1) = c\n            if (a.contains(bs.mkString))\
    \ return true\n        }\n        return false", "        val n = a.length\n \
    \       val m = b.length\n        if (n < m) return false\n        val bb = b\
    \ + b\n        for (i <- 0 until n - m + 1) {\n            if (a.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        val bb\
    \ = b + b\n        bb.contains(a)", "        val bb = b + b\n        bb.contains(a)",
  "        val bb = b + b\n        bb.contains(a)", "        val n = a.length\n  \
    \      val m = b.length\n        val bb = b + b\n        for (i <- 0 until n -\
    \ m + 1) {\n            if (a.substring(i, i + m) == b) return true\n        }\n\
    \        return false", "        val bs = b.toCharArray\n        val as = a.toCharArray\n\
    \        val bslen = bs.length\n        val aslen = as.length\n        if (bslen\
    \ > aslen) return false\n        for (i <- 0 until aslen) {\n            if (as(i)\
    \ == bs(0)) {\n                var j = 0\n                var k = i\n        \
    \        while (j < bslen && k < aslen && as(k) == bs(j)) {\n                \
    \    j += 1\n                    k += 1\n                }\n                if\
    \ (j == bslen) return true\n            }\n        }\n        return false", " \
    \       val n = a.length\n        val m = b.length\n        val aa = a + a\n \
    \       for (i <- 0 to n - 1) {\n            val s = aa.substring(i, i + m)\n\
    \            if (s == b) return true\n        }\n        return false", "    \
    \    val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if\
    \ (a.substring(i, i + m) == b) return true\n        }\n        return false",
  "        if (a.length < b.length) return false\n        val bs = b.toCharArray\n\
    \        val as = a.toCharArray\n        for (i <- 0 until a.length) {\n     \
    \       var flag = true\n            for (j <- 0 until b.length) {\n         \
    \       if (as(i + j) != bs(j)) {\n                    flag = false\n        \
    \            break\n                }\n            }\n            if (flag) return\
    \ true\n        }\n        false", "        val bb = b + b\n        bb.contains(a)",
  "        def rotate(s : String) : String = s.tail + s.head\n        def check(s\
    \ : String) : Boolean = {\n            if (s.length < b.length) return false\n\
    \            if (s.indexOf(b) != -1) return true\n            check(rotate(s))\n\
    \        }\n        check(a)", "        val s = a + a\n        s.contains(b)",
  "        val bb = b + b\n        bb.contains(a)", "        val n = a.length\n  \
    \      val m = b.length\n        if (n < m) return false\n        val bb = b +\
    \ b\n        for (i <- 0 until n) {\n            var flag = true\n           \
    \ for (j <- 0 until m) {\n                if (a(i + j) != bb(j)) {\n         \
    \           flag = false\n                    break\n                }\n     \
    \       }\n            if (flag) return true\n        }\n        return false",
  "        val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if\
    \ (a.substring(i, i + m) == b) return true\n        }\n        return false",
  "        val bs = b.toCharArray\n        val as = a.toCharArray\n        val n =\
    \ as.length\n        val m = bs.length\n        var i = 0\n        var j = 0\n\
    \        while (i < n) {\n            if (as(i) == bs(j)) {\n                j\
    \ += 1\n                if (j == m) return true\n            }\n            else\
    \ {\n                j = 0\n            }\n            i += 1\n        }\n   \
    \     false", "        if (a.length < b.length) return false\n        val bs =\
    \ b.toCharArray\n        val as = a.toCharArray\n        val bs2 = bs.clone\n\
    \        for (i <- 0 until bs.length) {\n            val c = bs(0)\n         \
    \   for (j <- 0 until bs.length - 1) bs(j) = bs(j + 1)\n            bs(bs.length\
    \ - 1) = c\n            if (a.contains(bs.mkString)) return true\n        }\n\
    \        return false", "        if (a.length < b.length) return false\n     \
    \   val bb = b + b\n        if (bb.indexOf(a) != -1) return true\n        return\
    \ false", "        def helper(a : String, b : String) : Boolean = {\n        \
    \    if (a.length < b.length) return false\n            if (a.substring(0, b.length)\
    \ == b) return true\n            helper(a.substring(1) + a.charAt(0), b)\n   \
    \     }\n        helper(a, b)", "        val n = a.length\n        val m = b.length\n\
    \        val s = a + a\n        for (i <- 0 to n - 1) {\n            if (s.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        if (a.length\
    \ < b.length) return false\n        val bb = b + b\n        return bb.contains(a)",
  "        if (a.length < b.length) return false\n        val bb = b + b\n       \
    \ bb.contains(a)", "        val n = a.length\n        val m = b.length\n     \
    \   if (n < m) return false\n        val bb = b + b\n        for (i <- 0 until\
    \ n - m + 1) {\n            val sub = a.substring(i, i + m)\n            if (bb.contains(sub))\
    \ return true\n        }\n        return false", "        val n = a.length\n \
    \       val m = b.length\n        if (n < m) return false\n        val bb = b\
    \ + b\n        for (i <- 0 until n - m + 1) {\n            if (a.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        val bb\
    \ = b + b\n        bb.contains(a)", "        val bb = b + b\n        bb.contains(a)",
  "        val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if\
    \ (a.substring(i, i + m) == b) return true\n        }\n        return false",
  "        val n = a.length\n        val m = b.length\n        for (i <- 0 until n)\
    \ {\n            val sub = a.substring(i, i + m)\n            if (sub == b) return\
    \ true\n        }\n        return false", "        if (a.length < b.length) return\
    \ false\n        val bb = b + b\n        for (i <- 0 to a.length - b.length) {\n\
    \            if (a.substring(i, i + b.length) == b) return true\n        }\n \
    \       return false", "        val n = a.length\n        val m = b.length\n \
    \       if (n < m) return false\n        val bb = b + b\n        for (i <- 0 until\
    \ n) {\n            var j = 0\n            while (j < m && a(i + j) == bb(j))\
    \ j += 1\n            if (j == m) return true\n        }\n        return false",
  "        val n = a.length\n        val m = b.length\n        val bb = b + b\n  \
    \      for (i <- 0 until n - m + 1) {\n            if (a.substring(i, i + m) ==\
    \ b) return true\n        }\n        return false", "        if (a.length < b.length)\
    \ return false\n        val bb = b + b\n        return bb.contains(a)", "    \
    \    val n = a.length\n        val m = b.length\n        var i = 0\n        while\
    \ (i < n) {\n            var j = 0\n            while (j < m) {\n            \
    \    if (a(i) == b(j)) {\n                    var k = 0\n                    while\
    \ (k < m) {\n                        if (a((i + k) % n) != b((j + k) % m)) {\n\
    \                            j = m\n                            k = m\n      \
    \                  }\n                        k += 1\n                    }\n\
    \                    if (k == m) return true\n                }\n            \
    \    j += 1\n            }\n            i += 1\n        }\n        return false",
  "        val b1 = b + b\n        b1.contains(a)", "        val n = a.length\n  \
    \      val m = b.length\n        if (n < m) return false\n        val bb = b +\
    \ b\n        for (i <- 0 until n - m + 1) {\n            val sub = a.substring(i,\
    \ i + m)\n            if (sub == b || bb.contains(sub)) return true\n        }\n\
    \        return false", "        val bs = b.toCharArray\n        for (i <- 0 until\
    \ bs.length) {\n            val bs1 = bs.slice(i, bs.length) ++ bs.slice(0, i)\n\
    \            if (a.contains(bs1.mkString)) return true\n        }\n        return\
    \ false", "        val aa = a.toCharArray\n        val bb = b.toCharArray\n  \
    \      val bbLen = bb.length\n        val aaLen = aa.length\n        for (i <-\
    \ 0 until aaLen) {\n            var flag = true\n            for (j <- 0 until\
    \ bbLen) {\n                if (aa(i + j) != bb(j)) {\n                    flag\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (flag) return true\n        }\n        false", "        val n = a.length\n\
    \        val m = b.length\n        if (n < m) return false\n        val bb = b\
    \ + b\n        for (i <- 0 until n - m + 1) {\n            val sub = a.substring(i,\
    \ i + m)\n            if (sub == b) return true\n            if (bb.contains(sub))\
    \ return true\n        }\n        return false", "        val n = a.length\n \
    \       val m = b.length\n        val bb = b + b\n        for (i <- 0 until n\
    \ - m + 1) {\n            var flag = true\n            for (j <- 0 until m) {\n\
    \                if (a(i + j) != bb(j)) {\n                    flag = false\n\
    \                    break\n                }\n            }\n            if (flag)\
    \ return true\n        }\n        return false", "        val bs = b.toCharArray\n\
    \        val as = a.toCharArray\n        val bslen = bs.length\n        val aslen\
    \ = as.length\n        if (bslen > aslen) return false\n        for (i <- 0 until\
    \ aslen) {\n            var j = 0\n            while (j < bslen && as(i + j) ==\
    \ bs(j)) j += 1\n            if (j == bslen) return true\n        }\n        return\
    \ false", "        var s = a\n        for (i <- 0 until a.length) {\n        \
    \    if (s.contains(b)) return true\n            s = s.tail + s.head\n       \
    \ }\n        return false", "        var bs = b.toList\n        for (i <- 0 until\
    \ b.length) {\n            if (a.contains(bs.mkString)) return true\n        \
    \    bs = bs.tail :+ bs.head\n        }\n        return false", "        val n\
    \ = a.length\n        val m = b.length\n        val aa = a + a\n        for (i\
    \ <- 0 to n - 1) {\n            val sub = aa.substring(i, i + m)\n           \
    \ if (sub == b) return true\n        }\n        return false", "        val bb\
    \ = b + b\n        bb.contains(a)", "        val bs = b.toCharArray\n        val\
    \ as = a.toCharArray\n        val n = bs.length\n        val m = as.length\n \
    \       val bs2 = bs ++ bs\n        val bs2s = bs2.mkString\n        val bs2i\
    \ = bs2s.indexOf(b)\n        val bs2j = bs2s.lastIndexOf(b)\n        if (bs2i\
    \ == bs2j) return false\n        for (i <- 0 until m - n + 1) {\n            var\
    \ j = 0\n            while (j < n && as(i + j) == bs(j)) j += 1\n            if\
    \ (j == n) return true\n        }\n        return false", "        if (a.length\
    \ < b.length) return false\n        val b_len = b.length\n        for (i <- 0\
    \ until a.length) {\n            val sub = a.substring(i, i + b_len)\n       \
    \     if (sub == b) return true\n        }\n        return false", "        val\
    \ n = a.length\n        val m = b.length\n        if (n < m) return false\n  \
    \      val bb = b + b\n        for (i <- 0 until n) {\n            var j = 0\n\
    \            while (j < m && a(i + j) == bb(j)) j += 1\n            if (j == m)\
    \ return true\n        }\n        return false", "        val n = a.length\n \
    \       val m = b.length\n        if (n < m) return false\n        val aa = a\
    \ + a\n        for (i <- 0 until n) {\n            if (aa.substring(i, i + m)\
    \ == b) return true\n        }\n        return false", "        val n = a.length\n\
    \        val m = b.length\n        if (n < m) return false\n        val bb = b\
    \ + b\n        for (i <- 0 until n - m + 1) {\n            if (a.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        val n =\
    \ a.length\n        val m = b.length\n        val bb = b + b\n        for (i <-\
    \ 0 until n - m + 1) {\n            if (a.substring(i, i + m) == b) return true\n\
    \        }\n        return false", "        val b2 = b + b\n        b2.contains(a)",
  "        var c = a + a\n        c.contains(b)", "        if (a.length < b.length)\
    \ return false\n        val bb = b + b\n        return bb.contains(a)", "    \
    \    val bs = b.toCharArray\n        val as = a.toCharArray\n        val bslen\
    \ = bs.length\n        val aslen = as.length\n        for (i <- 0 until bslen)\
    \ {\n            var j = 0\n            while (j < aslen && bs(i) == as(j)) {\n\
    \                i += 1\n                j += 1\n                if (i == bslen)\
    \ i = 0\n                if (j == aslen) return true\n            }\n        \
    \    if (j == aslen) return true\n        }\n        return false", "        val\
    \ bs = b.toCharArray\n        for (i <- 0 until bs.length) {\n            val\
    \ temp = bs(0)\n            for (j <- 0 until bs.length - 1) {\n             \
    \   bs(j) = bs(j + 1)\n            }\n            bs(bs.length - 1) = temp\n \
    \           if (a.contains(bs.mkString)) return true\n        }\n        return\
    \ false", "        val n = a.length\n        val m = b.length\n        if (n <\
    \ m) return false\n        val bb = b + b\n        for (i <- 0 until n) {\n  \
    \          if (a.substring(i, i + m) == b) return true\n        }\n        return\
    \ false", "        val s = a + a\n        s.contains(b)", "        if (a.length\
    \ < b.length) return false\n        for (i <- 0 until a.length) {\n          \
    \  if (a.substring(i, i + b.length) == b) return true\n        }\n        return\
    \ false", "        val bb = b + b\n        bb.contains(a)", "        var result\
    \ = false\n        for (i <- 0 until b.length) {\n            if (a.contains(b.substring(i)\
    \ + b.substring(0, i))) {\n                result = true\n            }\n    \
    \    }\n        result", "        var aa = a\n        for (i <- 0 until a.length)\
    \ {\n            if (aa.indexOf(b) != -1) return true\n            aa = aa.tail\
    \ + aa.head\n        }\n        return false", "        val bs = b.toCharArray\n\
    \        val bslen = bs.length\n        val as = a.toCharArray\n        val aslen\
    \ = as.length\n        val bs2 = new Array[Char](bslen)\n        for (i <- 0 until\
    \ bslen) {\n            bs2(i) = bs((i + 1) % bslen)\n        }\n        var i\
    \ = 0\n        while (i < aslen) {\n            var j = 0\n            while (j\
    \ < bslen && as(i + j) == bs(j)) {\n                j += 1\n            }\n  \
    \          if (j == bslen) return true\n            i += 1\n        }\n      \
    \  i = 0\n        while (i < aslen) {\n            var j = 0\n            while\
    \ (j < bslen && as(i + j) == bs2(j)) {\n                j += 1\n            }\n\
    \            if (j == bslen) return true\n            i += 1\n        }\n    \
    \    false", "        val n = a.length\n        val m = b.length\n        if (n\
    \ < m) return false\n        val bb = b + b\n        for (i <- 0 until n - m +\
    \ 1) {\n            val sub = a.substring(i, i + m)\n            if (bb.contains(sub))\
    \ return true\n        }\n        return false", "        if (a.length < b.length)\
    \ return false\n        val b2 = b + b\n        return b2.contains(a)", "    \
    \    val bb = b + b\n        bb.contains(a)", "        val bs = b.toCharArray\n\
    \        val as = a.toCharArray\n        val n = bs.length\n        val m = as.length\n\
    \        val bs2 = new Array[Char](n * 2)\n        for (i <- 0 until n) {\n  \
    \          bs2(i) = bs(i)\n            bs2(i + n) = bs(i)\n        }\n       \
    \ for (i <- 0 until n) {\n            var j = 0\n            while (j < m && bs2(i\
    \ + j) == as(j)) j += 1\n            if (j == m) return true\n        }\n    \
    \    false", "        if (a.length < b.length) return false\n        for (i <-\
    \ 0 until a.length) {\n            if (a.substring(i, i + b.length) == b) return\
    \ true\n        }\n        return false", "        val n = a.length\n        val\
    \ m = b.length\n        val s = a + a\n        for (i <- 0 to n - 1) {\n     \
    \       if (s.substring(i, i + m) == b) return true\n        }\n        return\
    \ false", "        val n = a.length\n        val m = b.length\n        if (n <\
    \ m) return false\n        val bb = b + b\n        for (i <- 0 until n - m + 1)\
    \ {\n            val sub = a.substring(i, i + m)\n            if (bb.contains(sub))\
    \ return true\n        }\n        return false", "        val aa = a.toCharArray\n\
    \        val bb = b.toCharArray\n        val bb2 = bb.clone\n        for (i <-\
    \ 0 until bb.length) {\n            val tmp = bb(0)\n            for (j <- 0 until\
    \ bb.length - 1) bb(j) = bb(j + 1)\n            bb(bb.length - 1) = tmp\n    \
    \        if (a.contains(bb.mkString)) return true\n        }\n        return false",
  "        val bb = b + b\n        return bb.contains(a)", "        val n = a.length\n\
    \        val m = b.length\n        val aa = a + a\n        for (i <- 0 to n -\
    \ 1) {\n            if (aa.substring(i, i + m) == b) return true\n        }\n\
    \        return false", "        val aa = a.toCharArray\n        val bb = b.toCharArray\n\
    \        val n = aa.length\n        val m = bb.length\n        val bb2 = new Array[Char](m)\n\
    \        for (i <- 0 until m) {\n            bb2(i) = bb((i + 1) % m)\n      \
    \  }\n        var i = 0\n        var j = 0\n        while (i < n) {\n        \
    \    if (aa(i) == bb(j)) {\n                j += 1\n                if (j == m)\
    \ return true\n            } else {\n                j = 0\n            }\n  \
    \          i += 1\n        }\n        i = 0\n        j = 0\n        while (i <\
    \ n) {\n            if (aa(i) == bb2(j)) {\n                j += 1\n         \
    \       if (j == m) return true\n            } else {\n                j = 0\n\
    \            }\n            i += 1\n        }\n        false", "        val n\
    \ = a.length\n        val m = b.length\n        if (n < m) return false\n    \
    \    val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if (a.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        val bb\
    \ = b + b\n        bb.contains(a)", "        val n = a.length\n        val m =\
    \ b.length\n        if (n < m) return false\n        val bb = b + b\n        for\
    \ (i <- 0 until n) {\n            var j = 0\n            while (j < m && a(i)\
    \ == bb(j)) {\n                i += 1\n                j += 1\n            }\n\
    \            if (j == m) return true\n        }\n        return false", "    \
    \    val bb = b + b\n        bb.contains(a)", "        val n = a.length\n    \
    \    val m = b.length\n        val s = a + a\n        for (i <- 0 to n - 1) {\n\
    \            if (s.substring(i, i + m) == b) return true\n        }\n        return\
    \ false", "        val n = a.length\n        val m = b.length\n        if (n <\
    \ m) return false\n        val bb = b + b\n        val aa = a + a\n        for\
    \ (i <- 0 until n) {\n            if (aa.substring(i, i + m) == bb) return true\n\
    \        }\n        return false", "        val n = a.length\n        val m =\
    \ b.length\n        if (n < m) return false\n        val bb = b + b\n        for\
    \ (i <- 0 until n - m + 1) {\n            if (a.substring(i, i + m) == b) return\
    \ true\n        }\n        return false", "        val n = a.length\n        val\
    \ m = b.length\n        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n\
    \            if (a.substring(i, i + m) == b) return true\n        }\n        return\
    \ false", "        val n = a.length\n        val m = b.length\n        if (n <\
    \ m) return false\n        val aa = a + a\n        for (i <- 0 until n) {\n  \
    \          if (aa.substring(i, i + m) == b) return true\n        }\n        return\
    \ false", "        val n = a.length\n        val m = b.length\n        val aa\
    \ = a + a\n        for (i <- 0 until n) {\n            if (aa.substring(i, i +\
    \ m) == b) return true\n        }\n        return false", "        val bb = b\
    \ + b\n        return bb.contains(a)", "        val n = a.length\n        val\
    \ m = b.length\n        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n\
    \            if (a.substring(i, i + m) == b) return true\n        }\n        return\
    \ false", "        val aa = a.toList\n        val bb = b.toList\n        val bb_length\
    \ = bb.length\n        val bb_rotations = (0 until bb_length).map(i => bb.drop(i)\
    \ ++ bb.take(i)).toList\n        bb_rotations.map(rotation => aa.containsSlice(rotation)).reduce(_\
    \ || _)", "        val n = a.length\n        val m = b.length\n        val s =\
    \ a + a\n        for (i <- 0 to n - 1) {\n            val sub = s.substring(i,\
    \ i + m)\n            if (sub == b) return true\n        }\n        return false",
  "        if (a.length < b.length) return false\n        val bb = b + b\n       \
    \ return bb.contains(a)", "        val n = a.length\n        val m = b.length\n\
    \        var i = 0\n        while (i < n) {\n            if (a.substring(i, min(i\
    \ + m, n)) == b.substring(0, min(m, n - i))) return true\n            i += 1\n\
    \        }\n        false", "        val bb = b + b\n        bb.contains(a)",
  "        val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val s = a + a\n        for (i <- 0 until n) {\n            var j = 0\n\
    \            while (j < m && s(i + j) == b(j)) j += 1\n            if (j == m)\
    \ return true\n        }\n        return false", "        if (a.length < b.length)\
    \ return false\n        val bs = b.toSet\n        val bs2 = b.toSet\n        for\
    \ (i <- 0 until a.length) {\n            if (bs.contains(a(i))) {\n          \
    \      bs -= a(i)\n                if (bs.isEmpty) return true\n            }\
    \ else {\n                bs = bs2\n            }\n        }\n        return false",
  "        val n = a.length\n        val m = b.length\n        val s = a + a\n   \
    \     for (i <- 0 to n - 1) {\n            if (s.substring(i, i + m) == b) return\
    \ true\n        }\n        return false", "        val bb = b + b\n        bb.contains(a)",
  "        val n = a.length\n        val m = b.length\n        val hash = new HashMap[String,\
    \ Int]\n        for (i <- 0 until n - m + 1) {\n            val sub = a.substring(i,\
    \ i + m)\n            if (hash.contains(sub)) hash(sub) += 1\n            else\
    \ hash(sub) = 1\n        }\n        for (i <- 0 until m) {\n            val sub\
    \ = b.substring(i, m) + b.substring(0, i)\n            if (hash.contains(sub))\
    \ return true\n        }\n        return false", "        val n = a.length\n \
    \       val m = b.length\n        if (n < m) return false\n        val bb = b\
    \ + b\n        for (i <- 0 until n - m + 1) {\n            if (a.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        val b2\
    \ = b + b\n        b2.contains(a)", "        val n = a.length\n        val m =\
    \ b.length\n        val s = a + a\n        for (i <- 0 to n - 1) {\n         \
    \   if (s.substring(i, i + m) == b) return true\n        }\n        return false",
  "        if (a.length < b.length) return false\n        val bs = b.toCharArray\n\
    \        for (i <- 0 until a.length) {\n            var flag = true\n        \
    \    for (j <- 0 until b.length) {\n                if (a(i + j) != bs(j)) {\n\
    \                    flag = false\n                    break\n               \
    \ }\n            }\n            if (flag) return true\n        }\n        return\
    \ false", "        val bb = b + b\n        bb.contains(a)", "        val bs =\
    \ b.toCharArray\n        val as = a.toCharArray\n        val bslen = bs.length\n\
    \        val aslen = as.length\n        var i = 0\n        while (i < aslen) {\n\
    \            var j = 0\n            while (j < bslen) {\n                if (as(i)\
    \ == bs(j)) {\n                    var k = 0\n                    while (k < bslen)\
    \ {\n                        if (as(i + k) != bs(j + k)) {\n                 \
    \           j = bslen\n                            k = bslen\n               \
    \         }\n                        k += 1\n                    }\n         \
    \           if (k == bslen) return true\n                }\n                j\
    \ += 1\n            }\n            i += 1\n        }\n        return false", " \
    \       val n = a.length\n        val m = b.length\n        val s = a + a\n  \
    \      for (i <- 0 until n) {\n            if (s.substring(i, i + m) == b) return\
    \ true\n        }\n        return false", "        if (a.length < b.length) return\
    \ false\n        val b2 = b + b\n        return b2.contains(a)", "        val\
    \ n = a.length\n        val m = b.length\n        if (n < m) return false\n  \
    \      val bb = b + b\n        for (i <- 0 until n) {\n            if (a.substring(i,\
    \ min(i + m, n)) == bb.substring(i, min(i + m, n))) return true\n        }\n \
    \       return false", "        val bb = b + b\n        return bb.contains(a)",
  "        val n = a.length\n        val m = b.length\n        val aa = a + a\n  \
    \      for (i <- 0 until n) {\n            if (aa.substring(i, i + m) == b) return\
    \ true\n        }\n        return false", "        val n = a.length\n        val\
    \ m = b.length\n        if (n < m) return false\n        val aa = a + a\n    \
    \    for (i <- 0 until n) {\n            var j = 0\n            while (j < m &&\
    \ aa(i + j) == b(j)) j += 1\n            if (j == m) return true\n        }\n\
    \        return false", "        val bs = b.toCharArray\n        for (i <- 0 until\
    \ bs.length) {\n            val c = bs(0)\n            for (j <- 0 until bs.length\
    \ - 1) {\n                bs(j) = bs(j + 1)\n            }\n            bs(bs.length\
    \ - 1) = c\n            if (a.contains(bs.mkString)) return true\n        }\n\
    \        return false", "        val n = a.length\n        val m = b.length\n\
    \        if (n < m) return false\n        val bb = b + b\n        for (i <- 0\
    \ until n) {\n            if (a.substring(i, i + m) == b) return true\n      \
    \  }\n        return false", "        if (a.length < b.length) return false\n\
    \        val bb = b + b\n        return bb.contains(a)", "        val n = a.length\n\
    \        val m = b.length\n        for (i <- 0 until n) {\n            if (a.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        var s =\
    \ a\n        for (i <- 0 until a.length) {\n            if (s.contains(b)) return\
    \ true\n            s = s.tail + s.head\n        }\n        return false", " \
    \       val aLen = a.length\n        val bLen = b.length\n        if (aLen < bLen)\
    \ return false\n        val aa = a + a\n        for (i <- 0 until aLen) {\n  \
    \          if (aa.substring(i, i + bLen) == b) return true\n        }\n      \
    \  return false", "        val n = a.length\n        val m = b.length\n      \
    \  val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            var flag\
    \ = true\n            for (j <- 0 until m) {\n                if (a(i + j) !=\
    \ bb(j)) {\n                    flag = false\n                    break\n    \
    \            }\n            }\n            if (flag) return true\n        }\n\
    \        return false", "        val n = a.length\n        val m = b.length\n\
    \        if (n < m) return false\n        val bb = b + b\n        for (i <- 0\
    \ until n - m + 1) {\n            if (a.substring(i, i + m) == b) return true\n\
    \        }\n        return false", "        var result = false\n        for (i\
    \ <- 0 until b.length) {\n            if (a.contains(b.substring(i) + b.substring(0,\
    \ i))) {\n                result = true\n            }\n        }\n        result",
  "        if (a.length < b.length) return false\n        val bb = b + b\n       \
    \ return bb.contains(a)", "        val bs = b.toSet\n        val bs2 = b.toSet\n\
    \        val bs3 = b.toSet\n        val bs4 = b.toSet\n        val bs5 = b.toSet\n\
    \        val bs6 = b.toSet\n        val bs7 = b.toSet\n        val bs8 = b.toSet\n\
    \        val bs9 = b.toSet\n        val bs10 = b.toSet\n        val bs11 = b.toSet\n\
    \        val bs12 = b.toSet\n        val bs13 = b.toSet\n        val bs14 = b.toSet\n\
    \        val bs15 = b.toSet\n        val bs16 = b.toSet\n        val bs17 = b.toSet\n\
    \        val bs18 = b.toSet\n        val bs19 = b.toSet\n        val bs20 = b.toSet\n\
    \        val bs21 = b.toSet\n        val bs22 = b.toSet\n        val bs23 = b.toSet\n\
    \        val bs24 = b.toSet\n        val bs25 = b.toSet\n        val bs26 = b.toSet\n\
    \        val bs27 = b.toSet\n        val bs28 = b.toSet\n        val bs29 = b.toSet\n\
    \        val bs30 = b.toSet\n        val bs31 = b.toSet\n        val bs32 = b.toSet\n\
    \        val bs33 = b.toSet\n        val bs34 = b.toSet\n        val bs35 = b.toSet\n\
    \        val bs36 = b.toSet\n        val bs37 = b.toSet\n        val bs38 = b.toSet\n\
    \        val bs39 = b.toSet\n        val bs40 = b.toSet\n        val bs41 = b.toSet\n\
    \        val bs42 = b.toSet\n        val bs43 = b.toSet\n        val bs44 = b.toSet\n\
    \        val bs45 = b.toSet\n        val bs46 = b.toSet\n        val bs47 =",
  "        val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            val\
    \ ss = a.substring(i, i + m)\n            if (bb.contains(ss)) return true\n \
    \       }\n        return false", "        val n = a.length\n        val m = b.length\n\
    \        val s = a + a\n        for (i <- 0 until n) {\n            if (s.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        val bs\
    \ = b.toCharArray\n        for (i <- 0 until bs.length) {\n            val temp\
    \ = bs(0)\n            for (j <- 0 until bs.length - 1) {\n                bs(j)\
    \ = bs(j + 1)\n            }\n            bs(bs.length - 1) = temp\n         \
    \   if (a.contains(bs.mkString)) return true\n        }\n        return false",
  "        val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n) {\n            if (a.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        val bb\
    \ = b + b\n        return a.contains(bb)", "        var s = a + a\n        return\
    \ s.contains(b)", "        val bb = b + b\n        bb.contains(a)", "        val\
    \ bs = b.toCharArray\n        val as = a.toCharArray\n        val bslen = bs.length\n\
    \        val aslen = as.length\n        var i = 0\n        while (i < aslen) {\n\
    \            var j = 0\n            while (j < bslen) {\n                if (bs(j)\
    \ != as(i)) return false\n                i += 1\n                j += 1\n   \
    \         }\n        }\n        true", "        val n = a.length\n        val\
    \ m = b.length\n        val s = a + a\n        for (i <- 0 until n) {\n      \
    \      if (s.substring(i, i + m) == b) return true\n        }\n        return\
    \ false", "        val n = a.length\n        val m = b.length\n        if (n <\
    \ m) return false\n        val bb = b + b\n        for (i <- 0 until n) {\n  \
    \          if (bb.contains(a.substring(i, i + m))) return true\n        }\n  \
    \      return false", "        val b1 = b + b\n        b1.contains(a)", "    \
    \    val bs = b.toList\n        val as = a.toList\n        val bsl = bs.length\n\
    \        val asl = as.length\n        val rotations = (0 until bsl).map(i => bs.drop(i)\
    \ ++ bs.take(i))\n        rotations.exists(r => as.containsSlice(r))", "     \
    \   if (a.length < b.length) return false\n        val bb = b + b\n        return\
    \ bb.contains(a)", "        def isSubstring(a : String, b : String) : Boolean\
    \ = {\n            val n = a.length\n            val m = b.length\n          \
    \  for (i <- 0 to n - m) {\n                var j = 0\n                while (j\
    \ < m && a(i + j) == b(j)) j += 1\n                if (j == m) return true\n \
    \           }\n            false\n        }\n        val n = b.length\n      \
    \  for (i <- 0 to n - 1) {\n            val b1 = b.substring(i, n) + b.substring(0,\
    \ i)\n            if (isSubstring(a, b1)) return true\n        }\n        false",
  "        if (a.length < b.length) return false\n        val b2 = b + b\n       \
    \ return b2.contains(a)", "        val bs = b.toCharArray\n        for (i <- 0\
    \ until bs.length) {\n            val temp = bs(0)\n            for (j <- 0 until\
    \ bs.length - 1) {\n                bs(j) = bs(j + 1)\n            }\n       \
    \     bs(bs.length - 1) = temp\n            if (a.contains(bs.mkString)) return\
    \ true\n        }\n        return false", "        def check(a : String, b : String)\
    \ : Boolean = {\n            if (a.length < b.length) return false\n         \
    \   for (i <- 0 until a.length - b.length + 1) {\n                if (a.substring(i,\
    \ i + b.length) == b) return true\n            }\n            return false\n \
    \       }\n        if (check(a, b)) return true\n        for (i <- 0 until b.length\
    \ - 1) {\n            val b1 = b.substring(i + 1) + b.substring(0, i + 1)\n  \
    \          if (check(a, b1)) return true\n        }\n        return false", " \
    \       val bs = b.toCharArray\n        for (i <- 0 until bs.length) {\n     \
    \       val temp = bs(0)\n            for (j <- 0 until bs.length - 1) {\n   \
    \             bs(j) = bs(j + 1)\n            }\n            bs(bs.length - 1)\
    \ = temp\n            if (a.contains(bs.mkString)) return true\n        }\n  \
    \      return false", "        if (a.length < b.length) return false\n       \
    \ val bs = b.toList\n        val as = a.toList\n        for (i <- 0 until a.length)\
    \ {\n            val sub = as.slice(i, i + b.length)\n            if (sub.length\
    \ == b.length && sub.toList == bs) return true\n        }\n        return false",
  "        val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val c = a + a\n        for (i <- 0 until n) {\n            if (c.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        val n =\
    \ a.length\n        val m = b.length\n        if (n < m) return false\n      \
    \  val bb = b + b\n        for (i <- 0 until n) {\n            if (a.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        val n =\
    \ a.length\n        val m = b.length\n        if (n < m) return false\n      \
    \  val aa = a + a\n        for (i <- 0 until n) {\n            if (aa.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        val bb\
    \ = b + b\n        bb.contains(a)", "        val n = a.length\n        val m =\
    \ b.length\n        val s = a + a\n        for (i <- 0 until n) {\n          \
    \  if (s.substring(i, i + m) == b) return true\n        }\n        return false",
  "        if (a.length < b.length) return false\n        val bb = b + b\n       \
    \ return bb.contains(a)", "        if (a.length < b.length) return false\n   \
    \     val bs = b.toCharArray\n        for (i <- 0 until a.length) {\n        \
    \    var j = 0\n            while (j < bs.length && a(i + j) == bs(j)) j += 1\n\
    \            if (j == bs.length) return true\n        }\n        false", "   \
    \     val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if\
    \ (a.substring(i, i + m) == b) return true\n        }\n        return false",
  "        val bb = b + b\n        bb.contains(a)", "        val bs = b.toCharArray\n\
    \        for (i <- 0 until bs.length) {\n            val c = bs(0)\n         \
    \   for (j <- 0 until bs.length - 1) {\n                bs(j) = bs(j + 1)\n  \
    \          }\n            bs(bs.length - 1) = c\n            if (a.contains(bs.mkString))\
    \ return true\n        }\n        return false", "        val bs = b.toSet\n \
    \       val bm = b.groupBy(identity).mapValues(_.size)\n        val bsz = b.size\n\
    \        val asz = a.size\n        for (i <- 0 until asz) {\n            val as\
    \ = a.substring(i, i + bsz).toSet\n            val am = a.substring(i, i + bsz).groupBy(identity).mapValues(_.size)\n\
    \            if (as.size == bs.size && as.intersect(bs).size == bs.size && am.forall(x\
    \ => bm.getOrElse(x._1, 0) == x._2)) return true\n        }\n        false", " \
    \       val n = a.length\n        val m = b.length\n        val bb = b + b\n \
    \       for (i <- 0 until n - m + 1) {\n            var flag = true\n        \
    \    for (j <- 0 until m) {\n                if (a(i + j) != bb(j)) {\n      \
    \              flag = false\n                    break\n                }\n  \
    \          }\n            if (flag) return true\n        }\n        return false",
  "        val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if\
    \ (a.substring(i, i + m) == b) return true\n        }\n        return false",
  "        if (a.length < b.length) return false\n        val bb = b + b\n       \
    \ return bb.contains(a)", "        val b1 = b + b\n        b1.contains(a)", " \
    \       val n = a.length\n        val m = b.length\n        if (n < m) return\
    \ false\n        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n    \
    \        if (a.substring(i, i + m) == b) return true\n        }\n        return\
    \ false", "        if (a.length < b.length) return false\n        val bb = b +\
    \ b\n        return bb.contains(a)", "        val n = a.length\n        val m\
    \ = b.length\n        if (n < m) return false\n        val bb = b + b\n      \
    \  for (i <- 0 until n - m + 1) {\n            if (a.substring(i, i + m) == b)\
    \ return true\n        }\n        return false", "        val bs = b.toSet\n \
    \       val bm = b.toList.groupBy(identity).mapValues(_.size)\n        val bm2\
    \ = b.toList.groupBy(identity).mapValues(_.size)\n        val bm3 = b.toList.groupBy(identity).mapValues(_.size)\n\
    \        val bm4 = b.toList.groupBy(identity).mapValues(_.size)\n        val bm5\
    \ = b.toList.groupBy(identity).mapValues(_.size)\n        val bm6 = b.toList.groupBy(identity).mapValues(_.size)\n\
    \        val bm7 = b.toList.groupBy(identity).mapValues(_.size)\n        val bm8\
    \ = b.toList.groupBy(identity).mapValues(_.size)\n        val bm9 = b.toList.groupBy(identity).mapValues(_.size)\n\
    \        val bm10 = b.toList.groupBy(identity).mapValues(_.size)\n        val\
    \ bm11 = b.toList.groupBy(identity).mapValues(_.size)\n        val bm12 = b.toList.groupBy(identity).mapValues(_.size)\n\
    \        val bm13 = b.toList.groupBy(identity).mapValues(_.size)\n        val\
    \ bm14 = b.toList.groupBy(identity).mapValues(_.size)\n        val bm15 = b.toList.groupBy(identity).mapValues(_.size)\n\
    \        val bm16 = b.toList.groupBy(identity).mapValues(_.size)\n        val\
    \ bm17 = b.toList.groupBy(identity).mapValues(_.size)\n        val bm18 = b.toList.groupBy(identity).mapValues(_.size)\n\
    \        val bm19 = b.toList.groupBy(identity).mapValues(_.size)\n        val\
    \ bm20 = b.toList.groupBy(identity).mapValues(_.size)\n        val bm21 = b.toList.groupBy(identity).mapValues(_.size",
  "        val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n) {\n            if (a.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        var bb\
    \ = b\n        for (i <- 0 until b.length) {\n            if (a.contains(bb))\
    \ return true\n            bb = bb.tail + bb.head\n        }\n        return false",
  "        val n = a.length\n        val m = b.length\n        val aa = a + a\n  \
    \      for (i <- 0 until n) {\n            if (aa.substring(i, i + m) == b) return\
    \ true\n        }\n        return false", "        val n = a.length\n        val\
    \ m = b.length\n        if (n < m) return false\n        val aa = a + a\n    \
    \    val bb = b + b\n        for (i <- 0 until n) {\n            if (aa.substring(i,\
    \ i + m) == bb.substring(0, m)) return true\n        }\n        return false",
  "        val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if\
    \ (a.substring(i, i + m) == b) return true\n        }\n        return false",
  "        val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if\
    \ (a.substring(i, i + m) == b) return true\n        }\n        return false",
  "        val bs = b.toCharArray\n        for (i <- 0 until bs.length) {\n      \
    \      val temp = bs(0)\n            for (j <- 0 until bs.length - 1) {\n    \
    \            bs(j) = bs(j + 1)\n            }\n            bs(bs.length - 1) =\
    \ temp\n            if (a.contains(bs.mkString)) return true\n        }\n    \
    \    return false", "        val n = a.length\n        val m = b.length\n    \
    \    val aa = a + a\n        for (i <- 0 to n - 1) {\n            if (aa.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        if (a.length\
    \ < b.length) return false\n        val bb = b + b\n        return bb.contains(a)",
  "        val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if\
    \ (a.substring(i, i + m) == b) return true\n        }\n        return false",
  "        val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n) {\n            var flag\
    \ = true\n            for (j <- 0 until m) {\n                if (a(i + j) !=\
    \ bb(j)) {\n                    flag = false\n                    break\n    \
    \            }\n            }\n            if (flag) return true\n        }\n\
    \        return false", "        val n = a.length\n        val m = b.length\n\
    \        for (i <- 0 until n) {\n            if (a.substring(i, i + m) == b) return\
    \ true\n        }\n        return false", "        val bb = b + b\n        bb.contains(a)",
  "        val b_len = b.length\n        val a_len = a.length\n        val b_rot =\
    \ b * 2\n        for (i <- 0 until b_len) {\n            if (a.contains(b_rot.substring(i,\
    \ i + b_len))) return true\n        }\n        return false", "        val bs\
    \ = b.toCharArray\n        for (i <- 0 until bs.length) {\n            val bs1\
    \ = bs.slice(i, bs.length) ++ bs.slice(0, i)\n            if (a.contains(bs1.mkString))\
    \ return true\n        }\n        return false", "        if (a.length < b.length)\
    \ return false\n        val bb = b + b\n        bb.contains(a)", "        if (a.length\
    \ < b.length) return false\n        var i = 0\n        while (i < a.length) {\n\
    \            if (a.substring(i, i + b.length) == b) return true\n            i\
    \ += 1\n        }\n        return false", "        val bs = b.toCharArray\n  \
    \      val as = a.toCharArray\n        val n = bs.length\n        val m = as.length\n\
    \        val bs2 = bs ++ bs\n        val as2 = as ++ as\n        for (i <- 0 until\
    \ m) {\n            var j = 0\n            while (j < n && as2(i + j) == bs2(j))\
    \ j += 1\n            if (j == n) return true\n        }\n        return false",
  "        if (a.length < b.length) return false\n        val bs = b.toList\n    \
    \    val as = a.toList\n        for (i <- 0 until a.length) {\n            if\
    \ (as.slice(i, i + b.length) == bs) return true\n        }\n        return false"]
stop_tokens:
- "\n    }\n"
