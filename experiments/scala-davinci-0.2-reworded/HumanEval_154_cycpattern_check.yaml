name: HumanEval_154_cycpattern_check
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given 2 words. You need to return true if the second word or any\
  \ of its rotations is a substring in the first word\n    // >>> cycpatternCheck((\"\
  abcd\"), (\"abd\"))\n    // (false)\n    // >>> cycpatternCheck((\"hello\"), (\"\
  ell\"))\n    // (true)\n    // >>> cycpatternCheck((\"whassup\"), (\"psus\"))\n\
  \    // (false)\n    // >>> cycpatternCheck((\"abab\"), (\"baa\"))\n    // (true)\n\
  \    // >>> cycpatternCheck((\"efef\"), (\"eeff\"))\n    // (false)\n    // >>>\
  \ cycpatternCheck((\"himenss\"), (\"simen\"))\n    // (true)\n    def cycpatternCheck(a\
  \ : String, b : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(cycpatternCheck((\"\
  xyzw\"), (\"xyw\")) == (false));\n    assert(cycpatternCheck((\"yello\"), (\"ell\"\
  )) == (true));\n    assert(cycpatternCheck((\"whattup\"), (\"ptut\")) == (false));\n\
  \    assert(cycpatternCheck((\"efef\"), (\"fee\")) == (true));\n    assert(cycpatternCheck((\"\
  abab\"), (\"aabb\")) == (false));\n    assert(cycpatternCheck((\"winemtt\"), (\"\
  tinem\")) == (true));\n    }\n\n}\n"
completions: ["        if (a.length < b.length) return false\n        val bs = b.toCharArray\n\
    \        for (i <- 0 until bs.length) {\n            val temp = bs(0)\n      \
    \      for (j <- 0 until bs.length - 1) {\n                bs(j) = bs(j + 1)\n\
    \            }\n            bs(bs.length - 1) = temp\n            if (a.contains(bs.mkString))\
    \ return true\n        }\n        return false", "        val b2 = b + b\n   \
    \     b2.contains(a)", "        val len = b.length\n        val bb = b + b\n \
    \       for (i <- 0 until len) {\n            if (a.contains(bb.substring(i, i\
    \ + len))) return true\n        }\n        return false", "        var bb = b\n\
    \        for (i <- 0 until b.length) {\n            if (a.contains(bb)) return\
    \ true\n            bb = bb.tail + bb.head\n        }\n        return false",
  "        val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if\
    \ (a.substring(i, i + m) == b) return true\n        }\n        return false",
  "        if (a.length < b.length) return false\n        val bs = b.toSet\n     \
    \   for (i <- 0 until a.length) {\n            val sub = a.substring(i, i + b.length)\n\
    \            if (sub.toSet == bs) return true\n        }\n        return false",
  "        val bs = b.toCharArray\n        val as = a.toCharArray\n        val bslen\
    \ = bs.length\n        val aslen = as.length\n        if (bslen > aslen) return\
    \ false\n        for (i <- 0 until aslen) {\n            if (as(i) == bs(0)) {\n\
    \                var j = 0\n                while (j < bslen && as(i + j) == bs(j))\
    \ j += 1\n                if (j == bslen) return true\n            }\n       \
    \ }\n        return false", "        val n = a.length\n        val m = b.length\n\
    \        val s = a + a\n        for (i <- 0 until n) {\n            if (s.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        val n =\
    \ a.length\n        val m = b.length\n        if (n < m) return false\n      \
    \  val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            if (a.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        val n =\
    \ a.length\n        val m = b.length\n        if (n < m) return false\n      \
    \  val bb = b + b\n        for (i <- 0 until n - m + 1) {\n            val sub\
    \ = a.substring(i, i + m)\n            if (sub == b || bb.contains(sub)) return\
    \ true\n        }\n        return false", "        val bs = b.toCharArray\n  \
    \      for (i <- 0 until bs.length) {\n            val temp = bs(0)\n        \
    \    for (j <- 0 until bs.length - 1) {\n                bs(j) = bs(j + 1)\n \
    \           }\n            bs(bs.length - 1) = temp\n            if (a.contains(bs.mkString))\
    \ return true\n        }\n        return false", "        if (a.length < b.length)\
    \ return false\n        val bb = b + b\n        return bb.contains(a)", "    \
    \    val bs = b.toCharArray\n        for (i <- 0 until bs.length) {\n        \
    \    val temp = bs(0)\n            for (j <- 0 until bs.length - 1) {\n      \
    \          bs(j) = bs(j + 1)\n            }\n            bs(bs.length - 1) = temp\n\
    \            if (a.contains(bs.mkString)) return true\n        }\n        return\
    \ false", "        val bs = b.toCharArray\n        for (i <- 0 until bs.length)\
    \ {\n            val temp = bs(0)\n            for (j <- 0 until bs.length - 1)\
    \ {\n                bs(j) = bs(j + 1)\n            }\n            bs(bs.length\
    \ - 1) = temp\n            if (a.contains(bs.mkString)) return true\n        }\n\
    \        return false", "        val bb = b + b\n        bb.contains(a)", "  \
    \      val n = a.length\n        val m = b.length\n        if (n < m) return false\n\
    \        val bb = b + b\n        for (i <- 0 until n) {\n            if (a.substring(i,\
    \ i + m) == b) return true\n        }\n        return false", "        val n =\
    \ a.length\n        val m = b.length\n        val bb = b + b\n        for (i <-\
    \ 0 until n - m + 1) {\n            if (a.substring(i, i + m) == b) return true\n\
    \        }\n        return false", "        if (a.length < b.length) return false\n\
    \        val bb = b + b\n        return bb.contains(a)", "        if (a.length\
    \ < b.length) return false\n        val b2 = b + b\n        if (b2.contains(a))\
    \ return true\n        return false", "        val bs = b.toList\n        val\
    \ as = a.toList\n        val bslen = bs.length\n        val aslen = as.length\n\
    \        val bsrot = bs.rotate(bslen - 1)\n        val bsrot2 = bs.rotate(bslen\
    \ - 2)\n        val bsrot3 = bs.rotate(bslen - 3)\n        val bsrot4 = bs.rotate(bslen\
    \ - 4)\n        val bsrot5 = bs.rotate(bslen - 5)\n        val bsrot6 = bs.rotate(bslen\
    \ - 6)\n        val bsrot7 = bs.rotate(bslen - 7)\n        val bsrot8 = bs.rotate(bslen\
    \ - 8)\n        val bsrot9 = bs.rotate(bslen - 9)\n        val bsrot10 = bs.rotate(bslen\
    \ - 10)\n        val bsrot11 = bs.rotate(bslen - 11)\n        val bsrot12 = bs.rotate(bslen\
    \ - 12)\n        val bsrot13 = bs.rotate(bslen - 13)\n        val bsrot14 = bs.rotate(bslen\
    \ - 14)\n        val bsrot15 = bs.rotate(bslen - 15)\n        val bsrot16 = bs.rotate(bslen\
    \ - 16)\n        val bsrot17 = bs.rotate(bslen - 17)\n        val bsrot18 = bs.rotate(bslen\
    \ - 18)\n        val bsrot19 = bs.rotate(bslen - 19)\n        val bsrot20 = bs.rotate(bslen\
    \ - 20)\n        val bsrot21 = bs.rotate(bslen - 21)\n        val bsrot22 = bs.rotate(bslen\
    \ - 22)\n        val bsrot23 = bs.rotate(bslen - 23)\n        val bsrot24 = bs.rotate(bslen\
    \ - 24)\n        val bsrot25 = bs.rotate(bslen - 25"]
stop_tokens:
- "\n    }\n"
