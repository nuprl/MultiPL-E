language: scala
name: HumanEval_55_fib
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        for\
    \ (i <- 1l to n) {\n            val c = a + b\n            a = b\n           \
    \ b = c\n        }\n        return a\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        var\
    \ i = 0l\n        while (i < n) {\n            val c = a + b\n            a =\
    \ b\n            b = c\n            i += 1\n        }\n        return a\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n   \
    \ assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        var\
    \ i = 0l\n        while (i < n) {\n            val c = a + b\n            a =\
    \ b\n            b = c\n            i += 1\n        }\n        return a\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n   \
    \ assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        var\
    \ i = 0l\n        while (i < n) {\n            val c = a + b\n            a =\
    \ b\n            b = c\n            i += 1\n        }\n        return a\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n   \
    \ assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        var\
    \ i = 0l\n        while (i < n) {\n            val c = a + b\n            a =\
    \ b\n            b = c\n            i += 1\n        }\n        return a\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n   \
    \ assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0;\n        var b : Long =\
    \ 1;\n        var i : Long = 0;\n        while (i < n) {\n            {\n    \
    \            val c : Long = a + b;\n                a = b;\n                b\
    \ = c;\n                i = i + 1\n            }\n        };\n        return a\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) {\n            return 0\n    \
    \    }\n        if (n == 1) {\n            return 1\n        }\n        return\
    \ fib((n - 1)) + fib((n - 2))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) {\n            return 0\n    \
    \    }\n        if (n == 1) {\n            return 1\n        }\n        return\
    \ fib((n - 1)) + fib((n - 2))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        for\
    \ (i <- 1l to n) {\n            val c = a + b\n            a = b\n           \
    \ b = c\n        }\n        return a\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) return 0\n        if (n == 1)\
    \ return 1\n        var a = 0l\n        var b = 1l\n        for (i <- 2 to n.toInt)\
    \ {\n            val c = a + b\n            a = b\n            b = c\n       \
    \ }\n        return b\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        var\
    \ i = 0l\n        while (i < n) {\n            val c = a + b\n            a =\
    \ b\n            b = c\n            i += 1\n        }\n        return a\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n   \
    \ assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        var\
    \ i = 0l\n        while (i < n) {\n            val c = a + b\n            a =\
    \ b\n            b = c\n            i += 1\n        }\n        return a\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n   \
    \ assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) {\n            return 0\n    \
    \    }\n        if (n == 1) {\n            return 1\n        }\n        var a\
    \ : Long = 0\n        var b : Long = 1\n        var i : Long = 2\n        while\
    \ (i <= n) {\n            {\n                val c : Long = a + b\n          \
    \      a = b\n                b = c\n                i += 1\n            }\n \
    \       }\n        return b\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        var\
    \ i = 0l\n        while (i < n) {\n            val c = a + b\n            a =\
    \ b\n            b = c\n            i += 1\n        }\n        return a\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n   \
    \ assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            val c : Long =\
    \ a + b\n            a = b\n            b = c\n            i = i + 1\n       \
    \ }\n        return a\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0;\n        var b : Long =\
    \ 1;\n        var i : Long = 0;\n        while (i < n) {\n            {\n    \
    \            val c : Long = a + b;\n                a = b;\n                b\
    \ = c;\n                i = i + 1\n            }\n        };\n        return a\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) return 0\n        if (n == 1)\
    \ return 1\n        return fib(n - 1) + fib(n - 2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) ==\
    \ (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) return 0\n        if (n == 1)\
    \ return 1\n        return fib(n - 1) + fib(n - 2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) ==\
    \ (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        var\
    \ i = 0l\n        while (i < n) {\n            val c = a + b\n            a =\
    \ b\n            b = c\n            i += 1\n        }\n        return a\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n   \
    \ assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0;\n        var b : Long =\
    \ 1;\n        var i : Long = 0;\n        while (i < n) {\n            {\n    \
    \            val c : Long = a + b;\n                a = b;\n                b\
    \ = c;\n                i = i + 1\n            }\n        };\n        return a\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        var\
    \ i = 0l\n        while (i < n) {\n            val c = a + b\n            a =\
    \ b\n            b = c\n            i += 1\n        }\n        return a\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n   \
    \ assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) {\n            return 0\n    \
    \    }\n        if (n == 1) {\n            return 1\n        }\n        return\
    \ fib((n - 1)) + fib((n - 2))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) {\n            return 0\n    \
    \    }\n        if (n == 1) {\n            return 1\n        }\n        return\
    \ fib((n - 1)) + fib((n - 2))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            val c : Long =\
    \ a + b\n            a = b\n            b = c\n            i = i + 1\n       \
    \ }\n        return a\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        for\
    \ (i <- 1l to n) {\n            val c = a + b\n            a = b\n           \
    \ b = c\n        }\n        return a\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        var\
    \ i = 0l\n        while (i < n) {\n            val c = a + b\n            a =\
    \ b\n            b = c\n            i += 1\n        }\n        return a\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n   \
    \ assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        var\
    \ i = 0l\n        while (i < n) {\n            val c = a + b\n            a =\
    \ b\n            b = c\n            i += 1\n        }\n        return a\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n   \
    \ assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) return 0\n        if (n == 1)\
    \ return 1\n        var a = 0l\n        var b = 1l\n        for (i <- 2 to n.toInt)\
    \ {\n            val c = a + b\n            a = b\n            b = c\n       \
    \ }\n        return b\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0;\n        var b : Long =\
    \ 1;\n        var i : Long = 0;\n        while (i < n) {\n            {\n    \
    \            val c : Long = a + b;\n                a = b;\n                b\
    \ = c;\n                i = i + 1\n            }\n        };\n        return a\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0;\n        var b : Long =\
    \ 1;\n        var i : Long = 0;\n        while (i < n) {\n            {\n    \
    \            val c : Long = a + b;\n                a = b;\n                b\
    \ = c;\n                i += 1;\n            }\n        }\n        return a;\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) return 0\n        if (n == 1)\
    \ return 1\n        var a = 0l\n        var b = 1l\n        for (i <- 2 to n.toInt)\
    \ {\n            val c = a + b\n            a = b\n            b = c\n       \
    \ }\n        return b\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) return 0\n        if (n == 1)\
    \ return 1\n        var a = 0l\n        var b = 1l\n        for (i <- 2 to n.toInt)\
    \ {\n            val c = a + b\n            a = b\n            b = c\n       \
    \ }\n        return b\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        var\
    \ i = 0l\n        while (i < n) {\n            val c = a + b\n            a =\
    \ b\n            b = c\n            i += 1\n        }\n        return a\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n   \
    \ assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) {\n            return 0\n    \
    \    }\n        if (n == 1) {\n            return 1\n        }\n        return\
    \ fib((n - 1)) + fib((n - 2))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        var\
    \ i = 0l\n        while (i < n) {\n            val c = a + b\n            a =\
    \ b\n            b = c\n            i += 1\n        }\n        return a\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n   \
    \ assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        var\
    \ i = 0l\n        while (i < n) {\n            val c = a + b\n            a =\
    \ b\n            b = c\n            i += 1\n        }\n        return a\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n   \
    \ assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) {\n            0\n        } else\
    \ if (n == 1) {\n            1\n        } else {\n            fib((n - 1)) + fib((n\
    \ - 2))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) return 0\n        if (n == 1)\
    \ return 1\n        return fib(n - 1) + fib(n - 2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) ==\
    \ (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0)\n            return 0\n      \
    \  if (n == 1)\n            return 1\n        var a = 0l\n        var b = 1l\n\
    \        var i = 2l\n        while (i <= n) {\n            val c = a + b\n   \
    \         a = b\n            b = c\n            i += 1\n        }\n        return\
    \ b\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        var\
    \ i = 0l\n        while (i < n) {\n            val c = a + b\n            a =\
    \ b\n            b = c\n            i += 1\n        }\n        return a\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n   \
    \ assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) {\n            return 0\n    \
    \    }\n        if (n == 1) {\n            return 1\n        }\n        return\
    \ fib((n - 1)) + fib((n - 2))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0;\n        var b : Long =\
    \ 1;\n        var i : Long = 0;\n        while (i < n) {\n            {\n    \
    \            val c : Long = a + b;\n                a = b;\n                b\
    \ = c;\n                i = i + 1\n            }\n        };\n        return a\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) {\n            return 0\n    \
    \    }\n        if (n == 1) {\n            return 1\n        }\n        return\
    \ fib((n - 1)) + fib((n - 2))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0;\n        var b : Long =\
    \ 1;\n        var i : Long = 0;\n        while (i < n) {\n            {\n    \
    \            val c : Long = a + b;\n                a = b;\n                b\
    \ = c;\n                i = i + 1\n            }\n        };\n        return a\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        var\
    \ i = 0l\n        while (i < n) {\n            val c = a + b\n            a =\
    \ b\n            b = c\n            i += 1\n        }\n        return a\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n   \
    \ assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) {\n            return 0\n    \
    \    }\n        if (n == 1) {\n            return 1\n        }\n        var a\
    \ : Long = 0\n        var b : Long = 1\n        var i : Long = 2\n        while\
    \ (i <= n) {\n            {\n                val c : Long = a + b\n          \
    \      a = b\n                b = c\n                i += 1\n            }\n \
    \       }\n        return b\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) return 0\n        if (n == 1)\
    \ return 1\n        var a = 0l\n        var b = 1l\n        for (i <- 2 to n.toInt)\
    \ {\n            val c = a + b\n            a = b\n            b = c\n       \
    \ }\n        return b\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) {\n            return 0\n    \
    \    }\n        if (n == 1) {\n            return 1\n        }\n        return\
    \ fib((n - 1)) + fib((n - 2))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0;\n        var b : Long =\
    \ 1;\n        var i : Long = 0;\n        while (i < n) {\n            {\n    \
    \            val c : Long = a + b;\n                a = b;\n                b\
    \ = c;\n                i = i + 1\n            }\n        };\n        return a\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        var\
    \ i = 0l\n        while (i < n) {\n            val c = a + b\n            a =\
    \ b\n            b = c\n            i += 1\n        }\n        return a\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n   \
    \ assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) return 0\n        if (n == 1)\
    \ return 1\n        return fib(n - 1) + fib(n - 2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) ==\
    \ (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) return 0\n        if (n == 1)\
    \ return 1\n        return fib(n - 1) + fib(n - 2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) ==\
    \ (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) {\n            return 0\n    \
    \    }\n        if (n == 1) {\n            return 1\n        }\n        return\
    \ fib((n - 1)) + fib((n - 2))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        var\
    \ i = 0l\n        while (i < n) {\n            val c = a + b\n            a =\
    \ b\n            b = c\n            i += 1\n        }\n        return a\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n   \
    \ assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) return 0\n        if (n == 1)\
    \ return 1\n        var a = 0l\n        var b = 1l\n        for (i <- 2l to n)\
    \ {\n            val c = a + b\n            a = b\n            b = c\n       \
    \ }\n        return b\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) return 0\n        if (n == 1)\
    \ return 1\n        var a = 0l\n        var b = 1l\n        for (i <- 2l to n)\
    \ {\n            val c = a + b\n            a = b\n            b = c\n       \
    \ }\n        return b\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) return 0\n        if (n == 1)\
    \ return 1\n        return fib(n - 1) + fib(n - 2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) ==\
    \ (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) {\n            return 0\n    \
    \    }\n        var a : Long = 0\n        var b : Long = 1\n        var i : Long\
    \ = 1\n        while (i < n) {\n            {\n                val c : Long =\
    \ a + b\n                a = b\n                b = c\n                i += 1\n\
    \            }\n        }\n        return b\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) return 0\n        if (n == 1)\
    \ return 1\n        return fib(n - 1) + fib(n - 2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) ==\
    \ (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) {\n            return 0\n    \
    \    }\n        if (n == 1) {\n            return 1\n        }\n        var a\
    \ : Long = 0\n        var b : Long = 1\n        var i : Long = 2\n        while\
    \ (i <= n) {\n            {\n                val c : Long = a + b\n          \
    \      a = b\n                b = c\n                i += 1\n            }\n \
    \       }\n        return b\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0;\n        var b : Long =\
    \ 1;\n        var i : Long = 0;\n        while (i < n) {\n            {\n    \
    \            val c : Long = a + b;\n                a = b;\n                b\
    \ = c;\n                i += 1\n            }\n        };\n        return a\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        var\
    \ i = 0l\n        while (i < n) {\n            val c = a + b\n            a =\
    \ b\n            b = c\n            i += 1\n        }\n        return a\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n   \
    \ assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        def fib_iter(a : Long, b : Long, p : Long,\
    \ q : Long, count : Long) : Long = {\n            if (count == 0) b\n        \
    \    else if (count % 2 == 0) fib_iter(a, b, p * p + q * q, q * q + 2 * p * q,\
    \ count / 2)\n            else fib_iter(b * q + a * q + a * p, b * p + a * q,\
    \ p, q, count - 1)\n        }\n        fib_iter(1, 0, 0, 1, n)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0l\n        var b : Long =\
    \ 1l\n        var i : Long = 0l\n        while (i < n) {\n            {\n    \
    \            val c : Long = a + b\n                a = b\n                b =\
    \ c\n                i += 1l\n            }\n        }\n        return a\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) {\n            return 0\n    \
    \    }\n        if (n == 1) {\n            return 1\n        }\n        var a\
    \ : Long = 0\n        var b : Long = 1\n        var i : Long = 2\n        while\
    \ (i <= n) {\n            {\n                val c : Long = a + b\n          \
    \      a = b\n                b = c\n                i += 1\n            }\n \
    \       }\n        return b\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        var\
    \ i = 0l\n        while (i < n) {\n            val c = a + b\n            a =\
    \ b\n            b = c\n            i += 1\n        }\n        return a\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n   \
    \ assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        var\
    \ i = 0l\n        while (i < n) {\n            val c = a + b\n            a =\
    \ b\n            b = c\n            i += 1\n        }\n        return a\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n   \
    \ assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) return 0\n        if (n == 1)\
    \ return 1\n        var a = 0l\n        var b = 1l\n        for (i <- 2 to n.toInt)\
    \ {\n            val c = a + b\n            a = b\n            b = c\n       \
    \ }\n        return b\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) return 0\n        if (n == 1)\
    \ return 1\n        return fib(n - 1) + fib(n - 2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) ==\
    \ (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) return 0\n        if (n == 1)\
    \ return 1\n        var a = 0l\n        var b = 1l\n        for (i <- 1l until\
    \ n) {\n            val c = a + b\n            a = b\n            b = c\n    \
    \    }\n        return b\n    }\n    def main(args: Array[String]) = {\n    assert(fib((10l))\
    \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
    \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        var\
    \ i = 0l\n        while (i < n) {\n            val c = a + b\n            a =\
    \ b\n            b = c\n            i += 1\n        }\n        return a\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n   \
    \ assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) {\n            return 0\n    \
    \    }\n        if (n == 1) {\n            return 1\n        }\n        return\
    \ fib((n - 1)) + fib((n - 2))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        var\
    \ i = 0l\n        while (i < n) {\n            val c = a + b\n            a =\
    \ b\n            b = c\n            i += 1\n        }\n        return a\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n   \
    \ assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0l\n        var b : Long =\
    \ 1l\n        var i : Long = 0l\n        while (i < n) {\n            {\n    \
    \            val c : Long = a + b\n                a = b\n                b =\
    \ c\n                i += 1l\n            }\n        }\n        return a\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        var\
    \ i = 0l\n        while (i < n) {\n            val c = a + b\n            a =\
    \ b\n            b = c\n            i += 1\n        }\n        a\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0l\n        var b : Long =\
    \ 1l\n        var i : Long = 0l\n        while (i < n) {\n            {\n    \
    \            val c : Long = a + b\n                a = b\n                b =\
    \ c\n                i += 1l\n            }\n        }\n        return a\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0;\n        var b : Long =\
    \ 1;\n        var i : Long = 0;\n        while (i < n) {\n            {\n    \
    \            val c : Long = a + b;\n                a = b;\n                b\
    \ = c;\n                i = i + 1\n            }\n        };\n        return a\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0;\n        var b : Long =\
    \ 1;\n        var i : Long = 0;\n        while (i < n) {\n            {\n    \
    \            val c : Long = a + b;\n                a = b;\n                b\
    \ = c;\n                i = i + 1\n            }\n        };\n        return a\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) {\n            return 0\n    \
    \    }\n        if (n == 1) {\n            return 1\n        }\n        return\
    \ fib((n - 1)) + fib((n - 2))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        var\
    \ i = 0l\n        while (i < n) {\n            val c = a + b\n            a =\
    \ b\n            b = c\n            i += 1\n        }\n        return a\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n   \
    \ assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) {\n            return 0\n    \
    \    }\n        if (n == 1) {\n            return 1\n        }\n        var a\
    \ : Long = 0\n        var b : Long = 1\n        var i : Long = 2\n        while\
    \ (i <= n) {\n            {\n                val c : Long = a + b\n          \
    \      a = b\n                b = c\n                i += 1\n            }\n \
    \       }\n        return b\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        var\
    \ i = 0l\n        while (i < n) {\n            val c = a + b\n            a =\
    \ b\n            b = c\n            i += 1\n        }\n        return a\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n   \
    \ assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        var\
    \ i = 0l\n        while (i < n) {\n            val c = a + b\n            a =\
    \ b\n            b = c\n            i += 1\n        }\n        return a\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n   \
    \ assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        var\
    \ i = 0l\n        while (i < n) {\n            val c = a + b\n            a =\
    \ b\n            b = c\n            i += 1\n        }\n        return a\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n   \
    \ assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        var\
    \ i = 0l\n        while (i < n) {\n            val c = a + b\n            a =\
    \ b\n            b = c\n            i += 1\n        }\n        return a\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n   \
    \ assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) {\n            return 0\n    \
    \    }\n        if (n == 1) {\n            return 1\n        }\n        var a\
    \ : Long = 0\n        var b : Long = 1\n        var i : Long = 2\n        while\
    \ (i <= n) {\n            {\n                val c : Long = a + b\n          \
    \      a = b\n                b = c\n                i += 1\n            }\n \
    \       }\n        return b\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        var\
    \ i = 0l\n        while (i < n) {\n            val c = a + b\n            a =\
    \ b\n            b = c\n            i += 1\n        }\n        return a\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n   \
    \ assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) {\n            return 0\n    \
    \    }\n        if (n == 1) {\n            return 1\n        }\n        return\
    \ fib((n - 1)) + fib((n - 2))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        for\
    \ (i <- 1l to n) {\n            val c = a + b\n            a = b\n           \
    \ b = c\n        }\n        return a\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a = 0l\n        var b = 1l\n        var\
    \ i = 0l\n        while (i < n) {\n            val c = a + b\n            a =\
    \ b\n            b = c\n            i += 1\n        }\n        return a\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n   \
    \ assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0l\n        var b : Long =\
    \ 1l\n        var i : Long = 0l\n        while (i < n) {\n            {\n    \
    \            val c : Long = a + b\n                a = b\n                b =\
    \ c\n                i += 1l\n            }\n        }\n        return a\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n\
    \    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l))\
    \ == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        var a : Long = 0\n        var b : Long = 1\n\
    \        var i : Long = 0\n        while (i < n) {\n            {\n          \
    \      val c : Long = a + b\n                a = b\n                b = c\n  \
    \              i += 1\n            }\n        }\n        return a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l))\
    \ == (1l));\n    assert(fib((8l)) == (21l));\n    assert(fib((11l)) == (89l));\n\
    \    assert(fib((12l)) == (144l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n\
    \    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def\
    \ fib(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else fib(n - 1) + fib(n - 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib((10l)) == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l))\
    \ == (21l));\n    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793232
