name: HumanEval_19_sort_numbers
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
  \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
  \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
  one three five\")\n    def sortNumbers(numbers : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\"\
  )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
  \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
  \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero four\
  \ five seven eight nine\")));\n    assert(sortNumbers((\"six five four three two\
  \ one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n}\n"
completions: ["        val nums = numbers.split(\" \").map(x => x match {\n      \
    \      case \"zero\" => 0\n            case \"one\" => 1\n            case \"\
    two\" => 2\n            case \"three\" => 3\n            case \"four\" => 4\n\
    \            case \"five\" => 5\n            case \"six\" => 6\n            case\
    \ \"seven\" => 7\n            case \"eight\" => 8\n            case \"nine\" =>\
    \ 9\n        })\n        nums.sorted.mkString(\" \")", "        val nums = numbers.split(\"\
    \ \").map(x => x match {\n            case \"zero\" => 0\n            case \"\
    one\" => 1\n            case \"two\" => 2\n            case \"three\" => 3\n \
    \           case \"four\" => 4\n            case \"five\" => 5\n            case\
    \ \"six\" => 6\n            case \"seven\" => 7\n            case \"eight\" =>\
    \ 8\n            case \"nine\" => 9\n        })\n        val sorted = nums.sorted\n\
    \        val result = sorted.map(x => x match {\n            case 0 => \"zero\"\
    \n            case 1 => \"one\"\n            case 2 => \"two\"\n            case\
    \ 3 => \"three\"\n            case 4 => \"four\"\n            case 5 => \"five\"\
    \n            case 6 => \"six\"\n            case 7 => \"seven\"\n           \
    \ case 8 => \"eight\"\n            case 9 => \"nine\"\n        })\n        result.mkString(\"\
    \ \")", "        val nums = numbers.split(\" \").map(x => x match {\n        \
    \    case \"zero\" => 0\n            case \"one\" => 1\n            case \"two\"\
    \ => 2\n            case \"three\" => 3\n            case \"four\" => 4\n    \
    \        case \"five\" => 5\n            case \"six\" => 6\n            case \"\
    seven\" => 7\n            case \"eight\" => 8\n            case \"nine\" => 9\n\
    \        })\n        nums.sorted.mkString(\" \")", "        val nums = numbers.split(\"\
    \ \").map(x => x match {\n            case \"zero\" => 0\n            case \"\
    one\" => 1\n            case \"two\" => 2\n            case \"three\" => 3\n \
    \           case \"four\" => 4\n            case \"five\" => 5\n            case\
    \ \"six\" => 6\n            case \"seven\" => 7\n            case \"eight\" =>\
    \ 8\n            case \"nine\" => 9\n        })\n        val sorted = nums.sorted\n\
    \        val result = sorted.map(x => x match {\n            case 0 => \"zero\"\
    \n            case 1 => \"one\"\n            case 2 => \"two\"\n            case\
    \ 3 => \"three\"\n            case 4 => \"four\"\n            case 5 => \"five\"\
    \n            case 6 => \"six\"\n            case 7 => \"seven\"\n           \
    \ case 8 => \"eight\"\n            case 9 => \"nine\"\n        })\n        result.mkString(\"\
    \ \")", "        var nums = numbers.split(\" \").map(x => x match {\n        \
    \    case \"zero\" => 0\n            case \"one\" => 1\n            case \"two\"\
    \ => 2\n            case \"three\" => 3\n            case \"four\" => 4\n    \
    \        case \"five\" => 5\n            case \"six\" => 6\n            case \"\
    seven\" => 7\n            case \"eight\" => 8\n            case \"nine\" => 9\n\
    \        })\n        var sorted = nums.sorted\n        var result = sorted.map(x\
    \ => x match {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n\
    \            case 2 => \"two\"\n            case 3 => \"three\"\n            case\
    \ 4 => \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\
    \n            case 7 => \"seven\"\n            case 8 => \"eight\"\n         \
    \   case 9 => \"nine\"\n        })\n        return result.mkString(\" \")", " \
    \       val nums = numbers.split(\" \").map(x => x match {\n            case \"\
    zero\" => 0\n            case \"one\" => 1\n            case \"two\" => 2\n  \
    \          case \"three\" => 3\n            case \"four\" => 4\n            case\
    \ \"five\" => 5\n            case \"six\" => 6\n            case \"seven\" =>\
    \ 7\n            case \"eight\" => 8\n            case \"nine\" => 9\n       \
    \ })\n        val sorted = nums.sorted\n        val result = sorted.map(x => x\
    \ match {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n   \
    \         case 2 => \"two\"\n            case 3 => \"three\"\n            case\
    \ 4 => \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\
    \n            case 7 => \"seven\"\n            case 8 => \"eight\"\n         \
    \   case 9 => \"nine\"\n        })\n        result.mkString(\" \")", "       \
    \ val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numeral = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        numeral.mkString(\" \")", "        val nums\
    \ = numbers.split(\" \").map(x => x match {\n            case \"zero\" => 0\n\
    \            case \"one\" => 1\n            case \"two\" => 2\n            case\
    \ \"three\" => 3\n            case \"four\" => 4\n            case \"five\" =>\
    \ 5\n            case \"six\" => 6\n            case \"seven\" => 7\n        \
    \    case \"eight\" => 8\n            case \"nine\" => 9\n        })\n       \
    \ val sorted = nums.sorted\n        val words = sorted.map(x => x match {\n  \
    \          case 0 => \"zero\"\n            case 1 => \"one\"\n            case\
    \ 2 => \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\
    \n            case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        })\n        words.mkString(\" \")", "        val nums = numbers.split(\"\
    \ \").map(x => x match {\n            case \"zero\" => 0\n            case \"\
    one\" => 1\n            case \"two\" => 2\n            case \"three\" => 3\n \
    \           case \"four\" => 4\n            case \"five\" => 5\n            case\
    \ \"six\" => 6\n            case \"seven\" => 7\n            case \"eight\" =>\
    \ 8\n            case \"nine\" => 9\n        })\n        nums.sorted.mkString(\"\
    \ \")", "        val nums = numbers.split(\" \").map(x => x match {\n        \
    \    case \"zero\" => 0\n            case \"one\" => 1\n            case \"two\"\
    \ => 2\n            case \"three\" => 3\n            case \"four\" => 4\n    \
    \        case \"five\" => 5\n            case \"six\" => 6\n            case \"\
    seven\" => 7\n            case \"eight\" => 8\n            case \"nine\" => 9\n\
    \        })\n        val sorted = nums.sorted\n        val numsToWords = Map(0\
    \ -> \"zero\", 1 -> \"one\", 2 -> \"two\", 3 -> \"three\", 4 -> \"four\", 5 ->\
    \ \"five\", 6 -> \"six\", 7 -> \"seven\", 8 -> \"eight\", 9 -> \"nine\")\n   \
    \     sorted.map(x => numsToWords(x)).mkString(\" \")", "        val nums = numbers.split(\"\
    \ \").map(x => x match {\n            case \"zero\" => 0\n            case \"\
    one\" => 1\n            case \"two\" => 2\n            case \"three\" => 3\n \
    \           case \"four\" => 4\n            case \"five\" => 5\n            case\
    \ \"six\" => 6\n            case \"seven\" => 7\n            case \"eight\" =>\
    \ 8\n            case \"nine\" => 9\n        })\n        val sorted = nums.sorted\n\
    \        val words = sorted.map(x => x match {\n            case 0 => \"zero\"\
    \n            case 1 => \"one\"\n            case 2 => \"two\"\n            case\
    \ 3 => \"three\"\n            case 4 => \"four\"\n            case 5 => \"five\"\
    \n            case 6 => \"six\"\n            case 7 => \"seven\"\n           \
    \ case 8 => \"eight\"\n            case 9 => \"nine\"\n        })\n        words.mkString(\"\
    \ \")", "        val nums = numbers.split(\" \").map(_.toInt).sorted\n       \
    \ nums.mkString(\" \")", "        val nums = numbers.split(\" \").map(x => x match\
    \ {\n            case \"zero\" => 0\n            case \"one\" => 1\n         \
    \   case \"two\" => 2\n            case \"three\" => 3\n            case \"four\"\
    \ => 4\n            case \"five\" => 5\n            case \"six\" => 6\n      \
    \      case \"seven\" => 7\n            case \"eight\" => 8\n            case\
    \ \"nine\" => 9\n        })\n        val sorted = nums.sorted\n        val words\
    \ = sorted.map(x => x match {\n            case 0 => \"zero\"\n            case\
    \ 1 => \"one\"\n            case 2 => \"two\"\n            case 3 => \"three\"\
    \n            case 4 => \"four\"\n            case 5 => \"five\"\n           \
    \ case 6 => \"six\"\n            case 7 => \"seven\"\n            case 8 => \"\
    eight\"\n            case 9 => \"nine\"\n        })\n        words.mkString(\"\
    \ \")", "        val nums = numbers.split(\" \").map(x => x match {\n        \
    \    case \"zero\" => 0\n            case \"one\" => 1\n            case \"two\"\
    \ => 2\n            case \"three\" => 3\n            case \"four\" => 4\n    \
    \        case \"five\" => 5\n            case \"six\" => 6\n            case \"\
    seven\" => 7\n            case \"eight\" => 8\n            case \"nine\" => 9\n\
    \        })\n        val sorted = nums.sorted\n        sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        }).mkString(\" \")", "        val nums = numbers.split(\"\
    \ \").map(x => x match {\n            case \"zero\" => 0\n            case \"\
    one\" => 1\n            case \"two\" => 2\n            case \"three\" => 3\n \
    \           case \"four\" => 4\n            case \"five\" => 5\n            case\
    \ \"six\" => 6\n            case \"seven\" => 7\n            case \"eight\" =>\
    \ 8\n            case \"nine\" => 9\n        })\n        val sorted = nums.sorted\n\
    \        val words = sorted.map(x => x match {\n            case 0 => \"zero\"\
    \n            case 1 => \"one\"\n            case 2 => \"two\"\n            case\
    \ 3 => \"three\"\n            case 4 => \"four\"\n            case 5 => \"five\"\
    \n            case 6 => \"six\"\n            case 7 => \"seven\"\n           \
    \ case 8 => \"eight\"\n            case 9 => \"nine\"\n        })\n        words.mkString(\"\
    \ \")", "        val nums = numbers.split(\" \").map(x => x match {\n        \
    \    case \"zero\" => 0\n            case \"one\" => 1\n            case \"two\"\
    \ => 2\n            case \"three\" => 3\n            case \"four\" => 4\n    \
    \        case \"five\" => 5\n            case \"six\" => 6\n            case \"\
    seven\" => 7\n            case \"eight\" => 8\n            case \"nine\" => 9\n\
    \        })\n        nums.sorted.mkString(\" \")", "        val nums = numbers.split(\"\
    \ \").map(x => x match {\n            case \"zero\" => 0\n            case \"\
    one\" => 1\n            case \"two\" => 2\n            case \"three\" => 3\n \
    \           case \"four\" => 4\n            case \"five\" => 5\n            case\
    \ \"six\" => 6\n            case \"seven\" => 7\n            case \"eight\" =>\
    \ 8\n            case \"nine\" => 9\n        })\n        val sorted = nums.sorted\n\
    \        val result = sorted.map(x => x match {\n            case 0 => \"zero\"\
    \n            case 1 => \"one\"\n            case 2 => \"two\"\n            case\
    \ 3 => \"three\"\n            case 4 => \"four\"\n            case 5 => \"five\"\
    \n            case 6 => \"six\"\n            case 7 => \"seven\"\n           \
    \ case 8 => \"eight\"\n            case 9 => \"nine\"\n        })\n        result.mkString(\"\
    \ \")", "        val nums = numbers.split(\" \").map(x => x match {\n        \
    \    case \"zero\" => 0\n            case \"one\" => 1\n            case \"two\"\
    \ => 2\n            case \"three\" => 3\n            case \"four\" => 4\n    \
    \        case \"five\" => 5\n            case \"six\" => 6\n            case \"\
    seven\" => 7\n            case \"eight\" => 8\n            case \"nine\" => 9\n\
    \        })\n        val sorted = nums.sorted\n        val words = sorted.map(x\
    \ => x match {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n\
    \            case 2 => \"two\"\n            case 3 => \"three\"\n            case\
    \ 4 => \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\
    \n            case 7 => \"seven\"\n            case 8 => \"eight\"\n         \
    \   case 9 => \"nine\"\n        })\n        words.mkString(\" \")", "        val\
    \ nums = numbers.split(\" \").map(x => x match {\n            case \"zero\" =>\
    \ 0\n            case \"one\" => 1\n            case \"two\" => 2\n          \
    \  case \"three\" => 3\n            case \"four\" => 4\n            case \"five\"\
    \ => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n     \
    \       case \"eight\" => 8\n            case \"nine\" => 9\n        })\n    \
    \    val sorted = nums.sorted\n        val res = sorted.map(x => x match {\n \
    \           case 0 => \"zero\"\n            case 1 => \"one\"\n            case\
    \ 2 => \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\
    \n            case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        })\n        res.mkString(\" \")", "        val nums = numbers.split(\"\
    \ \").map(x => x match {\n            case \"zero\" => 0\n            case \"\
    one\" => 1\n            case \"two\" => 2\n            case \"three\" => 3\n \
    \           case \"four\" => 4\n            case \"five\" => 5\n            case\
    \ \"six\" => 6\n            case \"seven\" => 7\n            case \"eight\" =>\
    \ 8\n            case \"nine\" => 9\n        })\n        val sorted = nums.sorted\n\
    \        val result = sorted.map(x => x match {\n            case 0 => \"zero\"\
    \n            case 1 => \"one\"\n            case 2 => \"two\"\n            case\
    \ 3 => \"three\"\n            case 4 => \"four\"\n            case 5 => \"five\"\
    \n            case 6 => \"six\"\n            case 7 => \"seven\"\n           \
    \ case 8 => \"eight\"\n            case 9 => \"nine\"\n        })\n        result.mkString(\"\
    \ \")"]
stop_tokens:
- "\n    }\n"
