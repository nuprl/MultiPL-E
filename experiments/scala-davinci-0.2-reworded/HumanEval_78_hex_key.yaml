name: HumanEval_78_hex_key
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You have been tasked to write a function that receives \n    // a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n    // digits that are\
  \ primes (prime number, or a prime, is a natural number \n    // greater than 1\
  \ that is not a product of two smaller natural numbers).\n    // Hexadecimal digits\
  \ are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are\
  \ 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following\
  \ digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you\
  \ may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F\
  \ are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n\
  \    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n\
  \    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>>\
  \ hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\"))\
  \ == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
  )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
  )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
  \    }\n\n}\n"
completions: ["        val hex = \"0123456789ABCDEF\"\n        val primes = List(2,\
    \ 3, 5, 7, 11, 13)\n        num.map(x => hex.indexOf(x)).filter(x => primes.contains(x)).length",
  "        val hex = Map(\n            '0' -> 0,\n            '1' -> 1,\n        \
    \    '2' -> 2,\n            '3' -> 3,\n            '4' -> 4,\n            '5'\
    \ -> 5,\n            '6' -> 6,\n            '7' -> 7,\n            '8' -> 8,\n\
    \            '9' -> 9,\n            'A' -> 10,\n            'B' -> 11,\n     \
    \       'C' -> 12,\n            'D' -> 13,\n            'E' -> 14,\n         \
    \   'F' -> 15\n        )\n        val primes = List(2, 3, 5, 7, 11, 13)\n    \
    \    num.map(hex(_)).filter(primes.contains(_)).size", "        val primes = List(2,\
    \ 3, 5, 7, 11, 13)\n        num.toList.map(x => x.toString.toInt).filter(x =>\
    \ primes.contains(x)).length", "        val hex = \"0123456789ABCDEF\"\n     \
    \   val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).size", "        val hex = \"0123456789ABCDEF\"\n    \
    \    val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(x => hex.indexOf(x)).filter(x\
    \ => primes.contains(x)).length", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val primes = List(2, 3, 5, 7, 11, 13)\n        var count = 0\n        for\
    \ (i <- 0 until num.length) {\n            if (primes.contains(hex.indexOf(num(i))))\
    \ count += 1\n        }\n        count", "        val hex = \"0123456789ABCDEF\"\
    \n        val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).length", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).length", "        // Your code here\n        0", "  \
    \      val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(x => hex.indexOf(x)).filter(x => primes.contains(x)).size",
  "        val hex = Map(\"0\" -> 0, \"1\" -> 1, \"2\" -> 2, \"3\" -> 3, \"4\" ->\
    \ 4, \"5\" -> 5, \"6\" -> 6, \"7\" -> 7, \"8\" -> 8, \"9\" -> 9, \"A\" -> 10,\
    \ \"B\" -> 11, \"C\" -> 12, \"D\" -> 13, \"E\" -> 14, \"F\" -> 15)\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13)\n        num.map(x => hex(x.toString)).filter(x\
    \ => primes.contains(x)).length", "        val hex = Map(\n            '0' ->\
    \ 0,\n            '1' -> 1,\n            '2' -> 2,\n            '3' -> 3,\n  \
    \          '4' -> 4,\n            '5' -> 5,\n            '6' -> 6,\n         \
    \   '7' -> 7,\n            '8' -> 8,\n            '9' -> 9,\n            'A' ->\
    \ 10,\n            'B' -> 11,\n            'C' -> 12,\n            'D' -> 13,\n\
    \            'E' -> 14,\n            'F' -> 15\n        )\n        val primes\
    \ = List(2, 3, 5, 7, 11, 13)\n        num.map(hex(_)).count(primes.contains(_))",
  "        val primes = List(2, 3, 5, 7, 11, 13)\n        val hex = \"0123456789ABCDEF\"\
    \n        num.map(x => hex.indexOf(x)).filter(x => primes.contains(x)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(x => hex.indexOf(x)).filter(x => primes.contains(x)).size",
  "        val hexDigits = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5,\
    \ 7, 11, 13)\n        num.toList.map(c => hexDigits.indexOf(c)).filter(primes.contains(_)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        val hexToInt = hex.zipWithIndex.toMap\n        val intToHex = hexToInt.map(_.swap)\n\
    \        val ints = num.map(hexToInt(_))\n        val hexs = ints.map(intToHex(_))\n\
    \        val hexPrimes = hexs.filter(primes.contains(_))\n        hexPrimes.length",
  "        val hexDigits = Array(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\",\
    \ \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13)\n        var count = 0l\n        for (i <-\
    \ 0 until num.length) {\n            val digit = num(i).toString\n           \
    \ if (hexDigits.contains(digit)) {\n                if (primes.contains(hexDigits.indexOf(digit)))\
    \ count += 1\n            }\n        }\n        count", "        var count = 0\n\
    \        for (i <- 0 until num.length) {\n            val c = num(i)\n       \
    \     if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\
    \ count += 1\n        }\n        count", "        val hexDigits = Array(\"0\"\
    , \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\"\
    , \"C\", \"D\", \"E\", \"F\")\n        val primeHexDigits = Array(\"2\", \"3\"\
    , \"5\", \"7\", \"B\", \"D\")\n        val hexDigitsSet = hexDigits.toSet\n  \
    \      val primeHexDigitsSet = primeHexDigits.toSet\n        val numSet = num.toSet\n\
    \        val intersection = numSet.intersect(primeHexDigitsSet)\n        intersection.size"]
stop_tokens:
- "\n    }\n"
