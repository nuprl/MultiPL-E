name: HumanEval_78_hex_key
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You have been tasked to write a function that receives \n    // a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n    // digits that are\
  \ primes (prime number, or a prime, is a natural number \n    // greater than 1\
  \ that is not a product of two smaller natural numbers).\n    // Hexadecimal digits\
  \ are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are\
  \ 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following\
  \ digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you\
  \ may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F\
  \ are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n\
  \    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n\
  \    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>>\
  \ hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\"))\
  \ == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
  )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
  )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
  \    }\n\n}\n"
completions: ["        val hex = \"0123456789ABCDEF\"\n        val primes = List(2,\
    \ 3, 5, 7, 11, 13)\n        num.map(x => hex.indexOf(x)).filter(x => primes.contains(x)).length",
  "        val hex = Map(\n            '0' -> 0,\n            '1' -> 1,\n        \
    \    '2' -> 2,\n            '3' -> 3,\n            '4' -> 4,\n            '5'\
    \ -> 5,\n            '6' -> 6,\n            '7' -> 7,\n            '8' -> 8,\n\
    \            '9' -> 9,\n            'A' -> 10,\n            'B' -> 11,\n     \
    \       'C' -> 12,\n            'D' -> 13,\n            'E' -> 14,\n         \
    \   'F' -> 15\n        )\n        val primes = List(2, 3, 5, 7, 11, 13)\n    \
    \    num.map(hex(_)).filter(primes.contains(_)).size", "        val primes = List(2,\
    \ 3, 5, 7, 11, 13)\n        num.toList.map(x => x.toString.toInt).filter(x =>\
    \ primes.contains(x)).length", "        val hex = \"0123456789ABCDEF\"\n     \
    \   val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).size", "        val hex = \"0123456789ABCDEF\"\n    \
    \    val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(x => hex.indexOf(x)).filter(x\
    \ => primes.contains(x)).length", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val primes = List(2, 3, 5, 7, 11, 13)\n        var count = 0\n        for\
    \ (i <- 0 until num.length) {\n            if (primes.contains(hex.indexOf(num(i))))\
    \ count += 1\n        }\n        count", "        val hex = \"0123456789ABCDEF\"\
    \n        val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).length", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).length", "        // Your code here\n        0", "  \
    \      val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(x => hex.indexOf(x)).filter(x => primes.contains(x)).size",
  "        val hex = Map(\"0\" -> 0, \"1\" -> 1, \"2\" -> 2, \"3\" -> 3, \"4\" ->\
    \ 4, \"5\" -> 5, \"6\" -> 6, \"7\" -> 7, \"8\" -> 8, \"9\" -> 9, \"A\" -> 10,\
    \ \"B\" -> 11, \"C\" -> 12, \"D\" -> 13, \"E\" -> 14, \"F\" -> 15)\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13)\n        num.map(x => hex(x.toString)).filter(x\
    \ => primes.contains(x)).length", "        val hex = Map(\n            '0' ->\
    \ 0,\n            '1' -> 1,\n            '2' -> 2,\n            '3' -> 3,\n  \
    \          '4' -> 4,\n            '5' -> 5,\n            '6' -> 6,\n         \
    \   '7' -> 7,\n            '8' -> 8,\n            '9' -> 9,\n            'A' ->\
    \ 10,\n            'B' -> 11,\n            'C' -> 12,\n            'D' -> 13,\n\
    \            'E' -> 14,\n            'F' -> 15\n        )\n        val primes\
    \ = List(2, 3, 5, 7, 11, 13)\n        num.map(hex(_)).count(primes.contains(_))",
  "        val primes = List(2, 3, 5, 7, 11, 13)\n        val hex = \"0123456789ABCDEF\"\
    \n        num.map(x => hex.indexOf(x)).filter(x => primes.contains(x)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(x => hex.indexOf(x)).filter(x => primes.contains(x)).size",
  "        val hexDigits = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5,\
    \ 7, 11, 13)\n        num.toList.map(c => hexDigits.indexOf(c)).filter(primes.contains(_)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        val hexToInt = hex.zipWithIndex.toMap\n        val intToHex = hexToInt.map(_.swap)\n\
    \        val ints = num.map(hexToInt(_))\n        val hexs = ints.map(intToHex(_))\n\
    \        val hexPrimes = hexs.filter(primes.contains(_))\n        hexPrimes.length",
  "        val hexDigits = Array(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\",\
    \ \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13)\n        var count = 0l\n        for (i <-\
    \ 0 until num.length) {\n            val digit = num(i).toString\n           \
    \ if (hexDigits.contains(digit)) {\n                if (primes.contains(hexDigits.indexOf(digit)))\
    \ count += 1\n            }\n        }\n        count", "        var count = 0\n\
    \        for (i <- 0 until num.length) {\n            val c = num(i)\n       \
    \     if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\
    \ count += 1\n        }\n        count", "        val hexDigits = Array(\"0\"\
    , \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\"\
    , \"C\", \"D\", \"E\", \"F\")\n        val primeHexDigits = Array(\"2\", \"3\"\
    , \"5\", \"7\", \"B\", \"D\")\n        val hexDigitsSet = hexDigits.toSet\n  \
    \      val primeHexDigitsSet = primeHexDigits.toSet\n        val numSet = num.toSet\n\
    \        val intersection = numSet.intersect(primeHexDigitsSet)\n        intersection.size",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).size",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).size",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        var count = 0\n        for (i <- 0 until num.length) {\n            val\
    \ c = num(i)\n            if (c == '2' || c == '3' || c == '5' || c == '7' ||\
    \ c == 'B' || c == 'D') count += 1\n        }\n        count", "        val primes\
    \ = List(2, 3, 5, 7, 11, 13)\n        num.map(x => x.toString.toInt).filter(x\
    \ => primes.contains(x)).length", "        val primes = List(2, 3, 5, 7, 11, 13)\n\
    \        val hex = List(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"\
    , \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\")\n        val hexToDec\
    \ = hex.zipWithIndex.toMap\n        num.map(c => hexToDec(c.toString)).filter(i\
    \ => primes.contains(i)).length", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val primes = Set(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).length", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val primes = List(2, 3, 5, 7, 11, 13)\n        num.toList.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).length", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).length", "        val hexDigits = \"0123456789ABCDEF\"\
    \n        val primes = List(2, 3, 5, 7, 11, 13)\n        num.toList.map(x => hexDigits.indexOf(x)).filter(x\
    \ => primes.contains(x)).length", "        val hexDigits = Array(\"0\", \"1\"\
    , \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\"\
    , \"D\", \"E\", \"F\")\n        val primes = Array(2, 3, 5, 7, 11, 13)\n     \
    \   val hexDigitsMap = new HashMap[String, Int]()\n        for (i <- 0 until hexDigits.length)\
    \ hexDigitsMap += (hexDigits(i) -> i)\n        var count = 0\n        for (i <-\
    \ 0 until num.length) {\n            val digit = num(i).toString\n           \
    \ if (primes.contains(hexDigitsMap(digit))) count += 1\n        }\n        count",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val primes = Array(2, 3, 5, 7, 11, 13)\n        val hex = Array('0', '1',\
    \ '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F')\n    \
    \    val map = new HashMap[Char, Int]\n        for (i <- 0 until hex.length) map(hex(i))\
    \ = i\n        num.map(map(_)).filter(primes.contains(_)).length", "        val\
    \ hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11, 13)\n\
    \        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val primes = Set(2, 3, 5, 7, 11, 13)\n        num.map(c => c.toInt - 48).filter(i\
    \ => primes.contains(i)).size", "        val hex = \"0123456789ABCDEF\"\n    \
    \    val prime = \"2357BDF\"\n        num.filter(c => prime.contains(c)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  '        num.map(x => x.toInt).filter(x => x == 2 || x == 3 || x == 5 || x == 7
    || x == 11 || x == 13).length', "        val hex = \"0123456789ABCDEF\"\n    \
    \    val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(x => hex.indexOf(x)).filter(x\
    \ => primes.contains(x)).size", "        val hex = \"0123456789ABCDEF\"\n    \
    \    val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(x => hex.indexOf(x)).filter(x\
    \ => primes.contains(x)).length", "        val hex = Map(\n            '0' ->\
    \ 0,\n            '1' -> 1,\n            '2' -> 2,\n            '3' -> 3,\n  \
    \          '4' -> 4,\n            '5' -> 5,\n            '6' -> 6,\n         \
    \   '7' -> 7,\n            '8' -> 8,\n            '9' -> 9,\n            'A' ->\
    \ 10,\n            'B' -> 11,\n            'C' -> 12,\n            'D' -> 13,\n\
    \            'E' -> 14,\n            'F' -> 15\n        )\n        val primes\
    \ = List(2, 3, 5, 7, 11, 13)\n        num.map(hex(_)).filter(primes.contains(_)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(x => hex.indexOf(x)).filter(x => primes.contains(x)).length",
  "        val primes = List(2, 3, 5, 7, 11, 13)\n        val hex = \"0123456789ABCDEF\"\
    \n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).size",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val hex = Map(\"0\" -> 0, \"1\" -> 1, \"2\" -> 2, \"3\" -> 3, \"4\" ->\
    \ 4, \"5\" -> 5, \"6\" -> 6, \"7\" -> 7, \"8\" -> 8, \"9\" -> 9, \"A\" -> 10,\
    \ \"B\" -> 11, \"C\" -> 12, \"D\" -> 13, \"E\" -> 14, \"F\" -> 15)\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13)\n        num.map(x => hex(x.toString)).filter(x\
    \ => primes.contains(x)).size", "        val primes = List(2, 3, 5, 7, 11, 13)\n\
    \        val hex = Map(\n            '0' -> 0,\n            '1' -> 1,\n      \
    \      '2' -> 2,\n            '3' -> 3,\n            '4' -> 4,\n            '5'\
    \ -> 5,\n            '6' -> 6,\n            '7' -> 7,\n            '8' -> 8,\n\
    \            '9' -> 9,\n            'A' -> 10,\n            'B' -> 11,\n     \
    \       'C' -> 12,\n            'D' -> 13,\n            'E' -> 14,\n         \
    \   'F' -> 15\n        )\n        num.map(hex(_)).count(primes.contains(_))",
  "        val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(x => x.toString.toInt(16)).filter(x\
    \ => primes.contains(x)).length", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).size", "        var cnt = 0\n        for (i <- 0 until\
    \ num.length) {\n            val c = num(i)\n            if (c == '2' || c ==\
    \ '3' || c == '5' || c == '7' || c == 'B' || c == 'D') cnt += 1\n        }\n \
    \       cnt", "        val hex = Map(\n            '0' -> 0,\n            '1'\
    \ -> 1,\n            '2' -> 2,\n            '3' -> 3,\n            '4' -> 4,\n\
    \            '5' -> 5,\n            '6' -> 6,\n            '7' -> 7,\n       \
    \     '8' -> 8,\n            '9' -> 9,\n            'A' -> 10,\n            'B'\
    \ -> 11,\n            'C' -> 12,\n            'D' -> 13,\n            'E' -> 14,\n\
    \            'F' -> 15\n        )\n        val primes = List(2, 3, 5, 7, 11, 13)\n\
    \        num.map(hex(_)).filter(primes.contains(_)).size", "        val hex =\
    \ \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11, 13)\n      \
    \  num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length", "   \
    \     val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(x => primes.contains(x)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val primes = List(2, 3, 5, 7, 11, 13)\n        num.toList.map(x => x.toString.toInt).filter(x\
    \ => primes.contains(x)).length", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(x => hex.indexOf(x)).filter(x\
    \ => primes.contains(x)).length", "        val primes = List(2, 3, 5, 7, 11, 13)\n\
    \        num.map(x => x.toInt).filter(x => primes.contains(x)).length", "    \
    \    val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(x => hex.indexOf(x)).filter(x => primes.contains(x)).length",
  "        val hex = Map(\"0\" -> 0, \"1\" -> 1, \"2\" -> 2, \"3\" -> 3, \"4\" ->\
    \ 4, \"5\" -> 5, \"6\" -> 6, \"7\" -> 7, \"8\" -> 8, \"9\" -> 9, \"A\" -> 10,\
    \ \"B\" -> 11, \"C\" -> 12, \"D\" -> 13, \"E\" -> 14, \"F\" -> 15)\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13)\n        num.map(x => hex(x.toString)).filter(x\
    \ => primes.contains(x)).length", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).length", "        var result = 0l\n        for (i <-\
    \ 0 until num.length) {\n            val c = num(i)\n            if (c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') result += 1\n \
    \       }\n        result", "        val hex = \"0123456789ABCDEF\"\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).length", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).size", "        val hexDigits = \"0123456789ABCDEF\"\n\
    \        val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hexDigits.indexOf(c)).filter(i\
    \ => primes.contains(i)).length", "        val primes = List(2, 3, 5, 7, 11, 13)\n\
    \        val hex = Map(\"A\" -> 10, \"B\" -> 11, \"C\" -> 12, \"D\" -> 13, \"\
    E\" -> 14, \"F\" -> 15)\n        num.map(x => if (hex.contains(x.toString)) hex(x.toString)\
    \ else x.toString.toInt).filter(x => primes.contains(x)).length", "        val\
    \ primes = Array(2, 3, 5, 7, 11, 13)\n        val hex = Array('0', '1', '2', '3',\
    \ '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F')\n        val hexToInt\
    \ = hex.zipWithIndex.toMap\n        num.map(x => hexToInt(x)).filter(x => primes.contains(x)).size",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(x => hex.indexOf(x)).filter(x => primes.contains(x)).size",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.toList.map(x => hex.indexOf(x)).filter(x => primes.contains(x)).length",
  "        val primes = List(2, 3, 5, 7, 11, 13)\n        val hex = \"0123456789ABCDEF\"\
    \n        num.filter(c => primes.contains(hex.indexOf(c))).length", "        val\
    \ hexDigits = Array(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"\
    8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\")\n        val primeDigits\
    \ = Array(\"2\", \"3\", \"5\", \"7\", \"B\", \"D\")\n        val hexDigitsSet\
    \ = hexDigits.toSet\n        val primeDigitsSet = primeDigits.toSet\n        if\
    \ (num.isEmpty) return 0\n        var count = 0\n        for (i <- 0 until num.length)\
    \ {\n            if (primeDigitsSet.contains(num(i).toString)) count += 1\n  \
    \      }\n        count", "        val hex = \"0123456789ABCDEF\"\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).size", "        val primes = List(2, 3, 5, 7, 11, 13)\n\
    \        val hex = \"0123456789ABCDEF\"\n        val map = hex.zipWithIndex.toMap\n\
    \        num.map(c => map(c)).filter(primes.contains(_)).length", "        val\
    \ hexDigits = Array(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"\
    8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\")\n        val primeDigits\
    \ = Array(2, 3, 5, 7, 11, 13)\n        val hexDigitsMap = hexDigits.zipWithIndex.toMap\n\
    \        val primeDigitsMap = primeDigits.zipWithIndex.toMap\n        num.map(x\
    \ => hexDigitsMap(x.toString)).map(x => primeDigitsMap.contains(x)).count(x =>\
    \ x)", "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3,\
    \ 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).size",
  "        val hex = Array(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"\
    , \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\")\n        val primes\
    \ = Array(2, 3, 5, 7, 11, 13)\n        var count = 0l\n        for (i <- 0 until\
    \ num.length) {\n            val c = num(i).toString\n            if (hex.contains(c))\
    \ {\n                val n = hex.indexOf(c)\n                if (primes.contains(n))\
    \ count += 1\n            }\n        }\n        count", "        val hexDigits\
    \ = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11, 13)\n    \
    \    num.map(c => hexDigits.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val hex = num.toUpperCase\n        val primes = Set(2, 3, 5, 7, 11, 13)\n\
    \        hex.map(x => x.toInt - '0'.toInt).filter(x => x >= 10).map(x => x - 7).filter(x\
    \ => primes.contains(x)).size", "        val hex = \"0123456789ABCDEF\"\n    \
    \    val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).length", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(primes.contains(_)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).size",
  "        val hex = Map(\"0\" -> 0, \"1\" -> 1, \"2\" -> 2, \"3\" -> 3, \"4\" ->\
    \ 4, \"5\" -> 5, \"6\" -> 6, \"7\" -> 7, \"8\" -> 8, \"9\" -> 9, \"A\" -> 10,\
    \ \"B\" -> 11, \"C\" -> 12, \"D\" -> 13, \"E\" -> 14, \"F\" -> 15)\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex(c.toString)).filter(x\
    \ => primes.contains(x)).length", "        val hex = Array(\"0\", \"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\"\
    , \"E\", \"F\")\n        val primes = Array(2, 3, 5, 7, 11, 13)\n        val hexToInt\
    \ = hex.zipWithIndex.toMap\n        val intToHex = hexToInt.map(_.swap)\n    \
    \    val digits = num.map(hexToInt(_)).toArray\n        val sum = digits.map(intToHex(_)).mkString.toLong\n\
    \        var count = 0\n        for (i <- 0 until primes.length) {\n         \
    \   if (sum % primes(i) == 0) count += 1\n        }\n        count", "       \
    \ val hex = \"0123456789ABCDEF\"\n        val primes = Array(2, 3, 5, 7, 11, 13)\n\
    \        var count = 0\n        for (i <- 0 until num.length) {\n            val\
    \ n = hex.indexOf(num(i))\n            if (primes.contains(n)) count += 1\n  \
    \      }\n        count", "        val hexDigits = \"0123456789ABCDEF\"\n    \
    \    val primes = Array(2, 3, 5, 7, 11, 13)\n        var count = 0\n        for\
    \ (i <- 0 until num.length) {\n            val digit = hexDigits.indexOf(num(i))\n\
    \            if (primes.contains(digit)) count += 1\n        }\n        count",
  "        val hex = num.toUpperCase\n        val primes = List(2, 3, 5, 7, 11, 13)\n\
    \        val hexDigits = List('0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\
    \ 'A', 'B', 'C', 'D', 'E', 'F')\n        val hexToInt = hexDigits.zipWithIndex.toMap\n\
    \        val hexToPrime = hexDigits.zip(primes).toMap\n        val hexToPrimeCount\
    \ = hexToPrime.map(x => (x._1, 1)).toMap\n        hex.map(x => hexToPrimeCount(x)).sum",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).size",
  "        val hex = \"0123456789ABCDEF\"\n        val prime = \"2357BDF\"\n     \
    \   var count = 0l\n        for (i <- 0 until num.length) {\n            if (prime.contains(num(i)))\
    \ count += 1\n        }\n        count", "        val hex = \"0123456789ABCDEF\"\
    \n        val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).length", "        val hexDigits = num.toCharArray.map(x\
    \ => x.toString.toInt(16))\n        val primes = List(2, 3, 5, 7, 11, 13)\n  \
    \      hexDigits.filter(x => primes.contains(x)).length", "        var count =\
    \ 0\n        for (i <- 0 until num.length) {\n            val c = num(i)\n   \
    \         if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c ==\
    \ 'D') count += 1\n        }\n        count", "        val hex = \"0123456789ABCDEF\"\
    \n        val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).size", "        val primes = List(2, 3, 5, 7, 11, 13)\n\
    \        num.map(x => x.toString.toInt).filter(x => primes.contains(x)).length",
  "        val hex = Map(\n            '0' -> 0,\n            '1' -> 1,\n        \
    \    '2' -> 2,\n            '3' -> 3,\n            '4' -> 4,\n            '5'\
    \ -> 5,\n            '6' -> 6,\n            '7' -> 7,\n            '8' -> 8,\n\
    \            '9' -> 9,\n            'A' -> 10,\n            'B' -> 11,\n     \
    \       'C' -> 12,\n            'D' -> 13,\n            'E' -> 14,\n         \
    \   'F' -> 15\n        )\n        val primes = List(2, 3, 5, 7, 11, 13)\n    \
    \    num.map(hex(_)).count(primes.contains(_))", "        val primes = List(2,\
    \ 3, 5, 7, 11, 13)\n        val hex = Map(\"0\" -> 0, \"1\" -> 1, \"2\" -> 2,\
    \ \"3\" -> 3, \"4\" -> 4, \"5\" -> 5, \"6\" -> 6, \"7\" -> 7, \"8\" -> 8, \"9\"\
    \ -> 9, \"A\" -> 10, \"B\" -> 11, \"C\" -> 12, \"D\" -> 13, \"E\" -> 14, \"F\"\
    \ -> 15)\n        num.map(x => hex(x.toString)).filter(x => primes.contains(x)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        var count = 0\n        for (i <- 0 until num.length) {\n      \
    \      if (primes.contains(hex.indexOf(num(i)))) count += 1\n        }\n     \
    \   count", "        val hex = List(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15)\n        val primes = List(2, 3, 5, 7, 11, 13)\n        val hexPrimes\
    \ = hex.zip(primes).toMap\n        num.map(x => hexPrimes(x.toString.toInt)).filter(x\
    \ => x != 0).length", "        val hex = \"0123456789ABCDEF\"\n        val primes\
    \ = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i =>\
    \ primes.contains(i)).size", "        val hex = \"0123456789ABCDEF\"\n       \
    \ val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).length", "        val hex = Map(\n            '0' ->\
    \ 0,\n            '1' -> 1,\n            '2' -> 2,\n            '3' -> 3,\n  \
    \          '4' -> 4,\n            '5' -> 5,\n            '6' -> 6,\n         \
    \   '7' -> 7,\n            '8' -> 8,\n            '9' -> 9,\n            'A' ->\
    \ 10,\n            'B' -> 11,\n            'C' -> 12,\n            'D' -> 13,\n\
    \            'E' -> 14,\n            'F' -> 15\n        )\n        val primes\
    \ = List(2, 3, 5, 7, 11, 13)\n        num.map(hex(_)).filter(primes.contains(_)).length",
  "        val primes = Array(2, 3, 5, 7, 11, 13)\n        val hex = \"0123456789ABCDEF\"\
    \n        var result = 0\n        for (i <- 0 until num.length) {\n          \
    \  val c = num(i)\n            val index = hex.indexOf(c)\n            if (primes.contains(index))\
    \ result += 1\n        }\n        result", "        val hex = \"0123456789ABCDEF\"\
    \n        val primes = List(2, 3, 5, 7, 11, 13)\n        val digits = num.map(x\
    \ => hex.indexOf(x)).toList\n        digits.map(x => if (primes.contains(x)) 1\
    \ else 0).sum", "        val hex = \"0123456789ABCDEF\"\n        val primes =\
    \ List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).size",
  "        val hex = \"0123456789ABCDEF\"\n        val prime = \"2357BDF\"\n     \
    \   num.filter(c => prime.contains(c)).length", "        val primes = List(2,\
    \ 3, 5, 7, 11, 13)\n        num.map(c => c.toInt - '0'.toInt).filter(c => c >=\
    \ 0 && c <= 15).map(c => if (c > 9) c - 7 else c).filter(c => primes.contains(c)).size",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(x => hex.indexOf(x)).filter(x => primes.contains(x)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.toList.map(x => hex.indexOf(x)).filter(x => primes.contains(x)).length",
  "        val hexDigits = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5,\
    \ 7, 11, 13)\n        num.map(c => hexDigits.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = Array(2, 3, 5, 7,\
    \ 11, 13)\n        var count = 0\n        for (i <- 0 until num.length) {\n  \
    \          if (primes.contains(hex.indexOf(num(i)))) count += 1\n        }\n \
    \       count", "        val hexDigits = \"0123456789ABCDEF\"\n        val primes\
    \ = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hexDigits.indexOf(c)).filter(i\
    \ => primes.contains(i)).size", "        val hex = \"0123456789ABCDEF\"\n    \
    \    val prime = List(2, 3, 5, 7, 11, 13)\n        num.map(x => hex.indexOf(x)).filter(x\
    \ => prime.contains(x)).length", "        val hex = \"0123456789ABCDEF\"\n   \
    \     val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(x => hex.indexOf(x)).filter(x\
    \ => primes.contains(x)).size", "        val primes = List(2, 3, 5, 7, 11, 13)\n\
    \        num.map(x => x.toInt - '0'.toInt).filter(x => x > 9).map(x => x - 7).filter(x\
    \ => primes.contains(x)).length", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).length", "        var count = 0l\n        for (i <- 0\
    \ until num.length) {\n            val c = num(i)\n            if (c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') count += 1\n     \
    \   }\n        count", "        val hex = \"0123456789ABCDEF\"\n        val primes\
    \ = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i =>\
    \ primes.contains(i)).length", "        val primes = List(2, 3, 5, 7, 11, 13)\n\
    \        num.map(x => x.toInt).filter(x => primes.contains(x)).length", "    \
    \    val hexDigits = Array(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"\
    7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\")\n        val primes\
    \ = Array(2, 3, 5, 7, 11, 13)\n        val hexDigitsMap = hexDigits.zipWithIndex.toMap\n\
    \        val primesMap = primes.zipWithIndex.toMap\n        num.map(c => hexDigitsMap(c.toString)).map(i\
    \ => primesMap.contains(i)).count(b => b)", "        val primes = Set(2, 3, 5,\
    \ 7, 11, 13)\n        num.map(x => x.toInt - '0'.toInt).filter(x => x >= 0 &&\
    \ x <= 15).filter(x => primes.contains(x)).size", "        val hex = \"0123456789ABCDEF\"\
    \n        val primes = Set(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).size", "        val primes = List(2, 3, 5, 7, 11, 13)\n\
    \        num.map(x => x.toString.toInt).filter(x => primes.contains(x)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val hexDigits = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5,\
    \ 7, 11, 13)\n        val hexToInt = hexDigits.zipWithIndex.toMap\n        num.map(hexToInt(_)).filter(primes.contains(_)).size",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(x => hex.indexOf(x)).filter(x => primes.contains(x)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = \"2357BDF\"\n    \
    \    num.map(c => if (primes.contains(c)) 1 else 0).sum", "        val hex = \"\
    0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11, 13)\n        val\
    \ map = new HashMap[Char, Int]\n        for (i <- 0 until hex.length) map(hex(i))\
    \ = i\n        var count = 0\n        for (i <- 0 until num.length) {\n      \
    \      if (primes.contains(map(num(i)))) count += 1\n        }\n        count",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = Set(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).size",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        // Your code here\n        return 0", "        val hex = \"0123456789ABCDEF\"\
    \n        val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).size", "        val hex = \"0123456789ABCDEF\"\n    \
    \    val primes = List(2, 3, 5, 7, 11, 13)\n        num.toList.map(c => hex.indexOf(c)).filter(n\
    \ => primes.contains(n)).length", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).length", "        val hex = Map('0' -> 0, '1' -> 1, '2'\
    \ -> 2, '3' -> 3, '4' -> 4, '5' -> 5, '6' -> 6, '7' -> 7, '8' -> 8, '9' -> 9,\
    \ 'A' -> 10, 'B' -> 11, 'C' -> 12, 'D' -> 13, 'E' -> 14, 'F' -> 15)\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13)\n        num.map(x => hex(x)).filter(x =>\
    \ primes.contains(x)).length", "        val hex = Map(\n            '0' -> 0,\n\
    \            '1' -> 1,\n            '2' -> 2,\n            '3' -> 3,\n       \
    \     '4' -> 4,\n            '5' -> 5,\n            '6' -> 6,\n            '7'\
    \ -> 7,\n            '8' -> 8,\n            '9' -> 9,\n            'A' -> 10,\n\
    \            'B' -> 11,\n            'C' -> 12,\n            'D' -> 13,\n    \
    \        'E' -> 14,\n            'F' -> 15\n        )\n        val primes = List(2,\
    \ 3, 5, 7, 11, 13)\n        num.map(x => hex(x)).filter(x => primes.contains(x)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        // Your code here\n        0", "        val hex = \"0123456789ABCDEF\"\n\
    \        val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).length", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).length", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).length", "        val hexDigits = \"0123456789ABCDEF\"\
    \n        val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hexDigits.indexOf(c)).filter(i\
    \ => primes.contains(i)).length", "        val primes = List(2, 3, 5, 7, 11, 13)\n\
    \        val hex = \"0123456789ABCDEF\"\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).size", "        val hex = \"0123456789ABCDEF\"\n    \
    \    val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).length", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).size", "        val hexDigits = Array(\"0\", \"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"\
    D\", \"E\", \"F\")\n        val primes = Array(2, 3, 5, 7, 11, 13)\n        val\
    \ hexDigitsToPrimes = Map(hexDigits(0) -> 0, hexDigits(1) -> 0, hexDigits(2) ->\
    \ 1, hexDigits(3) -> 0, hexDigits(4) -> 0, hexDigits(5) -> 1, hexDigits(6) ->\
    \ 0, hexDigits(7) -> 0, hexDigits(8) -> 0, hexDigits(9) -> 0, hexDigits(10) ->\
    \ 0, hexDigits(11) -> 1, hexDigits(12) -> 0, hexDigits(13) -> 1, hexDigits(14)\
    \ -> 0, hexDigits(15) -> 0)\n        num.map(c => hexDigitsToPrimes(c.toString)).sum",
  "        val primes = List(2, 3, 5, 7, 11, 13)\n        val hex = Map('0' -> 0,\
    \ '1' -> 1, '2' -> 2, '3' -> 3, '4' -> 4, '5' -> 5, '6' -> 6, '7' -> 7, '8' ->\
    \ 8, '9' -> 9, 'A' -> 10, 'B' -> 11, 'C' -> 12, 'D' -> 13, 'E' -> 14, 'F' -> 15)\n\
    \        num.map(c => hex(c)).count(n => primes.contains(n))", "        val hex\
    \ = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11, 13)\n    \
    \    num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length", " \
    \       val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(x => x.toString.toInt).filter(x\
    \ => primes.contains(x)).length", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).length", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val primes = Set(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(primes.contains(_)).size",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(x => hex.indexOf(x)).filter(x => primes.contains(x)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(x => hex.indexOf(x)).filter(x => primes.contains(x)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val primes = List(2, 3, 5, 7, 11, 13)\n        val hex = Map(\n       \
    \     '0' -> 0,\n            '1' -> 1,\n            '2' -> 2,\n            '3'\
    \ -> 3,\n            '4' -> 4,\n            '5' -> 5,\n            '6' -> 6,\n\
    \            '7' -> 7,\n            '8' -> 8,\n            '9' -> 9,\n       \
    \     'A' -> 10,\n            'B' -> 11,\n            'C' -> 12,\n           \
    \ 'D' -> 13,\n            'E' -> 14,\n            'F' -> 15\n        )\n     \
    \   num.map(hex(_)).filter(primes.contains(_)).length", "        val primes =\
    \ List(2, 3, 5, 7, 11, 13)\n        num.map(x => x.toString.toInt).filter(x =>\
    \ primes.contains(x)).size", "        val primes = List(2, 3, 5, 7, 11, 13)\n\
    \        val hex = Map(\n            '0' -> 0,\n            '1' -> 1,\n      \
    \      '2' -> 2,\n            '3' -> 3,\n            '4' -> 4,\n            '5'\
    \ -> 5,\n            '6' -> 6,\n            '7' -> 7,\n            '8' -> 8,\n\
    \            '9' -> 9,\n            'A' -> 10,\n            'B' -> 11,\n     \
    \       'C' -> 12,\n            'D' -> 13,\n            'E' -> 14,\n         \
    \   'F' -> 15\n        )\n        num.map(hex(_)).filter(primes.contains(_)).size",
  "        var count = 0\n        for (i <- 0 until num.length) {\n            val\
    \ c = num(i)\n            if (c == '2' || c == '3' || c == '5' || c == '7' ||\
    \ c == 'B' || c == 'D') count += 1\n        }\n        count", "        val hex\
    \ = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11, 13)\n    \
    \    num.map(c => hex.indexOf(c)).map(x => primes.contains(x)).count(x => x)",
  "        val hex = Map(\n            '0' -> 0,\n            '1' -> 1,\n        \
    \    '2' -> 2,\n            '3' -> 3,\n            '4' -> 4,\n            '5'\
    \ -> 5,\n            '6' -> 6,\n            '7' -> 7,\n            '8' -> 8,\n\
    \            '9' -> 9,\n            'A' -> 10,\n            'B' -> 11,\n     \
    \       'C' -> 12,\n            'D' -> 13,\n            'E' -> 14,\n         \
    \   'F' -> 15\n        )\n        val primes = List(2, 3, 5, 7, 11, 13)\n    \
    \    val digits = num.map(hex(_)).toList\n        digits.filter(primes.contains(_)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).size",
  "        val primes = List(2, 3, 5, 7, 11, 13)\n        val hex = Map('0' -> 0,\
    \ '1' -> 1, '2' -> 2, '3' -> 3, '4' -> 4, '5' -> 5, '6' -> 6, '7' -> 7, '8' ->\
    \ 8, '9' -> 9, 'A' -> 10, 'B' -> 11, 'C' -> 12, 'D' -> 13, 'E' -> 14, 'F' -> 15)\n\
    \        var count = 0\n        for (i <- 0 until num.length) {\n            if\
    \ (primes.contains(hex(num(i)))) count += 1\n        }\n        count", "    \
    \    val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => c.toString.toInt(16)).filter(x\
    \ => primes.contains(x)).length", "        val primes = Array(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => c.toInt).filter(c => primes.contains(c)).length",
  "        val hexDigits = \"0123456789ABCDEF\"\n        val primes = Array(2, 3,\
    \ 5, 7, 11, 13)\n        var count = 0\n        for (i <- 0 until num.length)\
    \ {\n            val digit = hexDigits.indexOf(num(i))\n            if (primes.contains(digit))\
    \ count += 1\n        }\n        count", "        val hex = \"0123456789ABCDEF\"\
    \n        val primes = List(2, 3, 5, 7, 11, 13)\n        val hexToDec = hex.zipWithIndex.toMap\n\
    \        num.map(c => hexToDec(c)).filter(i => primes.contains(i)).size", "  \
    \      val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = Array(2, 3, 5, 7,\
    \ 11, 13)\n        var count = 0\n        for (i <- 0 until num.length) {\n  \
    \          if (primes.contains(hex.indexOf(num(i)))) count += 1\n        }\n \
    \       count", "        val hex = \"0123456789ABCDEF\"\n        val primes =\
    \ List(2, 3, 5, 7, 11, 13)\n        num.toList.map(x => hex.indexOf(x)).filter(x\
    \ => primes.contains(x)).length", "        val hex = num.toList.map(x => x.toString.toInt)\n\
    \        val primes = List(2, 3, 5, 7, 11, 13)\n        hex.filter(x => primes.contains(x)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = \"2357BDF\"\n    \
    \    num.filter(c => primes.contains(c)).length", "        val hex = \"0123456789ABCDEF\"\
    \n        val primes = List(2, 3, 5, 7, 11, 13)\n        num.toList.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).size", "        val hex = \"0123456789ABCDEF\"\n    \
    \    val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).size", "        val hex = Array(\"0\", \"1\", \"2\",\
    \ \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\"\
    , \"E\", \"F\")\n        val primes = Array(2, 3, 5, 7, 11, 13)\n        val map\
    \ = hex.zipWithIndex.toMap\n        num.map(x => map(x.toString)).filter(x =>\
    \ primes.contains(x)).size", "        val primes = List(2, 3, 5, 7, 11, 13)\n\
    \        num.map(x => x.toString.toInt).filter(x => primes.contains(x)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val hexDigits = Array(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\",\
    \ \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13)\n        val hexDigitsMap = hexDigits.zipWithIndex.toMap\n\
    \        val primesMap = primes.zipWithIndex.toMap\n        var count = 0\n  \
    \      for (i <- 0 until num.length) {\n            if (primesMap.contains(hexDigitsMap(num(i).toString)))\
    \ count += 1\n        }\n        count", "        val hex = \"0123456789ABCDEF\"\
    \n        val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(x => hex.indexOf(x)).filter(x\
    \ => primes.contains(x)).length", "        val hex = num.toUpperCase\n       \
    \ val hexDigits = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7,\
    \ 11, 13)\n        val hexPrimes = primes.map(p => hexDigits(p))\n        hex.count(c\
    \ => hexPrimes.contains(c))", "        val hex = \"0123456789ABCDEF\"\n      \
    \  val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).size", "        val hex = \"0123456789ABCDEF\"\n    \
    \    val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(x => hex.indexOf(x)).filter(x\
    \ => primes.contains(x)).length", "        val hex = Array(\"0\", \"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\"\
    , \"E\", \"F\")\n        val prime = Array(2, 3, 5, 7, 11, 13)\n        val map\
    \ = new HashMap[String, Int]\n        for (i <- 0 until hex.length) map(hex(i))\
    \ = i\n        val n = num.length\n        var result = 0\n        for (i <- 0\
    \ until n) {\n            if (prime.contains(map(num(i).toString))) result +=\
    \ 1\n        }\n        result", "        val hex = Array(\"0\", \"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\"\
    , \"E\", \"F\")\n        val primes = Array(2, 3, 5, 7, 11, 13)\n        var count\
    \ = 0\n        for (i <- 0 until num.length) {\n            val c = num(i).toString\n\
    \            if (hex.contains(c)) {\n                val n = hex.indexOf(c)\n\
    \                if (primes.contains(n)) count += 1\n            }\n        }\n\
    \        count", "        val primes = List(2, 3, 5, 7, 11, 13)\n        num.toList.map(x\
    \ => x.toString.toInt).filter(x => primes.contains(x)).length", "        val hex\
    \ = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11, 13)\n    \
    \    num.map(hex.indexOf(_)).filter(primes.contains(_)).size", "        val hex\
    \ = \"0123456789ABCDEF\"\n        val primes = Array(2, 3, 5, 7, 11, 13)\n   \
    \     var count = 0\n        for (i <- 0 until num.length) {\n            if (primes.contains(hex.indexOf(num(i))))\
    \ count += 1\n        }\n        count", "        val hex = \"0123456789ABCDEF\"\
    \n        val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).size", "        val primes = List(2, 3, 5, 7, 11, 13)\n\
    \        val hex = num.toUpperCase.map(x => x.toInt - 48)\n        hex.filter(x\
    \ => x > 9).map(x => x - 7).filter(x => primes.contains(x)).size", "        val\
    \ hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11, 13)\n\
    \        num.toList.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).size",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(x => hex.indexOf(x)).filter(x => primes.contains(x)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val hex = Map(\"0\" -> 0, \"1\" -> 1, \"2\" -> 2, \"3\" -> 3, \"4\" ->\
    \ 4, \"5\" -> 5, \"6\" -> 6, \"7\" -> 7, \"8\" -> 8, \"9\" -> 9, \"A\" -> 10,\
    \ \"B\" -> 11, \"C\" -> 12, \"D\" -> 13, \"E\" -> 14, \"F\" -> 15)\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex(c.toString)).filter(x\
    \ => primes.contains(x)).size"]
stop_tokens:
- "\n    }\n"
