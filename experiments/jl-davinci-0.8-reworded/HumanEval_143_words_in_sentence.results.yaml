language: jl
name: HumanEval_143_words_in_sentence
results:
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    result = []\n    for word in words\n\
    \        if isprime(length(word))\n            push!(result, word)\n        end\n\
    \    end\n    join(result, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpgmdgf5r0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpgmdgf5r0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpgmdgf5r0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgmdgf5r0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgmdgf5r0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpgmdgf5r0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpgmdgf5r0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgmdgf5r0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgmdgf5r0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpgmdgf5r0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpgmdgf5r0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgmdgf5r0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgmdgf5r0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpgmdgf5r0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n   \n    # create a list of the words by splitting the sentence on spaces\n\
    \    words = split(sentence)\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6qzlketq.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6qzlketq.jl:1\n\
    in expression starting at /tmp/tmp6qzlketq.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    \n    words = split(sentence, ' ')\n    result = \"\"\n    \n    for word\
    \ in words\n        if isprime(length(word))\n            result = string(result,\
    \ \" \", word)\n        end\n    end\n    \n    return lstrip(result)\n    \n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpgugu4dk6.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmpgugu4dk6.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpgugu4dk6.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgugu4dk6.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgugu4dk6.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpgugu4dk6.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpgugu4dk6.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgugu4dk6.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgugu4dk6.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpgugu4dk6.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpgugu4dk6.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgugu4dk6.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgugu4dk6.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpgugu4dk6.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: -1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    if length(sentence) < 1 || length(sentence) > 100\n        error(\"the\
    \ length of the sentence must be between 1 and 100\")\n    end\n    sentence =\
    \ sentence[sentence .!= ' ']\n    if length(sentence) == 0\n        return \"\"\
    \n    end\n    words = split(sentence, \" \")\n    words = words[(isprime.(length.(words)))]\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmps36too86.jl:37\n  Test threw
    exception\n  Expression: candidate("This is a test") == "is"\n  MethodError: no
    method matching split(::Char, ::String)\n  Closest candidates are:\n    split(!Matched::T,
    ::Any; limit, keepempty) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:417\n  Stacktrace:\n   [1]
    words_in_sentence(sentence::String)\n     @ Main /tmp/tmps36too86.jl:28\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmps36too86.jl:37 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmps36too86.jl:36\ntest set: Error
    During Test at /tmp/tmps36too86.jl:38\n  Test threw exception\n  Expression: candidate("lets
    go for swimming") == "go for"\n  MethodError: no method matching split(::Char,
    ::String)\n  Closest candidates are:\n    split(!Matched::T, ::Any; limit, keepempty)
    where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:417\n  Stacktrace:\n   [1]
    words_in_sentence(sentence::String)\n     @ Main /tmp/tmps36too86.jl:28\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmps36too86.jl:38 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmps36too86.jl:36\ntest set: Error
    During Test at /tmp/tmps36too86.jl:39\n  Test threw exception\n  Expression: candidate("there
    is no place available here") == "there is no place"\n  MethodError: no method
    matching split(::Char, ::String)\n  Closest candidates are:\n    split(!Matched::T,
    ::Any; limit, keepempty) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:417\n  Stacktrace:\n   [1]
    words_in_sentence('
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    return join(filter(w -> isprime(length(w)), split(sentence, \" \")), \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmps64820s2.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmps64820s2.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(w::SubString{String})\n \
    \    @ Main /tmp/tmps64820s2.jl:21\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmps64820s2.jl:21\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmps64820s2.jl:28 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmps64820s2.jl:27\ntest set:\
    \ Error During Test at /tmp/tmps64820s2.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(w::SubString{String})\n \
    \    @ Main /tmp/tmps64820s2.jl:21\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmps64820s2.jl:21\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmps64820s2.jl:29 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmps64820s2.jl:27\ntest set:\
    \ Error During Test at /tmp/tmps64820s2.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(w::SubString{String})\n\
    \     @ Main /tmp/tmps64820s2.jl:21\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmps64820s2.jl:21\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/s"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    \n    words = split(sentence, \" \")\n    total_words = length(words)\n\
    \    output = []\n    \n    for i in 1:total_words\n        if isprime(length(words[i]))\n\
    \            push!(output, words[i])\n        end\n    end\n    \n    # output_string\
    \ = join(output, \" \")\n    # return output_string\n    return join(output, \"\
    \ \")\n    \nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp710dpcpb.jl:39

    '
  stdout: "test set: Error During Test at /tmp/tmp710dpcpb.jl:42\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp710dpcpb.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp710dpcpb.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp710dpcpb.jl:41\ntest set:\
    \ Error During Test at /tmp/tmp710dpcpb.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp710dpcpb.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp710dpcpb.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp710dpcpb.jl:41\ntest set:\
    \ Error During Test at /tmp/tmp710dpcpb.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp710dpcpb.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp710dpcpb.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp710dpcpb.jl:41\ntest set:\
    \ Error During Test at /tmp/tmp710dpcpb.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: -1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    is_prime(word::String) = word in [\"\
    is\", \"go\", \"a\", \"for\"]\n    filter(is_prime, words) |> join\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpn93o80w7.jl:30\n  Test threw
    exception\n  Expression: candidate("This is a test") == "is"\n  MethodError: no
    method matching (::var"#is_prime#1")(::SubString{String})\n  Closest candidates
    are:\n    (::var"#is_prime#1")(!Matched::String) at /tmp/tmpn93o80w7.jl:22\n  Stacktrace:\n   [1]
    filter(f::var"#is_prime#1", a::Vector{SubString{String}})\n     @ Base ./array.jl:2484\n   [2]
    words_in_sentence(sentence::String)\n     @ Main /tmp/tmpn93o80w7.jl:23\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpn93o80w7.jl:30 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpn93o80w7.jl:29\ntest set: Error
    During Test at /tmp/tmpn93o80w7.jl:31\n  Test threw exception\n  Expression: candidate("lets
    go for swimming") == "go for"\n  MethodError: no method matching (::var"#is_prime#1")(::SubString{String})\n  Closest
    candidates are:\n    (::var"#is_prime#1")(!Matched::String) at /tmp/tmpn93o80w7.jl:22\n  Stacktrace:\n   [1]
    filter(f::var"#is_prime#1", a::Vector{SubString{String}})\n     @ Base ./array.jl:2484\n   [2]
    words_in_sentence(sentence::String)\n     @ Main /tmp/tmpn93o80w7.jl:23\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpn93o80w7.jl:31 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpn93o80w7.jl:29\ntest set: Error
    During Test at /tmp/tmpn93o80w7.jl:32\n  Test threw exception\n  Expression: candidate("there
    is no place available here") == "there is no place"\n  MethodError: no method
    matching (::var"#is_prime#1")(::SubString{String})\n  Closest candidates are:\n    (::var"#is_prime#1")(!Matched::String)
    at /tmp/tmpn93o80w7.jl:22\n  Stacktr'
- exit_code: -1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    # loop through each word in the sentence\n    # if the length of the word\
    \ is a prime number,\n    # add it to the solution string\n    \nend\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmplvmysr4w.jl:32\n  Test threw
    exception\n  Expression: candidate("This is a test") == "is"\n  MethodError: Cannot
    `convert` an object of type Nothing to an object of type String\n  Closest candidates
    are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n    convert(::Type{T},
    !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n    convert(::Type{T},
    !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n    ...\n  Stacktrace:\n   [1]
    words_in_sentence(sentence::String)\n     @ Main /tmp/tmplvmysr4w.jl:25\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmplvmysr4w.jl:32 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmplvmysr4w.jl:31\ntest set: Error
    During Test at /tmp/tmplvmysr4w.jl:33\n  Test threw exception\n  Expression: candidate("lets
    go for swimming") == "go for"\n  MethodError: Cannot `convert` an object of type
    Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},
    !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n    convert(::Type{T},
    !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n    convert(::Type{T},
    !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n    ...\n  Stacktrace:\n   [1]
    words_in_sentence(sentence::String)\n     @ Main /tmp/tmplvmysr4w.jl:25\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmplvmysr4w.jl:33 [inlined]\n   [4]
    macro expansion\n     @ /share'
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    prime_words = []\n    for word in words\n\
    \        len = length(word)\n        if isprime(len)\n            push!(prime_words,\
    \ word)\n        end\n    end\n    join(prime_words, \" \")\nend\n\"\"\"\n   \
    \ You are given a string,\n    you have to return a string where\n    each character\
    \ of the original string is repeated twice.\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp1keexhx.jl:31\nin expression starting at\
    \ /tmp/tmpp1keexhx.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    result = String[]\n    for word in words\n\
    \        if length(word) % 2 == 1\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpn11k5vbl.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpn11k5vbl.jl:35\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \"a\" == \"is\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn11k5vbl.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn11k5vbl.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpn11k5vbl.jl:36\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \"for\" == \"go for\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn11k5vbl.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn11k5vbl.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpn11k5vbl.jl:37\n  Expression: candidate(\"there is no place\
    \ available here\") == \"there is no place\"\n   Evaluated: \"there place available\"\
    \ == \"there is no place\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn11k5vbl.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn11k5vbl.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpn11k5vbl.jl:38\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"I Hussein\" == \"Hi am Hussein\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn11k5vbl.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn11k5vbl.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpn11k5vbl.jl:39\n  Expression: candidate(\"go for i"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    prime_words = filter(word -> all(i -> isprime(i),\
    \ length.(word)), words)\n    join(prime_words, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmphzqiy7et.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmphzqiy7et.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#2#4\")(i::Int64)\n      @ Main\
    \ /tmp/tmphzqiy7et.jl:22\n    [2] _all\n      @ ./reduce.jl:1157 [inlined]\n \
    \   [3] all\n      @ ./reduce.jl:1152 [inlined]\n    [4] #1\n      @ /tmp/tmphzqiy7et.jl:22\
    \ [inlined]\n    [5] filter(f::var\"#1#3\", a::Vector{SubString{String}})\n  \
    \    @ Base ./array.jl:2484\n    [6] words_in_sentence(sentence::String)\n   \
    \   @ Main /tmp/tmphzqiy7et.jl:22\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmphzqiy7et.jl:30 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmphzqiy7et.jl:29\ntest set:\
    \ Error During Test at /tmp/tmphzqiy7et.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#2#4\")(i::Int64)\n      @ Main\
    \ /tmp/tmphzqiy7et.jl:22\n    [2] _all\n      @ ./reduce.jl:1157 [inlined]\n \
    \   [3] all\n      @ ./reduce.jl:1152 [inlined]\n    [4] #1\n      @ /tmp/tmphzqiy7et.jl:22\
    \ [inlined]\n    [5] filter(f::var\"#1#3\", a::Vector{SubString{String}})\n  \
    \    @ Base ./array.jl:2484\n    [6] words_in_sentence(sentence::String)\n   \
    \   @ Main /tmp/tmphzqiy7et.jl:22\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmphzqiy7et.jl:31 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmphzqiy7et.jl:29\ntest set:\
    \ Error During Test at /tmp/tmphzqiy7et.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   "
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    # Get words \n    words = split(sentence)\n    # Create new_sentence\n\
    \    new_sentence = String[]\n    # Iterate over the words\n    for word in words\n\
    \        # Check the length of the word\n        if isprime(length(word))\n  \
    \          # Check that the word is not nil\n            isempty(word) && continue\n\
    \            # Push the word to the array\n            push!(new_sentence, word)\n\
    \        end\n    end\n    # Return the sentence\n    return join(new_sentence,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp09g7kzla.jl:40

    '
  stdout: "test set: Error During Test at /tmp/tmp09g7kzla.jl:43\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp09g7kzla.jl:28\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp09g7kzla.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp09g7kzla.jl:42\ntest set:\
    \ Error During Test at /tmp/tmp09g7kzla.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp09g7kzla.jl:28\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp09g7kzla.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp09g7kzla.jl:42\ntest set:\
    \ Error During Test at /tmp/tmp09g7kzla.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp09g7kzla.jl:28\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp09g7kzla.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp09g7kzla.jl:42\ntest set:\
    \ Error During Test at /tmp/tmp09g7kzla.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\
    \    primes_words = []\n    \n    for word in words\n        word_len = length(word)\n\
    \        if word_len in primes\n            push!(primes_words, word)\n      \
    \  end\n    end\n    \n    return join(primes_words, \" \")\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    word_lens = [length(word) for word\
    \ in split(sentence, \" \")]\n    return \" \".join([word for word, word_len in\
    \ zip(split(sentence, \" \"), word_lens) if word_len in primes])\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps6zb3b8d.jl:23\nin expression starting at\
    \ /tmp/tmps6zb3b8d.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    new_words = [w for w in words if isprime(length(w))]\n\
    \    return join(new_words, \" \")\nend\n \nwords_in_sentence(\"This is a test\"\
    )\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: isprime not defined\nStacktrace:\n [1]\
    \ (::var\"#1#2\")(w::SubString{String})\n   @ Main ./none:0\n [2] iterate\n  \
    \ @ ./iterators.jl:447 [inlined]\n [3] iterate\n   @ ./generator.jl:44 [inlined]\n\
    \ [4] grow_to!(dest::Vector{SubString{String}}, itr::Base.Generator{Base.Iterators.Filter{var\"\
    #1#2\", Vector{SubString{String}}}, typeof(identity)})\n   @ Base ./array.jl:797\n\
    \ [5] collect\n   @ ./array.jl:721 [inlined]\n [6] words_in_sentence(sentence::String)\n\
    \   @ Main /tmp/tmpo1ittvly.jl:22\n [7] top-level scope\n   @ /tmp/tmpo1ittvly.jl:26\n\
    in expression starting at /tmp/tmpo1ittvly.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, ' ')\n    words_of_prime_length = []\n    for\
    \ word in words\n        if isprime(length(word))\n            push!(words_of_prime_length,\
    \ word)\n        end\n    end\n    return join(words_of_prime_length, ' ')\nend\n\
    using Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpllrdgpsd.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpllrdgpsd.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpllrdgpsd.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpllrdgpsd.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpllrdgpsd.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpllrdgpsd.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpllrdgpsd.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpllrdgpsd.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpllrdgpsd.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpllrdgpsd.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpllrdgpsd.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpllrdgpsd.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpllrdgpsd.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpllrdgpsd.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: -1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    is_prime(x) = x>1 && length(filter(y->x%y==0,\
    \ 2:x-1)) == 0\n    return join(filter(is_prime, words), \" \")\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp3rgqs98x.jl:30\n  Test threw
    exception\n  Expression: candidate("This is a test") == "is"\n  MethodError: no
    method matching isless(::Int64, ::SubString{String})\n  Closest candidates are:\n    isless(!Matched::AbstractString,
    ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:344\n    isless(::Real,
    !Matched::AbstractFloat) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:185\n    isless(::Real,
    !Matched::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:430\n    ...\n  Stacktrace:\n   [1]
    <(x::Int64, y::SubString{String})\n     @ Base ./operators.jl:352\n   [2] >(x::SubString{String},
    y::Int64)\n     @ Base ./operators.jl:378\n   [3] (::var"#is_prime#2")(x::SubString{String})\n     @
    Main /tmp/tmp3rgqs98x.jl:22\n   [4] filter(f::var"#is_prime#2", a::Vector{SubString{String}})\n     @
    Base ./array.jl:2484\n   [5] words_in_sentence(sentence::String)\n     @ Main
    /tmp/tmp3rgqs98x.jl:23\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [7] macro expansion\n     @ /tmp/tmp3rgqs98x.jl:30 [inlined]\n   [8]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [9] top-level scope\n     @ /tmp/tmp3rgqs98x.jl:29\ntest set: Error
    During Test at /tmp/tmp3rgqs98x.jl:31\n  Test threw exception\n  Expression: candidate("lets
    go for swimming") == "go for"\n  MethodError: no method matching isless(::Int64,
    ::SubString{String})\n  Closest candidates are:\n    isless(!Matched::AbstractString,
    ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:344\n    isless(::Real,
    !Matched::AbstractFloat) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:185\n    isless(::Real,
    !Matched::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:430\n    ...\n  Stacktrace:\n   [1]
    <(x::Int64, y::SubString{String})\n     @ Base ./operators.jl:352\n   [2] >(x::SubString{S'
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    return \"not implemented\"\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp92sce3nt.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp92sce3nt.jl:28\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \"not implemented\" == \"is\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp92sce3nt.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp92sce3nt.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp92sce3nt.jl:29\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \"not implemented\" == \"go for\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp92sce3nt.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp92sce3nt.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp92sce3nt.jl:30\n  Expression: candidate(\"there is no place\
    \ available here\") == \"there is no place\"\n   Evaluated: \"not implemented\"\
    \ == \"there is no place\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp92sce3nt.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp92sce3nt.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp92sce3nt.jl:31\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"not implemented\" == \"Hi am Hussein\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp92sce3nt.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp92sce3nt.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp92sce3nt.jl:32\n  Expre"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    \"\"\"\n    sentences are only letters\n    so split words by space\n\
    \    \"\"\"\n    words = split(sentence)\n    primes = findall(isprime, [length(word)\
    \ for word in words])\n    \"\"\"\n    findall(predicate, collection)\n    return\
    \ a list of indices where the predicate is true\n    \"\"\"\n    return \" \"\
    .join([words[i] for i in primes])\n    \"\"\"\n    return a list of words with\
    \ the prime lengths\n    \"\"\"\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp2h4gx1h4.jl:38

    '
  stdout: "test set: Error During Test at /tmp/tmp2h4gx1h4.jl:41\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp2h4gx1h4.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2h4gx1h4.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2h4gx1h4.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp2h4gx1h4.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp2h4gx1h4.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2h4gx1h4.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2h4gx1h4.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp2h4gx1h4.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp2h4gx1h4.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2h4gx1h4.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2h4gx1h4.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp2h4gx1h4.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, ' ')\n    filtered_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(filtered_words, word)\n\
    \        end\n    end\n    return join(filtered_words, ' ')\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp8sc20mks.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmp8sc20mks.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp8sc20mks.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8sc20mks.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8sc20mks.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp8sc20mks.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp8sc20mks.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8sc20mks.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8sc20mks.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp8sc20mks.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp8sc20mks.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8sc20mks.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8sc20mks.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp8sc20mks.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    isprime(x) = x>1 && all([x%i != 0\
    \ for i=2:x-1])\n    return join(filter(w->isprime(length(w)), words), \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659978339
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    # your code here\n    pass\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpmztw3vt2.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpmztw3vt2.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: pass\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpmztw3vt2.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmztw3vt2.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmztw3vt2.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpmztw3vt2.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: pass not\
    \ defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpmztw3vt2.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmztw3vt2.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmztw3vt2.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpmztw3vt2.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: pass not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpmztw3vt2.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmztw3vt2.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmztw3vt2.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpmztw3vt2.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: pass not\
    \ defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/"
  timestamp: 1659978342
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    sentence_split = split(sentence, \" \")\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsb87tzz1.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsb87tzz1.jl:1\n\
    in expression starting at /tmp/tmpsb87tzz1.jl:1\n"
  stdout: ''
  timestamp: 1659978340
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpnbn0hz7j.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpnbn0hz7j.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpnbn0hz7j.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnbn0hz7j.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnbn0hz7j.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpnbn0hz7j.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpnbn0hz7j.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnbn0hz7j.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-"
  timestamp: 1659978343
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    prime_words = []\n    for word in words\n\
    \        if isprime(length(word))\n            push!(prime_words, word)\n    \
    \    end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpmx1uqfeb.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpmx1uqfeb.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpmx1uqfeb.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmx1uqfeb.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmx1uqfeb.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpmx1uqfeb.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpmx1uqfeb.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmx1uqfeb.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmx1uqfeb.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpmx1uqfeb.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpmx1uqfeb.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmx1uqfeb.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmx1uqfeb.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpmx1uqfeb.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978342
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    primes = []\n    for word in words\n    \
    \    if isprime(length(word))\n            push!(primes, word)\n        end\n\
    \    end\n    return join(primes, \" \")\nend\nprintln(words_in_sentence(\"This\
    \ is a test\"))\nprintln(words_in_sentence(\"lets go for swimming\"))\n \nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: isprime not defined\nStacktrace:\n [1]\
    \ words_in_sentence(sentence::String)\n   @ Main /tmp/tmp8z7qulpv.jl:24\n [2]\
    \ top-level scope\n   @ /tmp/tmp8z7qulpv.jl:30\nin expression starting at /tmp/tmp8z7qulpv.jl:30\n"
  stdout: ''
  timestamp: 1659978340
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    for words in split(sentence)\n        if isprime(length(words))\n    \
    \        println(words)\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpqoaoka4z.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpqoaoka4z.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpqoaoka4z.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqoaoka4z.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqoaoka4z.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpqoaoka4z.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpqoaoka4z.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqoaoka4z.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqoaoka4z.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpqoaoka4z.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpqoaoka4z.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqoaoka4z.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqoaoka4z.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpqoaoka4z.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978342
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    words = split(sentence, \" \")\n  \
    \  result = []\n    for word in words\n        push!(result, word) if length(word)\
    \ in primes end\n    end\n    join(result, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpxjwpq2ci.jl:24 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxjwpq2ci.jl:25\n\
    in expression starting at /tmp/tmpxjwpq2ci.jl:25\n"
  stdout: ''
  timestamp: 1659978340
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    # your code goes here\n    return \"\"\nend\n```\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaexuwft_.jl:24\nin expression starting at\
    \ /tmp/tmpaexuwft_.jl:24\n"
  stdout: ''
  timestamp: 1659978340
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    list_of_words = split(sentence, ' ')\n    primes = get_primes(length(list_of_words))\n\
    \    new_sentence = []\n    for (i, word) in enumerate(list_of_words)\n      \
    \  if i in primes\n            append!(new_sentence, word)\n        end\n    end\n\
    \    return join(new_sentence, ' ')\nend\n \n@testset \"Testing words_in_sentence\
    \ with example 1\" begin\n    @test words_in_sentence(\"This is a test\") == \"\
    is\"\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @testset not defined

    in expression starting at /tmp/tmph0ojlkg3.jl:32

    in expression starting at /tmp/tmph0ojlkg3.jl:32

    '
  stdout: ''
  timestamp: 1659978340
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    prime_words = []\n    for word in words\n\
    \        if isprime(length(word))\n            push!(prime_words, word)\n    \
    \    end\n    end\n    join(prime_words, \" \")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpkcusd9w9.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpkcusd9w9.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpkcusd9w9.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkcusd9w9.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkcusd9w9.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpkcusd9w9.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpkcusd9w9.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkcusd9w9.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkcusd9w9.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpkcusd9w9.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpkcusd9w9.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkcusd9w9.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkcusd9w9.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpkcusd9w9.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978341
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    primes = get_primes(10)\n    selected_words\
    \ = filter(x -> x in primes, map(x -> length(x), words))\n    return join(selected_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp64ncze8s.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmp64ncze8s.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: get_primes\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp64ncze8s.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp64ncze8s.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp64ncze8s.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp64ncze8s.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: get_primes\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp64ncze8s.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp64ncze8s.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp64ncze8s.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp64ncze8s.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: get_primes not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp64ncze8s.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp64ncze8s.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp64ncze8s.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp64ncze8s.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: get_primes\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::S"
  timestamp: 1659978342
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    sentence = replace(sentence, r\"[^a-zA-Z]\" => \" \")\n    words = split(sentence)\n\
    \    is_prime(n::Int)::Bool = n \u2208 [2, 3, 5, 7]\n    return join(filter(w\
    \ -> is_prime(length(w)), words), \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659978339
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    new_string = \"\"\n    for word in split(sentence)\n        if isprime(length(word))\n\
    \            new_string = string(new_string, word, \" \")\n        end\n    end\n\
    \    return chomp(new_string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpsndtp4fx.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpsndtp4fx.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpsndtp4fx.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsndtp4fx.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsndtp4fx.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpsndtp4fx.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpsndtp4fx.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsndtp4fx.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsndtp4fx.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpsndtp4fx.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpsndtp4fx.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsndtp4fx.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsndtp4fx.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpsndtp4fx.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978342
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    n = length(sentence)\n    new_sentence = []\n    for word in split(sentence)\n\
    \        if isprime(length(word))\n            push!(new_sentence, word)\n   \
    \     end\n    end\n    return join(new_sentence, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpfxzoicxc.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpfxzoicxc.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpfxzoicxc.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfxzoicxc.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfxzoicxc.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpfxzoicxc.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpfxzoicxc.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfxzoicxc.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfxzoicxc.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpfxzoicxc.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpfxzoicxc.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfxzoicxc.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfxzoicxc.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpfxzoicxc.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978342
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    sentences = split(sentence, \" \")\n    a = []\n    for word in sentences\n\
    \        if isprime(length(word))\n            append!(a, word)\n        end\n\
    \    end\n    return join(a, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpugkiljuq.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpugkiljuq.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpugkiljuq.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpugkiljuq.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpugkiljuq.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpugkiljuq.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpugkiljuq.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpugkiljuq.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpugkiljuq.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpugkiljuq.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpugkiljuq.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpugkiljuq.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpugkiljuq.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpugkiljuq.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978342
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    \n    #your code goes here\n    return\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpfl9339tt.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpfl9339tt.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpfl9339tt.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfl9339tt.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfl9339tt.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpfl9339tt.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpfl9339tt.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfl9339tt.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-"
  timestamp: 1659978343
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    [takewhile(!(x in split(sentence, ' ')), \n      filter(isprime, map(length,\
    \ split(sentence, ' '))))...]\nend\n \n \n@testset \"Example tests\" begin\n \
    \   @test words_in_sentence(\"This is a test\") == \"is\"\n    @test words_in_sentence(\"\
    lets go for swimming\") == \"go for\"\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @testset not defined

    in expression starting at /tmp/tmpv0chneau.jl:26

    in expression starting at /tmp/tmpv0chneau.jl:26

    '
  stdout: ''
  timestamp: 1659978340
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, ' ')\n    res = []\n    for w in words\n     \
    \   if isprime(length(w))\n            push!(res, w)\n        end\n    end\n \
    \   join(res, ' ')\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpi65qbzly.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpi65qbzly.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpi65qbzly.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi65qbzly.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi65qbzly.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpi65qbzly.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpi65qbzly.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi65qbzly.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi65qbzly.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpi65qbzly.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpi65qbzly.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi65qbzly.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi65qbzly.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpi65qbzly.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978342
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    #return a string\n    return\nend\n \n```\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwpddech7.jl:25\nin expression starting at\
    \ /tmp/tmpwpddech7.jl:25\n"
  stdout: ''
  timestamp: 1659978340
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    N = length(sentence)\n    words = []\n    for w in split(sentence, \"\
    \ \")\n        if isprime(length(w))\n            push!(words, w)\n        end\n\
    \    end\n    join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp5j4hsshc.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmp5j4hsshc.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp5j4hsshc.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5j4hsshc.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5j4hsshc.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp5j4hsshc.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp5j4hsshc.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5j4hsshc.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5j4hsshc.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp5j4hsshc.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp5j4hsshc.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5j4hsshc.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5j4hsshc.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp5j4hsshc.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978342
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    \n    words = split(sentence, \" \")\n    result = []\n    \n    for i\
    \ in 1:length(words)\n        if isprime(length(words[i]))\n            result\
    \ = [result; words[i]]\n        end\n    end\n    return join(result, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpw5jgovra.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpw5jgovra.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpw5jgovra.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw5jgovra.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw5jgovra.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpw5jgovra.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpw5jgovra.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw5jgovra.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw5jgovra.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpw5jgovra.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpw5jgovra.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw5jgovra.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw5jgovra.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpw5jgovra.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978342
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    \n    words = split(sentence, \" \")\n    result = \"\"\n    \n    for\
    \ i in words\n        if isprime(length(i))\n            result = result * i *\
    \ \" \"\n        end\n    end\n    \n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpbaa18_xz.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmpbaa18_xz.jl:38\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpbaa18_xz.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbaa18_xz.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbaa18_xz.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpbaa18_xz.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpbaa18_xz.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbaa18_xz.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbaa18_xz.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpbaa18_xz.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpbaa18_xz.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbaa18_xz.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbaa18_xz.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpbaa18_xz.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978341
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    # write your code here\n    return\nend\n \nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpomivohe9.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpomivohe9.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpomivohe9.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpomivohe9.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpomivohe9.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpomivohe9.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpomivohe9.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpomivohe9.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-"
  timestamp: 1659978343
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, ' ')\n    filter!( word -> isprime(length(word)),\
    \ words)\n    join(words, ' ')\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp23q09fac.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmp23q09fac.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(word::SubString{String})\n\
    \     @ Main /tmp/tmp23q09fac.jl:22\n   [2] filter!(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2529\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp23q09fac.jl:22\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp23q09fac.jl:30 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp23q09fac.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp23q09fac.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(word::SubString{String})\n\
    \     @ Main /tmp/tmp23q09fac.jl:22\n   [2] filter!(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2529\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp23q09fac.jl:22\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp23q09fac.jl:31 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp23q09fac.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp23q09fac.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(word::SubString{String})\n\
    \     @ Main /tmp/tmp23q09fac.jl:22\n   [2] filter!(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2529\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp23q09fac.jl:22\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/st"
  timestamp: 1659978342
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    indexes = findall(x -> isprime(length(x)),\
    \ words)\n    words[indexes]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpd3eaa9o0.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpd3eaa9o0.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(x::SubString{String})\n\
    \      @ Main /tmp/tmpd3eaa9o0.jl:22\n    [2] _broadcast_getindex_evalf\n    \
    \  @ ./broadcast.jl:670 [inlined]\n    [3] _broadcast_getindex\n      @ ./broadcast.jl:643\
    \ [inlined]\n    [4] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [5] copy\n\
    \      @ ./broadcast.jl:899 [inlined]\n    [6] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},\
    \ Nothing, var\"#1#2\", Tuple{Vector{SubString{String}}}})\n      @ Base.Broadcast\
    \ ./broadcast.jl:860\n    [7] findall(testf::Function, A::Vector{SubString{String}})\n\
    \      @ Base ./array.jl:2257\n    [8] words_in_sentence(sentence::String)\n \
    \     @ Main /tmp/tmpd3eaa9o0.jl:22\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpd3eaa9o0.jl:30 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpd3eaa9o0.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpd3eaa9o0.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(x::SubString{String})\n\
    \      @ Main /tmp/tmpd3eaa9o0.jl:22\n    [2] _broadcast_getindex_evalf\n    \
    \  @ ./broadcast.jl:670 [inlined]\n    [3] _broadcast_getindex\n      @ ./broadcast.jl:643\
    \ [inlined]\n    [4] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [5] copy\n\
    \      @ ./broadcast.jl:899 [inlined]\n    [6] materialize(bc::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},\
    \ Nothing, var\"#1#2\", Tuple{Vector{SubString{String}}}})\n      @ Base.Broadcast\
    \ ./broadcast.jl:860\n    [7] findall(testf::Function, A::Vector{SubString{String}})\n\
    \      @ Base ./array.jl:2257\n    [8] words_in_sentence(sentence::String)\n \
    \     @ Main /tmp/tmpd3"
  timestamp: 1659978344
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    \n    # convert the sentence to lowercase\n    sentence = lowercase(sentence)\n\
    \    \n    # split sentence into words\n    words = split(sentence)\n    \n  \
    \  # initialize and empty string for prime words\n    prime_words = \"\"\n   \
    \ \n    # loop over the words\n    for word in words\n        \n        # check\
    \ if the length of the word is prime\n        if isprime(length(word))\n     \
    \       \n            # if so append it to the prime words string\n          \
    \  # and a space after it\n            prime_words *= word * \" \"\n        end\n\
    \    end\n    \n    # return the prime words string \n    return prime_words\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp1bqxrzk4.jl:48

    '
  stdout: "test set: Error During Test at /tmp/tmp1bqxrzk4.jl:51\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp1bqxrzk4.jl:35\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1bqxrzk4.jl:51 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1bqxrzk4.jl:50\ntest set:\
    \ Error During Test at /tmp/tmp1bqxrzk4.jl:52\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp1bqxrzk4.jl:35\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1bqxrzk4.jl:52 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1bqxrzk4.jl:50\ntest set:\
    \ Error During Test at /tmp/tmp1bqxrzk4.jl:53\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp1bqxrzk4.jl:35\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1bqxrzk4.jl:53 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1bqxrzk4.jl:50\ntest set:\
    \ Error During Test at /tmp/tmp1bqxrzk4.jl:54\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978343
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    \n    sentence = sentence.replace(\" \",\"\")\n    max_l = maximum(length.(split(sentence)))\n\
    \    primes = [isprime(i) ? i : 0 for i in 1:max_l]\n    res = []\n    for word\
    \ in split(sentence)\n        p = length(word)\n        push!(res, word) if primes[p]\
    \ != 0\n    end\n    join(res, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp1lnh_2uh.jl:26 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1lnh_2uh.jl:28\n\
    in expression starting at /tmp/tmp1lnh_2uh.jl:28\n"
  stdout: ''
  timestamp: 1659978341
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    sentence_split = split(sentence, \" \")\n    # Use these to obtain the\
    \ solution\n    # sentence_split[i] : accesses the ith element of the string\n\
    \    # length(sentence_split[i]) : gives the length of the ith element\n    #\
    \ isprime(length(sentence_split[i])) : Returns true if the length of the ith element\
    \ is a prime number\n    # join(sentence_split[i] for i in 1:length(sentence_split),\
    \ \" \") : Joins the strings in the sentence_split array with a space\n    # in\
    \ between\n    return join(sentence_split[i] for i in 1:length(sentence_split),\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnh95ekju.jl:28\nin expression starting at\
    \ /tmp/tmpnh95ekju.jl:28\n"
  stdout: ''
  timestamp: 1659978341
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    return join(filter(x -> isprime(length(x)),\
    \ words), ' ')\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpy64uygp2.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpy64uygp2.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::SubString{String})\n \
    \    @ Main /tmp/tmpy64uygp2.jl:22\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpy64uygp2.jl:22\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpy64uygp2.jl:29 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpy64uygp2.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpy64uygp2.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::SubString{String})\n \
    \    @ Main /tmp/tmpy64uygp2.jl:22\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpy64uygp2.jl:22\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpy64uygp2.jl:30 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpy64uygp2.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpy64uygp2.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::SubString{String})\n\
    \     @ Main /tmp/tmpy64uygp2.jl:22\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpy64uygp2.jl:22\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Te"
  timestamp: 1659978343
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    \n    words = split(sentence, \" \")\n    primes = string()\n    \n  \
    \  for word in words\n        if isprime(length(word))\n            if isempty(primes)\n\
    \                primes = word\n            else\n                primes = primes\
    \ * \" \" * word\n            end\n        end\n    end\n    \n    return primes\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpttbss4up.jl:39

    '
  stdout: "test set: Error During Test at /tmp/tmpttbss4up.jl:42\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpttbss4up.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpttbss4up.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpttbss4up.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpttbss4up.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpttbss4up.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpttbss4up.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpttbss4up.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpttbss4up.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpttbss4up.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpttbss4up.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpttbss4up.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpttbss4up.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978343
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    sentence_words = split(sentence, \" \")\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp46hsm72f.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp46hsm72f.jl:1\n\
    in expression starting at /tmp/tmp46hsm72f.jl:1\n"
  stdout: ''
  timestamp: 1659978342
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    all_words = split(sentence, ' ')\n    new_words = []\n    for word in\
    \ all_words\n        if isprime(length(word))\n            push!(new_words, word)\n\
    \        end\n    end\n    return join(new_words, ' ')\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpjv7aykrw.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpjv7aykrw.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpjv7aykrw.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjv7aykrw.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjv7aykrw.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpjv7aykrw.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpjv7aykrw.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjv7aykrw.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjv7aykrw.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpjv7aykrw.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpjv7aykrw.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjv7aykrw.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjv7aykrw.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpjv7aykrw.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978345
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    s_list = split(sentence)\n    result = []\n    for word in s_list\n  \
    \      if isprime(length(word))\n            push!(result, word)\n        end\n\
    \    end\n    join(result, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpfgqvmngn.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpfgqvmngn.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpfgqvmngn.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfgqvmngn.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfgqvmngn.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpfgqvmngn.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpfgqvmngn.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfgqvmngn.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfgqvmngn.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpfgqvmngn.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpfgqvmngn.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfgqvmngn.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfgqvmngn.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpfgqvmngn.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978345
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    return join([word for word in split(sentence) if isprime(length(word))],\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwnfcheeb.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpwnfcheeb.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(word::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\", Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] words_in_sentence(sentence::String)\n      @ Main /tmp/tmpwnfcheeb.jl:21\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpwnfcheeb.jl:28 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpwnfcheeb.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpwnfcheeb.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(word::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\", Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] words_in_sentence(sentence::String)\n      @ Main /tmp/tmpwnfcheeb.jl:21\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpwnfcheeb.jl:29 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpwnfcheeb.jl:27\ntest set:\
    \ Error During Test at /tmp/tm"
  timestamp: 1659978345
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    return \"to be implemented\"\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw7y259dm.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpw7y259dm.jl:28\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \"to be implemented\" == \"is\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw7y259dm.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw7y259dm.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpw7y259dm.jl:29\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \"to be implemented\" == \"go for\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw7y259dm.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw7y259dm.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpw7y259dm.jl:30\n  Expression: candidate(\"there is no place\
    \ available here\") == \"there is no place\"\n   Evaluated: \"to be implemented\"\
    \ == \"there is no place\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw7y259dm.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw7y259dm.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpw7y259dm.jl:31\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"to be implemented\" == \"Hi am Hussein\"\
    \nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw7y259dm.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw7y259dm.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpw7y259dm.jl:32\n  Expression: candidate(\"go for it\") =="
  timestamp: 1659978344
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    # preallocate some variables to avoid reallocation\n    prime_words =\
    \ \"\"\n    word_idx = 0\n    word_count = 0\n    words = split(sentence, \" \"\
    )\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpb50035nb.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb50035nb.jl:1\n\
    in expression starting at /tmp/tmpb50035nb.jl:1\n"
  stdout: ''
  timestamp: 1659978343
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97]\n    words = split(sentence, \" \")\n    result\
    \ = \"\"\n    for word in words\n        if count_unique_characters(word) in prime\n\
    \            result = result * \" \" * word\n        end\n    end\n    return\
    \ strip(result)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp3a6jqw9k.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmp3a6jqw9k.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: count_unique_characters\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp3a6jqw9k.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3a6jqw9k.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3a6jqw9k.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp3a6jqw9k.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: count_unique_characters\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp3a6jqw9k.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3a6jqw9k.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3a6jqw9k.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp3a6jqw9k.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: count_unique_characters not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp3a6jqw9k.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3a6jqw9k.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3a6jqw9k.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp3a6jqw9k.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: count_unique_characters\
    \ not define"
  timestamp: 1659978345
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    # add your code here\n    return \"\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjt19kflb.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpjt19kflb.jl:29\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \"\" == \"is\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjt19kflb.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjt19kflb.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpjt19kflb.jl:30\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \"\" == \"go for\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjt19kflb.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpjt19kflb.jl:28\ntest set: Test Failed at /tmp/tmpjt19kflb.jl:31\n\
    \  Expression: candidate(\"there is no place available here\") == \"there is no\
    \ place\"\n   Evaluated: \"\" == \"there is no place\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjt19kflb.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjt19kflb.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpjt19kflb.jl:32\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"\" == \"Hi am Hussein\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjt19kflb.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjt19kflb.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpjt19kflb.jl:33\n  Expression: candidate(\"go for it\") ==\
    \ \"go for it\"\n   Evaluated: \"\" == \"go for it\"\nStacktrace:\n [1] macro "
  timestamp: 1659978344
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    words = split(sentence, \" \")\n\
    \    filtered_words = []\n    for word in words\n        if length(word) in prime_numbers\n\
    \            push!(filtered_words, word)\n        end\n    end\n    join(filtered_words,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659978342
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    sentence = sentence.split(\" \")\n    sentence = filter(is_prime, sentence)\n\
    \    return \" \".join(sentence)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpduq6dnqv.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpduq6dnqv.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  type String has no field\
    \ split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] words_in_sentence(sentence::String)\n     @ Main /tmp/tmpduq6dnqv.jl:21\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpduq6dnqv.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpduq6dnqv.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpduq6dnqv.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  type String has no field\
    \ split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] words_in_sentence(sentence::String)\n     @ Main /tmp/tmpduq6dnqv.jl:21\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpduq6dnqv.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpduq6dnqv.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpduq6dnqv.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ type String has no field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] words_in_sentence(sentence::String)\n     @ Main /tmp/tmpduq6dnqv.jl:21\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpduq6dnqv.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpduq6dnqv.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpduq6dnqv.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"H"
  timestamp: 1659978345
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    sentence = split(sentence)\n    w1 = []; w2 = []; w3 = []; w4 = []; w5\
    \ = []; w6 = []; w7 = []; w8 = []; w9 = []; w10 = [];\n    for word in sentence\n\
    \        len_word = length(word)\n        if len_word == 1 || len_word == 2 ||\
    \ len_word == 3 || len_word == 5 || len_word == 7\n            if len_word ==\
    \ 1\n                push!(w1, word)\n            elseif len_word == 2\n     \
    \           push!(w2, word)\n            elseif len_word == 3\n              \
    \  push!(w3, word)\n            elseif len_word == 5\n                push!(w5,\
    \ word)\n            else\n                push!(w7, word)\n            end\n\
    \        end\n    end\n    w1 = join(w1, \" \")\n    w2 = join(w2, \" \")\n  \
    \  w3 = join(w3, \" \")\n    w5 = join(w5, \" \")\n    w7 = join(w7, \" \")\n\
    \    return join([w1, w2, w3, w5, w7], \" \")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpznvspldh.jl:48

    '
  stdout: "test set: Test Failed at /tmp/tmpznvspldh.jl:51\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \"a is   \" == \"is\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpznvspldh.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpznvspldh.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpznvspldh.jl:52\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \" go for  \" == \"go for\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpznvspldh.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpznvspldh.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpznvspldh.jl:53\n  Expression: candidate(\"there is no place\
    \ available here\") == \"there is no place\"\n   Evaluated: \" is no  there place\
    \ \" == \"there is no place\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpznvspldh.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpznvspldh.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpznvspldh.jl:54\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"I Hi am   Hussein\" == \"Hi am Hussein\"\
    \nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpznvspldh.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpznvspldh.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpznvspldh.jl:55\n  Expression: candidate(\"go for it\") ==\
    \ \"go for it\"\n  "
  timestamp: 1659978344
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    for word in split(sentence)\n        if not isprime(length(word))\n  \
    \          deleteat!(sentence,find(x->x==word,split(sentence)))\n        end\n\
    \    end\n    return join(sentence)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpu6luixtv.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpu6luixtv.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: not not\
    \ defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpu6luixtv.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu6luixtv.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu6luixtv.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpu6luixtv.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: not not\
    \ defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpu6luixtv.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu6luixtv.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu6luixtv.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpu6luixtv.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: not not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpu6luixtv.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu6luixtv.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu6luixtv.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpu6luixtv.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: not not\
    \ defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpu"
  timestamp: 1659978345
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    isprime(n::Int) = (n == 2) || (n !=\
    \ 1) && (n % 2 != 0) && all(n % i != 0 for i in 3:2:round(Int, sqrt(n)))\n   \
    \ words = filter(isprime, map(length, words))\n    return join(words, \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptipmmcix.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmptipmmcix.jl:31\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \"2\" == \"is\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptipmmcix.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptipmmcix.jl:30\ntest set: Test\
    \ Failed at /tmp/tmptipmmcix.jl:32\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \"2 3\" == \"go for\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptipmmcix.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptipmmcix.jl:30\ntest set: Test\
    \ Failed at /tmp/tmptipmmcix.jl:33\n  Expression: candidate(\"there is no place\
    \ available here\") == \"there is no place\"\n   Evaluated: \"5 2 2 5\" == \"\
    there is no place\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptipmmcix.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptipmmcix.jl:30\ntest set: Test\
    \ Failed at /tmp/tmptipmmcix.jl:34\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"2 2 7\" == \"Hi am Hussein\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptipmmcix.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptipmmcix.jl:30\ntest set: Test\
    \ Failed at /tmp/tmptipmmcix.jl:35\n  Expression: candidate(\"go for it\") ==\
    \ \"go for it\"\n   Evaluated: \"2 3 2\" == \"go for it\"\nSt"
  timestamp: 1659978344
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    possible_words = split(sentence, \" \")\n    list_of_primes = primes(length(possible_words[1]))\n\
    \    for index in 1:length(possible_words)\n        for j in 1:length(list_of_primes)\n\
    \            if length(possible_words[index]) == list_of_primes[j]\n         \
    \       print(possible_words[index], \" \")\n            end\n        end\n  \
    \  end\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpu1wcu7md.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpu1wcu7md.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: primes\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpu1wcu7md.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu1wcu7md.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu1wcu7md.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpu1wcu7md.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: primes not\
    \ defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpu1wcu7md.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu1wcu7md.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu1wcu7md.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpu1wcu7md.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: primes not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpu1wcu7md.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu1wcu7md.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu1wcu7md.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpu1wcu7md.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: primes\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Ma"
  timestamp: 1659978345
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    n = split(sentence)\n    #print(n)\n    s = []\n    for i in n\n     \
    \   if isprime(length(i))\n            push!(s,i)\n        end\n    end\n    return\
    \ join(s,\" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp9iewfn0o.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmp9iewfn0o.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp9iewfn0o.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9iewfn0o.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9iewfn0o.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp9iewfn0o.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp9iewfn0o.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9iewfn0o.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9iewfn0o.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp9iewfn0o.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp9iewfn0o.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9iewfn0o.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9iewfn0o.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp9iewfn0o.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978345
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    arr = split(sentence, \" \")\n    final_str = \"\"\n    for word in arr\n\
    \        if isprime(length(word))\n            final_str *= \"$word \"\n     \
    \   end\n    end\n    rstrip(final_str)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpdq6w92tl.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpdq6w92tl.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpdq6w92tl.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdq6w92tl.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdq6w92tl.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpdq6w92tl.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpdq6w92tl.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdq6w92tl.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdq6w92tl.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpdq6w92tl.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpdq6w92tl.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdq6w92tl.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdq6w92tl.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpdq6w92tl.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978346
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    sentence_words = split(sentence, \" \")\n    prime_words = []\n    for\
    \ word in sentence_words\n        if isprime(length(word))\n            push!(prime_words,\
    \ word)\n        end\n    end\n    return join(prime_words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpgu8v6l6v.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpgu8v6l6v.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpgu8v6l6v.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgu8v6l6v.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgu8v6l6v.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpgu8v6l6v.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpgu8v6l6v.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgu8v6l6v.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgu8v6l6v.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpgu8v6l6v.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpgu8v6l6v.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgu8v6l6v.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgu8v6l6v.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpgu8v6l6v.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978346
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    if length(sentence) < 1 || length(sentence) > 100\n        error(\"The\
    \ length of the sentence must be between 1 and 100\")\n    end\n    if length(split(sentence))\
    \ == 0\n        error(\"The sentence is empty\")\n    end\n    result = \"\"\n\
    \    words = split(sentence)\n    is_prime(n) = n > 1 && all(rem(n, i) != 0 for\
    \ i in 2:floor(Int, sqrt(n)))\n    for i in 1:length(words)\n        if is_prime(length(words[i]))\n\
    \            result = result * \" \" * words[i]\n        end\n    end\n    return\
    \ strip(result)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659978343
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    lowercase_sentence = lowercase(sentence)\n    words = split(lowercase_sentence,\
    \ \" \")\n    primes = primes_in_range(1, maximum([length(word) for word in words]))\n\
    \    filtered_words = filter(word -> length(word) in primes, words)\n    return\
    \ join(filtered_words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpusguhyzh.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpusguhyzh.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: primes_in_range\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpusguhyzh.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpusguhyzh.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpusguhyzh.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpusguhyzh.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: primes_in_range\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpusguhyzh.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpusguhyzh.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpusguhyzh.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpusguhyzh.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: primes_in_range not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpusguhyzh.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpusguhyzh.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpusguhyzh.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpusguhyzh.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: primes_in_range\
    \ not defined\n  Stacktrace:\n   [1] words_in_"
  timestamp: 1659978346
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    # get the words of the sentence\n    words = split(sentence, \" \")\n\
    \    prime_words = []\n    for word in words\n        word_length = length(word)\n\
    \        if is_prime(word_length)\n            push!(prime_words, word)\n    \
    \    end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpb1r46u4u.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpb1r46u4u.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpb1r46u4u.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb1r46u4u.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb1r46u4u.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpb1r46u4u.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpb1r46u4u.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb1r46u4u.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb1r46u4u.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpb1r46u4u.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: is_prime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpb1r46u4u.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb1r46u4u.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb1r46u4u.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpb1r46u4u.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n "
  timestamp: 1659978346
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    # write your code here\n    return \"print('Hello world')\"\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpks2vuvuh.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpks2vuvuh.jl:29\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \"print('Hello world')\" == \"is\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpks2vuvuh.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpks2vuvuh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpks2vuvuh.jl:30\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \"print('Hello world')\" == \"go for\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpks2vuvuh.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpks2vuvuh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpks2vuvuh.jl:31\n  Expression: candidate(\"there is no place\
    \ available here\") == \"there is no place\"\n   Evaluated: \"print('Hello world')\"\
    \ == \"there is no place\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpks2vuvuh.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpks2vuvuh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpks2vuvuh.jl:32\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"print('Hello world')\" == \"Hi am Hussein\"\
    \nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpks2vuvuh.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpks2vuvuh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpks2vuvuh.jl:33\n  Expression: candidate(\"go"
  timestamp: 1659978346
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    w = split(sentence, \" \")\n    word_list = []\n    for word in w\n  \
    \      if isprime(length(word))\n            push!(word_list, word)\n        end\n\
    \    end\n    join(word_list, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpaxzl82pp.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpaxzl82pp.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpaxzl82pp.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaxzl82pp.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaxzl82pp.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpaxzl82pp.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpaxzl82pp.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaxzl82pp.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaxzl82pp.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpaxzl82pp.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpaxzl82pp.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaxzl82pp.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaxzl82pp.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpaxzl82pp.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978347
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    return sentence\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp6xwlgxz.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp6xwlgxz.jl:1\n\
    in expression starting at /tmp/tmpp6xwlgxz.jl:1\n"
  stdout: ''
  timestamp: 1659978345
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    \n    word_list = split(sentence)\n    answer = []\n    \n    for word\
    \ in word_list\n        if isprime(length(word))\n            push!(answer, word)\n\
    \        end\n    end\n    \n    return join(answer, \" \")\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp5gbsv154.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmp5gbsv154.jl:38\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp5gbsv154.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5gbsv154.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5gbsv154.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp5gbsv154.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp5gbsv154.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5gbsv154.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5gbsv154.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp5gbsv154.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp5gbsv154.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5gbsv154.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5gbsv154.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp5gbsv154.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978347
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    # code goes here\n    \n    \n    return \"\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpt4h60_4x.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpt4h60_4x.jl:31\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \"\" == \"is\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt4h60_4x.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt4h60_4x.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpt4h60_4x.jl:32\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \"\" == \"go for\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpt4h60_4x.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpt4h60_4x.jl:30\ntest set: Test Failed at /tmp/tmpt4h60_4x.jl:33\n\
    \  Expression: candidate(\"there is no place available here\") == \"there is no\
    \ place\"\n   Evaluated: \"\" == \"there is no place\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt4h60_4x.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt4h60_4x.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpt4h60_4x.jl:34\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"\" == \"Hi am Hussein\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt4h60_4x.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt4h60_4x.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpt4h60_4x.jl:35\n  Expression: candidate(\"go for it\") ==\
    \ \"go for it\"\n   Evaluated: \"\" == \"go for it\"\nStacktrace:\n [1] macro "
  timestamp: 1659978346
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, ' ')\n    new_words = []\n    for word in words\n\
    \        if isprime(length(word))\n            push!(new_words, word)\n      \
    \  end\n    end\n    return join(new_words, ' ')\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpqqsxibhs.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpqqsxibhs.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpqqsxibhs.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqqsxibhs.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqqsxibhs.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpqqsxibhs.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpqqsxibhs.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqqsxibhs.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqqsxibhs.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpqqsxibhs.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpqqsxibhs.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqqsxibhs.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqqsxibhs.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpqqsxibhs.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978347
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    sentence_words = split(sentence, ' ')\n    sentence_words_filtered = filter(sentence_words)\
    \ do x\n        isprime(length(x))\n    end\n    join(sentence_words_filtered,\
    \ ' ')\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpr_tl_yu4.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpr_tl_yu4.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::SubString{String})\n \
    \    @ Main /tmp/tmpr_tl_yu4.jl:23\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpr_tl_yu4.jl:22\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpr_tl_yu4.jl:32 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpr_tl_yu4.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpr_tl_yu4.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::SubString{String})\n \
    \    @ Main /tmp/tmpr_tl_yu4.jl:23\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpr_tl_yu4.jl:22\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpr_tl_yu4.jl:33 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpr_tl_yu4.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpr_tl_yu4.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::SubString{String})\n\
    \     @ Main /tmp/tmpr_tl_yu4.jl:23\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpr_tl_yu4.jl:22\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Te"
  timestamp: 1659978348
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    # Convert list of string to list of\
    \ int\n    # From [\"1\", \"2\", \"3\"] to [1, 2, 3]\n    # words = map(int, words)\n\
    \    words = map(x -> parse(Int, x), words)\n    # Remove even number\n    # i.e.\
    \ [1, 2, 3] to [1, 3]\n    words = filter(x -> x % 2 != 0, words)\n    # Convert\
    \ list of int to list of string\n    # From [1, 2, 3] to [\"1\", \"2\", \"3\"\
    ]\n    # words = map(string, words)\n    words = map(x -> string(x), words)\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpt6e2lf3p.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpt6e2lf3p.jl:40\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  ArgumentError: invalid\
    \ base 10 digit 'T' in \"This\"\n  Stacktrace:\n    [1] tryparse_internal(#unused#::Type{Int64},\
    \ s::SubString{String}, startpos::Int64, endpos::Int64, base_::Int64, raise::Bool)\n\
    \      @ Base ./parse.jl:137\n    [2] parse(::Type{Int64}, s::SubString{String};\
    \ base::Nothing)\n      @ Base ./parse.jl:241\n    [3] parse\n      @ ./parse.jl:241\
    \ [inlined]\n    [4] #1\n      @ /tmp/tmpt6e2lf3p.jl:25 [inlined]\n    [5] iterate\n\
    \      @ ./generator.jl:47 [inlined]\n    [6] _collect(c::Vector{SubString{String}},\
    \ itr::Base.Generator{Vector{SubString{String}}, var\"#1#4\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [7] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [8] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [9] words_in_sentence(sentence::String)\n      @ Main /tmp/tmpt6e2lf3p.jl:25\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [11] macro expansion\n      @ /tmp/tmpt6e2lf3p.jl:40 [inlined]\n\
    \   [12] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [13] top-level scope\n      @ /tmp/tmpt6e2lf3p.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpt6e2lf3p.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  ArgumentError: invalid\
    \ base 10 digit 'l' in \"lets\"\n  Stacktrace:\n    [1] tryparse_internal(#unused#::Type{Int64},\
    \ s::SubString{String}, startpos::Int64, endpos::Int64, base_::Int64, raise::Bool)\n\
    \      @ Base ./parse.jl:137\n    [2] parse(::Type{Int64}, s::SubString{String};\
    \ base::Nothing)\n      @ Base ./parse.jl:241\n    [3] parse\n      @ ./parse.jl:241\
    \ [inlined]\n    [4] #1\n      @ /tmp/tmpt6e2lf3p.jl:25 [inlined]\n    [5] iterate\n\
    \      @ ./generator.jl:47 [inlined]\n    [6] _collect(c::Vector{SubString{String}},\
    \ itr::Base.Generator{Vector{SubString{String}}, var\"#1#4\"}, #unused#::Base.Elty"
  timestamp: 1659978349
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_length_words = []\n    for word\
    \ in words\n        word_length = length(word)\n        if is_prime(word_length)\n\
    \            push!(prime_length_words, word)\n        end\n    end\n    join(prime_length_words,\
    \ \" \")\nend\nis_prime(word_length::Int)::Bool = word_length in [2, 3, 5, 7]\n\
    using Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659978345
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    result = []\n    for word in words\n\
    \        word_length = length(word)\n        if isprime(word_length)\n       \
    \     push!(result, word)\n        end\n    end\n    join(result, \" \")\nend\n\
    using Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp_3inkom9.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmp_3inkom9.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp_3inkom9.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_3inkom9.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_3inkom9.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp_3inkom9.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp_3inkom9.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_3inkom9.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_3inkom9.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp_3inkom9.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp_3inkom9.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_3inkom9.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_3inkom9.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp_3inkom9.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978348
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    sentence_words = split(sentence)\n    prime_length_words = filter(x ->\
    \ isprime(length(x)), sentence_words)\n    join(prime_length_words, \" \")\nend\n\
    using Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpx14vohal.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpx14vohal.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::SubString{String})\n \
    \    @ Main /tmp/tmpx14vohal.jl:22\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpx14vohal.jl:22\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpx14vohal.jl:30 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpx14vohal.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpx14vohal.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::SubString{String})\n \
    \    @ Main /tmp/tmpx14vohal.jl:22\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpx14vohal.jl:22\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpx14vohal.jl:31 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpx14vohal.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpx14vohal.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::SubString{String})\n\
    \     @ Main /tmp/tmpx14vohal.jl:22\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpx14vohal.jl:22\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Te"
  timestamp: 1659978348
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    result = []\n    for i in words\n       \
    \ if isprime(length(i))\n            push!(result, i)\n        end\n    end\n\
    \    join(result, \" \")\nend\n \nusing Test\n\n@testset begin\n\ncandidate =\
    \ words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp3263b3gk.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmp3263b3gk.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp3263b3gk.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3263b3gk.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3263b3gk.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp3263b3gk.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp3263b3gk.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3263b3gk.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3263b3gk.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp3263b3gk.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp3263b3gk.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3263b3gk.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3263b3gk.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp3263b3gk.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978348
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n  prime_sentence = \"\"\n  sentence_array = split(sentence, ' ')\n  for word\
    \ in sentence_array\n    if isprime(length(word))\n      prime_sentence = prime_sentence\
    \ * word * \" \"\n    end\n  end\n  return prime_sentence\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpr0k9tqn_.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpr0k9tqn_.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpr0k9tqn_.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr0k9tqn_.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr0k9tqn_.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpr0k9tqn_.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpr0k9tqn_.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr0k9tqn_.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr0k9tqn_.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpr0k9tqn_.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpr0k9tqn_.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr0k9tqn_.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr0k9tqn_.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpr0k9tqn_.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978349
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpfklbb00e.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpfklbb00e.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpfklbb00e.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfklbb00e.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfklbb00e.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpfklbb00e.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpfklbb00e.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfklbb00e.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-"
  timestamp: 1659978350
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    function is_prime(n::Int)::Bool\n\
    \        if n < 2\n            return false\n        end\n        if n == 2\n\
    \            return true\n        end\n        if n % 2 == 0\n            return\
    \ false\n        end\n        for i = 3:2:floor(Int,sqrt(n))\n            if n\
    \ % i == 0\n                return false\n            end\n        end\n     \
    \   return true\n    end\n    function is_prime_length(s::String)::Bool\n    \
    \    return is_prime(length(s))\n    end\n    prime_words = filter(is_prime_length,\
    \ words)\n    return join(prime_words, \" \")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpoykanzlx.jl:47

    '
  stdout: "test set: Error During Test at /tmp/tmpoykanzlx.jl:50\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  MethodError: no method\
    \ matching (::var\"#is_prime_length#2\"{var\"#is_prime#1\"})(::SubString{String})\n\
    \  Closest candidates are:\n    (::var\"#is_prime_length#2\")(!Matched::String)\
    \ at /tmp/tmpoykanzlx.jl:39\n  Stacktrace:\n   [1] filter(f::var\"#is_prime_length#2\"\
    {var\"#is_prime#1\"}, a::Vector{SubString{String}})\n     @ Base ./array.jl:2484\n\
    \   [2] words_in_sentence(sentence::String)\n     @ Main /tmp/tmpoykanzlx.jl:42\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpoykanzlx.jl:50 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpoykanzlx.jl:49\ntest set:\
    \ Error During Test at /tmp/tmpoykanzlx.jl:51\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  MethodError: no method\
    \ matching (::var\"#is_prime_length#2\"{var\"#is_prime#1\"})(::SubString{String})\n\
    \  Closest candidates are:\n    (::var\"#is_prime_length#2\")(!Matched::String)\
    \ at /tmp/tmpoykanzlx.jl:39\n  Stacktrace:\n   [1] filter(f::var\"#is_prime_length#2\"\
    {var\"#is_prime#1\"}, a::Vector{SubString{String}})\n     @ Base ./array.jl:2484\n\
    \   [2] words_in_sentence(sentence::String)\n     @ Main /tmp/tmpoykanzlx.jl:42\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpoykanzlx.jl:51 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpoykanzlx.jl:49\ntest set:\
    \ Error During Test at /tmp/tmpoykanzlx.jl:52\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ MethodError: no method matching (::var\"#is_prime_length#2\"{var\"#is_prime#1\"\
    })(::SubString{String})\n  Closest candidates are:\n    ("
  timestamp: 1659978350
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  result = []\n    for w in words\n        if length(w) in primes\n         \
    \   push!(result, w)\n        end\n    end\n    return join(result, \" \")\nend\n\
    using Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659978346
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    return \"\".\nend\nusing Pkg\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5_cift3s.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5_cift3s.jl:1\n\
    in expression starting at /tmp/tmp5_cift3s.jl:1\n"
  stdout: ''
  timestamp: 1659978347
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, ' ')\n    prime_words = []\n    for word in words\n\
    \        if isprime(length(word))\n            push!(prime_words, word)\n    \
    \    end\n    end\n    join(prime_words, ' ')\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpnj9j70ce.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpnj9j70ce.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpnj9j70ce.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnj9j70ce.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnj9j70ce.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpnj9j70ce.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpnj9j70ce.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnj9j70ce.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnj9j70ce.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpnj9j70ce.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpnj9j70ce.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnj9j70ce.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnj9j70ce.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpnj9j70ce.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978349
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    primes = []\n    result = []\n    for word\
    \ in words\n        if isprime(length(word)) == true\n            push!(primes,\
    \ word)\n        end\n    end\n    return join(primes, \" \")\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpy639numu.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpy639numu.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpy639numu.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy639numu.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy639numu.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpy639numu.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpy639numu.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy639numu.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy639numu.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpy639numu.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpy639numu.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy639numu.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy639numu.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpy639numu.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978349
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    words = split(sentence, \" \")\n  \
    \  ws = []\n    for w in words\n        if length(w) in primes\n            push!(ws,\
    \ w)\n        end\n    end\n    join(ws, \" \")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659978346
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    sentence_splitted = split(sentence, \" \")\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9qyhj6_c.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9qyhj6_c.jl:1\n\
    in expression starting at /tmp/tmp9qyhj6_c.jl:1\n"
  stdout: ''
  timestamp: 1659978347
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    result = \"\"\n    for word in split(sentence)\n        if isprime(length(word))\n\
    \            result = result*(word*\" \")\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpd5_mz0u1.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpd5_mz0u1.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpd5_mz0u1.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd5_mz0u1.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd5_mz0u1.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpd5_mz0u1.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpd5_mz0u1.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd5_mz0u1.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd5_mz0u1.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpd5_mz0u1.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpd5_mz0u1.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd5_mz0u1.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd5_mz0u1.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpd5_mz0u1.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978349
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    result = []\n    for word in words\n\
    \        length = length(word)\n        is_prime = true\n        for i in 2:sqrt(length)\n\
    \            if mod(length, i) == 0\n                is_prime = false\n      \
    \          break\n            end\n        end\n        if is_prime\n        \
    \    push!(result, word)\n        end\n    end\n    join(result, \" \")\nend\n\
    using Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwyg59rqg.jl:40

    '
  stdout: "test set: Error During Test at /tmp/tmpwyg59rqg.jl:43\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: length\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwyg59rqg.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwyg59rqg.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwyg59rqg.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpwyg59rqg.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: length not\
    \ defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpwyg59rqg.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwyg59rqg.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwyg59rqg.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpwyg59rqg.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: length not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpwyg59rqg.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwyg59rqg.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwyg59rqg.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpwyg59rqg.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: length\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Ma"
  timestamp: 1659978349
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    isprime(n::Int) = all(n % i != 0 for\
    \ i in 2:n-1)\n    return join(filter(x -> isprime(length(x)), words), \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_o87jzvw.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmp_o87jzvw.jl:30\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \"is a\" == \"is\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_o87jzvw.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_o87jzvw.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp_o87jzvw.jl:33\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"Hi I am Hussein\" == \"Hi am Hussein\"\
    \nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_o87jzvw.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_o87jzvw.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659978348
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    #    start coding\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmprnsogxok.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmprnsogxok.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmprnsogxok.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprnsogxok.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprnsogxok.jl:27\ntest set:\
    \ Error During Test at /tmp/tmprnsogxok.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmprnsogxok.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprnsogxok.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-"
  timestamp: 1659978351
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    \n    words = sentence.split(\" \")\n    n = length(words)\n    # check\
    \ if word contains only letters\n    for i in 1:n\n        if !occursin(\"a\"\
    , words[i])\n            println(\"it must contain only letters\")\n         \
    \   return \"NaN\"\n        end\n    end\n    # check if the sentence contains\
    \ only words\n    for i in 1:n\n        if !occursin(\" \", words[i])\n      \
    \      println(\"it must be a sentence\")\n            return \"NaN\"\n      \
    \  end\n    end\n    # check if the sentence length is between 1 and 100\n   \
    \ if (n > 100) || (n < 1)\n        println(\"it must be between 1 and 100\")\n\
    \        return \"NaN\"\n    end\n    # check if the length of each word is a\
    \ prime number\n    arr = []\n    for i in 1:n\n        x = length(words[i])\n\
    \        if (x == 1) || (x == 2)\n            push!(arr, words[i])\n        else\n\
    \            count = 0\n            for j in 2:x\n                if x % j ==\
    \ 0\n                    count += 1\n                end\n            end\n  \
    \          if count == 0\n                push!(arr, words[i])\n            end\n\
    \        end\n    end\n    return join(arr, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpbdeu_6br.jl:65

    '
  stdout: "test set: Error During Test at /tmp/tmpbdeu_6br.jl:68\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  type String has no field\
    \ split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] words_in_sentence(sentence::String)\n     @ Main /tmp/tmpbdeu_6br.jl:22\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpbdeu_6br.jl:68 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpbdeu_6br.jl:67\ntest set:\
    \ Error During Test at /tmp/tmpbdeu_6br.jl:69\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  type String has no field\
    \ split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] words_in_sentence(sentence::String)\n     @ Main /tmp/tmpbdeu_6br.jl:22\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpbdeu_6br.jl:69 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpbdeu_6br.jl:67\ntest set:\
    \ Error During Test at /tmp/tmpbdeu_6br.jl:70\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ type String has no field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] words_in_sentence(sentence::String)\n     @ Main /tmp/tmpbdeu_6br.jl:22\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpbdeu_6br.jl:70 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpbdeu_6br.jl:67\ntest set:\
    \ Error During Test at /tmp/tmpbdeu_6br.jl:71\n  Test threw exception\n  Expression:\
    \ candidate(\"H"
  timestamp: 1659978350
- exit_code: -1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_word_lengths = Set([3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97])\n    return join(join(prime_word_lengths .== map(length, words) .*\
    \ words), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpvc4cmids.jl:30\n  Test threw
    exception\n  Expression: candidate("This is a test") == "is"\n  DimensionMismatch("arrays
    could not be broadcast to a common size; got a dimension with lengths 24 and 4")\n  Stacktrace:\n    [1]
    _bcs1\n      @ ./broadcast.jl:516 [inlined]\n    [2] _bcs\n      @ ./broadcast.jl:510
    [inlined]\n    [3] broadcast_shape\n      @ ./broadcast.jl:504 [inlined]\n    [4]
    combine_axes\n      @ ./broadcast.jl:499 [inlined]\n    [5] instantiate\n      @
    ./broadcast.jl:281 [inlined]\n    [6] materialize\n      @ ./broadcast.jl:860
    [inlined]\n    [7] words_in_sentence(sentence::String)\n      @ Main /tmp/tmpvc4cmids.jl:23\n    [8]
    macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n    [9] macro expansion\n      @ /tmp/tmpvc4cmids.jl:30 [inlined]\n   [10]
    macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [11] top-level scope\n      @ /tmp/tmpvc4cmids.jl:29\ntest set:
    Error During Test at /tmp/tmpvc4cmids.jl:31\n  Test threw exception\n  Expression:
    candidate("lets go for swimming") == "go for"\n  DimensionMismatch("arrays could
    not be broadcast to a common size; got a dimension with lengths 24 and 4")\n  Stacktrace:\n    [1]
    _bcs1\n      @ ./broadcast.jl:516 [inlined]\n    [2] _bcs\n      @ ./broadcast.jl:510
    [inlined]\n    [3] broadcast_shape\n      @ ./broadcast.jl:504 [inlined]\n    [4]
    combine_axes\n      @ ./broadcast.jl:499 [inlined]\n    [5] instantiate\n      @
    ./broadcast.jl:281 [inlined]\n    [6] materialize\n      @ ./broadcast.jl:860
    [inlined]\n    [7] words_in_sentence(sentence::String)\n      @ Main /tmp/tmpvc4cmids.jl:23\n    [8]
    macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n    [9] macro expansion\n      @ /tmp/tmpvc4cmids.jl:31 [inlined]\n   [10]
    macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [11] top-level scope\n    '
  timestamp: 1659978351
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    new_words = []\n    for word in words\n \
    \       if isprime(length(word))\n            push!(new_words, word)\n       \
    \ end\n    end\n    join(new_words, \" \")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpzdrjao28.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpzdrjao28.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpzdrjao28.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzdrjao28.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzdrjao28.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpzdrjao28.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpzdrjao28.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzdrjao28.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzdrjao28.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpzdrjao28.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpzdrjao28.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzdrjao28.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzdrjao28.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpzdrjao28.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978350
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    output = String[]\n    primes = [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97]\n    for word in words\n        if length(word) in primes\n\
    \            push!(output, word)\n        end\n    end\n    join(output, \" \"\
    )\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659978347
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    res = \"\"\n    for i in words\n \
    \       len = length(i)\n        flag = true\n        for j in 2:len-1\n     \
    \       if len % j == 0\n                flag = false\n                break\n\
    \            end\n        end\n        if flag\n            res = res * \" \"\
    \ * i\n        end\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7d2dns_m.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmp7d2dns_m.jl:43\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \" is a\" == \"is\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7d2dns_m.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7d2dns_m.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp7d2dns_m.jl:44\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \" go for\" == \"go for\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7d2dns_m.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7d2dns_m.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp7d2dns_m.jl:45\n  Expression: candidate(\"there is no place\
    \ available here\") == \"there is no place\"\n   Evaluated: \" there is no place\"\
    \ == \"there is no place\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7d2dns_m.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7d2dns_m.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp7d2dns_m.jl:46\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \" Hi I am Hussein\" == \"Hi am Hussein\"\
    \nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7d2dns_m.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7d2dns_m.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp7d2dns_m.jl:47\n  Expression: candidate(\"go for it\") ==\
    \ \"go for it\"\n   Evalua"
  timestamp: 1659978350
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    \n    # Split the sentence in words\n    words = split(sentence)\n   \
    \ \n    # Filter the prime numbers\n    filtered_words = filter(word -> isprime(length(word)),\
    \ words)\n    \n    # Join the words into a sentence\n    return join(filtered_words,\
    \ \" \")\nend\n \nprintln(words_in_sentence(\"This is a test\"))\nprintln(words_in_sentence(\"\
    lets go for swimming\"))\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: isprime not defined\nStacktrace:\n [1]\
    \ (::var\"#1#2\")(word::SubString{String})\n   @ Main /tmp/tmpdgloohf2.jl:26\n\
    \ [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n   @ Base ./array.jl:2484\n\
    \ [3] words_in_sentence(sentence::String)\n   @ Main /tmp/tmpdgloohf2.jl:26\n\
    \ [4] top-level scope\n   @ /tmp/tmpdgloohf2.jl:32\nin expression starting at\
    \ /tmp/tmpdgloohf2.jl:32\n"
  stdout: ''
  timestamp: 1659978349
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    \n    # your code goes here\n    words = String[]\n    for word in split(sentence,\
    \ \" \")\n        l = length(word)\n        push!(words, word) if l > 1 && isprime(l)\n\
    \    end\n    join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpwkclsr44.jl:24 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwkclsr44.jl:26\n\
    in expression starting at /tmp/tmpwkclsr44.jl:26\n"
  stdout: ''
  timestamp: 1659978349
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    # your code here ...\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp1_q56g4c.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp1_q56g4c.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmp1_q56g4c.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1_q56g4c.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1_q56g4c.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp1_q56g4c.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmp1_q56g4c.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1_q56g4c.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-"
  timestamp: 1659978352
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    \"\"\"\n    Returns a string that contains the words from the original\
    \ sentence,\n    whose lengths are prime numbers,\n    the order of the words\
    \ in the new string should be the same as the original one.\n    \"\"\"\n    words\
    \ = split(sentence, \" \")\n    word_lens = [length(word) for word in words]\n\
    \    primos = [word_len for word_len in word_lens if isprime(word_len)]\n    idxs\
    \ = [word_lens.index(primo) for primo in primos]\n    return \" \".join([words[idx]\
    \ for idx in idxs])\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp0wb0cg5t.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmp0wb0cg5t.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#2#6\")(word_len::Int64)\n     \
    \ @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n   \
    \ [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{Int64},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#2#6\", Vector{Int64}}, typeof(identity)})\n\
    \      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [6] words_in_sentence(sentence::String)\n      @ Main /tmp/tmp0wb0cg5t.jl:28\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp0wb0cg5t.jl:37 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp0wb0cg5t.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp0wb0cg5t.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#2#6\")(word_len::Int64)\n     \
    \ @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n   \
    \ [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{Int64},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#2#6\", Vector{Int64}}, typeof(identity)})\n\
    \      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [6] words_in_sentence(sentence::String)\n      @ Main /tmp/tmp0wb0cg5t.jl:28\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp0wb0cg5t.jl:38 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp0wb0cg5t.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp0wb0cg5t.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\""
  timestamp: 1659978351
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    possible_primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    new_sentence = \"\"\n    for\
    \ word in split(sentence, \" \")\n        if length(word) in possible_primes\n\
    \            new_sentence = new_sentence * word * \" \"\n        end\n    end\n\
    \    return strip(new_sentence)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659978348
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    # TODO: Implement the solution\n    return \"Not Implemented\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbu03tkkd.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpbu03tkkd.jl:29\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \"Not Implemented\" == \"is\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbu03tkkd.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbu03tkkd.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpbu03tkkd.jl:30\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \"Not Implemented\" == \"go for\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbu03tkkd.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbu03tkkd.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpbu03tkkd.jl:31\n  Expression: candidate(\"there is no place\
    \ available here\") == \"there is no place\"\n   Evaluated: \"Not Implemented\"\
    \ == \"there is no place\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbu03tkkd.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbu03tkkd.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpbu03tkkd.jl:32\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"Not Implemented\" == \"Hi am Hussein\"\
    \nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbu03tkkd.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbu03tkkd.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpbu03tkkd.jl:33\n  Expression: candidate(\"go for it\") ==\
    \ \"go for"
  timestamp: 1659978350
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    sentence = split(sentence)\n    res = []\n    for i in sentence\n    \
    \    if isprime(length(i))\n            push!(res, i)\n        end\n    end\n\
    \    return join(res, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp771jamnf.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmp771jamnf.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp771jamnf.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp771jamnf.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp771jamnf.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp771jamnf.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp771jamnf.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp771jamnf.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp771jamnf.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp771jamnf.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp771jamnf.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp771jamnf.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp771jamnf.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp771jamnf.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978351
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    return join(filter(is_prime, length.(split(sentence, \" \"))), \" \")\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpikbxit24.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpikbxit24.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpikbxit24.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpikbxit24.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpikbxit24.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpikbxit24.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpikbxit24.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpikbxit24.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpikbxit24.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpikbxit24.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: is_prime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpikbxit24.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpikbxit24.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpikbxit24.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpikbxit24.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n "
  timestamp: 1659978352
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    \n    sentence_words = split(sentence, \" \")\n    prime_words = []\n\
    \    \n    for word in sentence_words\n        word_length = length(word)\n  \
    \      if isprime(word_length)\n            push!(prime_words, word)\n       \
    \ end\n    end\n    \n    prime_sentence = join(prime_words, \" \")\n    \n  \
    \  return prime_sentence\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp2eq0tlxd.jl:38

    '
  stdout: "test set: Error During Test at /tmp/tmp2eq0tlxd.jl:41\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp2eq0tlxd.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2eq0tlxd.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2eq0tlxd.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp2eq0tlxd.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp2eq0tlxd.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2eq0tlxd.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2eq0tlxd.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp2eq0tlxd.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp2eq0tlxd.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2eq0tlxd.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2eq0tlxd.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp2eq0tlxd.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978352
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpjqat4hmr.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpjqat4hmr.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpjqat4hmr.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjqat4hmr.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjqat4hmr.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpjqat4hmr.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpjqat4hmr.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjqat4hmr.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjqat4hmr.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpjqat4hmr.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpjqat4hmr.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjqat4hmr.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjqat4hmr.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpjqat4hmr.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978352
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    return \"your_code_here\"\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4xguh69d.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp4xguh69d.jl:28\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \"your_code_here\" == \"is\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4xguh69d.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4xguh69d.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp4xguh69d.jl:29\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \"your_code_here\" == \"go for\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4xguh69d.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4xguh69d.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp4xguh69d.jl:30\n  Expression: candidate(\"there is no place\
    \ available here\") == \"there is no place\"\n   Evaluated: \"your_code_here\"\
    \ == \"there is no place\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4xguh69d.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4xguh69d.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp4xguh69d.jl:31\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"your_code_here\" == \"Hi am Hussein\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4xguh69d.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4xguh69d.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp4xguh69d.jl:32\n  Expression: candidate(\"go for it\") ==\
    \ \"go for it\""
  timestamp: 1659978351
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    # YOUR CODE HERE\n    end\nusing Test\n\n@testset begin\n\ncandidate =\
    \ words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpljtoe0hp.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpljtoe0hp.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpljtoe0hp.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpljtoe0hp.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpljtoe0hp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpljtoe0hp.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpljtoe0hp.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpljtoe0hp.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-"
  timestamp: 1659978353
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    for i in words\n        for j in primes(3,\
    \ length(i))\n            if length(i) == j\n                println(i)\n    \
    \        end\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp849gkf8b.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmp849gkf8b.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: primes\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp849gkf8b.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp849gkf8b.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp849gkf8b.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp849gkf8b.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: primes not\
    \ defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmp849gkf8b.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp849gkf8b.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp849gkf8b.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp849gkf8b.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: primes not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp849gkf8b.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp849gkf8b.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp849gkf8b.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp849gkf8b.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: primes\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Ma"
  timestamp: 1659978352
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    filtered_words = [word for word in words\
    \ if all(word !== 'i' for i in [2:word] if word % i == 0)]\n    join(filtered_words)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpp1jcdv1s.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpp1jcdv1s.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  MethodError: no method\
    \ matching (::Colon)(::Int64, ::SubString{String})\n  Closest candidates are:\n\
    \    (::Colon)(::T, ::Any, !Matched::T) where T<:Real at ~/.conda/envs/polyglot/share/julia/base/range.jl:41\n\
    \    (::Colon)(::A, ::Any, !Matched::C) where {A<:Real, C<:Real} at ~/.conda/envs/polyglot/share/julia/base/range.jl:10\n\
    \    (::Colon)(::T, ::Any, !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:40\n\
    \    ...\n  Stacktrace:\n    [1] (::var\"#1#4\")(word::SubString{String})\n  \
    \    @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [5] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [6] words_in_sentence(sentence::String)\n      @ Main /tmp/tmpp1jcdv1s.jl:22\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpp1jcdv1s.jl:30 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpp1jcdv1s.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpp1jcdv1s.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  MethodError: no method\
    \ matching (::Colon)(::Int64, ::SubString{String})\n  Closest candidates are:\n\
    \    (::Colon)(::T, ::Any, !Matched::T) where T<:Real at ~/.conda/envs/polyglot/share/julia/base/range.jl:41\n\
    \    (::Colon)(::A, ::Any, !Matched::C) where {A<:Real, C<:Real} at ~/.conda/envs/polyglot/share/julia/base/range.jl:10\n\
    \    (::Colon)(::T, ::Any, !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:40\n\
    \    ...\n  Stacktrace:\n    [1] (::var\"#1#4\")(word::SubString{String})\n  \
    \    @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_t"
  timestamp: 1659978353
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    all_words = split(sentence)\n    words_with_prime_length = [\n       \
    \ word\n        for word in all_words\n        if isprime(length(word))\n    ]\n\
    \    return join(words_with_prime_length, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp9cqbo68r.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp9cqbo68r.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(word::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\", Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] words_in_sentence(sentence::String)\n      @ Main /tmp/tmp9cqbo68r.jl:22\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp9cqbo68r.jl:34 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp9cqbo68r.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp9cqbo68r.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(word::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\", Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] words_in_sentence(sentence::String)\n      @ Main /tmp/tmp9cqbo68r.jl:22\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp9cqbo68r.jl:35 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp9cqbo68r.jl:33\ntest set:\
    \ Error During Test at /tmp/tm"
  timestamp: 1659978353
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    new_sentence = []\n    for w in words\n \
    \       if isprime(length(w))\n            push!(new_sentence, w)\n        end\n\
    \    end\n    return join(new_sentence, \" \")\nend\n\"\"\"\n    You are given\
    \ a number n,\n    if n is divisible by 3 print \"fizz\",\n    if n is divisible\
    \ by 5 print \"buzz\",\n    if n is divisible by both 3 and 5 print \"fizzbuzz\"\
    ,\n    else print n.\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpknj2mgx2.jl:30\nin expression starting at\
    \ /tmp/tmpknj2mgx2.jl:30\n"
  stdout: ''
  timestamp: 1659978350
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    for word in split(sentence)\n        if !isprime(length(word))\n     \
    \       deleteat!(word)\n        end\n    end\n    return word\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpeksaaqsi.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpeksaaqsi.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpeksaaqsi.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeksaaqsi.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeksaaqsi.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpeksaaqsi.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpeksaaqsi.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeksaaqsi.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeksaaqsi.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpeksaaqsi.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpeksaaqsi.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeksaaqsi.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeksaaqsi.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpeksaaqsi.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978352
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    ret = \"\"\n    words = split(sentence)\n    for word in words\n     \
    \   if isprime(length(word))\n            ret = join([ret, word, \" \"])\n   \
    \     end\n    end\n    ret = strip(ret)\n    return ret\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpgxgk5b67.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpgxgk5b67.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpgxgk5b67.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgxgk5b67.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgxgk5b67.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpgxgk5b67.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpgxgk5b67.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgxgk5b67.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgxgk5b67.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpgxgk5b67.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpgxgk5b67.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgxgk5b67.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgxgk5b67.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpgxgk5b67.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978353
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    return \"\"\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpecedut3z.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpecedut3z.jl:28\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \"\" == \"is\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpecedut3z.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpecedut3z.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpecedut3z.jl:29\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \"\" == \"go for\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpecedut3z.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpecedut3z.jl:27\ntest set: Test Failed at /tmp/tmpecedut3z.jl:30\n\
    \  Expression: candidate(\"there is no place available here\") == \"there is no\
    \ place\"\n   Evaluated: \"\" == \"there is no place\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpecedut3z.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpecedut3z.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpecedut3z.jl:31\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"\" == \"Hi am Hussein\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpecedut3z.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpecedut3z.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpecedut3z.jl:32\n  Expression: candidate(\"go for it\") ==\
    \ \"go for it\"\n   Evaluated: \"\" == \"go for it\"\nStacktrace:\n [1] macro "
  timestamp: 1659978352
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    return sentence\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpu2qsph3t.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpu2qsph3t.jl:28\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \"This is a test\" == \"is\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu2qsph3t.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu2qsph3t.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpu2qsph3t.jl:29\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \"lets go for swimming\" == \"go for\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu2qsph3t.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu2qsph3t.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpu2qsph3t.jl:30\n  Expression: candidate(\"there is no place\
    \ available here\") == \"there is no place\"\n   Evaluated: \"there is no place\
    \ available here\" == \"there is no place\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpu2qsph3t.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpu2qsph3t.jl:27\ntest set: Test Failed at /tmp/tmpu2qsph3t.jl:31\n\
    \  Expression: candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n   Evaluated:\
    \ \"Hi I am Hussein\" == \"Hi am Hussein\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpu2qsph3t.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpu2qsph3t.jl:27\ntest set: Test Failed at /tmp/tmpu2qsph3t.jl:33\n\
    \  Expression: candidate(\"h"
  timestamp: 1659978352
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n  println(sentence)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmphenlkgec.jl:25

    '
  stdout: "This is a test\ntest set: Error During Test at /tmp/tmphenlkgec.jl:28\n\
    \  Test threw exception\n  Expression: candidate(\"This is a test\") == \"is\"\
    \n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ String\n  Closest candidates are:\n    convert(::Type{String}, !Matched::String)\
    \ at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmphenlkgec.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphenlkgec.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphenlkgec.jl:27\nlets go for\
    \ swimming\ntest set: Error During Test at /tmp/tmphenlkgec.jl:29\n  Test threw\
    \ exception\n  Expression: candidate(\"lets go for swimming\") == \"go for\"\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ String\n  Closest candidates are:\n    convert(::Type{String}, !Matched::String)\
    \ at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmphenlkgec.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphenlkgec.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/sr"
  timestamp: 1659978354
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, ' ')\n    primes = isprime.(length.(words))\n\
    \    words[primes] |> join\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpqezp3jiy.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpqezp3jiy.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpqezp3jiy.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqezp3jiy.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqezp3jiy.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpqezp3jiy.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpqezp3jiy.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqezp3jiy.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqezp3jiy.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpqezp3jiy.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpqezp3jiy.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqezp3jiy.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqezp3jiy.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpqezp3jiy.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978353
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    new_sentence = \"\"\n    for word in sentence.split(\" \")\n        is_prime\
    \ = true\n        for j in 2:Int(floor(sqrt(length(word))))\n            if length(word)\
    \ % j == 0\n                is_prime = false\n                break\n        \
    \    end\n        end\n        if is_prime\n            new_sentence = new_sentence\
    \ * \" \" * word\n        end\n    end\n    new_sentence = new_sentence[2:end]\n\
    \    return new_sentence\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpzn6ups10.jl:39

    '
  stdout: "test set: Error During Test at /tmp/tmpzn6ups10.jl:42\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  type String has no field\
    \ split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] words_in_sentence(sentence::String)\n     @ Main /tmp/tmpzn6ups10.jl:22\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzn6ups10.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzn6ups10.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpzn6ups10.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  type String has no field\
    \ split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] words_in_sentence(sentence::String)\n     @ Main /tmp/tmpzn6ups10.jl:22\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzn6ups10.jl:43 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzn6ups10.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpzn6ups10.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ type String has no field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] words_in_sentence(sentence::String)\n     @ Main /tmp/tmpzn6ups10.jl:22\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzn6ups10.jl:44 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzn6ups10.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpzn6ups10.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(\"H"
  timestamp: 1659978353
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    # your code here\nend\n\"\"\"\n    Given a string, return the longest\
    \ palindromic substring.\n    Example 1:\n    >>> longest_palindrome(\"cbbd\"\
    )\n    \"bb\"\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxmugmoq6.jl:23\nin expression starting at\
    \ /tmp/tmpxmugmoq6.jl:23\n"
  stdout: ''
  timestamp: 1659978351
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    len(sentence) > 100 && throw(ArgumentError(\"The sentence length should\
    \ be <= 100.\"))\n    sentence .== \" \" && throw(ArgumentError(\"Sentence should\
    \ have some words.\"))\n    sentence .== \".\" && throw(ArgumentError(\"Sentence\
    \ should have some words.\"))\n    sentence .== \",\" && throw(ArgumentError(\"\
    Sentence should have some words.\"))\n    sentence .== \"?\" && throw(ArgumentError(\"\
    Sentence should have some words.\"))\n    sentence .== \"!\" && throw(ArgumentError(\"\
    Sentence should have some words.\"))\n    ismatch(r\"[A-Za-z]*\", sentence) ||\
    \ throw(ArgumentError(\"Sentence should contain only letters.\"))\n    return\
    \ join(findall(r\"\\b\\w+\\b\", sentence))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp5xdu0bem.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmp5xdu0bem.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: len not\
    \ defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmp5xdu0bem.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5xdu0bem.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5xdu0bem.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp5xdu0bem.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: len not\
    \ defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmp5xdu0bem.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5xdu0bem.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5xdu0bem.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp5xdu0bem.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: len not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp5xdu0bem.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5xdu0bem.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5xdu0bem.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp5xdu0bem.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: len not\
    \ defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmp5"
  timestamp: 1659978354
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    # filter out non-prime words\n   \
    \ prime_words = filter(word -> isprime(length(word)), words)\n    # join the prime\
    \ words back with a space\n    return join(prime_words, \" \")\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpvhtfs9x1.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpvhtfs9x1.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(word::SubString{String})\n\
    \     @ Main /tmp/tmpvhtfs9x1.jl:23\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpvhtfs9x1.jl:23\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpvhtfs9x1.jl:32 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpvhtfs9x1.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpvhtfs9x1.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(word::SubString{String})\n\
    \     @ Main /tmp/tmpvhtfs9x1.jl:23\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpvhtfs9x1.jl:23\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpvhtfs9x1.jl:33 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpvhtfs9x1.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpvhtfs9x1.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(word::SubString{String})\n\
    \     @ Main /tmp/tmpvhtfs9x1.jl:23\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpvhtfs9x1.jl:23\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdli"
  timestamp: 1659978354
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    include(\"math\")\n    primes = [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97]\n    words_is_prime = []\n    for word in words\n        if\
    \ length(word) in primes\n            push!(words_is_prime, word)\n        end\n\
    \    end\n    return join(words_is_prime, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpaw7cuhne.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpaw7cuhne.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  SystemError: opening\
    \ file \"/tmp/math\": No such file or directory\n  Stacktrace:\n    [1] systemerror(p::String,\
    \ errno::Int32; extrainfo::Nothing)\n      @ Base ./error.jl:174\n    [2] #systemerror#68\n\
    \      @ ./error.jl:173 [inlined]\n    [3] systemerror\n      @ ./error.jl:173\
    \ [inlined]\n    [4] open(fname::String; lock::Bool, read::Nothing, write::Nothing,\
    \ create::Nothing, truncate::Nothing, append::Nothing)\n      @ Base ./iostream.jl:293\n\
    \    [5] open\n      @ ./iostream.jl:282 [inlined]\n    [6] open(f::Base.var\"\
    #364#365\"{String}, args::String; kwargs::Base.Pairs{Symbol, Union{}, Tuple{},\
    \ NamedTuple{(), Tuple{}}})\n      @ Base ./io.jl:328\n    [7] open\n      @ ./io.jl:328\
    \ [inlined]\n    [8] read\n      @ ./io.jl:436 [inlined]\n    [9] _include(mapexpr::Function,\
    \ mod::Module, _path::String)\n      @ Base ./loading.jl:1249\n   [10] include\n\
    \      @ ./client.jl:451 [inlined]\n   [11] words_in_sentence(sentence::String)\n\
    \      @ Main /tmp/tmpaw7cuhne.jl:22\n   [12] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [13] macro expansion\n      @ /tmp/tmpaw7cuhne.jl:37 [inlined]\n\
    \   [14] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [15] top-level scope\n      @ /tmp/tmpaw7cuhne.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpaw7cuhne.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  SystemError: opening file\
    \ \"/tmp/math\": No such file or directory\n  Stacktrace:\n    [1] systemerror(p::String,\
    \ errno::Int32; extrainfo::Nothing)\n      @ Base ./error.jl:174\n    [2] #systemerror#68\n\
    \      @ ./error.jl:173 [inlined]\n    [3] systemerror\n      @ ./error.jl:173\
    \ [inlined]\n    [4] open(fname::String; lock::Bool, read::Nothing, write::Nothing,\
    \ create::Nothing, truncate::Nothing, append::Nothing)\n      @ Base ./iostream.jl:293\n\
    \    [5] open\n      @ ./iostream.jl:282 [inlined]\n  "
  timestamp: 1659978356
- exit_code: -1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    n = length(sentence)\n    isPrime = trues(n)\n    isPrime[1] = false\n\
    \    isPrime[2:2:n] .= false\n    isPrime[3:2:n] .= false\n    isPrime[3:3:n]\
    \ .= false\n    start = findfirst(x -> x != ' ', sentence)\n    stop = -1\n  \
    \  for i in start:n\n        if sentence[i] == ' ' && stop == -1\n           \
    \ stop = i\n        elseif stop != -1 && sentence[i] != ' '\n            start\
    \ = i\n            stop = -1\n        end\n        if start != 1 && stop != -1\n\
    \            sentence[start:stop] = ' '*(stop-start+1)\n        end\n    end\n\
    \    return sentence\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmph5djbbse.jl:47\n  Test threw
    exception\n  Expression: candidate("This is a test") == "is"\n  MethodError: no
    method matching *(::Char, ::Int64)\n  Closest candidates are:\n    *(::Any, ::Any,
    !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    *(!Matched::T,
    ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,
    UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:88\n    *(::Union{AbstractChar,
    AbstractString}, !Matched::Union{AbstractChar, AbstractString}...) at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:260\n    ...\n  Stacktrace:\n   [1]
    words_in_sentence(sentence::String)\n     @ Main /tmp/tmph5djbbse.jl:37\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmph5djbbse.jl:47 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmph5djbbse.jl:46\n'''
  timestamp: 1659978356
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    \"\"\"\n    This function returns a new string that contains the words\
    \ from the sentence\n    whose lengths are prime numbers\n    \"\"\"\n    words\
    \ = split(sentence)\n    result = []\n    for word in words\n        len_word\
    \ = length(word)\n        if isprime(len_word)\n            push!(result, word)\n\
    \        end\n    end\n    join(result, \" \")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp4m3vjuax.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp4m3vjuax.jl:40\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp4m3vjuax.jl:29\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4m3vjuax.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4m3vjuax.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp4m3vjuax.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp4m3vjuax.jl:29\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4m3vjuax.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4m3vjuax.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp4m3vjuax.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp4m3vjuax.jl:29\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4m3vjuax.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4m3vjuax.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp4m3vjuax.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978354
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    # split sentence into words\n    words\
    \ = split(sentence, \" \")\n    sentence_length = length(words)\n    for i in\
    \ 1:sentence_length\n        if !(length(words[i]) in primes)\n            deleteat!(words,\
    \ i)\n        end\n    end\n    join(words, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp71y_rg7n.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmp71y_rg7n.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  BoundsError: attempt\
    \ to access 2-element Vector{SubString{String}} at index [3]\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp71y_rg7n.jl:26\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp71y_rg7n.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp71y_rg7n.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp71y_rg7n.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  BoundsError: attempt to\
    \ access 2-element Vector{SubString{String}} at index [4]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp71y_rg7n.jl:26\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp71y_rg7n.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp71y_rg7n.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp71y_rg7n.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ BoundsError: attempt to access 5-element Vector{SubString{String}} at index\
    \ [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2]\
    \ words_in_sentence(sentence::String)\n     @ Main /tmp/tmp71y_rg7n.jl:26\n  \
    \ [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp71y_rg7n.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-l"
  timestamp: 1659978355
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, ' ')\n    res = []\n    for w in words\n     \
    \   if isprime(length(w))\n            push!(res, w)\n        end\n    end\n \
    \   join(res, ' ')\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpi65qbzly.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpi65qbzly.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpi65qbzly.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi65qbzly.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi65qbzly.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpi65qbzly.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpi65qbzly.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi65qbzly.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi65qbzly.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpi65qbzly.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpi65qbzly.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi65qbzly.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi65qbzly.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpi65qbzly.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978342
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    sentence = sentence.replace(\" \", \"\")\n    s = \"\"\n    for ch in\
    \ sentence\n        if isprime(count(ch))\n            s *= ch\n        end\n\
    \    end\n    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp9khcozsp.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmp9khcozsp.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  type String has no field\
    \ replace\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] words_in_sentence(sentence::String)\n     @ Main /tmp/tmp9khcozsp.jl:21\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9khcozsp.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9khcozsp.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp9khcozsp.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  type String has no field\
    \ replace\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] words_in_sentence(sentence::String)\n     @ Main /tmp/tmp9khcozsp.jl:21\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9khcozsp.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9khcozsp.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp9khcozsp.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ type String has no field replace\n  Stacktrace:\n   [1] getproperty\n     @\
    \ ./Base.jl:42 [inlined]\n   [2] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmp9khcozsp.jl:21\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9khcozsp.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9khcozsp.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp9khcozsp.jl:38\n  Test threw exception\n  Expression:\
    \ candid"
  timestamp: 1659978355
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, ' ')\n    result = \"\"\n    for w in words\n\
    \        l = length(w)\n        p = isprime(l)\n        if p\n            result\
    \ = result * \" \" * w\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp95rv3ykk.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmp95rv3ykk.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp95rv3ykk.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp95rv3ykk.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp95rv3ykk.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp95rv3ykk.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp95rv3ykk.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp95rv3ykk.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp95rv3ykk.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp95rv3ykk.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp95rv3ykk.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp95rv3ykk.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp95rv3ykk.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp95rv3ykk.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978355
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf138d8js.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf138d8js.jl:1\n\
    in expression starting at /tmp/tmpf138d8js.jl:1\n"
  stdout: ''
  timestamp: 1659978353
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, ' ')\n    new_sentence = []\n    for w in words\n\
    \        if isprime(length(w))\n            push!(new_sentence, w)\n        end\n\
    \    end\n    return join(new_sentence, ' ')\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpk1uqob1_.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpk1uqob1_.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpk1uqob1_.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk1uqob1_.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk1uqob1_.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpk1uqob1_.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpk1uqob1_.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk1uqob1_.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk1uqob1_.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpk1uqob1_.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpk1uqob1_.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk1uqob1_.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk1uqob1_.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpk1uqob1_.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978355
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    \n    words = split(sentence)\n    result = []\n    \n    for word in\
    \ words\n        push!(result, word) if isprime(length(word))\n    end\n    \n\
    \    join(result, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpoads42ry.jl:25 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoads42ry.jl:26\n\
    in expression starting at /tmp/tmpoads42ry.jl:26\n"
  stdout: ''
  timestamp: 1659978353
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpfklbb00e.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpfklbb00e.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpfklbb00e.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfklbb00e.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfklbb00e.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpfklbb00e.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpfklbb00e.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfklbb00e.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-"
  timestamp: 1659978350
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    new_string = \"\"\n    words = split(sentence)\n    for word in words\n\
    \        if isprime(length(word))\n            new_string = new_string * \" \"\
    \ * word\n        end\n    end\n    return new_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpw5kf0sb6.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpw5kf0sb6.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpw5kf0sb6.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw5kf0sb6.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw5kf0sb6.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpw5kf0sb6.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpw5kf0sb6.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw5kf0sb6.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw5kf0sb6.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpw5kf0sb6.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpw5kf0sb6.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw5kf0sb6.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw5kf0sb6.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpw5kf0sb6.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978356
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    out = \"\"\n    for word in words\n\
    \        is_prime = true\n        for div in 2:round(Int, length(word)/2)\n  \
    \          if length(word) % div == 0\n                is_prime = false\n    \
    \            break\n            end\n        end\n        if is_prime\n      \
    \      out *= word * \" \"\n        end\n    end\n    return out\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkmqmwfhj.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmpkmqmwfhj.jl:42\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \"is a \" == \"is\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkmqmwfhj.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkmqmwfhj.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpkmqmwfhj.jl:43\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \"go for \" == \"go for\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkmqmwfhj.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkmqmwfhj.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpkmqmwfhj.jl:44\n  Expression: candidate(\"there is no place\
    \ available here\") == \"there is no place\"\n   Evaluated: \"there is no place\
    \ \" == \"there is no place\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkmqmwfhj.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkmqmwfhj.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpkmqmwfhj.jl:45\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"Hi I am Hussein \" == \"Hi am Hussein\"\
    \nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkmqmwfhj.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkmqmwfhj.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpkmqmwfhj.jl:46\n  Expression: candidate(\"go for it\") ==\
    \ \"go for it\"\n   Evalua"
  timestamp: 1659978354
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    \n    words = split(sentence, \" \")\n    result = []\n    \n    for w\
    \ in words\n        l = length(w)\n        is_prime = true\n        for i in 2:l-1\n\
    \            if l % i == 0\n                is_prime = false\n               \
    \ break\n            end\n        end\n        if is_prime\n            push!(result,\
    \ w)\n        end\n    end\n    \n    join(result, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_dmskygn.jl:43

    '
  stdout: "test set: Test Failed at /tmp/tmp_dmskygn.jl:46\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \"is a\" == \"is\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_dmskygn.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_dmskygn.jl:45\ntest set: Test\
    \ Failed at /tmp/tmp_dmskygn.jl:49\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"Hi I am Hussein\" == \"Hi am Hussein\"\
    \nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_dmskygn.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_dmskygn.jl:45\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  timestamp: 1659978355
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    filter(x -> isprime(length(x)), words)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp698h5g5y.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp698h5g5y.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::SubString{String})\n \
    \    @ Main /tmp/tmp698h5g5y.jl:22\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp698h5g5y.jl:22\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp698h5g5y.jl:29 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp698h5g5y.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp698h5g5y.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::SubString{String})\n \
    \    @ Main /tmp/tmp698h5g5y.jl:22\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp698h5g5y.jl:22\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp698h5g5y.jl:30 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp698h5g5y.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp698h5g5y.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::SubString{String})\n\
    \     @ Main /tmp/tmp698h5g5y.jl:22\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp698h5g5y.jl:22\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Te"
  timestamp: 1659978356
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for w in words\n\
    \        if isprime(length(w))\n            push!(prime_words, w)\n        end\n\
    \    end\n    join(prime_words, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp4nrwjzv4.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmp4nrwjzv4.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp4nrwjzv4.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4nrwjzv4.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4nrwjzv4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp4nrwjzv4.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp4nrwjzv4.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4nrwjzv4.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4nrwjzv4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp4nrwjzv4.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp4nrwjzv4.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4nrwjzv4.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4nrwjzv4.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp4nrwjzv4.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978356
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    is_prime(n::Int) = n > 1 && all([rem(n, i) != 0 for i in 2:floor(Int,\
    \ sqrt(n))])\n    num_to_word = split(sentence, r\"\\s+\")\n    num_to_word =\
    \ [w for w in num_to_word if is_prime(length(w))]\n    join(num_to_word, \" \"\
    )\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659978353
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpjqat4hmr.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpjqat4hmr.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpjqat4hmr.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjqat4hmr.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjqat4hmr.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpjqat4hmr.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpjqat4hmr.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjqat4hmr.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjqat4hmr.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpjqat4hmr.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpjqat4hmr.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjqat4hmr.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjqat4hmr.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpjqat4hmr.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978352
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    list = split(sentence)\n    isprime(x) = x>1 && all([x%i != 0 for i in\
    \ 2:floor(sqrt(x))])\n    return join(word for word in list if isprime(length(word)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp25ikmhj2.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmp25ikmhj2.jl:31\n  Expression: candidate(\"\
    lets go for swimming\") == \"go for\"\n   Evaluated: \"gofor\" == \"go for\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp25ikmhj2.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp25ikmhj2.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp25ikmhj2.jl:32\n  Expression: candidate(\"there is no place\
    \ available here\") == \"there is no place\"\n   Evaluated: \"thereisnoplace\"\
    \ == \"there is no place\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp25ikmhj2.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp25ikmhj2.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp25ikmhj2.jl:33\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"HiamHussein\" == \"Hi am Hussein\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp25ikmhj2.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp25ikmhj2.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp25ikmhj2.jl:34\n  Expression: candidate(\"go for it\") ==\
    \ \"go for it\"\n   Evaluated: \"goforit\" == \"go for it\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp25ikmhj2.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp25ikmhj2.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659978355
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    filtered_words = filter(word -> !isempty(word)\
    \ && isprime(length(word)), words)\n    join(filtered_words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp1lakfi2j.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmp1lakfi2j.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(word::SubString{String})\n\
    \     @ Main /tmp/tmp1lakfi2j.jl:22\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp1lakfi2j.jl:22\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp1lakfi2j.jl:30 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp1lakfi2j.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp1lakfi2j.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(word::SubString{String})\n\
    \     @ Main /tmp/tmp1lakfi2j.jl:22\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp1lakfi2j.jl:22\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp1lakfi2j.jl:31 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp1lakfi2j.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp1lakfi2j.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(word::SubString{String})\n\
    \     @ Main /tmp/tmp1lakfi2j.jl:22\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp1lakfi2j.jl:22\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdli"
  timestamp: 1659978357
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    lenghts = [length(w) for w in words]\n  \
    \  return \"\"\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpb0nark3q.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb0nark3q.jl:1\n\
    in expression starting at /tmp/tmpb0nark3q.jl:1\n"
  stdout: ''
  timestamp: 1659978355
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    is_prime(x)\
    \ = x in primes\n    new_sentence = \"\"\n    for word in words\n        word_length\
    \ = length(word)\n        if is_prime(word_length)\n            new_sentence =\
    \ new_sentence * \" \" * word\n        end\n    end\n    return new_sentence\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp8zc8b_th.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmp8zc8b_th.jl:38\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \" is\" == \"is\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8zc8b_th.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8zc8b_th.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp8zc8b_th.jl:39\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \" go for\" == \"go for\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8zc8b_th.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8zc8b_th.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp8zc8b_th.jl:40\n  Expression: candidate(\"there is no place\
    \ available here\") == \"there is no place\"\n   Evaluated: \" there is no place\"\
    \ == \"there is no place\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8zc8b_th.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8zc8b_th.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp8zc8b_th.jl:41\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \" Hi am Hussein\" == \"Hi am Hussein\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8zc8b_th.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8zc8b_th.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp8zc8b_th.jl:42\n  Expression: candidate(\"go for it\") ==\
    \ \"go for it\"\n   Evaluated:"
  timestamp: 1659978356
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    \n    # get list of words\n    words = split(sentence)\n    \n    # filter\
    \ those with prime lengths\n    prime_lengths = filter(w -> isprime(length(w)),\
    \ words)\n    \n    # join the words to a new string\n    return join(prime_lengths,\
    \ \" \")\n    \nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpjh67sx5y.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpjh67sx5y.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(w::SubString{String})\n \
    \    @ Main /tmp/tmpjh67sx5y.jl:26\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpjh67sx5y.jl:26\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpjh67sx5y.jl:37 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpjh67sx5y.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpjh67sx5y.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(w::SubString{String})\n \
    \    @ Main /tmp/tmpjh67sx5y.jl:26\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpjh67sx5y.jl:26\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpjh67sx5y.jl:38 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpjh67sx5y.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpjh67sx5y.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(w::SubString{String})\n\
    \     @ Main /tmp/tmpjh67sx5y.jl:26\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpjh67sx5y.jl:26\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Te"
  timestamp: 1659978357
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    # replace this\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpbi4px8pa.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpbi4px8pa.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpbi4px8pa.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbi4px8pa.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbi4px8pa.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpbi4px8pa.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpbi4px8pa.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbi4px8pa.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-"
  timestamp: 1659978358
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    is_prime(x) = (x > 1) && all(x % n != 0 for n in 2:Int(sqrt(x)))\n   \
    \ words = split(sentence, \" \")\n    isprime = [is_prime(length(word)) for word\
    \ in words]\n    prime_words = [words[i] for i in 1:length(words) if isprime[i]]\n\
    \    joined_prime_words = join(prime_words, \" \")\n    return joined_prime_words\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpifkd230f.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpifkd230f.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  InexactError: Int64(1.4142135623730951)\n\
    \  Stacktrace:\n    [1] Int64\n      @ ./float.jl:812 [inlined]\n    [2] is_prime\n\
    \      @ /tmp/tmpifkd230f.jl:21 [inlined]\n    [3] (::var\"#2#7\"{var\"#is_prime#5\"\
    })(word::SubString{String})\n      @ Main ./none:0\n    [4] iterate\n      @ ./generator.jl:47\
    \ [inlined]\n    [5] collect_to!\n      @ ./array.jl:782 [inlined]\n    [6] collect_to_with_first!\n\
    \      @ ./array.jl:760 [inlined]\n    [7] collect(itr::Base.Generator{Vector{SubString{String}},\
    \ var\"#2#7\"{var\"#is_prime#5\"}})\n      @ Base ./array.jl:734\n    [8] words_in_sentence(sentence::String)\n\
    \      @ Main /tmp/tmpifkd230f.jl:23\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpifkd230f.jl:33 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpifkd230f.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpifkd230f.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  InexactError: Int64(1.4142135623730951)\n\
    \  Stacktrace:\n    [1] Int64\n      @ ./float.jl:812 [inlined]\n    [2] is_prime\n\
    \      @ /tmp/tmpifkd230f.jl:21 [inlined]\n    [3] (::var\"#2#7\"{var\"#is_prime#5\"\
    })(word::SubString{String})\n      @ Main ./none:0\n    [4] iterate\n      @ ./generator.jl:47\
    \ [inlined]\n    [5] collect_to!\n      @ ./array.jl:782 [inlined]\n    [6] collect_to_with_first!\n\
    \      @ ./array.jl:760 [inlined]\n    [7] collect(itr::Base.Generator{Vector{SubString{String}},\
    \ var\"#2#7\"{var\"#is_prime#5\"}})\n      @ Base ./array.jl:734\n    [8] words_in_sentence(sentence::String)\n\
    \      @ Main /tmp/tmpifkd230f.jl:23\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpifkd230f.jl:34 [inlined]\n\
    \   [11] macro expansion\n      @ "
  timestamp: 1659978357
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    primes = filter(isprime, map(length, words))\n\
    \    return join(filter(in(primes), map(length, words)), words)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpqcx6rz78.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpqcx6rz78.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpqcx6rz78.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqcx6rz78.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqcx6rz78.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpqcx6rz78.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpqcx6rz78.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqcx6rz78.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqcx6rz78.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpqcx6rz78.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpqcx6rz78.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqcx6rz78.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqcx6rz78.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpqcx6rz78.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978357
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    isprime(x) = x>1 && all(x%n != 0 for\
    \ n in 2:x-1)\n    join(filter(x -> isprime(length(x)), words), \" \")\nend\n\
    using Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659978355
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    split_sentence = split(sentence, \" \")\n    new_sentence = \"\"\n   \
    \ for i in split_sentence\n        if isprime(length(i))\n            new_sentence\
    \ = new_sentence * i * \" \"\n        end\n    end\n    return trim(new_sentence)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp33seaedc.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmp33seaedc.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp33seaedc.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp33seaedc.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp33seaedc.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp33seaedc.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp33seaedc.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp33seaedc.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp33seaedc.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp33seaedc.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp33seaedc.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp33seaedc.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp33seaedc.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp33seaedc.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978358
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    wordlist = split(sentence, \" \")\n    output = []\n    for i in 1:length(wordlist)\n\
    \        if isprime(length(wordlist[i]))\n            push!(output, wordlist[i])\n\
    \        end\n    end\n    return join(output, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpujv804ay.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpujv804ay.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpujv804ay.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpujv804ay.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpujv804ay.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpujv804ay.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpujv804ay.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpujv804ay.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpujv804ay.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpujv804ay.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpujv804ay.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpujv804ay.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpujv804ay.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpujv804ay.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978358
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpfklbb00e.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpfklbb00e.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpfklbb00e.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfklbb00e.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfklbb00e.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpfklbb00e.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpfklbb00e.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfklbb00e.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-"
  timestamp: 1659978350
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    for i in range(1,length(words))\n       \
    \ if !isprime(length(words[i]))\n            deleteat!(words,i)\n        end\n\
    \    end\n    return join(words)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpl2fgq3en.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpl2fgq3en.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpl2fgq3en.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl2fgq3en.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl2fgq3en.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpl2fgq3en.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpl2fgq3en.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl2fgq3en.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl2fgq3en.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpl2fgq3en.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpl2fgq3en.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl2fgq3en.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl2fgq3en.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpl2fgq3en.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978358
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    join(prime_words, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpb7ra8o0l.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpb7ra8o0l.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpb7ra8o0l.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb7ra8o0l.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb7ra8o0l.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpb7ra8o0l.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpb7ra8o0l.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb7ra8o0l.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb7ra8o0l.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpb7ra8o0l.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpb7ra8o0l.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb7ra8o0l.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb7ra8o0l.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpb7ra8o0l.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978358
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    filter(is_prime, map(length, words))\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmplrbd5nw4.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmplrbd5nw4.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmplrbd5nw4.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplrbd5nw4.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplrbd5nw4.jl:29\ntest set:\
    \ Error During Test at /tmp/tmplrbd5nw4.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmplrbd5nw4.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplrbd5nw4.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplrbd5nw4.jl:29\ntest set:\
    \ Error During Test at /tmp/tmplrbd5nw4.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: is_prime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmplrbd5nw4.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplrbd5nw4.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplrbd5nw4.jl:29\ntest set:\
    \ Error During Test at /tmp/tmplrbd5nw4.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n "
  timestamp: 1659978358
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, ' ')\n    primes = [2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    prime_words\
    \ = []\n    for w in words\n        if length(w) in primes\n            push!(prime_words,\
    \ w)\n        end\n    end\n    return join(prime_words, ' ')\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659978356
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    prime_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(prime_words, word)\n\
    \        end\n    end\n    return join(prime_words, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpjqat4hmr.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpjqat4hmr.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpjqat4hmr.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjqat4hmr.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjqat4hmr.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpjqat4hmr.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpjqat4hmr.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjqat4hmr.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjqat4hmr.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpjqat4hmr.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpjqat4hmr.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjqat4hmr.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjqat4hmr.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpjqat4hmr.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978352
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    # your code here\n    words = split(sentence, \" \")\n    filtered_words\
    \ = []\n    for word in words\n        if isprime(length(word))\n            push!(filtered_words,\
    \ word)\n        end\n    end\n    return join(filtered_words, \" \")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpjizypunm.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpjizypunm.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpjizypunm.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjizypunm.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjizypunm.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpjizypunm.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpjizypunm.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjizypunm.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjizypunm.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpjizypunm.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpjizypunm.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjizypunm.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjizypunm.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpjizypunm.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978358
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, ' ')\n    primes = [2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result\
    \ = []\n    for word in words\n        len_word = length(word)\n        if len_word\
    \ in primes\n            push!(result, word)\n        end\n    end\n    join(result,\
    \ ' ')\nend\n@testset \"example 1\" begin\n    @test words_in_sentence(\"This\
    \ is a test\") == \"is\"\nend\n@testset \"example 2\" begin\n    @test words_in_sentence(\"\
    lets go for swimming\") == \"go for\"\nend\n@testset \"example 3\" begin\n   \
    \ @test words_in_sentence(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\
    \nend\n@testset \"example 4\" begin\n    @test words_in_sentence(\"aaaaaaaaaaabbbbbbbbbbcccccccccc\"\
    ) == \"bbbbbbbbbb\"\nend\n@testset \"example 5\" begin\n    @test words_in_sentence(\"\
    a b c d e f g h i j k l m n o p q r s t u v w x y z\") == \"b c f g j k p q v\
    \ w z\"\nend\n@testset \"example 6\" begin\n    @test words_in_sentence(\"Lorem\
    \ ipsum dolor sit amet, consectetur adipiscing elit. Vivamus eu ipsum ut ipsum\
    \ fermentum feugiat. Aliquam erat volutpat. Proin pulvinar, tortor a lacinia tincidunt,\
    \ metus metus aliquet quam, non semper dui mauris sit amet ipsum. Integer vitae\
    \ congue ante. Sed vitae mi a erat porttitor condimentum. In et risus in nunc\
    \ euismod blandit eget eget lacus. Sed suscipit tellus erat, in cursus dolor\n\
    using Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @testset not defined

    in expression starting at /tmp/tmp5yp0f59l.jl:32

    in expression starting at /tmp/tmp5yp0f59l.jl:32

    '
  stdout: ''
  timestamp: 1659978357
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    return \"not implemented\"\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp92sce3nt.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp92sce3nt.jl:28\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \"not implemented\" == \"is\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp92sce3nt.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp92sce3nt.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp92sce3nt.jl:29\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \"not implemented\" == \"go for\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp92sce3nt.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp92sce3nt.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp92sce3nt.jl:30\n  Expression: candidate(\"there is no place\
    \ available here\") == \"there is no place\"\n   Evaluated: \"not implemented\"\
    \ == \"there is no place\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp92sce3nt.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp92sce3nt.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp92sce3nt.jl:31\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"not implemented\" == \"Hi am Hussein\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp92sce3nt.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp92sce3nt.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp92sce3nt.jl:32\n  Expre"
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    return join( [word for word in words\
    \ if isprime(length(word))], \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpnv9niazt.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpnv9niazt.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(word::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\", Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] words_in_sentence(sentence::String)\n      @ Main /tmp/tmpnv9niazt.jl:22\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpnv9niazt.jl:29 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpnv9niazt.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpnv9niazt.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(word::SubString{String})\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [3] iterate\n      @ ./generator.jl:44 [inlined]\n    [4] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{var\"#1#2\", Vector{SubString{String}}},\
    \ typeof(identity)})\n      @ Base ./array.jl:797\n    [5] collect\n      @ ./array.jl:721\
    \ [inlined]\n    [6] words_in_sentence(sentence::String)\n      @ Main /tmp/tmpnv9niazt.jl:22\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpnv9niazt.jl:30 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpnv9niazt.jl:28\ntest set:\
    \ Error During Test at /tmp/tm"
  timestamp: 1659978359
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    new_sentence = \"\"\n    for word in split(sentence)\n        if isprime(length(word))\n\
    \            new_sentence *= \" \" * word\n        end\n    end\n    return lstrip(new_sentence)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpurl5ufl6.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpurl5ufl6.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpurl5ufl6.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpurl5ufl6.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpurl5ufl6.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpurl5ufl6.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpurl5ufl6.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpurl5ufl6.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpurl5ufl6.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpurl5ufl6.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpurl5ufl6.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpurl5ufl6.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpurl5ufl6.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpurl5ufl6.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978359
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    \n    # split the sentence into words\n    words = split(sentence, \"\
    \ \")\n    \n    # for each word get its length and check if it is prime\n   \
    \ for i in 1:length(words)\n        isprime(length(words[i])) && push!(words,\
    \ words[i])\n    end\n    # join the primes into a string\n    sentence = join(words,\
    \ \" \")\n    return sentence\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpm2ud7nf7.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmpm2ud7nf7.jl:38\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpm2ud7nf7.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm2ud7nf7.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm2ud7nf7.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpm2ud7nf7.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpm2ud7nf7.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm2ud7nf7.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm2ud7nf7.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpm2ud7nf7.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpm2ud7nf7.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm2ud7nf7.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm2ud7nf7.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpm2ud7nf7.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978359
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    sentence = split(sentence, \" \")\n    prime = filter(x -> isprime(length(x)),\
    \ sentence)\n    prime = join(prime, \" \")\n    return prime\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp4fn9fxj9.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmp4fn9fxj9.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::SubString{String})\n \
    \    @ Main /tmp/tmp4fn9fxj9.jl:22\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp4fn9fxj9.jl:22\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp4fn9fxj9.jl:31 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp4fn9fxj9.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp4fn9fxj9.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::SubString{String})\n \
    \    @ Main /tmp/tmp4fn9fxj9.jl:22\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp4fn9fxj9.jl:22\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp4fn9fxj9.jl:32 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp4fn9fxj9.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp4fn9fxj9.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::SubString{String})\n\
    \     @ Main /tmp/tmp4fn9fxj9.jl:22\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp4fn9fxj9.jl:22\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Te"
  timestamp: 1659978359
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    i = 0\n    while i < length(sentence)\n        if isprime(i)\n       \
    \     print(sentence[i])\n        end\n        i += 1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmput_hus8x.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmput_hus8x.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmput_hus8x.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmput_hus8x.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmput_hus8x.jl:33\ntest set:\
    \ Error During Test at /tmp/tmput_hus8x.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmput_hus8x.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmput_hus8x.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmput_hus8x.jl:33\ntest set:\
    \ Error During Test at /tmp/tmput_hus8x.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmput_hus8x.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmput_hus8x.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmput_hus8x.jl:33\ntest set:\
    \ Error During Test at /tmp/tmput_hus8x.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978359
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    \"\"\"\n    * list comprehension\n    * join string\n    \"\"\"\n    return\
    \ \" \".join([x for x in split(sentence) if isprime(length(x))])\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpkbqe03do.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpkbqe03do.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  type String has no field\
    \ join\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ words_in_sentence(sentence::String)\n     @ Main /tmp/tmpkbqe03do.jl:25\n  \
    \ [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkbqe03do.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkbqe03do.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpkbqe03do.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  type String has no field\
    \ join\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ words_in_sentence(sentence::String)\n     @ Main /tmp/tmpkbqe03do.jl:25\n  \
    \ [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkbqe03do.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkbqe03do.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpkbqe03do.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ type String has no field join\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] words_in_sentence(sentence::String)\n     @ Main /tmp/tmpkbqe03do.jl:25\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkbqe03do.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkbqe03do.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpkbqe03do.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I"
  timestamp: 1659978359
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    return_list = []\n    for word in split(sentence, \" \")\n        if isprime(length(word))\n\
    \            push!(return_list, word)\n        end\n    end\n    return join(return_list,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpsph21e94.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpsph21e94.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpsph21e94.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsph21e94.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsph21e94.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpsph21e94.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpsph21e94.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsph21e94.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsph21e94.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpsph21e94.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpsph21e94.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsph21e94.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsph21e94.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpsph21e94.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978359
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    words = filter(is_prime, map(length,\
    \ words))\n    return words\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpdc79e5n2.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpdc79e5n2.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpdc79e5n2.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdc79e5n2.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdc79e5n2.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpdc79e5n2.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpdc79e5n2.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdc79e5n2.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdc79e5n2.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpdc79e5n2.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: is_prime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpdc79e5n2.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdc79e5n2.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdc79e5n2.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpdc79e5n2.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: is_prime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n "
  timestamp: 1659978360
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    sentence = split(sentence)\n    new_sentence = []\n    for word in sentence\n\
    \        if isprime(length(word))\n            push!(new_sentence, word)\n   \
    \     end\n    end\n    return join(new_sentence, \" \")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpu6fn0eb0.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpu6fn0eb0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpu6fn0eb0.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu6fn0eb0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu6fn0eb0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpu6fn0eb0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpu6fn0eb0.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu6fn0eb0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu6fn0eb0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpu6fn0eb0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpu6fn0eb0.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu6fn0eb0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu6fn0eb0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpu6fn0eb0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978359
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    return \"\"\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpecedut3z.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpecedut3z.jl:28\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \"\" == \"is\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpecedut3z.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpecedut3z.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpecedut3z.jl:29\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \"\" == \"go for\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpecedut3z.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpecedut3z.jl:27\ntest set: Test Failed at /tmp/tmpecedut3z.jl:30\n\
    \  Expression: candidate(\"there is no place available here\") == \"there is no\
    \ place\"\n   Evaluated: \"\" == \"there is no place\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpecedut3z.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpecedut3z.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpecedut3z.jl:31\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"\" == \"Hi am Hussein\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpecedut3z.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpecedut3z.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpecedut3z.jl:32\n  Expression: candidate(\"go for it\") ==\
    \ \"go for it\"\n   Evaluated: \"\" == \"go for it\"\nStacktrace:\n [1] macro "
  timestamp: 1659978352
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    \n    return \" \"\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp83r_2_jw.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp83r_2_jw.jl:29\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \" \" == \"is\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp83r_2_jw.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp83r_2_jw.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp83r_2_jw.jl:30\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \" \" == \"go for\"\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp83r_2_jw.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp83r_2_jw.jl:28\ntest set: Test Failed at /tmp/tmp83r_2_jw.jl:31\n\
    \  Expression: candidate(\"there is no place available here\") == \"there is no\
    \ place\"\n   Evaluated: \" \" == \"there is no place\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp83r_2_jw.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp83r_2_jw.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp83r_2_jw.jl:32\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \" \" == \"Hi am Hussein\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp83r_2_jw.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp83r_2_jw.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp83r_2_jw.jl:33\n  Expression: candidate(\"go for it\") ==\
    \ \"go for it\"\n   Evaluated: \" \" == \"go for it\"\nStacktrace:\n [1] m"
  timestamp: 1659978359
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, ' ')\n    for word in words\n        if !isprime(length(word))\n\
    \            deleteat!(words, indexof(words, word))\n        end\n    end\n  \
    \  return join(words, ' ')\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpt6_65461.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpt6_65461.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpt6_65461.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt6_65461.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt6_65461.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpt6_65461.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpt6_65461.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt6_65461.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt6_65461.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpt6_65461.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpt6_65461.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt6_65461.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt6_65461.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpt6_65461.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978359
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    # define a test to check if a number is prime\n    # your code here\n\
    \    for num in 1:2:length(sentence)\n        # test if the length of the word\
    \ is prime\n        # your code here\n        if isprime(length(words_in_sentence))\n\
    \            println(words_in_sentence)\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp6mlxnwgo.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmp6mlxnwgo.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  MethodError: no method\
    \ matching length(::typeof(words_in_sentence))\n  Closest candidates are:\n  \
    \  length(!Matched::Union{Base.KeySet, Base.ValueIterator}) at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:58\n\
    \    length(!Matched::Union{LinearAlgebra.Adjoint{T, S}, LinearAlgebra.Transpose{T,\
    \ S}} where {T, S}) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:171\n\
    \    length(!Matched::Base.Iterators.Stateful) at ~/.conda/envs/polyglot/share/julia/base/iterators.jl:1338\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmp6mlxnwgo.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6mlxnwgo.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6mlxnwgo.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp6mlxnwgo.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  MethodError: no method\
    \ matching length(::typeof(words_in_sentence))\n  Closest candidates are:\n  \
    \  length(!Matched::Union{Base.KeySet, Base.ValueIterator}) at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:58\n\
    \    length(!Matched::Union{LinearAlgebra.Adjoint{T, S}, LinearAlgebra.Transpose{T,\
    \ S}} where {T, S}) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:171\n\
    \    length(!Matched::Base.Iterators.Stateful) at ~/.conda/envs/polyglot/share/julia/base/iterators.jl:1338\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmp6mlxnwgo.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6mlxnwgo.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share"
  timestamp: 1659978361
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    for word in words\n        if !isprime(length(word))\n\
    \            deleteat!(words, find(words .== word))\n        end\n    end\n  \
    \  return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpd7c9ju20.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpd7c9ju20.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpd7c9ju20.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd7c9ju20.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd7c9ju20.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpd7c9ju20.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpd7c9ju20.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd7c9ju20.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd7c9ju20.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpd7c9ju20.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpd7c9ju20.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd7c9ju20.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd7c9ju20.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpd7c9ju20.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978360
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    \n    words = split(sentence)\n    new_string = \"\"\n    \n    for word\
    \ in words\n        if isprime(length(word))\n            new_string = join([new_string,\
    \ word], \" \")\n        end\n    end\n    \n    return new_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpkkqh7q9c.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmpkkqh7q9c.jl:38\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpkkqh7q9c.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkkqh7q9c.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkkqh7q9c.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpkkqh7q9c.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpkkqh7q9c.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkkqh7q9c.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkkqh7q9c.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpkkqh7q9c.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpkkqh7q9c.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkkqh7q9c.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkkqh7q9c.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpkkqh7q9c.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978360
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    for word in split(sentence)\n        word_len = length(word)\n       \
    \ if isprime(word_len)\n            println(word)\n        end\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp6ng58c1z.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp6ng58c1z.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp6ng58c1z.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6ng58c1z.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6ng58c1z.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp6ng58c1z.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp6ng58c1z.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6ng58c1z.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6ng58c1z.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp6ng58c1z.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp6ng58c1z.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6ng58c1z.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6ng58c1z.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp6ng58c1z.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978360
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    # first, split the sentence into words\n    # now we have to filter our\
    \ the words whose length is a prime number\n    # return the list of words whose\
    \ length is a prime number, separated by spaces\n   \n    return\nend\nwords_in_sentence(\"\
    lets go for swimming\")\n \nend\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type String\nClosest candidates are:\n  convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \  convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \  convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \  ...\nStacktrace:\n [1] words_in_sentence(sentence::String)\n   @ Main /tmp/tmp254fcsa0.jl:25\n\
    \ [2] top-level scope\n   @ /tmp/tmp254fcsa0.jl:27\nin expression starting at\
    \ /tmp/tmp254fcsa0.jl:27\n"
  stdout: ''
  timestamp: 1659978362
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    sentence = sentence.replace(\" \", \"\")\n    primes = [2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97]\n    new_sentence = []\n    for c in sentence\n        if c in primes\n\
    \            new_sentence = new_sentence.append(c)\n        end\n    end\n   \
    \ new_sentence = split(new_sentence, \" \")\n    words = split(sentence, \" \"\
    )\n    for w in words\n        if length(w) in primes\n            return w\n\
    \        end\n    end\n    return \"\"\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpt4axsqjb.jl:40

    '
  stdout: "test set: Error During Test at /tmp/tmpt4axsqjb.jl:43\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  type String has no field\
    \ replace\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] words_in_sentence(sentence::String)\n     @ Main /tmp/tmpt4axsqjb.jl:21\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpt4axsqjb.jl:43 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpt4axsqjb.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpt4axsqjb.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  type String has no field\
    \ replace\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] words_in_sentence(sentence::String)\n     @ Main /tmp/tmpt4axsqjb.jl:21\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpt4axsqjb.jl:44 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpt4axsqjb.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpt4axsqjb.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ type String has no field replace\n  Stacktrace:\n   [1] getproperty\n     @\
    \ ./Base.jl:42 [inlined]\n   [2] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmpt4axsqjb.jl:21\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpt4axsqjb.jl:45 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpt4axsqjb.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpt4axsqjb.jl:46\n  Test threw exception\n  Expression:\
    \ candid"
  timestamp: 1659978361
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    splitted_sentence = split(sentence, \" \")\n    new_string = \"\"\n  \
    \  for word in splitted_sentence\n        if isprime(length(word)) == true\n \
    \           new_string = new_string * word * \" \"\n        end\n    end\n   \
    \ return strip(new_string)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpkabdkx_x.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpkabdkx_x.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpkabdkx_x.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkabdkx_x.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkabdkx_x.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpkabdkx_x.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpkabdkx_x.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkabdkx_x.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkabdkx_x.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpkabdkx_x.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpkabdkx_x.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkabdkx_x.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkabdkx_x.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpkabdkx_x.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978361
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    indices\
    \ = [i for (i, word) in enumerate(words) if length(word) in primes]\n    return\
    \ join(words[i] for i in indices)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1lsfgr1l.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp1lsfgr1l.jl:32\n  Expression: candidate(\"\
    lets go for swimming\") == \"go for\"\n   Evaluated: \"gofor\" == \"go for\"\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1lsfgr1l.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1lsfgr1l.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp1lsfgr1l.jl:33\n  Expression: candidate(\"there is no place\
    \ available here\") == \"there is no place\"\n   Evaluated: \"thereisnoplace\"\
    \ == \"there is no place\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1lsfgr1l.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1lsfgr1l.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp1lsfgr1l.jl:34\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"HiamHussein\" == \"Hi am Hussein\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1lsfgr1l.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1lsfgr1l.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp1lsfgr1l.jl:35\n  Expression: candidate(\"go for it\") ==\
    \ \"go for it\"\n   Evaluated: \"goforit\" == \"go for it\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1lsfgr1l.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1lsfgr1l.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1659978361
- exit_code: 0
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    res = String[]\n    for word in split(sentence,\
    \ \" \")\n        if length(word) in primes\n            push!(res, word)\n  \
    \      end\n    end\n    join(res, \" \")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    7      7

    '
  stdout: ''
  timestamp: 1659978359
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    \nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp2z5f2_eu.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp2z5f2_eu.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmp2z5f2_eu.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2z5f2_eu.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2z5f2_eu.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp2z5f2_eu.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmp2z5f2_eu.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2z5f2_eu.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-"
  timestamp: 1659978362
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    n = length(split(sentence))\n    word_list = split(sentence)\n    new_string\
    \ = \"\"\n    for i = 1:n\n        if isprime(length(word_list[i]))\n        \
    \    new_string = new_string * word_list[i] * \" \"\n        end\n    end\n  \
    \  return new_string\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpzz8d31u6.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpzz8d31u6.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpzz8d31u6.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzz8d31u6.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzz8d31u6.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpzz8d31u6.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpzz8d31u6.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzz8d31u6.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzz8d31u6.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpzz8d31u6.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpzz8d31u6.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzz8d31u6.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzz8d31u6.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpzz8d31u6.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978361
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    # List of all English prime numbers, lenght of English prime numbers are\
    \ between 1 and 10\n    # according to https://en.wikipedia.org/wiki/Prime_number\n\
    \    primes = [2, 3, 5, 7]\n    # split the sentence by spaces and loop through\
    \ it\n    # initialize the output as a empty string\n    output = \"\"\n    for\
    \ word in split(sentence, \" \")\n        # check if length of the word is an\
    \ prime number\n        # isin(word) returns true if the word is in the array\
    \ and false otherwise\n        if isin(length(word), primes)\n            # concatenate\
    \ the word to the output string if the length of the word is an prime number\n\
    \            output = output * \" \" * word\n        end\n    end\n    # return\
    \ the output string\n    return output\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmptdsstp6p.jl:40

    '
  stdout: "test set: Error During Test at /tmp/tmptdsstp6p.jl:43\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isin\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmptdsstp6p.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptdsstp6p.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptdsstp6p.jl:42\ntest set:\
    \ Error During Test at /tmp/tmptdsstp6p.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isin not\
    \ defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmptdsstp6p.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptdsstp6p.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptdsstp6p.jl:42\ntest set:\
    \ Error During Test at /tmp/tmptdsstp6p.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isin not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmptdsstp6p.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptdsstp6p.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptdsstp6p.jl:42\ntest set:\
    \ Error During Test at /tmp/tmptdsstp6p.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isin not\
    \ defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/"
  timestamp: 1659978362
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    new_sentence = []\n    # Using a for\
    \ loop, iterate through the words list\n    for word in words\n        # Convert\
    \ each word to an array of characters\n        letters = collect(word)\n     \
    \   # Get the length of the array of characters\n        word_length = length(letters)\n\
    \        # If the length is greater than 1, and is prime, add the word to new_sentence\n\
    \        if word_length > 1 && isprime(word_length)\n            push!(new_sentence,\
    \ word)\n        end\n    end\n    # Join new_sentence with a space\n    join(new_sentence,\
    \ \" \")\nend\nwords_in_sentence(\"This is a test\")\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: isprime not defined\nStacktrace:\n [1]\
    \ words_in_sentence(sentence::String)\n   @ Main /tmp/tmp0j33g8ty.jl:30\n [2]\
    \ top-level scope\n   @ /tmp/tmp0j33g8ty.jl:37\nin expression starting at /tmp/tmp0j33g8ty.jl:37\n"
  stdout: ''
  timestamp: 1659978361
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3wpvym97.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3wpvym97.jl:1\n\
    in expression starting at /tmp/tmp3wpvym97.jl:1\n"
  stdout: ''
  timestamp: 1659978360
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    p = []\n    for w in split(sentence)\n        if isprime(length(w))\n\
    \            push!(p, w)\n        end\n    end\n    return join(p, \" \")\nend\n\
    using Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp7a7pj0um.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp7a7pj0um.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp7a7pj0um.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7a7pj0um.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7a7pj0um.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp7a7pj0um.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp7a7pj0um.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7a7pj0um.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7a7pj0um.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp7a7pj0um.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp7a7pj0um.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7a7pj0um.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7a7pj0um.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp7a7pj0um.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978362
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    \"you code here\"\nend\n \n \n \n@testset \"make sure you are including\
    \ all words of length = prime\" begin\n    @testset \"primes with 0 words\" begin\n\
    \        @test words_in_sentence(\"\") == \"\"\n    end\n    @testset \"primes\
    \ with 1 word\" begin\n        @test words_in_sentence(\"sing\") == \"sing\"\n\
    \        @test words_in_sentence(\"random\") == \"random\"\n    end\n    @testset\
    \ \"primes with 2 words\" begin\n        @test words_in_sentence(\"bon voyage\"\
    ) == \"voyage\"\n        @test words_in_sentence(\"random words\") == \"words\"\
    \n    end\n    @testset \"primes with more than 2 words\" begin\n        @test\
    \ words_in_sentence(\"there is really nothing\") == \"there really\"\n       \
    \ @test words_in_sentence(\"the quick brown fox jumps over the lazy dog\") ==\
    \ \"the fox the\"\n    end\nend\n \n@testset \"make sure you are including words\
    \ of prime length only\" begin\n    @testset \"not including non-prime words\"\
    \ begin\n        @test words_in_sentence(\"a test\") == \"\"\n        @test words_in_sentence(\"\
    there is a word\") == \"there\"\n    end\n    @testset \"not including words of\
    \ length 1\" begin\n        @test words_in_sentence(\"lets not include a\") ==\
    \ \"\"\n        @test words_in_sentence(\"finally we have the words\") == \"words\"\
    \n    end\nend\n \n@testset \"make sure you are returning words in the same order\"\
    \ begin\n    @testset \"words in the same order\" begin\n        @test words_in_sentence(\"\
    the quick brown fox jumps over the lazy dog\") == \"the fox the\"\n        @test\
    \ words_in_sentence(\"there is really nothing\") == \"there really\"\n    end\n\
    end\n@testset \"test corner cases\" begin\n    @testset \"handling error cases\"\
    \ begin\n        @testset \"handling words of length 1\" begin\n            @test\
    \ words_in_sentence(\"a\") == \"\"\n            @test words_in_sentence(\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: @testset not defined

    in expression starting at /tmp/tmpx1umx9na.jl:26

    in expression starting at /tmp/tmpx1umx9na.jl:26

    '
  stdout: ''
  timestamp: 1659978360
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    \n    words = split(sentence, r\"\\s+\")\n    sentence_prime = \"\"\n\
    \    \n    for word in words\n        length = length(word)\n        flag = true\n\
    \        if length > 1\n            for i in 2:length-1\n                if length\
    \ % i == 0\n                    flag = false\n                    break\n    \
    \            end\n            end\n        end\n        if flag\n            sentence_prime\
    \ = sentence_prime * word * \" \"\n        end\n    end\n    \n    sentence_prime\
    \ = sentence_prime[1:end-1] # to remove the last space\n    \n    return sentence_prime\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmplmbsf9ng.jl:47

    '
  stdout: "test set: Error During Test at /tmp/tmplmbsf9ng.jl:50\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: length\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmplmbsf9ng.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplmbsf9ng.jl:50 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplmbsf9ng.jl:49\ntest set:\
    \ Error During Test at /tmp/tmplmbsf9ng.jl:51\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: length not\
    \ defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n     @ Main\
    \ /tmp/tmplmbsf9ng.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplmbsf9ng.jl:51 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplmbsf9ng.jl:49\ntest set:\
    \ Error During Test at /tmp/tmplmbsf9ng.jl:52\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: length not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmplmbsf9ng.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplmbsf9ng.jl:52 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplmbsf9ng.jl:49\ntest set:\
    \ Error During Test at /tmp/tmplmbsf9ng.jl:53\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: length\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Ma"
  timestamp: 1659978362
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    \"\"\"\n    Function finds words whose lengths are prime numbers in sentence\
    \ and return it as a string.\n    \"\"\"\n    # Convert sentence to array of words\n\
    \    words = split(sentence, \" \")\n    # Empty array of words\n    words_prime\
    \ = []\n    # Empty string\n    words_string = \"\"\n    # Iterate over words\
    \ array\n    for word in words\n        # If length of word is prime number\n\
    \        if isprime(length(word))\n            # Add word to words_prime array\n\
    \            push!(words_prime, word)\n        end\n    end\n    # Convert words_prime\
    \ array to string\n    words_string = join(words_prime, \" \")\n    # Return words_string\n\
    \    return words_string\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmps9vt8czt.jl:45

    '
  stdout: "test set: Error During Test at /tmp/tmps9vt8czt.jl:48\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmps9vt8czt.jl:33\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps9vt8czt.jl:48 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps9vt8czt.jl:47\ntest set:\
    \ Error During Test at /tmp/tmps9vt8czt.jl:49\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmps9vt8czt.jl:33\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps9vt8czt.jl:49 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps9vt8czt.jl:47\ntest set:\
    \ Error During Test at /tmp/tmps9vt8czt.jl:50\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmps9vt8czt.jl:33\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps9vt8czt.jl:50 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps9vt8czt.jl:47\ntest set:\
    \ Error During Test at /tmp/tmps9vt8czt.jl:51\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978362
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    word_list = split(sentence)\n    for word in word_list\n        if isprime(length(word))\n\
    \            print(word)\n        end\n    end\n    return word_list\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpymb35ugf.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpymb35ugf.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpymb35ugf.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpymb35ugf.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpymb35ugf.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpymb35ugf.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpymb35ugf.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpymb35ugf.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpymb35ugf.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpymb35ugf.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpymb35ugf.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpymb35ugf.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpymb35ugf.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpymb35ugf.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978362
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    \n    sentence = split(sentence, \" \")\n    sentence = filter(s -> isprime(length(s)),\
    \ sentence)\n    sentence = join(sentence, \" \")\n    return sentence\nend\n\
    using Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwmkye9el.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpwmkye9el.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(s::SubString{String})\n \
    \    @ Main /tmp/tmpwmkye9el.jl:23\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwmkye9el.jl:23\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpwmkye9el.jl:32 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpwmkye9el.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpwmkye9el.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(s::SubString{String})\n \
    \    @ Main /tmp/tmpwmkye9el.jl:23\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwmkye9el.jl:23\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpwmkye9el.jl:33 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpwmkye9el.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpwmkye9el.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(s::SubString{String})\n\
    \     @ Main /tmp/tmpwmkye9el.jl:23\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpwmkye9el.jl:23\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Te"
  timestamp: 1659978362
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, ' ')\n    res = []\n    for word in words\n  \
    \      if isprime(length(word))\n            push!(res, word)\n        end\n \
    \   end\n    return join(res, ' ')\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpn_akpxp1.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpn_akpxp1.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpn_akpxp1.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn_akpxp1.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn_akpxp1.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpn_akpxp1.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpn_akpxp1.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn_akpxp1.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn_akpxp1.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpn_akpxp1.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpn_akpxp1.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn_akpxp1.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn_akpxp1.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpn_akpxp1.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978362
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    # TODO\n    return \"not implemented\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"\
    is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpn13l47t2.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpn13l47t2.jl:29\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \"not implemented\" == \"is\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn13l47t2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn13l47t2.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpn13l47t2.jl:30\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \"not implemented\" == \"go for\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn13l47t2.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn13l47t2.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpn13l47t2.jl:31\n  Expression: candidate(\"there is no place\
    \ available here\") == \"there is no place\"\n   Evaluated: \"not implemented\"\
    \ == \"there is no place\"\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn13l47t2.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn13l47t2.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpn13l47t2.jl:32\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"not implemented\" == \"Hi am Hussein\"\
    \nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn13l47t2.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn13l47t2.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpn13l47t2.jl:33\n  Expression: candidate(\"go for it\") ==\
    \ \"go for"
  timestamp: 1659978362
- exit_code: 1
  program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    # println(words)\n    prime_words\
    \ = []\n    for word in words\n        len = length(word)\n        len_prime =\
    \ isprime(len)\n        if len_prime\n            push!(prime_words, word)\n \
    \       end\n    end\n    join(prime_words, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpa2w76y7f.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmpa2w76y7f.jl:38\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpa2w76y7f.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa2w76y7f.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa2w76y7f.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpa2w76y7f.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpa2w76y7f.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa2w76y7f.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa2w76y7f.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpa2w76y7f.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpa2w76y7f.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa2w76y7f.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa2w76y7f.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpa2w76y7f.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  "
  timestamp: 1659978363
