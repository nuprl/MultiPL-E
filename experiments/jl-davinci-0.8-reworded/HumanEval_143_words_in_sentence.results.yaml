name: HumanEval_143_words_in_sentence
language: jl
results:
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    result = []\n    for word in words\n\
    \        if isprime(length(word))\n            push!(result, word)\n        end\n\
    \    end\n    join(result, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpgmdgf5r0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpgmdgf5r0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgmdgf5r0.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgmdgf5r0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpgmdgf5r0.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpgmdgf5r0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgmdgf5r0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgmdgf5r0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpgmdgf5r0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpgmdgf5r0.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgmdgf5r0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgmdgf5r0.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpgmdgf5r0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgmdgf5r0.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n   \n    # create a list of the words by splitting the sentence on spaces\n\
    \    words = split(sentence)\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6qzlketq.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6qzlketq.jl:1\n\
    in expression starting at /tmp/tmp6qzlketq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    \n    words = split(sentence, ' ')\n    result = \"\"\n    \n    for word\
    \ in words\n        if isprime(length(word))\n            result = string(result,\
    \ \" \", word)\n        end\n    end\n    \n    return lstrip(result)\n    \n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgugu4dk6.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpgugu4dk6.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgugu4dk6.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgugu4dk6.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpgugu4dk6.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpgugu4dk6.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgugu4dk6.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgugu4dk6.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpgugu4dk6.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpgugu4dk6.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgugu4dk6.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgugu4dk6.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpgugu4dk6.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgugu4dk6.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    if length(sentence) < 1 || length(sentence) > 100\n        error(\"the\
    \ length of the sentence must be between 1 and 100\")\n    end\n    sentence =\
    \ sentence[sentence .!= ' ']\n    if length(sentence) == 0\n        return \"\"\
    \n    end\n    words = split(sentence, \" \")\n    words = words[(isprime.(length.(words)))]\n\
    \    return join(words, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmps36too86.jl:37\\n  Test threw\
    \ exception\\n  Expression: candidate(\"This is a test\") == \"is\"\\n  MethodError:\
    \ no method matching split(::Char, ::String)\\n  Closest candidates are:\\n  \
    \  split(!Matched::T, ::Any; limit, keepempty) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:417\\\
    n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n     @ Main /tmp/tmps36too86.jl:28\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmps36too86.jl:37 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmps36too86.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmps36too86.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\\n  MethodError: no method\
    \ matching split(::Char, ::String)\\n  Closest candidates are:\\n    split(!Matched::T,\
    \ ::Any; limit, keepempty) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:417\\\
    n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n     @ Main /tmp/tmps36too86.jl:28\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmps36too86.jl:38 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmps36too86.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmps36too86.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\\n\
    \  MethodError: no method matching split(::Char, ::String)\\n  Closest candidates\
    \ are:\\n    split(!Matched::T, ::Any; limit, keepempty) where T<:AbstractString\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:417\\n  Stacktrace:\\\
    n   [1] words_in_sentence("
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    return join(filter(w -> isprime(length(w)), split(sentence, \" \")), \"\
    \ \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t\
    @test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go for\
    \ swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmps64820s2.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(w::SubString{String})\n \
    \    @ Main /tmp/tmps64820s2.jl:21\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmps64820s2.jl:21\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmps64820s2.jl:28 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmps64820s2.jl:27\ntest set:\
    \ Error During Test at /tmp/tmps64820s2.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(w::SubString{String})\n \
    \    @ Main /tmp/tmps64820s2.jl:21\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmps64820s2.jl:21\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmps64820s2.jl:29 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmps64820s2.jl:27\ntest set:\
    \ Error During Test at /tmp/tmps64820s2.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(w::SubString{String})\n\
    \     @ Main /tmp/tmps64820s2.jl:21\n   [2] filter(f::var\"#1#2\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmps64820s2.jl:21\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/s"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps64820s2.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    \n    words = split(sentence, \" \")\n    total_words = length(words)\n\
    \    output = []\n    \n    for i in 1:total_words\n        if isprime(length(words[i]))\n\
    \            push!(output, words[i])\n        end\n    end\n    \n    # output_string\
    \ = join(output, \" \")\n    # return output_string\n    return join(output, \"\
    \ \")\n    \nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp710dpcpb.jl:42\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp710dpcpb.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp710dpcpb.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp710dpcpb.jl:41\ntest set:\
    \ Error During Test at /tmp/tmp710dpcpb.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp710dpcpb.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp710dpcpb.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp710dpcpb.jl:41\ntest set:\
    \ Error During Test at /tmp/tmp710dpcpb.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp710dpcpb.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp710dpcpb.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp710dpcpb.jl:41\ntest set:\
    \ Error During Test at /tmp/tmp710dpcpb.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp710dpcpb.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    is_prime(word::String) = word in [\"\
    is\", \"go\", \"a\", \"for\"]\n    filter(is_prime, words) |> join\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpn93o80w7.jl:30\\n  Test threw\
    \ exception\\n  Expression: candidate(\"This is a test\") == \"is\"\\n  MethodError:\
    \ no method matching (::var\"#is_prime#1\")(::SubString{String})\\n  Closest candidates\
    \ are:\\n    (::var\"#is_prime#1\")(!Matched::String) at /tmp/tmpn93o80w7.jl:22\\\
    n  Stacktrace:\\n   [1] filter(f::var\"#is_prime#1\", a::Vector{SubString{String}})\\\
    n     @ Base ./array.jl:2484\\n   [2] words_in_sentence(sentence::String)\\n \
    \    @ Main /tmp/tmpn93o80w7.jl:23\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpn93o80w7.jl:30 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpn93o80w7.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmpn93o80w7.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\\n  MethodError: no method\
    \ matching (::var\"#is_prime#1\")(::SubString{String})\\n  Closest candidates\
    \ are:\\n    (::var\"#is_prime#1\")(!Matched::String) at /tmp/tmpn93o80w7.jl:22\\\
    n  Stacktrace:\\n   [1] filter(f::var\"#is_prime#1\", a::Vector{SubString{String}})\\\
    n     @ Base ./array.jl:2484\\n   [2] words_in_sentence(sentence::String)\\n \
    \    @ Main /tmp/tmpn93o80w7.jl:23\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpn93o80w7.jl:31 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpn93o80w7.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmpn93o80w7.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\\n\
    \  MethodError: no method matching (::var\"#is_prime#1\")(::SubString{String})\\\
    n  Closest candidates are:\\n    (::var\"#is_prime#1\")(!Matched::String) at /tmp/tmpn93o80w7.jl:22\\\
    n  Stacktr"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    # loop through each word in the sentence\n    # if the length of the word\
    \ is a prime number,\n    # add it to the solution string\n    \nend\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmplvmysr4w.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(\"This is a test\") == \"is\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n     @\
    \ Main /tmp/tmplvmysr4w.jl:25\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmplvmysr4w.jl:32 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmplvmysr4w.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmplvmysr4w.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] words_in_sentence(sentence::String)\\n     @\
    \ Main /tmp/tmplvmysr4w.jl:25\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmplvmysr4w.jl:33 [inlined]\\\
    n   [4] macro expansion\\n     @ /share"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    prime_words = []\n    for word in words\n\
    \        len = length(word)\n        if isprime(len)\n            push!(prime_words,\
    \ word)\n        end\n    end\n    join(prime_words, \" \")\nend\n\"\"\"\n   \
    \ You are given a string,\n    you have to return a string where\n    each character\
    \ of the original string is repeated twice.\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp1keexhx.jl:31\nin expression starting at\
    \ /tmp/tmpp1keexhx.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    result = String[]\n    for word in words\n\
    \        if length(word) % 2 == 1\n            push!(result, word)\n        end\n\
    \    end\n    return join(result, \" \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\"\
    )\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn11k5vbl.jl:35\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \"a\" == \"is\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn11k5vbl.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn11k5vbl.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpn11k5vbl.jl:36\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \"for\" == \"go for\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn11k5vbl.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn11k5vbl.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpn11k5vbl.jl:37\n  Expression: candidate(\"there is no place\
    \ available here\") == \"there is no place\"\n   Evaluated: \"there place available\"\
    \ == \"there is no place\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn11k5vbl.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn11k5vbl.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpn11k5vbl.jl:38\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"I Hussein\" == \"Hi am Hussein\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn11k5vbl.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn11k5vbl.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpn11k5vbl.jl:39\n  Expression: candidate(\"go for i"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn11k5vbl.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    prime_words = filter(word -> all(i -> isprime(i),\
    \ length.(word)), words)\n    join(prime_words, \" \")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is a test\"\
    ) == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\")\n\t@test(candidate(\"\
    there is no place available here\") == \"there is no place\")\n\t@test(candidate(\"\
    Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") ==\
    \ \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here\
    \ is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphzqiy7et.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#2#4\")(i::Int64)\n      @ Main\
    \ /tmp/tmphzqiy7et.jl:22\n    [2] _all\n      @ ./reduce.jl:1157 [inlined]\n \
    \   [3] all\n      @ ./reduce.jl:1152 [inlined]\n    [4] #1\n      @ /tmp/tmphzqiy7et.jl:22\
    \ [inlined]\n    [5] filter(f::var\"#1#3\", a::Vector{SubString{String}})\n  \
    \    @ Base ./array.jl:2484\n    [6] words_in_sentence(sentence::String)\n   \
    \   @ Main /tmp/tmphzqiy7et.jl:22\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmphzqiy7et.jl:30 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmphzqiy7et.jl:29\ntest set:\
    \ Error During Test at /tmp/tmphzqiy7et.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#2#4\")(i::Int64)\n      @ Main\
    \ /tmp/tmphzqiy7et.jl:22\n    [2] _all\n      @ ./reduce.jl:1157 [inlined]\n \
    \   [3] all\n      @ ./reduce.jl:1152 [inlined]\n    [4] #1\n      @ /tmp/tmphzqiy7et.jl:22\
    \ [inlined]\n    [5] filter(f::var\"#1#3\", a::Vector{SubString{String}})\n  \
    \    @ Base ./array.jl:2484\n    [6] words_in_sentence(sentence::String)\n   \
    \   @ Main /tmp/tmphzqiy7et.jl:22\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmphzqiy7et.jl:31 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmphzqiy7et.jl:29\ntest set:\
    \ Error During Test at /tmp/tmphzqiy7et.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphzqiy7et.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    # Get words \n    words = split(sentence)\n    # Create new_sentence\n\
    \    new_sentence = String[]\n    # Iterate over the words\n    for word in words\n\
    \        # Check the length of the word\n        if isprime(length(word))\n  \
    \          # Check that the word is not nil\n            isempty(word) && continue\n\
    \            # Push the word to the array\n            push!(new_sentence, word)\n\
    \        end\n    end\n    # Return the sentence\n    return join(new_sentence,\
    \ \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\
    \t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"lets go\
    \ for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place available\
    \ here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\") ==\
    \ \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"\
    here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp09g7kzla.jl:43\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp09g7kzla.jl:28\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp09g7kzla.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp09g7kzla.jl:42\ntest set:\
    \ Error During Test at /tmp/tmp09g7kzla.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp09g7kzla.jl:28\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp09g7kzla.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp09g7kzla.jl:42\ntest set:\
    \ Error During Test at /tmp/tmp09g7kzla.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp09g7kzla.jl:28\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp09g7kzla.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp09g7kzla.jl:42\ntest set:\
    \ Error During Test at /tmp/tmp09g7kzla.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp09g7kzla.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    \n    words = split(sentence, \" \")\n    primes = [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\
    \    primes_words = []\n    \n    for word in words\n        word_len = length(word)\n\
    \        if word_len in primes\n            push!(primes_words, word)\n      \
    \  end\n    end\n    \n    return join(primes_words, \" \")\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    word_lens = [length(word) for word\
    \ in split(sentence, \" \")]\n    return \" \".join([word for word, word_len in\
    \ zip(split(sentence, \" \"), word_lens) if word_len in primes])\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps6zb3b8d.jl:23\nin expression starting at\
    \ /tmp/tmps6zb3b8d.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence)\n    new_words = [w for w in words if isprime(length(w))]\n\
    \    return join(new_words, \" \")\nend\n \nwords_in_sentence(\"This is a test\"\
    )\nusing Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: isprime not defined\nStacktrace:\n [1]\
    \ (::var\"#1#2\")(w::SubString{String})\n   @ Main ./none:0\n [2] iterate\n  \
    \ @ ./iterators.jl:447 [inlined]\n [3] iterate\n   @ ./generator.jl:44 [inlined]\n\
    \ [4] grow_to!(dest::Vector{SubString{String}}, itr::Base.Generator{Base.Iterators.Filter{var\"\
    #1#2\", Vector{SubString{String}}}, typeof(identity)})\n   @ Base ./array.jl:797\n\
    \ [5] collect\n   @ ./array.jl:721 [inlined]\n [6] words_in_sentence(sentence::String)\n\
    \   @ Main /tmp/tmpo1ittvly.jl:22\n [7] top-level scope\n   @ /tmp/tmpo1ittvly.jl:26\n\
    in expression starting at /tmp/tmpo1ittvly.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, ' ')\n    words_of_prime_length = []\n    for\
    \ word in words\n        if isprime(length(word))\n            push!(words_of_prime_length,\
    \ word)\n        end\n    end\n    return join(words_of_prime_length, ' ')\nend\n\
    using Test\n\n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"\
    This is a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"\
    go for\")\n\t@test(candidate(\"there is no place available here\") == \"there\
    \ is no place\")\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\
    )\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t@test(candidate(\"here\"\
    ) == \"\")\n\t@test(candidate(\"here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpllrdgpsd.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpllrdgpsd.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpllrdgpsd.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpllrdgpsd.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpllrdgpsd.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmpllrdgpsd.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpllrdgpsd.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpllrdgpsd.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpllrdgpsd.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmpllrdgpsd.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpllrdgpsd.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpllrdgpsd.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpllrdgpsd.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpllrdgpsd.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, \" \")\n    is_prime(x) = x>1 && length(filter(y->x%y==0,\
    \ 2:x-1)) == 0\n    return join(filter(is_prime, words), \" \")\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3rgqs98x.jl:30\\n  Test threw\
    \ exception\\n  Expression: candidate(\"This is a test\") == \"is\"\\n  MethodError:\
    \ no method matching isless(::Int64, ::SubString{String})\\n  Closest candidates\
    \ are:\\n    isless(!Matched::AbstractString, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:344\\\
    n    isless(::Real, !Matched::AbstractFloat) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:185\\\
    n    isless(::Real, !Matched::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:430\\\
    n    ...\\n  Stacktrace:\\n   [1] <(x::Int64, y::SubString{String})\\n     @ Base\
    \ ./operators.jl:352\\n   [2] >(x::SubString{String}, y::Int64)\\n     @ Base\
    \ ./operators.jl:378\\n   [3] (::var\"#is_prime#2\")(x::SubString{String})\\n\
    \     @ Main /tmp/tmp3rgqs98x.jl:22\\n   [4] filter(f::var\"#is_prime#2\", a::Vector{SubString{String}})\\\
    n     @ Base ./array.jl:2484\\n   [5] words_in_sentence(sentence::String)\\n \
    \    @ Main /tmp/tmp3rgqs98x.jl:23\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmp3rgqs98x.jl:30 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmp3rgqs98x.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmp3rgqs98x.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\\n  MethodError: no method\
    \ matching isless(::Int64, ::SubString{String})\\n  Closest candidates are:\\\
    n    isless(!Matched::AbstractString, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:344\\\
    n    isless(::Real, !Matched::AbstractFloat) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:185\\\
    n    isless(::Real, !Matched::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:430\\\
    n    ...\\n  Stacktrace:\\n   [1] <(x::Int64, y::SubString{String})\\n     @ Base\
    \ ./operators.jl:352\\n   [2] >(x::SubString{S"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    return \"not implemented\"\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp92sce3nt.jl:28\n  Expression: candidate(\"\
    This is a test\") == \"is\"\n   Evaluated: \"not implemented\" == \"is\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp92sce3nt.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp92sce3nt.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp92sce3nt.jl:29\n  Expression: candidate(\"lets go for swimming\"\
    ) == \"go for\"\n   Evaluated: \"not implemented\" == \"go for\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp92sce3nt.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp92sce3nt.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp92sce3nt.jl:30\n  Expression: candidate(\"there is no place\
    \ available here\") == \"there is no place\"\n   Evaluated: \"not implemented\"\
    \ == \"there is no place\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp92sce3nt.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp92sce3nt.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp92sce3nt.jl:31\n  Expression: candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\"\n   Evaluated: \"not implemented\" == \"Hi am Hussein\"\
    \nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp92sce3nt.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp92sce3nt.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp92sce3nt.jl:32\n  Expre"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp92sce3nt.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    \"\"\"\n    sentences are only letters\n    so split words by space\n\
    \    \"\"\"\n    words = split(sentence)\n    primes = findall(isprime, [length(word)\
    \ for word in words])\n    \"\"\"\n    findall(predicate, collection)\n    return\
    \ a list of indices where the predicate is true\n    \"\"\"\n    return \" \"\
    .join([words[i] for i in primes])\n    \"\"\"\n    return a list of words with\
    \ the prime lengths\n    \"\"\"\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_in_sentence;\n\t@test(candidate(\"This is a test\") == \"is\")\n\t@test(candidate(\"\
    lets go for swimming\") == \"go for\")\n\t@test(candidate(\"there is no place\
    \ available here\") == \"there is no place\")\n\t@test(candidate(\"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\n\t@test(candidate(\"go for it\") == \"go for it\")\n\t\
    @test(candidate(\"here\") == \"\")\n\t@test(candidate(\"here is\") == \"is\")\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp2h4gx1h4.jl:41\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp2h4gx1h4.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2h4gx1h4.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2h4gx1h4.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp2h4gx1h4.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp2h4gx1h4.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2h4gx1h4.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2h4gx1h4.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp2h4gx1h4.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp2h4gx1h4.jl:26\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2h4gx1h4.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2h4gx1h4.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp2h4gx1h4.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2h4gx1h4.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a string representing a sentence,\n    the sentence\
    \ contains some words separated by a space,\n    and you have to return a string\
    \ that contains the words from the original sentence,\n    whose lengths are prime\
    \ numbers,\n    the order of the words in the new string should be the same as\
    \ the original one.\n\n    Example 1:\n    >>> words_in_sentence(\"This is a test\"\
    )\n    \"is\"\n\n    Example 2:\n    >>> words_in_sentence(\"lets go for swimming\"\
    )\n    \"go for\"\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\nfunction words_in_sentence(sentence::String)::String\
    \ \n    words = split(sentence, ' ')\n    filtered_words = []\n    for word in\
    \ words\n        if isprime(length(word))\n            push!(filtered_words, word)\n\
    \        end\n    end\n    return join(filtered_words, ' ')\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_in_sentence;\n\t@test(candidate(\"This is\
    \ a test\") == \"is\")\n\t@test(candidate(\"lets go for swimming\") == \"go for\"\
    )\n\t@test(candidate(\"there is no place available here\") == \"there is no place\"\
    )\n\t@test(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\")\n\t@test(candidate(\"\
    go for it\") == \"go for it\")\n\t@test(candidate(\"here\") == \"\")\n\t@test(candidate(\"\
    here is\") == \"is\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8sc20mks.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"This is a test\") == \"is\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp8sc20mks.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8sc20mks.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8sc20mks.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp8sc20mks.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"lets go for swimming\") == \"go for\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n   \
    \  @ Main /tmp/tmp8sc20mks.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8sc20mks.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8sc20mks.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp8sc20mks.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"there is no place available here\") == \"there is no place\"\n \
    \ UndefVarError: isprime not defined\n  Stacktrace:\n   [1] words_in_sentence(sentence::String)\n\
    \     @ Main /tmp/tmp8sc20mks.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8sc20mks.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8sc20mks.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp8sc20mks.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] words_in_se"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8sc20mks.jl:32\n"
  exit_code: 1
  status: SyntaxError
