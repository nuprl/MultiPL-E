name: HumanEval_74_total_match
language: jl
results:
- program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   sum1 = 0\n    sum2 = 0\n    for word in lst1\n        sum1 += length(word)\n\
    \    end\n    for word in lst2\n        sum2 += length(word)\n    end\n    if\
    \ sum1 > sum2\n        return lst2\n    else\n        return lst1\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   total1 = sum([length(x) for x in lst1])\n    total2 = sum([length(x) for x\
    \ in lst2])\n    if total1 == total2\n        return lst1\n    elseif total1 <\
    \ total2\n        return lst1\n    else\n        return lst2\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   len1 = length(lst1)\n    len2 = length(lst2)\n    sum1 = 0\n    sum2 = 0\n\
    \    for s in lst1\n        sum1 += length(s)\n    end\n    for s in lst2\n  \
    \      sum2 += length(s)\n    end\n    if sum1 < sum2\n        return lst1\n \
    \   elseif sum1 > sum2\n        return lst2\n    else\n        return lst1\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \ sum_1 = sum(length.(lst1))\n  sum_2 = sum(length.(lst2))\n  if sum_1 > sum_2\n\
    \    return lst2\n  elseif sum_1 < sum_2\n    return lst1\n  else\n    return\
    \ lst1\n  end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   len1 = 0\n    len2 = 0\n    for x in lst1\n        len1 += length(x)\n   \
    \ end\n    for x in lst2\n        len2 += length(x)\n    end\n    if len1 == len2\n\
    \        return lst1\n    elseif len1 < len2\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   len1 = length(lst1)\n    len2 = length(lst2)\n    total1 = sum([length(s)\
    \ for s in lst1])\n    total2 = sum([length(s) for s in lst2])\n    if total1\
    \ == total2\n        return lst1\n    elseif total1 < total2\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   #check if the two vectors have the same total number of chars\n    if total_str(lst1)\
    \ > total_str(lst2)\n        return lst2\n    elseif total_str(lst1) < total_str(lst2)\n\
    \        return lst1\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplz3_r3b_.jl:34\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([])\n\
    \  UndefVarError: total_str not defined\n  Stacktrace:\n   [1] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n     @ Main /tmp/tmplz3_r3b_.jl:21\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplz3_r3b_.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplz3_r3b_.jl:33\ntest set:\
    \ Error During Test at /tmp/tmplz3_r3b_.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n  UndefVarError:\
    \ total_str not defined\n  Stacktrace:\n   [1] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n     @ Main /tmp/tmplz3_r3b_.jl:21\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplz3_r3b_.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplz3_r3b_.jl:33\ntest set:\
    \ Error During Test at /tmp/tmplz3_r3b_.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) ==\
    \ [\"hi\", \"admin\"]\n  UndefVarError: total_str not defined\n  Stacktrace:\n\
    \   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\n     @ Main /tmp/tmplz3_r3b_.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplz3_r3b_.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplz3_r3b_.jl:33\ntest set:\
    \ Error During Test at /tmp/tmplz3_r3b_.jl:37\n  Test threw exception\n  Expre"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplz3_r3b_.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   lst_total1 = 0\n    lst_total2 = 0\n    for i in lst1\n        lst_total1\
    \ += length(i)\n    end\n    for i in lst2\n        lst_total2 += length(i)\n\
    \    end\n    if lst_total1 > lst_total2\n        return lst2\n    elseif lst_total1\
    \ < lst_total2\n        return lst1\n    else\n        return lst1\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0 && length(lst2) == 0\n        return []\n    end\n  \
    \  total1 = 0\n    total2 = 0\n    for elem in lst1\n        total1 += length(elem)\n\
    \    end\n    for elem in lst2\n        total2 += length(elem)\n    end\n    if\
    \ total1 == total2\n        return lst1\n    elseif total1 < total2\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   return total_match_helper(lst1, lst2, 0, 0)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpze61dmkd.jl:27\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([])\n\
    \  UndefVarError: total_match_helper not defined\n  Stacktrace:\n   [1] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n     @ Main /tmp/tmpze61dmkd.jl:20\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpze61dmkd.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpze61dmkd.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpze61dmkd.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n  UndefVarError:\
    \ total_match_helper not defined\n  Stacktrace:\n   [1] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n     @ Main /tmp/tmpze61dmkd.jl:20\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpze61dmkd.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpze61dmkd.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpze61dmkd.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) ==\
    \ [\"hi\", \"admin\"]\n  UndefVarError: total_match_helper not defined\n  Stacktrace:\n\
    \   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\n     @ Main /tmp/tmpze61dmkd.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpze61dmkd.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpze61dmkd.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpze61dmkd.jl:30\n  T"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpze61dmkd.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   len1 = length(lst1)\n    len2 = length(lst2)\n    total_match = 0\n    if\
    \ (len1 == 0) && (len2 == 0)\n        return []\n    elseif (len1 == 0) && (len2\
    \ != 0)\n        return lst2\n    elseif (len1 != 0) && (len2 == 0)\n        return\
    \ lst1\n    else\n        for x in lst1\n            total_match += length(x)\n\
    \        end\n        total_match2 = 0\n        for x in lst2\n            total_match2\
    \ += length(x)\n        end\n        if total_match > total_match2\n         \
    \   return lst2\n        elseif total_match < total_match2\n            return\
    \ lst1\n        else\n            return lst1\n        end\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2p_nbo9q.jl:58\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2p_nbo9q.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2p_nbo9q.jl:50\ntest set: Test\
    \ Failed at /tmp/tmp2p_nbo9q.jl:59\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2p_nbo9q.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2p_nbo9q.jl:50\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2p_nbo9q.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   sum1 = 0\n    sum2 = 0\n    for i in lst1\n        sum1 += length(i)\n   \
    \ end\n    for i in lst2\n        sum2 += length(i)\n    end\n    if sum1 <= sum2\n\
    \        return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \ total_1 = 0\n  total_2 = 0\n  \n  for i in lst1\n    total_1 += length(i)\n\
    \  end\n  \n  for i in lst2\n    total_2 += length(i)\n  end\n  \n  if total_1\
    \ < total_2\n    return lst1\n  elseif total_1 > total_2\n    return lst2\n  else\n\
    \    return lst1\n  end\n  \nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   return (sum(ch->length(ch), lst1) > sum(ch->length(ch), lst2)) ? lst2 : lst1\n\
    end\nprintln(total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"]))\nprintln(total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]))\nprintln(total_match([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]))\nprintln(total_match([\"4\"], [\"\
    1\", \"2\", \"3\", \"4\", \"5\"]))\nprintln(total_match([], []))\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "[\"hI\", \"Hi\"]\n[\"hi\", \"admin\"]\n[\"hI\", \"hi\", \"hi\"]\n[\"4\"\
    ]\n"
  stderr: "ERROR: LoadError: MethodError: no method matching total_match(::Vector{Any},\
    \ ::Vector{Any})\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0icvawee.jl:26\n\
    in expression starting at /tmp/tmp0icvawee.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   a = sum(length.(lst1))\n    b = sum(length.(lst2))\n    if a == b \n     \
    \   return lst1\n    elseif a > b\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0\n        return lst1\n    end\n    lst1_cnt = 0\n   \
    \ lst2_cnt = 0\n    for i in lst1\n        lst1_cnt += length(i)\n    end\n  \
    \  for i in lst2\n        lst2_cnt += length(i)\n    end\n    if lst1_cnt > lst2_cnt\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   n1, n2 = 0, 0\n    for i in lst1\n        n1 += length(i)\n    end\n    for\
    \ i in lst2\n        n2 += length(i)\n    end\n    if n1 < n2\n        return\
    \ lst1\n    elseif n1 > n2\n        return lst2\n    else\n        return lst1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0 && length(lst2) == 0\n        return []\n    end\n  \
    \  total_sum_lst1 = 0\n    total_sum_lst2 = 0\n    for i in lst1\n        total_sum_lst1\
    \ += length(i)\n    end\n    for i in lst2\n        total_sum_lst2 += length(i)\n\
    \    end\n    if total_sum_lst1 < total_sum_lst2\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkpb4_bg7.jl:48\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkpb4_bg7.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkpb4_bg7.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     1      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkpb4_bg7.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if size(lst1, 1) == 0 && size(lst2, 1) == 0\n        return []\n    end\n\
    \    if size(lst1, 1) > size(lst2, 1)\n        return lst2\n    elseif size(lst1,\
    \ 1) < size(lst2, 1)\n        return lst1\n    else\n        sum1 = 0\n      \
    \  sum2 = 0\n        for i in lst1\n            sum1 += size(i, 1)\n        end\n\
    \        for i in lst2\n            sum2 += size(i, 1)\n        end\n        if\
    \ sum1 < sum2\n            return lst1\n        elseif sum1 > sum2\n         \
    \   return lst2\n        else\n            return lst1\n        end\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdy87kb_d.jl:51\n  Test threw exception\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"\
    hi\"]\n  MethodError: no method matching size(::String, ::Int64)\n  Closest candidates\
    \ are:\n    size(!Matched::Union{LinearAlgebra.QR, LinearAlgebra.QRCompactWY,\
    \ LinearAlgebra.QRPivoted}, ::Integer) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:566\n\
    \    size(!Matched::Union{LinearAlgebra.Hermitian{T, S}, LinearAlgebra.Symmetric{T,\
    \ S}} where {T, S}, ::Any) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/symmetric.jl:201\n\
    \    size(!Matched::Union{LinearAlgebra.Cholesky, LinearAlgebra.CholeskyPivoted},\
    \ ::Integer) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/cholesky.jl:495\n\
    \    ...\n  Stacktrace:\n   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\n\
    \     @ Main /tmp/tmpdy87kb_d.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdy87kb_d.jl:51 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdy87kb_d.jl:49\ntest set:\
    \ Error During Test at /tmp/tmpdy87kb_d.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n  MethodError:\
    \ no method matching size(::String, ::Int64)\n  Closest candidates are:\n    size(!Matched::Union{LinearAlgebra.QR,\
    \ LinearAlgebra.QRCompactWY, LinearAlgebra.QRPivoted}, ::Integer) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:566\n\
    \    size(!Matched::Union{LinearAlgebra.Hermitian{T, S}, LinearAlgebra.Symmetric{T,\
    \ S}} where {T, S}, ::Any) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/symmetric.jl:201\n\
    \    size(!Matched::Union{LinearAlgebra.Cholesky, LinearAlgebra.CholeskyPivoted},\
    \ ::Integer) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdy87kb_d.jl:47\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if sum(length.(lst1)) < sum(length.(lst2))\n        return lst1\n    elseif\
    \ sum(length.(lst1)) > sum(length.(lst2))\n        return lst2\n    else\n   \
    \     return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
