language: jl
name: HumanEval_74_total_match
results:
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   sum1 = 0\n    sum2 = 0\n    for word in lst1\n        sum1 += length(word)\n\
    \    end\n    for word in lst2\n        sum2 += length(word)\n    end\n    if\
    \ sum1 > sum2\n        return lst2\n    else\n        return lst1\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   total1 = sum([length(x) for x in lst1])\n    total2 = sum([length(x) for x\
    \ in lst2])\n    if total1 == total2\n        return lst1\n    elseif total1 <\
    \ total2\n        return lst1\n    else\n        return lst2\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   len1 = length(lst1)\n    len2 = length(lst2)\n    sum1 = 0\n    sum2 = 0\n\
    \    for s in lst1\n        sum1 += length(s)\n    end\n    for s in lst2\n  \
    \      sum2 += length(s)\n    end\n    if sum1 < sum2\n        return lst1\n \
    \   elseif sum1 > sum2\n        return lst2\n    else\n        return lst1\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \ sum_1 = sum(length.(lst1))\n  sum_2 = sum(length.(lst2))\n  if sum_1 > sum_2\n\
    \    return lst2\n  elseif sum_1 < sum_2\n    return lst1\n  else\n    return\
    \ lst1\n  end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   len1 = 0\n    len2 = 0\n    for x in lst1\n        len1 += length(x)\n   \
    \ end\n    for x in lst2\n        len2 += length(x)\n    end\n    if len1 == len2\n\
    \        return lst1\n    elseif len1 < len2\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   len1 = length(lst1)\n    len2 = length(lst2)\n    total1 = sum([length(s)\
    \ for s in lst1])\n    total2 = sum([length(s) for s in lst2])\n    if total1\
    \ == total2\n        return lst1\n    elseif total1 < total2\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   #check if the two vectors have the same total number of chars\n    if total_str(lst1)\
    \ > total_str(lst2)\n        return lst2\n    elseif total_str(lst1) < total_str(lst2)\n\
    \        return lst1\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,
    0 broken.

    in expression starting at /tmp/tmplz3_r3b_.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmplz3_r3b_.jl:34\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([])\n\
    \  UndefVarError: total_str not defined\n  Stacktrace:\n   [1] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n     @ Main /tmp/tmplz3_r3b_.jl:21\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplz3_r3b_.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplz3_r3b_.jl:33\ntest set:\
    \ Error During Test at /tmp/tmplz3_r3b_.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n  UndefVarError:\
    \ total_str not defined\n  Stacktrace:\n   [1] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n     @ Main /tmp/tmplz3_r3b_.jl:21\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplz3_r3b_.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplz3_r3b_.jl:33\ntest set:\
    \ Error During Test at /tmp/tmplz3_r3b_.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) ==\
    \ [\"hi\", \"admin\"]\n  UndefVarError: total_str not defined\n  Stacktrace:\n\
    \   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\n     @ Main /tmp/tmplz3_r3b_.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplz3_r3b_.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplz3_r3b_.jl:33\ntest set:\
    \ Error During Test at /tmp/tmplz3_r3b_.jl:37\n  Test threw exception\n  Expre"
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   lst_total1 = 0\n    lst_total2 = 0\n    for i in lst1\n        lst_total1\
    \ += length(i)\n    end\n    for i in lst2\n        lst_total2 += length(i)\n\
    \    end\n    if lst_total1 > lst_total2\n        return lst2\n    elseif lst_total1\
    \ < lst_total2\n        return lst1\n    else\n        return lst1\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0 && length(lst2) == 0\n        return []\n    end\n  \
    \  total1 = 0\n    total2 = 0\n    for elem in lst1\n        total1 += length(elem)\n\
    \    end\n    for elem in lst2\n        total2 += length(elem)\n    end\n    if\
    \ total1 == total2\n        return lst1\n    elseif total1 < total2\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   return total_match_helper(lst1, lst2, 0, 0)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,
    0 broken.

    in expression starting at /tmp/tmpze61dmkd.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpze61dmkd.jl:27\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([])\n\
    \  UndefVarError: total_match_helper not defined\n  Stacktrace:\n   [1] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n     @ Main /tmp/tmpze61dmkd.jl:20\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpze61dmkd.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpze61dmkd.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpze61dmkd.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n  UndefVarError:\
    \ total_match_helper not defined\n  Stacktrace:\n   [1] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n     @ Main /tmp/tmpze61dmkd.jl:20\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpze61dmkd.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpze61dmkd.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpze61dmkd.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) ==\
    \ [\"hi\", \"admin\"]\n  UndefVarError: total_match_helper not defined\n  Stacktrace:\n\
    \   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\n     @ Main /tmp/tmpze61dmkd.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpze61dmkd.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpze61dmkd.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpze61dmkd.jl:30\n  T"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   len1 = length(lst1)\n    len2 = length(lst2)\n    total_match = 0\n    if\
    \ (len1 == 0) && (len2 == 0)\n        return []\n    elseif (len1 == 0) && (len2\
    \ != 0)\n        return lst2\n    elseif (len1 != 0) && (len2 == 0)\n        return\
    \ lst1\n    else\n        for x in lst1\n            total_match += length(x)\n\
    \        end\n        total_match2 = 0\n        for x in lst2\n            total_match2\
    \ += length(x)\n        end\n        if total_match > total_match2\n         \
    \   return lst2\n        elseif total_match < total_match2\n            return\
    \ lst1\n        else\n            return lst1\n        end\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2p_nbo9q.jl:48

    '
  stdout: "test set: Test Failed at /tmp/tmp2p_nbo9q.jl:58\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2p_nbo9q.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2p_nbo9q.jl:50\ntest set: Test\
    \ Failed at /tmp/tmp2p_nbo9q.jl:59\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2p_nbo9q.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2p_nbo9q.jl:50\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   sum1 = 0\n    sum2 = 0\n    for i in lst1\n        sum1 += length(i)\n   \
    \ end\n    for i in lst2\n        sum2 += length(i)\n    end\n    if sum1 <= sum2\n\
    \        return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \ total_1 = 0\n  total_2 = 0\n  \n  for i in lst1\n    total_1 += length(i)\n\
    \  end\n  \n  for i in lst2\n    total_2 += length(i)\n  end\n  \n  if total_1\
    \ < total_2\n    return lst1\n  elseif total_1 > total_2\n    return lst2\n  else\n\
    \    return lst1\n  end\n  \nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   return (sum(ch->length(ch), lst1) > sum(ch->length(ch), lst2)) ? lst2 : lst1\n\
    end\nprintln(total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"]))\nprintln(total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]))\nprintln(total_match([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]))\nprintln(total_match([\"4\"], [\"\
    1\", \"2\", \"3\", \"4\", \"5\"]))\nprintln(total_match([], []))\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: MethodError: no method matching total_match(::Vector{Any},\
    \ ::Vector{Any})\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0icvawee.jl:26\n\
    in expression starting at /tmp/tmp0icvawee.jl:26\n"
  stdout: '["hI", "Hi"]

    ["hi", "admin"]

    ["hI", "hi", "hi"]

    ["4"]

    '
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   a = sum(length.(lst1))\n    b = sum(length.(lst2))\n    if a == b \n     \
    \   return lst1\n    elseif a > b\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0\n        return lst1\n    end\n    lst1_cnt = 0\n   \
    \ lst2_cnt = 0\n    for i in lst1\n        lst1_cnt += length(i)\n    end\n  \
    \  for i in lst2\n        lst2_cnt += length(i)\n    end\n    if lst1_cnt > lst2_cnt\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   n1, n2 = 0, 0\n    for i in lst1\n        n1 += length(i)\n    end\n    for\
    \ i in lst2\n        n2 += length(i)\n    end\n    if n1 < n2\n        return\
    \ lst1\n    elseif n1 > n2\n        return lst2\n    else\n        return lst1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0 && length(lst2) == 0\n        return []\n    end\n  \
    \  total_sum_lst1 = 0\n    total_sum_lst2 = 0\n    for i in lst1\n        total_sum_lst1\
    \ += length(i)\n    end\n    for i in lst2\n        total_sum_lst2 += length(i)\n\
    \    end\n    if total_sum_lst1 < total_sum_lst2\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkpb4_bg7.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmpkpb4_bg7.jl:48\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkpb4_bg7.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkpb4_bg7.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     1      9\n"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if size(lst1, 1) == 0 && size(lst2, 1) == 0\n        return []\n    end\n\
    \    if size(lst1, 1) > size(lst2, 1)\n        return lst2\n    elseif size(lst1,\
    \ 1) < size(lst2, 1)\n        return lst1\n    else\n        sum1 = 0\n      \
    \  sum2 = 0\n        for i in lst1\n            sum1 += size(i, 1)\n        end\n\
    \        for i in lst2\n            sum2 += size(i, 1)\n        end\n        if\
    \ sum1 < sum2\n            return lst1\n        elseif sum1 > sum2\n         \
    \   return lst2\n        else\n            return lst1\n        end\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpdy87kb_d.jl:47

    '
  stdout: "test set: Error During Test at /tmp/tmpdy87kb_d.jl:51\n  Test threw exception\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"\
    hi\"]\n  MethodError: no method matching size(::String, ::Int64)\n  Closest candidates\
    \ are:\n    size(!Matched::Union{LinearAlgebra.QR, LinearAlgebra.QRCompactWY,\
    \ LinearAlgebra.QRPivoted}, ::Integer) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:566\n\
    \    size(!Matched::Union{LinearAlgebra.Hermitian{T, S}, LinearAlgebra.Symmetric{T,\
    \ S}} where {T, S}, ::Any) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/symmetric.jl:201\n\
    \    size(!Matched::Union{LinearAlgebra.Cholesky, LinearAlgebra.CholeskyPivoted},\
    \ ::Integer) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/cholesky.jl:495\n\
    \    ...\n  Stacktrace:\n   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\n\
    \     @ Main /tmp/tmpdy87kb_d.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdy87kb_d.jl:51 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdy87kb_d.jl:49\ntest set:\
    \ Error During Test at /tmp/tmpdy87kb_d.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n  MethodError:\
    \ no method matching size(::String, ::Int64)\n  Closest candidates are:\n    size(!Matched::Union{LinearAlgebra.QR,\
    \ LinearAlgebra.QRCompactWY, LinearAlgebra.QRPivoted}, ::Integer) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/qr.jl:566\n\
    \    size(!Matched::Union{LinearAlgebra.Hermitian{T, S}, LinearAlgebra.Symmetric{T,\
    \ S}} where {T, S}, ::Any) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/symmetric.jl:201\n\
    \    size(!Matched::Union{LinearAlgebra.Cholesky, LinearAlgebra.CholeskyPivoted},\
    \ ::Integer) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src"
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if sum(length.(lst1)) < sum(length.(lst2))\n        return lst1\n    elseif\
    \ sum(length.(lst1)) > sum(length.(lst2))\n        return lst2\n    else\n   \
    \     return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    if sum(length(lst1)) > sum(length(lst2))\n        return lst2\n    elseif\
    \ sum(length(lst1)) < sum(length(lst2))\n        return lst1\n    else\n     \
    \   return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpb3pf9bip.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpb3pf9bip.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb3pf9bip.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb3pf9bip.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpb3pf9bip.jl:38\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb3pf9bip.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb3pf9bip.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpb3pf9bip.jl:39\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpb3pf9bip.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpb3pf9bip.jl:33\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1660008730
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   sum_of_lst1 = 0\n    sum_of_lst2 = 0\n    for item in lst1\n        sum_of_lst1\
    \ += length(item)\n    end\n    for item in lst2\n        sum_of_lst2 += length(item)\n\
    \    end\n    if sum_of_lst1 == sum_of_lst2\n        return lst1\n    elseif sum_of_lst1\
    \ > sum_of_lst2\n        return lst2\n    else\n        return lst1\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008728
- exit_code: -1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   return if length(lst1) < length(lst2) length(lst1) else length(lst2) end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpk0rsja08.jl:27\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([])\n\
    \  MethodError: Cannot `convert` an object of type Int64 to an object of type\
    \ Vector{String}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\n\
    \     @ Main /tmp/tmpk0rsja08.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk0rsja08.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk0rsja08.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpk0rsja08.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n  MethodError:\
    \ Cannot `convert` an object of type Int64 to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\n\
    \     @ Main /tmp/tmpk0rsja08.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polygl"
  timestamp: 1660008732
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   n1 = length(lst1)\n    n2 = length(lst2)\n    count1 = 0\n    count2 = 0\n\
    \    if n1 == 0\n        return lst1\n    elseif n2 == 0\n        return lst2\n\
    \    elseif n1 < n2\n        return lst1\n    elseif n2 < n1\n        return lst2\n\
    \    elseif n1 == n2\n        for i in 1:n1\n            count1 += length(lst1[i])\n\
    \            count2 += length(lst2[i])\n        end\n        if count1 == count2\n\
    \            return lst1\n        elseif count1 < count2\n            return lst1\n\
    \        elseif count2 < count1\n            return lst2\n        end\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqey9_qgu.jl:48

    '
  stdout: "test set: Test Failed at /tmp/tmpqey9_qgu.jl:56\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated:\
    \ [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqey9_qgu.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpqey9_qgu.jl:50\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     1      9\n"
  timestamp: 1660008730
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   sum1 = sum(length(x) for x in lst1)\n    sum2 = sum(length(x) for x in lst2)\n\
    \    if sum1 == sum2\n        return lst1\n    elseif sum1 < sum2\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpt76s7dm2.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpt76s7dm2.jl:35\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([])\n\
    \  ArgumentError: reducing over an empty collection is not allowed\n  Stacktrace:\n\
    \    [1] _empty_reduce_error()\n      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function,\
    \ op::Base.BottomRF{typeof(Base.add_sum)}, T::Type)\n      @ Base ./reduce.jl:344\n\
    \    [3] reduce_empty(op::Base.MappingRF{var\"#1#3\", Base.BottomRF{typeof(Base.add_sum)}},\
    \ #unused#::Type{String})\n      @ Base ./reduce.jl:331\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:357 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] #mapreduce#248\n\
    \      @ ./reduce.jl:289 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:289\
    \ [inlined]\n   [12] #sum#251\n      @ ./reduce.jl:503 [inlined]\n   [13] sum\n\
    \      @ ./reduce.jl:503 [inlined]\n   [14] #sum#252\n      @ ./reduce.jl:532\
    \ [inlined]\n   [15] sum\n      @ ./reduce.jl:532 [inlined]\n   [16] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n      @ Main /tmp/tmpt76s7dm2.jl:20\n   [17] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [18] macro expansion\n      @ /tmp/tmpt76s7dm2.jl:35 [inlined]\n   [19] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [20] top-level scope\n      @ /tmp/tmpt76s7dm2.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpt76s7dm2.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base.add_sum)},\
    \ T::Type)\n      @ Base ./reduce.jl:344\n  "
  timestamp: 1660008731
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    len1 = length(lst1)\n    len2 = length(lst2)\n    \n    sum1 = 0\n \
    \   sum2 = 0\n    \n    for word in lst1\n        sum1 += length(word)\n    end\n\
    \    \n    for word in lst2\n        sum2 += length(word)\n    end\n    \n   \
    \ if (sum1 == sum2)\n        return lst1\n    elseif (sum1 < sum2)\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008728
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   total_lst1 = 0\n    total_lst2 = 0\n    for i in lst1\n        total_lst1\
    \ += length(i)\n    end\n    for i in lst2\n        total_lst2 += length(i)\n\
    \    end\n    if total_lst1 > total_lst2\n        return lst2\n    else\n    \
    \    return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008728
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   sum1 = 0\n    sum2 = 0\n    for i in lst1\n        sum1 += length(i)\n   \
    \ end\n    for i in lst2\n        sum2 += length(i)\n    end\n    if sum1 > sum2\n\
    \        return lst2\n    elseif sum1 < sum2\n        return lst1\n    else\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008728
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0\n        return []\n    end\n    #return lst1\n    str1_total\
    \ = 0\n    str2_total = 0\n    for i in 1:length(lst1)\n        str1_total +=\
    \ length(lst1[i])\n    end\n    for i in 1:length(lst2)\n        str2_total +=\
    \ length(lst2[i])\n    end\n    if str1_total == str2_total\n        return lst1\n\
    \    elseif str1_total < str2_total\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\n        \nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008728
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   total1 = 0\n    total2 = 0\n    for i in lst1\n        total1 += length(i)\n\
    \    end\n    for i in lst2\n        total2 += length(i)\n    end\n    if total1\
    \ > total2\n        return lst2\n    else\n        return lst1\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008728
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   total1 = 0\n    total2 = 0\n    for i in lst1\n        total1 += length(i)\n\
    \    end\n    for i in lst2\n        total2 += length(i)\n    end\n    if total1\
    \ < total2\n        return lst1\n    elseif total1 > total2\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008728
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   count_list1 = 0\n    count_list2 = 0\n    for i in lst1\n        count_list1\
    \ += length(i)\n    end\n    for i in lst2\n        count_list2 += length(i)\n\
    \    end\n    if count_list1 < count_list2\n        return lst1\n    else\n  \
    \      return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnx0p28i8.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpnx0p28i8.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnx0p28i8.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpnx0p28i8.jl:38\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     1      9\n"
  timestamp: 1660008730
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if sum(length.(lst1)) <= sum(length.(lst2))\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008728
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) > length(lst2)\n        return lst2\n    elseif length(lst1)\
    \ < length(lst2)\n        return lst1\n    else\n        if sum(length.(lst1))\
    \ > sum(length.(lst2))\n            return lst2\n        elseif sum(length.(lst1))\
    \ < sum(length.(lst2))\n            return lst1\n        else\n            return\
    \ lst1\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmr73mub2.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpmr73mub2.jl:44\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated:\
    \ [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmr73mub2.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpmr73mub2.jl:38\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     1      9\n"
  timestamp: 1660008730
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   sum1 = 0\n    sum2 = 0\n    for s in lst1\n        sum1 += length(s)\n   \
    \ end\n    for s in lst2\n        sum2 += length(s)\n    end\n    if sum1 <= sum2\n\
    \        return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008728
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   # Base Case\n    if length(lst1) == 0\n        return lst1\n    end\n    #\
    \ Recursive Case\n    if sum([length(x) for x in lst1]) < sum([length(x) for x\
    \ in lst2])\n        return lst1\n    else\n        return lst2\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6cbda1km.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmp6cbda1km.jl:42\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6cbda1km.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp6cbda1km.jl:35\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     1      9\n"
  timestamp: 1660008730
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   sum1 = 0\n    sum2 = 0\n    for s in lst1\n        sum1 += length(s)\n   \
    \ end\n    for s in lst2\n        sum2 += length(s)\n    end\n    if sum1 < sum2\n\
    \        return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphbil_pou.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmphbil_pou.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmphbil_pou.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmphbil_pou.jl:38\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     1      9\n"
  timestamp: 1660008730
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   lst1_sum = sum(length(word) for word in lst1)\n    lst2_sum = sum(length(word)\
    \ for word in lst2)\n    if length(lst1) == 0 && length(lst2) == 0\n        return\
    \ []\n    elseif lst1_sum < lst2_sum\n        return lst1\n    elseif lst1_sum\
    \ > lst2_sum\n        return lst2\n    else\n        return lst1\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp5ws60sy4.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmp5ws60sy4.jl:37\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([])\n\
    \  ArgumentError: reducing over an empty collection is not allowed\n  Stacktrace:\n\
    \    [1] _empty_reduce_error()\n      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function,\
    \ op::Base.BottomRF{typeof(Base.add_sum)}, T::Type)\n      @ Base ./reduce.jl:344\n\
    \    [3] reduce_empty(op::Base.MappingRF{var\"#1#3\", Base.BottomRF{typeof(Base.add_sum)}},\
    \ #unused#::Type{String})\n      @ Base ./reduce.jl:331\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:357 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] #mapreduce#248\n\
    \      @ ./reduce.jl:289 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:289\
    \ [inlined]\n   [12] #sum#251\n      @ ./reduce.jl:503 [inlined]\n   [13] sum\n\
    \      @ ./reduce.jl:503 [inlined]\n   [14] #sum#252\n      @ ./reduce.jl:532\
    \ [inlined]\n   [15] sum\n      @ ./reduce.jl:532 [inlined]\n   [16] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n      @ Main /tmp/tmp5ws60sy4.jl:20\n   [17] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [18] macro expansion\n      @ /tmp/tmp5ws60sy4.jl:37 [inlined]\n   [19] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [20] top-level scope\n      @ /tmp/tmp5ws60sy4.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp5ws60sy4.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base.add_sum)},\
    \ T::Type)\n      @ Base ./reduce.jl:344\n  "
  timestamp: 1660008731
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0 && length(lst2) == 0\n        return []\n    end\nusing\
    \ Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpht4x5mww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpht4x5mww.jl:1\n\
    in expression starting at /tmp/tmpht4x5mww.jl:1\n"
  stdout: ''
  timestamp: 1660008729
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   cnt1 = sum(length(x) for x in lst1)\n    cnt2 = sum(length(x) for x in lst2)\n\
    \    if cnt1 < cnt2\n        return lst1\n    elseif cnt1 > cnt2\n        return\
    \ lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpnp3x7ilo.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpnp3x7ilo.jl:35\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([])\n\
    \  ArgumentError: reducing over an empty collection is not allowed\n  Stacktrace:\n\
    \    [1] _empty_reduce_error()\n      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function,\
    \ op::Base.BottomRF{typeof(Base.add_sum)}, T::Type)\n      @ Base ./reduce.jl:344\n\
    \    [3] reduce_empty(op::Base.MappingRF{var\"#1#3\", Base.BottomRF{typeof(Base.add_sum)}},\
    \ #unused#::Type{String})\n      @ Base ./reduce.jl:331\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:357 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] #mapreduce#248\n\
    \      @ ./reduce.jl:289 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:289\
    \ [inlined]\n   [12] #sum#251\n      @ ./reduce.jl:503 [inlined]\n   [13] sum\n\
    \      @ ./reduce.jl:503 [inlined]\n   [14] #sum#252\n      @ ./reduce.jl:532\
    \ [inlined]\n   [15] sum\n      @ ./reduce.jl:532 [inlined]\n   [16] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n      @ Main /tmp/tmpnp3x7ilo.jl:20\n   [17] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [18] macro expansion\n      @ /tmp/tmpnp3x7ilo.jl:35 [inlined]\n   [19] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [20] top-level scope\n      @ /tmp/tmpnp3x7ilo.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpnp3x7ilo.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base.add_sum)},\
    \ T::Type)\n      @ Base ./reduce.jl:344\n  "
  timestamp: 1660008731
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if sum(length.(lst1)) > sum(length.(lst2))\n        return lst2\n    else\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008728
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   lst1_total_length = 0\n    lst2_total_length = 0\n    for i in lst1\n    \
    \    lst1_total_length += length(i)\n    end\n    for i in lst2\n        lst2_total_length\
    \ += length(i)\n    end\n    if lst1_total_length > lst2_total_length\n      \
    \  return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008728
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   l1 = 0\n    l2 = 0\n    if length(lst1) == 0\n        return []\n    end\n\
    \    for item in lst1\n        l1 += length(item)\n    end\n    for item in lst2\n\
    \        l2 += length(item)\n    end\n    if l1 == l2\n        return lst1\n \
    \   elseif l1 < l2\n        return lst1\n    else \n        return lst2\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008728
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   len1 = sum([length(x) for x in lst1])\n    len2 = sum([length(x) for x in\
    \ lst2])\n    if len1 < len2 \n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpua1xer8o.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpua1xer8o.jl:39\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpua1xer8o.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpua1xer8o.jl:32\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     1      9\n"
  timestamp: 1660008730
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   t1 = [length(j) for j in lst1]\n    t2 = [length(i) for i in lst2]\n    if\
    \ sum(t1) > sum(t2)\n        return lst2\n    elseif sum(t1) < sum(t2)\n     \
    \   return lst1\n    else\n        return lst1\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008729
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   lst1_char_sum = sum(map(length, lst1))\n    lst2_char_sum = sum(map(length,\
    \ lst2))\n    if lst1_char_sum < lst2_char_sum\n        return lst1\n    elseif\
    \ lst1_char_sum > lst2_char_sum\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008728
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0\n        return lst1\n    end\n    if length(lst2) ==\
    \ 0\n        return lst2\n    end\n    if length(lst1) == length(lst2)\n     \
    \   return lst1\n    end\n    if length(lst1) > length(lst2)\n        return lst2\n\
    \    end\n    if length(lst1) < length(lst2)\n        return lst1\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp94pftfe5.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmp94pftfe5.jl:42\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp94pftfe5.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp94pftfe5.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp94pftfe5.jl:45\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp94pftfe5.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp94pftfe5.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp94pftfe5.jl:46\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp94pftfe5.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp94pftfe5.jl:40\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1660008730
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   total_chars1 = 0\n    total_chars2 = 0\n    for i in lst1\n        total_chars1\
    \ += length(i)\n    end\n    for i in lst2\n        total_chars2 += length(i)\n\
    \    end\n    if total_chars1 > total_chars2\n        return lst2\n    elseif\
    \ total_chars1 < total_chars2\n        return lst1\n    else\n        return lst1\n\
    \    end\nend\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\nusing\
    \ Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008728
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   num1, num2 = 0, 0\n    for i in lst1\n        num1 += length(i)\n    end\n\
    \    for i in lst2\n        num2 += length(i)\n    end\n    if num1 > num2\n \
    \       return lst2\n    elseif num1 < num2\n        return lst1\n    else\n \
    \       return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008728
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   cnt1 = cnt2 = 0\n    for i in lst1\n        cnt1 += length(i)\n    end\n \
    \   for i in lst2\n        cnt2 += length(i)\n    end\n    if (cnt1 < cnt2)\n\
    \        return lst1\n    elseif (cnt1 > cnt2)\n        return lst2\n    else\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008729
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0 || length(lst2) == 0\n        return []\n    end\n  \
    \  lst1_total_length = sum([length(el) for el in lst1])\n    lst2_total_length\
    \ = sum([length(el) for el in lst2])\n    if lst1_total_length < lst2_total_length\n\
    \        return lst1\n    elseif lst1_total_length > lst2_total_length\n     \
    \   return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008729
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   l1 = reduce(+, map(length, lst1))\n    l2 = reduce(+, map(length, lst2))\n\
    \    return ifelse(l1 < l2, lst1, lst2)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwia67qhe.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpwia67qhe.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwia67qhe.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwia67qhe.jl:28\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     1      9\n"
  timestamp: 1660008731
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   # your code here\n    total_string_chars_lst1 = 0\n    total_string_chars_lst2\
    \ = 0\n    for i in 1:length(lst1)\n        total_string_chars_lst1 += length(lst1[i])\n\
    \    end\n    for i in 1:length(lst2)\n        total_string_chars_lst2 += length(lst2[i])\n\
    \    end\n    # println(total_string_chars_lst1)\n    # println(total_string_chars_lst2)\n\
    \    if total_string_chars_lst1 == total_string_chars_lst2\n        return lst1\n\
    \    elseif total_string_chars_lst1 > total_string_chars_lst2\n        return\
    \ lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008729
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    n1 = length(lst1) \n    n2 = length(lst2) \n    sum1 = 0\n    sum2 =\
    \ 0\n    \n    for i in lst1\n        sum1 += length(i)\n    end\n    \n    for\
    \ i in lst2\n        sum2 += length(i)\n    end\n    \n    if sum1 < sum2\n  \
    \      return lst1\n    elseif sum1 > sum2\n        return lst2\n    else\n  \
    \      return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008729
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    total1 = 0\n    total2 = 0\n    \n    for i = 1:length(lst1)\n     \
    \   total1 += length(lst1[i])\n    end\n    \n    for i = 1:length(lst2)\n   \
    \     total2 += length(lst2[i])\n    end\n    \n    if total1 < total2\n     \
    \   return lst1\n    elseif total2 < total1\n        return lst2\n    else\n \
    \       return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008729
- exit_code: -1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmpradvmdh0.jl:27\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([])\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Vector{String}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\n\
    \     @ Main /tmp/tmpradvmdh0.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpradvmdh0.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpradvmdh0.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpradvmdh0.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\n\
    \     @ Main /tmp/tmpradvmdh0.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/po"
  timestamp: 1660008734
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   sum1 = sum(map(length, lst1))\n    sum2 = sum(map(length, lst2))\n    if sum1\
    \ < sum2\n        return lst1\n    elseif sum1 > sum2\n        return lst2\n \
    \   else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008729
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   sum1 = 0\n    sum2 = 0\n    for i in lst1\n        sum1 += length(i)\n   \
    \ end\n    for i in lst2\n        sum2 += length(i)\n    end\n    if sum1 > sum2\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008729
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0 && length(lst2) == 0\n        return []\n    end\n  \
    \  lst1count = count(lst1)\n    lst2count = count(lst2)\n    if lst1count > lst2count\n\
    \        return lst2\n    elseif lst1count < lst2count\n        return lst1\n\
    \    else \n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp6i9xt510.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmp6i9xt510.jl:39\n  Test threw exception\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"\
    hi\"]\n  TypeError: non-boolean (String) used in boolean context\n  Stacktrace:\n\
    \    [1] _simple_count\n      @ ./reduce.jl:1206 [inlined]\n    [2] _count\n \
    \     @ ./reducedim.jl:407 [inlined]\n    [3] #count#735\n      @ ./reducedim.jl:405\
    \ [inlined]\n    [4] #count#734\n      @ ./reducedim.jl:404 [inlined]\n    [5]\
    \ count\n      @ ./reducedim.jl:404 [inlined]\n    [6] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n      @ Main /tmp/tmp6i9xt510.jl:23\n    [7] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \    [8] macro expansion\n      @ /tmp/tmp6i9xt510.jl:39 [inlined]\n    [9] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp6i9xt510.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp6i9xt510.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) ==\
    \ [\"hi\", \"admin\"]\n  TypeError: non-boolean (String) used in boolean context\n\
    \  Stacktrace:\n    [1] _simple_count\n      @ ./reduce.jl:1206 [inlined]\n  \
    \  [2] _count\n      @ ./reducedim.jl:407 [inlined]\n    [3] #count#735\n    \
    \  @ ./reducedim.jl:405 [inlined]\n    [4] #count#734\n      @ ./reducedim.jl:404\
    \ [inlined]\n    [5] count\n      @ ./reducedim.jl:404 [inlined]\n    [6] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n      @ Main /tmp/tmp6i9xt510.jl:23\n    [7] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \    [8] macro expansion\n      @ /tmp/tmp6i9xt510.jl:40 [inlined]\n    [9] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp6i9xt510.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp6i9xt510.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]\n  TypeError:\
    \ no"
  timestamp: 1660008732
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   total_lst1 = sum(length.(lst1))\n    total_lst2 = sum(length.(lst2))\n   \
    \ if total_lst1 < total_lst2\n        return lst1\n    elseif total_lst1 > total_lst2\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008729
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    if length(lst1) == 0 && length(lst2) == 0\n        return []\n    end\n\
    \    elif length(lst1) == 0\n        return lst2\n    end\n    elif length(lst2)\
    \ == 0\n        return lst1\n    end\n    \n    j = 0 \n    for i in 1:length(lst1)\n\
    \        j += length(lst1[i])\n    end\n    s1 = j\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp0symj8pp.jl:19 expected\
    \ \"end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0symj8pp.jl:24\n\
    in expression starting at /tmp/tmp0symj8pp.jl:24\n"
  stdout: ''
  timestamp: 1660008730
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   lst1_total = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total\
    \ += length(i)\n    end\n    for i in lst2\n        lst2_total += length(i)\n\
    \    end\n    if lst1_total < lst2_total\n        return lst1\n    elseif lst1_total\
    \ > lst2_total\n        return lst2\n    else\n        return lst1\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008729
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    sum1 = 0\n    sum2 = 0\n    \n    for i in lst1\n        sum1 += length(i)\n\
    \    end\n    \n    for i in lst2\n        sum2 += length(i)\n    end\n    \n\
    \    if sum1 > sum2\n        return lst2\n    elseif sum1 < sum2\n        return\
    \ lst1\n    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008729
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   #If the two lists are empty, return an empty list.\n    if length(lst1) ==\
    \ 0 && length(lst2) == 0\n        return []\n    end\n    \n    #If the two lists\
    \ have the same length, return the first list.\n    if length(lst1) == length(lst2)\n\
    \        return lst1\n    end\n    \n    #Get the character counts of the two\
    \ lists.\n    lst1_chars = count_chars(lst1)\n    lst2_chars = count_chars(lst2)\n\
    \    \n    #The list whose total number of characters is the smaller will be returned.\n\
    \    if lst1_chars < lst2_chars\n        return lst1\n    elseif lst1_chars >\
    \ lst2_chars\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp4jqlq30r.jl:43

    '
  stdout: "test set: Test Failed at /tmp/tmp4jqlq30r.jl:47\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4jqlq30r.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4jqlq30r.jl:45\ntest set: Error\
    \ During Test at /tmp/tmp4jqlq30r.jl:48\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) ==\
    \ [\"hi\", \"admin\"]\n  UndefVarError: count_chars not defined\n  Stacktrace:\n\
    \   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\n     @ Main /tmp/tmp4jqlq30r.jl:31\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4jqlq30r.jl:48 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4jqlq30r.jl:45\ntest set:\
    \ Error During Test at /tmp/tmp4jqlq30r.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]\n  UndefVarError:\
    \ count_chars not defined\n  Stacktrace:\n   [1] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n     @ Main /tmp/tmp4jqlq30r.jl:31\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp4jqlq30r.jl:49 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4jqlq30r.jl:45\ntest set:\
    \ Test Failed at /tmp/tmp4jqlq30r.jl:50\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:"
  timestamp: 1660008734
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   n1, n2 = sum([length(s) for s in lst1]), sum([length(s) for s in lst2])\n\
    \    if n1 == n2\n        return lst1\n    elseif n1 < n2\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008730
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   sum1, sum2 = 0, 0\n    for i in lst1\n        sum1 += length(i)\n    end\n\
    \    for i in lst2\n        sum2 += length(i)\n    end\n    if sum1 < sum2\n \
    \       return lst1\n    elseif sum1 > sum2\n        return lst2\n    else\n \
    \       return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008730
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0\n        return lst1\n    end\n    if length(lst2) ==\
    \ 0\n        return lst2\n    end\n    sum_vec1 = 0\n    sum_vec2 = 0\n    for\
    \ i in lst1\n        sum_vec1 += length(i)\n    end\n    for i in lst2\n     \
    \   sum_vec2 += length(i)\n    end\n    if sum_vec1 < sum_vec2\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpq7s_k31r.jl:42

    '
  stdout: "test set: Test Failed at /tmp/tmpq7s_k31r.jl:51\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq7s_k31r.jl:51 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpq7s_k31r.jl:44\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     1      9\n"
  timestamp: 1660008732
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   sum1 = 0\n    sum2 = 0\n    for i in lst1\n        sum1 += length(i)\n   \
    \ end\n    for i in lst2\n        sum2 += length(i)\n    end\n    if sum1 < sum2\n\
    \        return lst1\n    elseif sum1 > sum2\n        return lst2\n    else\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008730
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   lst1_length = 0\n    lst2_length = 0\n    for i in lst1\n        lst1_length\
    \ += length(i)\n    end\n    for i in lst2\n        lst2_length += length(i)\n\
    \    end\n    if lst1_length <= lst2_length\n        return lst1\n    else\n \
    \       return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008730
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   sum1 = 0\n    sum2 = 0\n    for i = 1:length(lst1)\n        sum1 += length(lst1[i])\n\
    \    end\n    for i = 1:length(lst2)\n        sum2 += length(lst2[i])\n    end\n\
    \    if sum1 < sum2\n        return lst1\n    elseif sum1 > sum2\n        return\
    \ lst2\n    else\n        return lst1\n    end\nend\n        \nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008730
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0\n        return lst1\n    end\n    if length(lst2) ==\
    \ 0\n        return lst2\n    end\n    num1 = 0\n    num2 = 0\n    for i in lst1\n\
    \        num1 += length(i)\n    end\n    for i in lst2\n        num2 += length(i)\n\
    \    end\n    if num1 <= num2\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008730
- exit_code: -1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpztgbwngn.jl:27\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([])\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Vector{String}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\n\
    \     @ Main /tmp/tmpztgbwngn.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpztgbwngn.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpztgbwngn.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpztgbwngn.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\n\
    \     @ Main /tmp/tmpztgbwngn.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/po"
  timestamp: 1660008735
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if sum(stringlength, lst1) < sum(stringlength, lst2)\n        return lst1\n\
    \    elseif sum(stringlength, lst1) > sum(stringlength, lst2)\n        return\
    \ lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,
    0 broken.

    in expression starting at /tmp/tmp4e_i5msl.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp4e_i5msl.jl:33\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([])\n\
    \  UndefVarError: stringlength not defined\n  Stacktrace:\n   [1] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n     @ Main /tmp/tmp4e_i5msl.jl:20\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp4e_i5msl.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4e_i5msl.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp4e_i5msl.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n  UndefVarError:\
    \ stringlength not defined\n  Stacktrace:\n   [1] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n     @ Main /tmp/tmp4e_i5msl.jl:20\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp4e_i5msl.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4e_i5msl.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp4e_i5msl.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) ==\
    \ [\"hi\", \"admin\"]\n  UndefVarError: stringlength not defined\n  Stacktrace:\n\
    \   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\n     @ Main /tmp/tmp4e_i5msl.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4e_i5msl.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4e_i5msl.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp4e_i5msl.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"4\""
  timestamp: 1660008734
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0 && length(lst2) == 0\n        return []\n    end\n  \
    \  sum1 = 0\n    sum2 = 0\n    for v in lst1\n        sum1 += length(v)\n    end\n\
    \    for v in lst2\n        sum2 += length(v)\n    end\n    if sum1 < sum2\n \
    \       return lst1\n    elseif sum1 > sum2\n        return lst2\n    else\n \
    \       return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008731
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0 && length(lst2) == 0\n        return []\n    end\n  \
    \  if length(lst1) < length(lst2)\n        return lst1\n    elseif length(lst1)\
    \ > length(lst2)\n        return lst2\n    else\n        return lst1\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjco2vxjz.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpjco2vxjz.jl:37\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjco2vxjz.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjco2vxjz.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjco2vxjz.jl:40\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjco2vxjz.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjco2vxjz.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjco2vxjz.jl:41\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjco2vxjz.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpjco2vxjz.jl:35\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1660008733
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   lst1Len = length(join(lst1))\n    lst2Len = length(join(lst2))\n    if lst1Len\
    \ == lst2Len\n        return lst1\n    elseif lst1Len < lst2Len\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008731
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   n1, n2 = length(lst1), length(lst2)\n    if n1 == 0 && n2 == 0\n        return\
    \ []\n    end\n    if n1 == 0\n        return lst2\n    end\n    if n2 == 0\n\
    \        return lst1\n    end\n    t1, t2 = 0, 0\n    for i in 1:n1\n        t1\
    \ += length(lst1[i])\n    end\n    for i in 1:n2\n        t2 += length(lst2[i])\n\
    \    end\n    if t1 == t2\n        return lst1\n    end\n    if t1 < t2\n    \
    \    return lst1\n    end\n    return lst2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp80mpcavm.jl:47

    '
  stdout: "test set: Test Failed at /tmp/tmp80mpcavm.jl:57\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp80mpcavm.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp80mpcavm.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp80mpcavm.jl:58\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp80mpcavm.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp80mpcavm.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1660008733
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   total1 = sum([length(str) for str in lst1])\n    total2 = sum([length(str)\
    \ for str in lst2])\n    if (total1 == total2)\n        return lst1\n    elseif\
    \ (total1 < total2)\n        return lst1\n    else\n        return lst2\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008731
- exit_code: -1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0 && length(lst2) == 0\n        return []\n    end\n  \
    \  total_match(lst1, lst2) = \n        if length(lst1) == 0 && length(lst2) !=\
    \ 0\n            return lst2\n        elseif length(lst1) != 0 && length(lst2)\
    \ == 0\n            return lst1\n        elseif length(lst1) == length(lst2)\n\
    \            return lst1\n        elseif length(lst1) < length(lst2)\n       \
    \     return lst1\n        else\n            return lst2\n        end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmp4dk5clts.jl:42\n  Test threw exception\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"\
    hi\"]\n  MethodError: Cannot `convert` an object of type var\"#total_match#1\"\
    \ to an object of type Vector{String}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\n\
    \     @ Main /tmp/tmp4dk5clts.jl:23\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4dk5clts.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4dk5clts.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp4dk5clts.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) ==\
    \ [\"hi\", \"admin\"]\n  MethodError: Cannot `convert` an object of type var\"\
    #total_match#1\" to an object of type Vector{String}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\n\
    \     @ Main /tmp/tmp4dk5clts.jl:23\n   [2] macro e"
  timestamp: 1660008735
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   total1 = 0\n    total2 = 0\n    if length(lst1) == 0\n        return lst1\n\
    \    end\n    for i in lst1\n        total1 += length(i)\n    end\n    for i in\
    \ lst2\n        total2 += length(i)\n    end\n    if total1 < total2\n       \
    \ return lst1\n    elseif total1 > total2\n        return lst2\n    else\n   \
    \     return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008731
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0 && length(lst2) == 0\n        return lst1\n    end\n\
    \    if length(lst1) == 0 && length(lst2) != 0\n        return lst2\n    end\n\
    \    if length(lst1) != 0 && length(lst2) == 0\n        return lst1\n    end\n\
    \    if length(lst1) != 0 && length(lst2) != 0\n        total_chars1 = 0\n   \
    \     total_chars2 = 0\n        for i in 1:length(lst1)\n            total_chars1\
    \ += length(lst1[i])\n        end\n        for i in 1:length(lst2)\n         \
    \   total_chars2 += length(lst2[i])\n        end\n        if total_chars1 == total_chars2\n\
    \            return lst1\n        end\n        if total_chars1 < total_chars2\n\
    \            return lst1\n        end\n        if total_chars1 > total_chars2\n\
    \            return lst2\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpa054lmr8.jl:51

    '
  stdout: "test set: Test Failed at /tmp/tmpa054lmr8.jl:61\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa054lmr8.jl:61 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa054lmr8.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpa054lmr8.jl:62\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa054lmr8.jl:62 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa054lmr8.jl:53\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1660008733
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   total_lst1 = 0\n    total_lst2 = 0\n    for i in lst1\n        total_lst1\
    \ += length(i)\n    end\n    for i in lst2\n        total_lst2 += length(i)\n\
    \    end\n    if total_lst1 == total_lst2\n        return lst1\n    elseif total_lst1\
    \ < total_lst2\n        return lst1\n    else\n        return lst2\n    end\n\
    end\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008731
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   total_lst1 = 0\n    total_lst2 = 0\n    for i in lst1\n        total_lst1\
    \ += length(i)\n    end\n    for i in lst2\n        total_lst2 += length(i)\n\
    \    end\n    if total_lst1 > total_lst2\n        return lst2\n    else\n    \
    \    return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008728
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0 && length(lst2) == 0\n        return lst1\n    end\n\
    \    if length(lst1) == 0 && length(lst2) != 0\n        return lst2\n    end\n\
    \    if length(lst1) != 0 && length(lst2) == 0\n        return lst1\n    end\n\
    \    if length(lst1) != 0 && length(lst2) != 0\n        sum1 = 0\n        sum2\
    \ = 0\n        for i = 1:length(lst1)\n            sum1 += length(lst1[i])\n \
    \       end\n        for i = 1:length(lst2)\n            sum2 += length(lst2[i])\n\
    \        end\n        if sum1 < sum2\n            return lst1\n        elseif\
    \ sum1 > sum2\n            return lst2\n        else\n            return lst1\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpz917u71f.jl:49

    '
  stdout: "test set: Test Failed at /tmp/tmpz917u71f.jl:59\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz917u71f.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz917u71f.jl:51\ntest set: Test\
    \ Failed at /tmp/tmpz917u71f.jl:60\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz917u71f.jl:60 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz917u71f.jl:51\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1660008733
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   sum_lst1 = sum(i -> length(i), lst1)\n    sum_lst2 = sum(i -> length(i), lst2)\n\
    \    if sum_lst1 == sum_lst2\n        return lst1\n    elseif sum_lst1 < sum_lst2\n\
    \        return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp9xtxqqe5.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmp9xtxqqe5.jl:35\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([])\n\
    \  ArgumentError: reducing over an empty collection is not allowed\n  Stacktrace:\n\
    \    [1] _empty_reduce_error()\n      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function,\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:344\n    [3] reduce_empty(op::Base.MappingRF{var\"\
    #1#3\", typeof(Base.add_sum)}, #unused#::Type{String})\n      @ Base ./reduce.jl:331\n\
    \    [4] reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [5] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{String}, ItrEltype::Base.HasEltype)\n      @ Base\
    \ ./reduce.jl:353\n    [6] _mapreduce(f::var\"#1#3\", op::typeof(Base.add_sum),\
    \ #unused#::IndexLinear, A::Vector{String})\n      @ Base ./reduce.jl:402\n  \
    \  [7] _mapreduce_dim\n      @ ./reducedim.jl:330 [inlined]\n    [8] #mapreduce#731\n\
    \      @ ./reducedim.jl:322 [inlined]\n    [9] mapreduce\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] #_sum#741\n      @ ./reducedim.jl:894 [inlined]\n   [11]\
    \ _sum\n      @ ./reducedim.jl:894 [inlined]\n   [12] #sum#739\n      @ ./reducedim.jl:890\
    \ [inlined]\n   [13] sum\n      @ ./reducedim.jl:890 [inlined]\n   [14] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n      @ Main /tmp/tmp9xtxqqe5.jl:20\n   [15] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [16] macro expansion\n      @ /tmp/tmp9xtxqqe5.jl:35 [inlined]\n   [17] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmp9xtxqqe5.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp9xtxqqe5.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function, op::Function,\
    \ T::Type)\n      @ Base ./reduce.jl:344\n  "
  timestamp: 1660008734
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   total1 = 0\n    total2 = 0\n    len1 = length(lst1)\n    len2 = length(lst2)\n\
    \    if len1 == 0 && len2 == 0\n        return []\n    end\n    for i in lst1\n\
    \        total1 += length(i)\n    end\n    for i in lst2\n        total2 += length(i)\n\
    \    end\n    if total1 < total2\n        return lst1\n    elseif total1 > total2\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008731
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   (length(lst1) > length(lst2)) ? lst2 : lst1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_o5v9ik6.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp_o5v9ik6.jl:28\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_o5v9ik6.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_o5v9ik6.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp_o5v9ik6.jl:31\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_o5v9ik6.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_o5v9ik6.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp_o5v9ik6.jl:32\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_o5v9ik6.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_o5v9ik6.jl:26\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1660008733
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   lst1_total_char = 0\n    lst2_total_char = 0\n    for str1 in lst1\n     \
    \   lst1_total_char += length(str1)\n    end\n    for str2 in lst2\n        lst2_total_char\
    \ += length(str2)\n    end\n    if lst1_total_char < lst2_total_char\n       \
    \ return lst1\n    elseif lst1_total_char > lst2_total_char\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008731
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   total1 = 0\n    total2 = 0\n    for i in lst1\n        total1 += length(i)\n\
    \    end\n    for i in lst2\n        total2 += length(i)\n    end\n    if total1\
    \ < total2\n        return lst1\n    else\n        return lst2\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9b3i_qio.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp9b3i_qio.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9b3i_qio.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp9b3i_qio.jl:38\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     1      9\n"
  timestamp: 1660008733
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0\n        return lst1\n    end\n    if length(lst2) ==\
    \ 0\n        return lst2\n    end\n    if length(lst1) == length(lst2)\n     \
    \   return lst1\n    end\n    if length(lst1) < length(lst2)\n        return lst1\n\
    \    end\n    return lst2\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpsn42u871.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpsn42u871.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsn42u871.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsn42u871.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpsn42u871.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsn42u871.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsn42u871.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpsn42u871.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpsn42u871.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpsn42u871.jl:38\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    6     3      9\n"
  timestamp: 1660008734
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \n\
    \    s1=sum(length.(lst1))\n    s2=sum(length.(lst2))\n    \n    if s1<s2\n  \
    \      return lst1\n    elseif s1>s2\n        return lst2\n    else\n        return\
    \ lst1\n    end\n    \nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008732
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0\n        return lst1\n    end\n    if length(lst2) ==\
    \ 0\n        return lst2\n    end\n    m = 0\n    for i in lst1\n        m +=\
    \ length(i)\n    end\n    n = 0\n    for i in lst2\n        n += length(i)\n \
    \   end\n    if m > n\n        return lst2\n    elseif m < n\n        return lst1\n\
    \    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008731
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   sum1 = 0\n    sum2 = 0\n    for i in lst1\n        sum1 += length(i)\n   \
    \ end\n    for i in lst2\n        sum2 += length(i)\n    end\n    if sum1 >= sum2\n\
    \        return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1dpqc2pt.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp1dpqc2pt.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1dpqc2pt.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1dpqc2pt.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp1dpqc2pt.jl:41\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hi\", \"hi\", \"admin\", \"project\"] == [\"hi\", \"admin\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1dpqc2pt.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1dpqc2pt.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp1dpqc2pt.jl:42\n  Expression: candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]\n   Evaluated: [\"1\", \"2\", \"3\", \"\
    4\", \"5\"] == [\"4\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1dpqc2pt.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1dpqc2pt.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp1dpqc2pt.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1dpqc2pt.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1dpqc2pt.jl:38\ntest set: Test\
    \ Failed at /tmp/"
  timestamp: 1660008734
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   length1, length2 = 0, 0\n    for i in lst1\n        length1 += length(i)\n\
    \    end\n    for i in lst2\n        length2 += length(i)\n    end\n    if length1\
    \ < length2\n        return lst1\n    elseif length1 > length2\n        return\
    \ lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008732
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   num_chars_lst1 = 0\n    num_chars_lst2 = 0\n    for i in lst1\n        num_chars_lst1\
    \ += length(i)\n    end\n    for i in lst2\n        num_chars_lst2 += length(i)\n\
    \    end\n    if num_chars_lst1 == num_chars_lst2\n        return lst1\n    elseif\
    \ num_chars_lst1 < num_chars_lst2\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008732
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0 && length(lst2) == 0\n        return []\n    end\n  \
    \  val1 = 0\n    val2 = 0\n    for i in lst1\n        val1 += length(i)\n    end\n\
    \    for i in lst2\n        val2 += length(i)\n    end\n    if val1 == val2\n\
    \        return lst1\n    elseif val1 < val2\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008732
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   lst1_total = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total\
    \ += length(i)\n    end\n    for i in lst2\n        lst2_total += length(i)\n\
    \    end\n    if lst1_total < lst2_total\n        return lst1\n    elseif lst1_total\
    \ > lst2_total\n        return lst2\n    else\n        return lst1\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008729
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0\n        return lst1\n    end\n    if length(lst2) ==\
    \ 0\n        return lst2\n    end\n    str1 = count_chars(lst1)\n    str2 = count_chars(lst2)\n\
    \    if str1 == str2\n        return lst1\n    elseif str1 < str2\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp5u22owr6.jl:38

    '
  stdout: "test set: Error During Test at /tmp/tmp5u22owr6.jl:42\n  Test threw exception\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"\
    hi\"]\n  UndefVarError: count_chars not defined\n  Stacktrace:\n   [1] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n     @ Main /tmp/tmp5u22owr6.jl:26\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp5u22owr6.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5u22owr6.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp5u22owr6.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) ==\
    \ [\"hi\", \"admin\"]\n  UndefVarError: count_chars not defined\n  Stacktrace:\n\
    \   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\n     @ Main /tmp/tmp5u22owr6.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5u22owr6.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5u22owr6.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp5u22owr6.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]\n  UndefVarError:\
    \ count_chars not defined\n  Stacktrace:\n   [1] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n     @ Main /tmp/tmp5u22owr6.jl:26\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp5u22owr6.jl:44 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5u22owr6.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp5u22owr6.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hI\", \"H"
  timestamp: 1660008735
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   total1 = reduce(+, length.(lst1))\n    total2 = reduce(+, length.(lst2))\n\
    \    (total1 < total2) ? lst1 : lst2\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpc9v2kw62.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpc9v2kw62.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpc9v2kw62.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpc9v2kw62.jl:28\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     1      9\n"
  timestamp: 1660008734
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   result = [\"\"]\n    if length(lst1) == 0 && length(lst2) == 0\n        return\
    \ result\n    end\n    lst1_chars = 0\n    lst2_chars = 0\n    for i in lst1\n\
    \        lst1_chars += length(i)\n    end\n    for i in lst2\n        lst2_chars\
    \ += length(i)\n    end\n    if lst1_chars == lst2_chars\n        return lst1\n\
    \    elseif lst1_chars < lst2_chars\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe4hgrc8x.jl:42

    '
  stdout: "test set: Test Failed at /tmp/tmpe4hgrc8x.jl:45\n  Expression: candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([])\n   Evaluated: [\"\"] == String[]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe4hgrc8x.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe4hgrc8x.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     1      9\n"
  timestamp: 1660008734
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   sum_lst1 = 0\n    sum_lst2 = 0\n    for i in lst1\n        sum_lst1 += length(i)\n\
    \    end\n    for i in lst2\n        sum_lst2 += length(i)\n    end\n    if sum_lst1\
    \ < sum_lst2\n        return lst1\n    else\n        return lst2\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw39_v19j.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpw39_v19j.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpw39_v19j.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpw39_v19j.jl:38\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     1      9\n"
  timestamp: 1660008734
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   tot1 = 0\n    tot2 = 0\n    for x in lst1\n        tot1 += length(x)\n   \
    \ end\n    for x in lst2\n        tot2 += length(x)\n    end\n    if tot1 < tot2\n\
    \        return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxmtnig6t.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpxmtnig6t.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxmtnig6t.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpxmtnig6t.jl:38\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     1      9\n"
  timestamp: 1660008735
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   sum_lst1 = 0\n    sum_lst2 = 0\n    for x in lst1\n        sum_lst1 += length(x)\n\
    \    end\n    for x in lst2\n        sum_lst2 += length(x)\n    end\n    if sum_lst1\
    \ < sum_lst2\n        return lst1\n    else\n        return lst2\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9cr3ymi5.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp9cr3ymi5.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9cr3ymi5.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp9cr3ymi5.jl:38\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     1      9\n"
  timestamp: 1660008735
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   len1 = 0\n    len2 = 0\n    for i in lst1\n        len1 += length(i)\n   \
    \ end\n    for i in lst2\n        len2 += length(i)\n    end\n    if len1 < len2\n\
    \        return lst1\n    elseif len1 > len2\n        return lst2\n    else\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008733
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if sum(map(length, lst1)) < sum(map(length, lst2))\n        return lst1\n\
    \    elseif sum(map(length, lst1)) > sum(map(length, lst2))\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008733
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if sum(length.(lst1)) < sum(length.(lst2))\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppvxs0gtr.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmppvxs0gtr.jl:37\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmppvxs0gtr.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmppvxs0gtr.jl:30\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     1      9\n"
  timestamp: 1660008735
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0 || length(lst2) == 0\n        return []\n    end\n  \
    \  n1, n2 = 0, 0\n    for i in lst1\n        n1 += length(i)\n    end\n    for\
    \ i in lst2\n        n2 += length(i)\n    end\n    if n1 <= n2\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008733
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0\n        return lst1\n    end\n    if length(lst2) ==\
    \ 0\n        return lst2\n    end\n    sum1 = 0\n    sum2 = 0\n    for i in lst1\n\
    \        sum1 += length(i)\n    end\n    for i in lst2\n        sum2 += length(i)\n\
    \    end\n    if sum1 <= sum2\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\n# @test total_match([], []) == []\n# @test total_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n# @test total_match([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]\n# @test total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\"\
    , \"hi\", \"hi\"]\n# @test total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"]) == [\"4\"]\n \n \n \n \nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008734
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   # check if the list is empty\n    if length(lst1) == 0 || length(lst2) ==\
    \ 0\n        return []\n    end\n    # if not, compare the total length of each\
    \ list\n    if total_length(lst1) > total_length(lst2)\n        return lst2\n\
    \    elseif total_length(lst1) < total_length(lst2)\n        return lst1\n   \
    \ else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp6gui6frw.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmp6gui6frw.jl:39\n  Test threw exception\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"\
    hi\"]\n  UndefVarError: total_length not defined\n  Stacktrace:\n   [1] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n     @ Main /tmp/tmp6gui6frw.jl:25\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp6gui6frw.jl:39 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6gui6frw.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp6gui6frw.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) ==\
    \ [\"hi\", \"admin\"]\n  UndefVarError: total_length not defined\n  Stacktrace:\n\
    \   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\n     @ Main /tmp/tmp6gui6frw.jl:25\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6gui6frw.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6gui6frw.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp6gui6frw.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]\n  UndefVarError:\
    \ total_length not defined\n  Stacktrace:\n   [1] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n     @ Main /tmp/tmp6gui6frw.jl:25\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp6gui6frw.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6gui6frw.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp6gui6frw.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hI\","
  timestamp: 1660008737
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   total_sum1 = sum(length(x) for x in lst1)\n    total_sum2 = sum(length(x)\
    \ for x in lst2)\n    if total_sum1 < total_sum2\n        return lst1\n    elseif\
    \ total_sum1 > total_sum2\n        return lst2\n    else\n        return lst1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpe0ou8d_i.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpe0ou8d_i.jl:35\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([])\n\
    \  ArgumentError: reducing over an empty collection is not allowed\n  Stacktrace:\n\
    \    [1] _empty_reduce_error()\n      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function,\
    \ op::Base.BottomRF{typeof(Base.add_sum)}, T::Type)\n      @ Base ./reduce.jl:344\n\
    \    [3] reduce_empty(op::Base.MappingRF{var\"#1#3\", Base.BottomRF{typeof(Base.add_sum)}},\
    \ #unused#::Type{String})\n      @ Base ./reduce.jl:331\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:357 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] #mapreduce#248\n\
    \      @ ./reduce.jl:289 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:289\
    \ [inlined]\n   [12] #sum#251\n      @ ./reduce.jl:503 [inlined]\n   [13] sum\n\
    \      @ ./reduce.jl:503 [inlined]\n   [14] #sum#252\n      @ ./reduce.jl:532\
    \ [inlined]\n   [15] sum\n      @ ./reduce.jl:532 [inlined]\n   [16] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n      @ Main /tmp/tmpe0ou8d_i.jl:20\n   [17] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [18] macro expansion\n      @ /tmp/tmpe0ou8d_i.jl:35 [inlined]\n   [19] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [20] top-level scope\n      @ /tmp/tmpe0ou8d_i.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpe0ou8d_i.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base.add_sum)},\
    \ T::Type)\n      @ Base ./reduce.jl:344\n  "
  timestamp: 1660008737
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   len1 = length(lst1)\n    len2 = length(lst2)\n    if len1 == 0 && len2 ==\
    \ 0\n        return []\n    end\n    lst1_len = 0\n    lst2_len = 0\n    for i\
    \ in 1:len1\n        lst1_len += length(lst1[i])\n    end\n    for i in 1:len2\n\
    \        lst2_len += length(lst2[i])\n    end\n    if lst1_len > lst2_len\n  \
    \      return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008734
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if total_chars(lst1) == total_chars(lst2)\n        return lst1\n    elseif\
    \ total_chars(lst1) < total_chars(lst2)\n        return lst1\n    else\n     \
    \   return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,
    0 broken.

    in expression starting at /tmp/tmpmy65475t.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpmy65475t.jl:33\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([])\n\
    \  UndefVarError: total_chars not defined\n  Stacktrace:\n   [1] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n     @ Main /tmp/tmpmy65475t.jl:20\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpmy65475t.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmy65475t.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpmy65475t.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n  UndefVarError:\
    \ total_chars not defined\n  Stacktrace:\n   [1] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n     @ Main /tmp/tmpmy65475t.jl:20\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpmy65475t.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmy65475t.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpmy65475t.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) ==\
    \ [\"hi\", \"admin\"]\n  UndefVarError: total_chars not defined\n  Stacktrace:\n\
    \   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\n     @ Main /tmp/tmpmy65475t.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmy65475t.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmy65475t.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpmy65475t.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"4\"], "
  timestamp: 1660008737
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0 \n        return lst1\n    end\n    if length(lst2) ==\
    \ 0 \n        return lst2\n    end\n    result = Vector{String}()\n    sum1 =\
    \ 0\n    sum2 = 0\n    for i in lst1\n        sum1 += length(i)\n    end\n   \
    \ for i in lst2\n        sum2 += length(i)\n    end\n    if sum1 <= sum2\n   \
    \     return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008734
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   size1 = 0 \n    size2 = 0 \n    for s in lst1 \n        size1 += length(s)\n\
    \    end\n    for s in lst2 \n        size2 += length(s)\n    end\n    if size1\
    \ == size2 \n        return lst1\n    elseif size1 < size2 \n        return lst1\n\
    \    else \n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008734
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \"\"\"\n    Return the vector with the total number of chars less than\
    \ the other vector\n    \"\"\"\n    \n    #get the number of chars in lst1\n \
    \   count1 = 0\n    for str in lst1\n        count1 += length(str)\n    end\n\
    \    \n    #get the number of chars in lst2\n    count2 = 0\n    for str in lst2\n\
    \        count2 += length(str)\n    end\n    \n    #return the vector with the\
    \ smaller number of chars\n    if count1 < count2\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3wa94dly.jl:46

    '
  stdout: "test set: Test Failed at /tmp/tmp3wa94dly.jl:55\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3wa94dly.jl:55 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp3wa94dly.jl:48\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     1      9\n"
  timestamp: 1660008736
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   sum1, sum2 = 0, 0\n    for i in lst1\n        sum1 += length(i)\n    end\n\
    \    for i in lst2\n        sum2 += length(i)\n    end\n    if sum1 == sum2\n\
    \        return lst1\n    elseif sum1 < sum2\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\n \nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008734
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0 && length(lst2) == 0\n        return lst1\n    end\n\
    \    lst1_total = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total\
    \ += length(i)\n    end\n    for i in lst2\n        lst2_total += length(i)\n\
    \    end\n    if lst1_total < lst2_total\n        return lst1\n    elseif lst1_total\
    \ > lst2_total\n        return lst2\n    else\n        return lst1\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008734
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    len1, len2 = length(lst1), length(lst2)\n    c1, c2 = 0, 0\n    \n \
    \   for i in 1:len1\n        c1 += length(lst1[i])\n    end\n    \n    for i in\
    \ 1:len2\n        c2 += length(lst2[i])\n    end\n    \n    if c1 > c2\n     \
    \   return lst2\n    elseif c1 < c2\n        return lst1\n    else\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008734
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   lst_len1 = length(lst1)\n    lst_len2 = length(lst2)\n    lst1_total = sum(length(j)\
    \ for j in lst1)\n    lst2_total = sum(length(j) for j in lst2)\n    if lst_len1\
    \ == 0 && lst_len2 == 0\n        return lst1\n    elseif lst1_total < lst2_total\n\
    \        return lst1\n    elseif lst1_total == lst2_total\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmps3euz4rd.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmps3euz4rd.jl:39\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([])\n\
    \  ArgumentError: reducing over an empty collection is not allowed\n  Stacktrace:\n\
    \    [1] _empty_reduce_error()\n      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function,\
    \ op::Base.BottomRF{typeof(Base.add_sum)}, T::Type)\n      @ Base ./reduce.jl:344\n\
    \    [3] reduce_empty(op::Base.MappingRF{var\"#1#3\", Base.BottomRF{typeof(Base.add_sum)}},\
    \ #unused#::Type{String})\n      @ Base ./reduce.jl:331\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:357 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] #mapreduce#248\n\
    \      @ ./reduce.jl:289 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:289\
    \ [inlined]\n   [12] #sum#251\n      @ ./reduce.jl:503 [inlined]\n   [13] sum\n\
    \      @ ./reduce.jl:503 [inlined]\n   [14] #sum#252\n      @ ./reduce.jl:532\
    \ [inlined]\n   [15] sum\n      @ ./reduce.jl:532 [inlined]\n   [16] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n      @ Main /tmp/tmps3euz4rd.jl:22\n   [17] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [18] macro expansion\n      @ /tmp/tmps3euz4rd.jl:39 [inlined]\n   [19] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [20] top-level scope\n      @ /tmp/tmps3euz4rd.jl:38\ntest set:\
    \ Error During Test at /tmp/tmps3euz4rd.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base.add_sum)},\
    \ T::Type)\n      @ Base ./reduce.jl:344\n  "
  timestamp: 1660008737
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   sum1 = 0\n    sum2 = 0\n    for item in lst1\n        sum1 += length(item)\n\
    \    end\n    for item in lst2\n        sum2 += length(item)\n    end\n    if\
    \ sum1 == sum2\n        return lst1\n    elseif sum1 < sum2\n        return lst1\n\
    \    else \n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008735
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   # get the sum of the chars in the strings of the lists\n    sum1 = sum(map(length,\
    \ lst1))\n    sum2 = sum(map(length, lst2))\n    # if the two lists have the same\
    \ sum, return the first list\n    if sum1 == sum2\n        return lst1\n    #\
    \ else return the list that has less total number of chars\n    elseif sum1 <\
    \ sum2\n        return lst1\n    else \n        return lst2\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008735
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   size1 = 0\n    size2 = 0\n    for i in lst1\n        size1 += length(i)\n\
    \    end\n    for i in lst2\n        size2 += length(i)\n    end\n    if size1\
    \ <= size2\n        return lst1\n    else\n        return lst2\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008735
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0 && length(lst2) == 0\n        return lst1\n    end\n\
    \    sum1 = 0\n    sum2 = 0\n    for i in lst1\n        sum1 += length(i)\n  \
    \  end\n    for i in lst2\n        sum2 += length(i)\n    end\n    if sum1 ==\
    \ sum2\n        return lst1\n    elseif sum1 < sum2\n        return lst1\n   \
    \ else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008735
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   n1 = length(lst1)\n    n2 = length(lst2)\n    if n1 == 0\n        return []\n\
    \    end\n    if n2 == 0\n        return []\n    end\n    m1 = count_characters(lst1)\n\
    \    m2 = count_characters(lst2)\n    if m1 > m2\n        return lst2\n    elseif\
    \ m1 < m2\n        return lst1\n    else\n        return lst1\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp10aeetss.jl:40

    '
  stdout: "test set: Error During Test at /tmp/tmp10aeetss.jl:44\n  Test threw exception\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"\
    hi\"]\n  UndefVarError: count_characters not defined\n  Stacktrace:\n   [1] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n     @ Main /tmp/tmp10aeetss.jl:28\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp10aeetss.jl:44 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp10aeetss.jl:42\ntest set:\
    \ Error During Test at /tmp/tmp10aeetss.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) ==\
    \ [\"hi\", \"admin\"]\n  UndefVarError: count_characters not defined\n  Stacktrace:\n\
    \   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\n     @ Main /tmp/tmp10aeetss.jl:28\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp10aeetss.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp10aeetss.jl:42\ntest set:\
    \ Error During Test at /tmp/tmp10aeetss.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]\n  UndefVarError:\
    \ count_characters not defined\n  Stacktrace:\n   [1] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n     @ Main /tmp/tmp10aeetss.jl:28\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp10aeetss.jl:46 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp10aeetss.jl:42\ntest set:\
    \ Error During Test at /tmp/tmp10aeetss.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"adm"
  timestamp: 1660008738
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0 && length(lst2) == 0\n        return []\n    end\n  \
    \  lst1_total = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total +=\
    \ length(i)\n    end\n    for i in lst2\n        lst2_total += length(i)\n   \
    \ end\n    if lst1_total == lst2_total\n        return lst1\n    elseif lst1_total\
    \ < lst2_total\n        return lst1\n    else\n        return lst2\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008735
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   l1 = length(lst1)\n    l2 = length(lst2)\n    if l1 == 0 || l2 == 0\n    \
    \    return []\n    end\n    s1 = 0\n    s2 = 0\n    for i in lst1\n        s1\
    \ += length(i)\n    end\n    for i in lst2\n        s2 += length(i)\n    end\n\
    \    if s1 > s2\n        return lst2\n    else\n        return lst1\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008735
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   size1 = 0\n    size2 = 0\n    for s in lst1\n        size1 += length(s)\n\
    \    end\n    for s in lst2\n        size2 += length(s)\n    end\n    if size1\
    \ > size2\n        return lst2\n    else\n        return lst1\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008735
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   tot1 = sum([length(x) for x in lst1])\n    tot2 = sum([length(x) for x in\
    \ lst2])\n    if tot1 < tot2\n        return lst1\n    elseif tot1 > tot2\n  \
    \      return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008735
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0 && length(lst2) == 0\n        return []\n    end\n  \
    \  lst1_total_length = 0\n    lst2_total_length = 0\n    for i in lst1\n     \
    \   lst1_total_length += length(i)\n    end\n    for i in lst2\n        lst2_total_length\
    \ += length(i)\n    end\n    if lst1_total_length == lst2_total_length\n     \
    \   return lst1\n    elseif lst1_total_length < lst2_total_length\n        return\
    \ lst1\n    else \n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008735
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   total_chars_1 = 0\n    total_chars_2 = 0\n    for i in lst1\n        total_chars_1\
    \ += length(i)\n    end\n    for i in lst2\n        total_chars_2 += length(i)\n\
    \    end\n    if total_chars_1 == total_chars_2\n        return lst1\n    elseif\
    \ total_chars_1 < total_chars_2\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008735
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0 || length(lst2) == 0\n        return []\n    end\n  \
    \  sum1 = 0\n    sum2 = 0\n    for i in lst1\n        sum1 += length(i)\n    end\n\
    \    for i in lst2\n        sum2 += length(i)\n    end\n    if sum1 <= sum2\n\
    \        return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008735
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    if length(lst1) == 0 || length(lst2) == 0\n        return []\n    end\n\
    \    total1 = total(lst1)\n    total2 = total(lst2)\n    if total1 > total2\n\
    \        return lst2\n    elseif total1 < total2\n        return lst1\n    else\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp0vzkj_3h.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmp0vzkj_3h.jl:40\n  Test threw exception\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"\
    hi\"]\n  UndefVarError: total not defined\n  Stacktrace:\n   [1] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n     @ Main /tmp/tmp0vzkj_3h.jl:24\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp0vzkj_3h.jl:40 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0vzkj_3h.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp0vzkj_3h.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) ==\
    \ [\"hi\", \"admin\"]\n  UndefVarError: total not defined\n  Stacktrace:\n   [1]\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})\n     @ Main /tmp/tmp0vzkj_3h.jl:24\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0vzkj_3h.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0vzkj_3h.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp0vzkj_3h.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]\n  UndefVarError:\
    \ total not defined\n  Stacktrace:\n   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\n\
    \     @ Main /tmp/tmp0vzkj_3h.jl:24\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0vzkj_3h.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0vzkj_3h.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp0vzkj_3h.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi"
  timestamp: 1660008739
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   sum1 = 0\n    sum2 = 0\n    for i in lst1\n        sum1 += length(i)\n   \
    \ end\n    for i in lst2\n        sum2 += length(i)\n    end\n    if sum1 <= sum2\n\
    \        return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0\n        return []\n    end\n    total1 = 0\n    total2\
    \ = 0\n    for i in lst1\n        total1 += length(i)\n    end\n    for i in lst2\n\
    \        total2 += length(i)\n    end\n    if total1 < total2\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_al6kg21.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmp_al6kg21.jl:48\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_al6kg21.jl:48 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_al6kg21.jl:41\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     1      9\n"
  timestamp: 1660008738
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   len1 = 0\n    len2 = 0\n    for i in lst1\n        len1 += length(i)\n   \
    \ end\n    for i in lst2\n        len2 += length(i)\n    end\n    if len1 < len2\n\
    \        return lst1\n    elseif len1 > len2\n        return lst2\n    else\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008733
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   total1 = 0\n    total2 = 0\n    for i in lst1\n        total1 += length(i)\n\
    \    end\n    for i in lst2\n        total2 += length(i)\n    end\n    if total1\
    \ > total2\n        return lst2\n    elseif total1 < total2\n        return lst1\n\
    \    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008736
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   sum1 = sum(length.(lst1))\n    sum2 = sum(length.(lst2))\n    if sum1 == sum2\n\
    \        return lst1\n    elseif sum1 > sum2\n        return lst2\n    else\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008736
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0 \n        return lst1\n    end\n    if length(lst2) ==\
    \ 0 \n        return lst2\n    end\n    s1 = 0\n    s2 = 0\n    for i in lst1\n\
    \        s1 += length(i)\n    end\n    for i in lst2\n        s2 += length(i)\n\
    \    end\n    if s1 < s2\n        return lst1\n    elseif s1 > s2\n        return\
    \ lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008736
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   total_lst1 = sum(length(s) for s in lst1)\n    total_lst2 = sum(length(s)\
    \ for s in lst2)\n    if (total_lst1 == total_lst2) \n        return lst1\n  \
    \  else\n        if total_lst1 < total_lst2\n            return lst1\n       \
    \ else\n            return lst2\n        end\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp3phggu1k.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmp3phggu1k.jl:37\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([])\n\
    \  ArgumentError: reducing over an empty collection is not allowed\n  Stacktrace:\n\
    \    [1] _empty_reduce_error()\n      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function,\
    \ op::Base.BottomRF{typeof(Base.add_sum)}, T::Type)\n      @ Base ./reduce.jl:344\n\
    \    [3] reduce_empty(op::Base.MappingRF{var\"#1#3\", Base.BottomRF{typeof(Base.add_sum)}},\
    \ #unused#::Type{String})\n      @ Base ./reduce.jl:331\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:357 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] #mapreduce#248\n\
    \      @ ./reduce.jl:289 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:289\
    \ [inlined]\n   [12] #sum#251\n      @ ./reduce.jl:503 [inlined]\n   [13] sum\n\
    \      @ ./reduce.jl:503 [inlined]\n   [14] #sum#252\n      @ ./reduce.jl:532\
    \ [inlined]\n   [15] sum\n      @ ./reduce.jl:532 [inlined]\n   [16] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n      @ Main /tmp/tmp3phggu1k.jl:20\n   [17] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [18] macro expansion\n      @ /tmp/tmp3phggu1k.jl:37 [inlined]\n   [19] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [20] top-level scope\n      @ /tmp/tmp3phggu1k.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp3phggu1k.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base.add_sum)},\
    \ T::Type)\n      @ Base ./reduce.jl:344\n  "
  timestamp: 1660008739
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   result = []\n    sum1 = 0\n    sum2 = 0\n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    for i in lst1\n        sum1 += length(i)\n\
    \    end\n    for i in lst2\n        sum2 += length(i)\n    end\n    if sum1 <\
    \ sum2\n        return lst1\n    elseif sum1 > sum2\n        return lst2\n   \
    \ else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008736
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0 && length(lst2) == 0\n        return lst1\n    end\n\
    \    if (sum(length, lst1) < sum(length, lst2))\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpbvce1adz.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpbvce1adz.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbvce1adz.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpbvce1adz.jl:33\ntest set: Error During Test\
    \ at /tmp/tmpbvce1adz.jl:41\n  Test threw exception\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n  ArgumentError: reducing over an empty collection\
    \ is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n      @ Base ./reduce.jl:301\n\
    \    [2] mapreduce_empty(f::Function, op::Function, T::Type)\n      @ Base ./reduce.jl:344\n\
    \    [3] reduce_empty(op::Base.MappingRF{typeof(length), typeof(Base.add_sum)},\
    \ #unused#::Type{String})\n      @ Base ./reduce.jl:331\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:357 [inlined]\n    [5] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{String}, ItrEltype::Base.HasEltype)\n      @ Base\
    \ ./reduce.jl:353\n    [6] _mapreduce(f::typeof(length), op::typeof(Base.add_sum),\
    \ #unused#::IndexLinear, A::Vector{String})\n      @ Base ./reduce.jl:402\n  \
    \  [7] _mapreduce_dim\n      @ ./reducedim.jl:330 [inlined]\n    [8] #mapreduce#731\n\
    \      @ ./reducedim.jl:322 [inlined]\n    [9] mapreduce\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] #_sum#741\n      @ ./reducedim.jl:894 [inlined]\n   [11]\
    \ _sum\n      @ ./reducedim.jl:894 [inlined]\n   [12] #sum#739\n      @ ./reducedim.jl:890\
    \ [inlined]\n   [13] sum\n      @ ./reducedim.jl:890 [inlined]\n   [14] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n      @ Main /tmp/tmpbvce1adz.jl:23\n   [15] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [16] macro expansion\n      @ /tmp/tmpbvce1adz.jl:41 [inlined]\n   [17] macro\
    \ expansion\n      @ ~/.con"
  timestamp: 1660008740
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0\n        return []\n    end\n    total_chars_first_vector\
    \ = 0\n    total_chars_second_vector = 0\n    for str in lst1\n        total_chars_first_vector\
    \ += length(str)\n    end\n    for str in lst2\n        total_chars_second_vector\
    \ += length(str)\n    end\n    if total_chars_first_vector < total_chars_second_vector\n\
    \        return lst1\n    elseif total_chars_first_vector > total_chars_second_vector\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008736
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0 && length(lst2) == 0\n        return []\n    end\n  \
    \  num_chars_lst1 = 0\n    num_chars_lst2 = 0\n    for s in lst1\n        num_chars_lst1\
    \ += length(s)\n    end\n    for s in lst2\n        num_chars_lst2 += length(s)\n\
    \    end\n    if num_chars_lst1 < num_chars_lst2\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpaal11bdi.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmpaal11bdi.jl:48\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpaal11bdi.jl:48 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpaal11bdi.jl:41\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     1      9\n"
  timestamp: 1660008738
- exit_code: -1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    if length(lst1) > length(lst2)\n        return lst2\n    elseif length(lst1)\
    \ < length(lst2)\n        return lst1\n    else\n        for i in lst1\n     \
    \       if length(i) > length(lst2[1])\n                return lst2\n        \
    \    elseif length(i) < length(lst2[1])\n                return lst1\n       \
    \     else\n                return lst1\n            end\n        end\n    end\n\
    \    \nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmp7crtioeg.jl:43\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([])\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Vector{String}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\n\
    \     @ Main /tmp/tmp7crtioeg.jl:32\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7crtioeg.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7crtioeg.jl:42\ntest set:\
    \ Test Failed at /tmp/tmp7crtioeg.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7crtioeg.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7crtioeg.jl:42\ntest set: Test\
    \ Failed at /tmp/tmp7crtioeg.jl:47\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7crtioeg.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs"
  timestamp: 1660008740
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   # Checks if the number of characters of lst1 is greater than that of lst2.\n\
    \    if sum(map(x -> length(x), lst1)) > sum(map(x -> length(x), lst2))\n    \
    \    return lst2\n    elseif sum(map(x -> length(x), lst1)) < sum(map(x -> length(x),\
    \ lst2))\n        return lst1\n    else\n        return lst1\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008736
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   total1 = sum([length(s) for s in lst1])\n    total2 = sum([length(s) for s\
    \ in lst2])\n    if total1 < total2\n        return lst1\n    elseif total1 >\
    \ total2\n        return lst2\n    else \n        return lst1\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008736
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   l1 = length(lst1)\n    l2 = length(lst2)\n    if l1 == 0 && l2 == 0\n    \
    \    return []\n    end\n    if l1 == 0\n        return lst2\n    end\n    if\
    \ l2 == 0\n        return lst1\n    end\n    if l1 > l2\n        return lst2\n\
    \    end\n    if l2 > l1\n        return lst1\n    end\n    if l1 == l2\n    \
    \    return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpq_qtdkh5.jl:43

    '
  stdout: "test set: Test Failed at /tmp/tmpq_qtdkh5.jl:47\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq_qtdkh5.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq_qtdkh5.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpq_qtdkh5.jl:50\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq_qtdkh5.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq_qtdkh5.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpq_qtdkh5.jl:51\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq_qtdkh5.jl:51 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpq_qtdkh5.jl:45\ntest set: Test Failed at /tmp/tmpq_qtdkh5.jl:53\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq_qtdkh5.jl:53 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpq_qtdkh5.jl:45\ntest set: Test Failed at /tmp/tmpq_qtdkh5.jl:54\n\
    \  Expression"
  timestamp: 1660008738
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0 && length(lst2) == 0\n        return []\n    end\n  \
    \  total_lst1 = 0\n    total_lst2 = 0\n    for i in lst1\n        total_lst1 +=\
    \ length(i)\n    end\n    for i in lst2\n        total_lst2 += length(i)\n   \
    \ end\n    if total_lst1 == total_lst2\n        return lst1\n    elseif total_lst1\
    \ < total_lst2\n        return lst1\n    else\n        return lst2\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008736
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   # Your code here\n    return lst1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpudnnix7a.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpudnnix7a.jl:29\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpudnnix7a.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpudnnix7a.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpudnnix7a.jl:32\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpudnnix7a.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpudnnix7a.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpudnnix7a.jl:33\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpudnnix7a.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpudnnix7a.jl:27\ntest set: Test Failed at /tmp/tmpudnnix7a.jl:36\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpudnnix7a.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpudnnix7a.jl:27\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    5     4"
  timestamp: 1660008738
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   a=sum(length.(lst1))\n    b=sum(length.(lst2))\n    if a==b\n        return\
    \ lst1\n    elseif a<b\n        return lst1\n    else\n        return lst2\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008736
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   str1 = \"\"\n    str2 = \"\"\n    for str in lst1\n        str1 *= str\n \
    \   end\n    for str in lst2\n        str2 *= str\n    end\n    return (length(str1)\
    \ < length(str2) ? lst1 : lst2)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpa8gul87l.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpa8gul87l.jl:41\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpa8gul87l.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpa8gul87l.jl:34\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     1      9\n"
  timestamp: 1660008738
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   sum1 = sum(length(string) for string in lst1)\n    sum2 = sum(length(string)\
    \ for string in lst2)\n    if sum1 == sum2\n        return lst1\n    elseif sum1\
    \ < sum2\n        return lst1\n    else\n        return lst2\n    end\nend\n#\
    \ test\nlst1 = [\"hi\", \"admin\"]\nlst2 = [\"hI\", \"Hi\"]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpc5s50drc.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmpc5s50drc.jl:38\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([])\n\
    \  ArgumentError: reducing over an empty collection is not allowed\n  Stacktrace:\n\
    \    [1] _empty_reduce_error()\n      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function,\
    \ op::Base.BottomRF{typeof(Base.add_sum)}, T::Type)\n      @ Base ./reduce.jl:344\n\
    \    [3] reduce_empty(op::Base.MappingRF{var\"#1#3\", Base.BottomRF{typeof(Base.add_sum)}},\
    \ #unused#::Type{String})\n      @ Base ./reduce.jl:331\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:357 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] #mapreduce#248\n\
    \      @ ./reduce.jl:289 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:289\
    \ [inlined]\n   [12] #sum#251\n      @ ./reduce.jl:503 [inlined]\n   [13] sum\n\
    \      @ ./reduce.jl:503 [inlined]\n   [14] #sum#252\n      @ ./reduce.jl:532\
    \ [inlined]\n   [15] sum\n      @ ./reduce.jl:532 [inlined]\n   [16] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n      @ Main /tmp/tmpc5s50drc.jl:20\n   [17] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [18] macro expansion\n      @ /tmp/tmpc5s50drc.jl:38 [inlined]\n   [19] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [20] top-level scope\n      @ /tmp/tmpc5s50drc.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpc5s50drc.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base.add_sum)},\
    \ T::Type)\n      @ Base ./reduce.jl:344\n  "
  timestamp: 1660008740
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0\n        return lst1\n    end\n    if length(lst2) ==\
    \ 0\n        return lst2\n    end\n    count1 = 0\n    count2 = 0\n    for i in\
    \ lst1\n        count1 += length(i)\n    end\n    for i in lst2\n        count2\
    \ += length(i)\n    end\n    if count1 > count2\n        return lst2\n    elseif\
    \ count1 < count2\n        return lst1\n    else\n        return lst1\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008737
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   total_lst1 = 0\n    total_lst2 = 0\n    for i in lst1\n        total_lst1\
    \ += length(i)\n    end\n    for i in lst2\n        total_lst2 += length(i)\n\
    \    end\n    if total_lst1 < total_lst2\n        return lst1\n    elseif total_lst1\
    \ > total_lst2\n        return lst2\n    else\n        return lst1\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008737
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if lst1 == lst2\n        return lst1\n    end\n    res = Vector{String}()\n\
    \    cnt1 = 0\n    cnt2 = 0\n    for i = 1:length(lst1)\n        cnt1 += length(lst1[i])\n\
    \    end\n    for i = 1:length(lst2)\n        cnt2 += length(lst2[i])\n    end\n\
    \    if cnt1 > cnt2\n        return lst2\n    else\n        return lst1\n    end\n\
    end\n\"\"\"\nWrite a function that accepts a vector of strings and returns a new\
    \ vector that has \nall duplicates removed.\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_91y6ngg.jl:38\nin expression starting at\
    \ /tmp/tmp_91y6ngg.jl:38\n"
  stdout: ''
  timestamp: 1660008738
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   total1 = 0\n    total2 = 0\n    for s in lst1\n        total1 += length(s)\n\
    \    end\n    for s in lst2\n        total2 += length(s)\n    end\n    if total1\
    \ < total2\n        return lst1\n    else\n        return lst2\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp95waplss.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp95waplss.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp95waplss.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp95waplss.jl:38\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     1      9\n"
  timestamp: 1660008739
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   length_lst1 = sum([length(x) for x in lst1])\n    length_lst2 = sum([length(x)\
    \ for x in lst2])\n    if length_lst1 < length_lst2 \n        return lst1\n  \
    \  elseif length_lst1 > length_lst2\n        return lst2\n    else \n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008737
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   sum1 = 0\n    sum2 = 0\n    for x in lst1\n        sum1 += length(x)\n   \
    \ end\n    for x in lst2\n        sum2 += length(x)\n    end\n    if sum1 == sum2\n\
    \        return lst1\n    elseif sum1 < sum2\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008737
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    lst1_length = 0\n    lst2_length = 0\n    \n    for i in lst1\n    \
    \    lst1_length += length(i)\n    end\n    \n    for i in lst2\n        lst2_length\
    \ += length(i)\n    end\n    \n    if lst1_length == lst2_length\n        return\
    \ lst1\n    elseif lst1_length < lst2_length\n        return lst1\n    elseif\
    \ lst1_length > lst2_length\n        return lst2\n    end\n    \nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008737
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   len1, len2 = 0, 0\n    for i = 1:length(lst1)\n        len1 += length(lst1[i])\n\
    \    end\n    for i = 1:length(lst2)\n        len2 += length(lst2[i])\n    end\n\
    \    if len1 <= len2\n        return lst1\n    else\n        return lst2\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008737
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   total1 = 0\n    total2 = 0\n    for i = 1:length(lst1)\n        total1 +=\
    \ length(lst1[i])\n    end\n    for i = 1:length(lst2)\n        total2 += length(lst2[i])\n\
    \    end\n    if total1 < total2\n        return lst1\n    elseif total1 > total2\n\
    \        return lst2\n    elseif total1 == total2\n        return lst1\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008737
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   total1 = 0\n    total2 = 0\n    for i in lst1\n        total1 += length(i)\n\
    \    end\n    for i in lst2\n        total2 += length(i)\n    end\n    if total1\
    \ < total2\n        return lst1\n    else\n        return lst2\n    end\nend\n\
    \ \nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwk3pup03.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpwk3pup03.jl:46\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwk3pup03.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwk3pup03.jl:39\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     1      9\n"
  timestamp: 1660008740
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   # returns the vector that has total number of chars in the all strings of\
    \ the vector less than the other vector.\n    # if the two vectors have the same\
    \ number of chars, return the first vector.\n    count_lst1 = 0\n    count_lst2\
    \ = 0\n    # count the number of chars in each vector\n    for i in 1:length(lst1)\n\
    \        count_lst1 += length(lst1[i])\n    end\n    for i in 1:length(lst2)\n\
    \        count_lst2 += length(lst2[i])\n    end\n    # return the vector of the\
    \ less chars\n    if count_lst1 < count_lst2\n        return lst1\n    elseif\
    \ count_lst1 > count_lst2\n        return lst2\n    elseif count_lst1 == count_lst2\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008737
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   sum1 = 0\n    sum2 = 0\n    for i in lst1\n        sum1 += length(i)\n   \
    \ end\n    for i in lst2\n        sum2 += length(i)\n    end\n    if sum1 < sum2\n\
    \        return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpx5rohg9t.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpx5rohg9t.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpx5rohg9t.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpx5rohg9t.jl:38\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     1      9\n"
  timestamp: 1660008740
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   # YOUR CODE HERE\n    total_lst1 = sum(length.(lst1))\n    total_lst2 = sum(length.(lst2))\n\
    \    if total_lst1 < total_lst2\n        return lst1\n    elseif total_lst1 >\
    \ total_lst2\n        return lst2\n    else\n        return lst1\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008738
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   v1 = map(lst1) do s\n        length(s)\n    end\n    v2 = map(lst2) do s\n\
    \        length(s)\n    end\n    if sum(v1) == sum(v2)\n        return lst1\n\
    \    elseif sum(v1) < sum(v2)\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008738
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   len1 = length(lst1)\n    len2 = length(lst2)\n    sum1 = 0\n    sum2 = 0\n\
    \    for i in 1:len1\n        sum1 += length(lst1[i])\n    end\n    for i in 1:len2\n\
    \        sum2 += length(lst2[i])\n    end\n    if sum1 < sum2\n        return\
    \ lst1\n    elseif sum1 > sum2\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008738
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \"\"\"\n    Function that accepts two vectors of strings and returns the vector\
    \ that has \n    total number of chars in the all strings of the vector less than\
    \ the other vector.\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplodppoo7.jl:1\nin expression starting at /tmp/tmplodppoo7.jl:1\n"
  stdout: ''
  timestamp: 1660008739
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   matches_lst = []\n    lst1_size = 0\n    lst2_size = 0\n    for item in lst1\n\
    \        lst1_size += length(item)\n    end\n    for item in lst2\n        lst2_size\
    \ += length(item)\n    end\n    if lst1_size == lst2_size\n        return lst1\n\
    \    elseif lst1_size < lst2_size\n        return lst1\n    elseif lst1_size >\
    \ lst2_size\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008738
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   total1 = 0\n    total2 = 0\n    if length(lst1) == 0 && length(lst2) == 0\n\
    \        return []\n    end\n    for i in lst1\n        total1 += length(i)\n\
    \    end\n    for i in lst2\n        total2 += length(i)\n    end\n    if total1\
    \ < total2\n        return lst1\n    elseif total1 > total2\n        return lst2\n\
    \    elseif total1 == total2\n        return lst1\n    end\nend\n# Test\nprintln(\"\
    \"\"\n    Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq4uf3v82.jl:40\nin expression starting at\
    \ /tmp/tmpq4uf3v82.jl:40\n"
  stdout: ''
  timestamp: 1660008739
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if isempty(lst1) && isempty(lst2)\n        lst1\n    elseif isempty(lst1)\n\
    \        lst2\n    elseif isempty(lst2)\n        lst1\n    elseif length(lst1)\
    \ == length(lst2)\n        lst1\n    elseif length(lst1) > length(lst2)\n    \
    \    lst2\n    else\n        lst1\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5n435d0r.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmp5n435d0r.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5n435d0r.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5n435d0r.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp5n435d0r.jl:43\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5n435d0r.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5n435d0r.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp5n435d0r.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hI\", \"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5n435d0r.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5n435d0r.jl:38\ntest set: Test Failed at /tmp/tmp5n435d0r.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5n435d0r.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5n435d0r.jl:38\ntest set: Test Failed at /tmp/tmp5n435d0r.jl:47\n\
    \  Expression"
  timestamp: 1660008740
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    #find number of chars for each vector\n    num_chars_vector1 = 0\n \
    \   num_chars_vector2 = 0\n    \n    for s in lst1\n        num_chars_vector1\
    \ += length(s)\n    end\n    \n    for s in lst2\n        num_chars_vector2 +=\
    \ length(s)\n    end\n    \n    #compare numbers to see which one is less than\
    \ the other.\n    if num_chars_vector1 < num_chars_vector2\n        return lst1\n\
    \    elseif num_chars_vector2 < num_chars_vector1\n        return lst2\n    else\
    \ \n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008738
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   len1 = 0\n    len2 = 0\n    for s in lst1\n        len1 += length(s)\n   \
    \ end\n    for s in lst2\n        len2 += length(s)\n    end\n    if len1 < len2\n\
    \        return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpekjllb08.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpekjllb08.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpekjllb08.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpekjllb08.jl:38\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     1      9\n"
  timestamp: 1660008741
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    ls1 = sum(length.(lst1))\n    ls2 = sum(length.(lst2))\n    \n    if\
    \ ls1 < ls2\n        return lst1\n    elseif ls1 > ls2\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008739
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0 || length(lst2) == 0 \n        return []\n    end\n \
    \   sum1 = sum([length(string) for string in lst1])\n    sum2 = sum([length(string)\
    \ for string in lst2])\n    if sum1 < sum2\n        return lst1\n    elseif sum1\
    \ > sum2\n        return lst2\n    else\n        return lst1\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008739
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   count1 = [length(i) for i in lst1]\n    count2 = [length(i) for i in lst2]\n\
    \    if sum(count1) < sum(count2)\n        return lst1\n    elseif sum(count1)\
    \ > sum(count2)\n        return lst2\n    else\n        return lst1\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008739
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0 && length(lst2) == 0\n        return []\n    end\n  \
    \  if sum(map(length, lst1)) == sum(map(length, lst2))\n        return lst1\n\
    \    end\n    if sum(map(length, lst1)) < sum(map(length, lst2))\n        return\
    \ lst1\n    end\n    return lst2\nend\n\"\"\"\n    Write a function that accepts\
    \ two vectors of strings and returns the first nonempty vector \n    that contains\
    \ all strings of the other.\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpryszc_yr.jl:31\nin expression starting at\
    \ /tmp/tmpryszc_yr.jl:31\n"
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   result = zeros(Int, 2)\n    for i = 1:length(lst1)\n        result[1] += length(lst1[i])\n\
    \    end\n    for i = 1:length(lst2)\n        result[2] += length(lst2[i])\n \
    \   end\n    if result[1] > result[2]\n        return lst2\n    elseif result[1]\
    \ < result[2]\n        return lst1\n    else\n        return lst1\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008739
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   n1 = 0 \n    n2 = 0 \n    for i in lst1 \n        n1 += length(i)\n    end\n\
    \    for i in lst2 \n        n2 += length(i)\n    end\n    if n1 >= n2 \n    \
    \    return lst2\n    else \n        return lst1\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprslg052q.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmprslg052q.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprslg052q.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmprslg052q.jl:38\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     1      9\n"
  timestamp: 1660008741
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) != 0 && length(lst2) != 0\n        lst1_total = sum(length.(lst1))\n\
    \        lst2_total = sum(length.(lst2))\n        if lst1_total == lst2_total\n\
    \            return lst1\n        elseif lst1_total < lst2_total\n           \
    \ return lst1\n        else\n            return lst2\n        end\n    else\n\
    \        return []\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008739
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   l1 = total_length(lst1)\n    l2 = total_length(lst2)\n    if l1 == l2\n  \
    \      return lst1\n    elseif l1 < l2\n        return lst1\n    else\n      \
    \  return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,
    0 broken.

    in expression starting at /tmp/tmpf5bchlhj.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpf5bchlhj.jl:35\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([])\n\
    \  UndefVarError: total_length not defined\n  Stacktrace:\n   [1] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n     @ Main /tmp/tmpf5bchlhj.jl:20\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpf5bchlhj.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf5bchlhj.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpf5bchlhj.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n  UndefVarError:\
    \ total_length not defined\n  Stacktrace:\n   [1] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n     @ Main /tmp/tmpf5bchlhj.jl:20\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpf5bchlhj.jl:36 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf5bchlhj.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpf5bchlhj.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) ==\
    \ [\"hi\", \"admin\"]\n  UndefVarError: total_length not defined\n  Stacktrace:\n\
    \   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\n     @ Main /tmp/tmpf5bchlhj.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf5bchlhj.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf5bchlhj.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpf5bchlhj.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([\"4\""
  timestamp: 1660008742
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   size1 = 0\n    size2 = 0\n    for word in lst1\n        size1 += length(word)\n\
    \    end\n    for word in lst2\n        size2 += length(word)\n    end\n    if\
    \ size1 == size2\n        return lst1\n    elseif size1 < size2\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008739
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \  \n    sum_lst1 = sum(length(i) for i in lst1)\n    sum_lst2 = sum(length(i)\
    \ for i in lst2)\n    \n    if sum_lst1 == sum_lst2\n        return lst1\n   \
    \ elseif sum_lst1 < sum_lst2\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp_fh9p6yt.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmp_fh9p6yt.jl:37\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([])\n\
    \  ArgumentError: reducing over an empty collection is not allowed\n  Stacktrace:\n\
    \    [1] _empty_reduce_error()\n      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function,\
    \ op::Base.BottomRF{typeof(Base.add_sum)}, T::Type)\n      @ Base ./reduce.jl:344\n\
    \    [3] reduce_empty(op::Base.MappingRF{var\"#1#3\", Base.BottomRF{typeof(Base.add_sum)}},\
    \ #unused#::Type{String})\n      @ Base ./reduce.jl:331\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:357 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] #mapreduce#248\n\
    \      @ ./reduce.jl:289 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:289\
    \ [inlined]\n   [12] #sum#251\n      @ ./reduce.jl:503 [inlined]\n   [13] sum\n\
    \      @ ./reduce.jl:503 [inlined]\n   [14] #sum#252\n      @ ./reduce.jl:532\
    \ [inlined]\n   [15] sum\n      @ ./reduce.jl:532 [inlined]\n   [16] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n      @ Main /tmp/tmp_fh9p6yt.jl:21\n   [17] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [18] macro expansion\n      @ /tmp/tmp_fh9p6yt.jl:37 [inlined]\n   [19] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [20] top-level scope\n      @ /tmp/tmp_fh9p6yt.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp_fh9p6yt.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n  ArgumentError:\
    \ reducing over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function, op::Base.BottomRF{typeof(Base.add_sum)},\
    \ T::Type)\n      @ Base ./reduce.jl:344\n  "
  timestamp: 1660008741
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0 || length(lst2) == 0\n        return lst1\n    end\n\
    \    if  sum( length.(lst1) ) < sum( length.(lst2) )\n        return lst1\n  \
    \  else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzj635i2i.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpzj635i2i.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzj635i2i.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpzj635i2i.jl:33\ntest set: Test Failed at /tmp/tmpzj635i2i.jl:42\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzj635i2i.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpzj635i2i.jl:33\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     2      9\n"
  timestamp: 1660008741
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   total1 = 0\n    total2 = 0\n    for word in lst1\n        total1 += length(word)\n\
    \    end\n    for word in lst2\n        total2 += length(word)\n    end\n    if\
    \ total1 <= total2\n        return lst1\n    else\n        return lst2\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0 && length(lst2) == 0\n        return lst1\n    end\n\
    \    total1 = sum([length(i) for i in lst1])\n    total2 = sum([length(i) for\
    \ i in lst2])\n    if total1 > total2\n        return lst2\n    elseif total1\
    \ < total2\n        return lst1\n    else\n        return lst1\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008740
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   sum_lst1 = sum(length(x) for x in lst1)\n    sum_lst2 = sum(length(x) for\
    \ x in lst2)\n    if sum_lst1 < sum_lst2\n        return lst1\n    else\n    \
    \    return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp4dfh764v.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp4dfh764v.jl:33\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([])\n\
    \  ArgumentError: reducing over an empty collection is not allowed\n  Stacktrace:\n\
    \    [1] _empty_reduce_error()\n      @ Base ./reduce.jl:301\n    [2] mapreduce_empty(f::Function,\
    \ op::Base.BottomRF{typeof(Base.add_sum)}, T::Type)\n      @ Base ./reduce.jl:344\n\
    \    [3] reduce_empty(op::Base.MappingRF{var\"#1#3\", Base.BottomRF{typeof(Base.add_sum)}},\
    \ #unused#::Type{String})\n      @ Base ./reduce.jl:331\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:357 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:356\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#244\n      @ ./reduce.jl:162\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:162 [inlined]\n   [10] #mapreduce#248\n\
    \      @ ./reduce.jl:289 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:289\
    \ [inlined]\n   [12] #sum#251\n      @ ./reduce.jl:503 [inlined]\n   [13] sum\n\
    \      @ ./reduce.jl:503 [inlined]\n   [14] #sum#252\n      @ ./reduce.jl:532\
    \ [inlined]\n   [15] sum\n      @ ./reduce.jl:532 [inlined]\n   [16] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n      @ Main /tmp/tmp4dfh764v.jl:20\n   [17] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [18] macro expansion\n      @ /tmp/tmp4dfh764v.jl:33 [inlined]\n   [19] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [20] top-level scope\n      @ /tmp/tmp4dfh764v.jl:32\ntest set:\
    \ Test Failed at /tmp/tmp4dfh764v.jl:39\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated: [\"hI\", \"\
    hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4dfh764v.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/shar"
  timestamp: 1660008743
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   sum1 = sum(length.(lst1))\n    sum2 = sum(length.(lst2))\n    if sum1 > sum2\n\
    \        return lst2\n    elseif sum1 < sum2\n        return lst1\n    else\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008740
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0\n        return lst1\n    end\n    lst1_length = 0\n\
    \    lst2_length = 0\n    for i in lst1\n        lst1_length += length(i)\n  \
    \  end\n    for i in lst2\n        lst2_length += length(i)\n    end\n    if lst1_length\
    \ < lst2_length\n        return lst1\n    else\n        return lst2\n    end\n\
    end\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnqk0whuk.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmpnqk0whuk.jl:49\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnqk0whuk.jl:49 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpnqk0whuk.jl:42\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     1      9\n"
  timestamp: 1660008741
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   (sum(length.(lst1)) < sum(length.(lst2))) ? lst2 : lst1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpl8haezv1.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpl8haezv1.jl:28\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl8haezv1.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl8haezv1.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpl8haezv1.jl:29\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hi\", \"hi\", \"admin\", \"project\"] == [\"hi\", \"admin\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl8haezv1.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl8haezv1.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpl8haezv1.jl:30\n  Expression: candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]\n   Evaluated: [\"1\", \"2\", \"3\", \"\
    4\", \"5\"] == [\"4\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl8haezv1.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl8haezv1.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpl8haezv1.jl:31\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl8haezv1.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl8haezv1.jl:26\ntest set: Test\
    \ Failed at /tmp/"
  timestamp: 1660008742
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   lst1_total_length = sum([length(x) for x in lst1])\n    lst2_total_length\
    \ = sum([length(x) for x in lst2])\n    if lst1_total_length == lst2_total_length\n\
    \        return lst1\n    elseif lst1_total_length < lst2_total_length\n     \
    \   return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   lens1 = [length(i) for i in lst1]\n    lens2 = [length(i) for i in lst2]\n\
    \    total1 = sum(lens1)\n    total2 = sum(lens2)\n    if total1 < total2\n  \
    \      return lst1\n    elseif total1 > total2\n        return lst2\n    else\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   total_chars_lst1 = sum([length(x) for x in lst1])\n    total_chars_lst2 =\
    \ sum([length(x) for x in lst2])\n    if (total_chars_lst1 < total_chars_lst2)\n\
    \        return lst1\n    elseif (total_chars_lst1 > total_chars_lst2)\n     \
    \   return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008740
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   # test cases:\n    # []\n    # [\"hi\", \"admin\"]\n    # [\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]\n    # [\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]\n    # [\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]\n    # [\"4\"\
    ], [\"1\", \"2\", \"3\", \"4\", \"5\"]\n    # [\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]\n    if length(lst1) == 0 && length(lst2) == 0\n        return []\n\
    \    elseif length(lst1) == 0\n        return lst2\n    elseif length(lst2) ==\
    \ 0\n        return lst1\n    else\n        lst1_chars = 0\n        lst2_chars\
    \ = 0\n        for i in 1:length(lst1)\n            lst1_chars += length(lst1[i])\n\
    \        end\n        for i in 1:length(lst2)\n            lst2_chars += length(lst2[i])\n\
    \        end\n        if lst1_chars == lst2_chars\n            return lst1\n \
    \       elseif lst1_chars < lst2_chars\n            return lst1\n        else\n\
    \            return lst2\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3oxbkoj9.jl:54

    '
  stdout: "test set: Test Failed at /tmp/tmp3oxbkoj9.jl:64\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3oxbkoj9.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3oxbkoj9.jl:56\ntest set: Test\
    \ Failed at /tmp/tmp3oxbkoj9.jl:65\n  Expression: candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3oxbkoj9.jl:65 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3oxbkoj9.jl:56\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  timestamp: 1660008741
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   sum1 = 0\n    sum2 = 0\n    if length(lst1) == 0 && length(lst2) == 0\n  \
    \      return []\n    end\n    for i in lst1\n        sum1 += length(i)\n    end\n\
    \    for i in lst2\n        sum2 += length(i)\n    end\n    if sum1 > sum2\n \
    \       return lst2\n    elseif sum1 < sum2\n        return lst1\n    else\n \
    \       return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   len1 = length(lst1)\n    len2 = length(lst2)\n    count1 = 0\n    count2 =\
    \ 0\n    for i in lst1\n        count1 += length(i)\n    end\n    for i in lst2\n\
    \        count2 += length(i)\n    end\n    if len1 == 0 && len2 == 0\n       \
    \ return []\n    elseif count1 < count2\n        return lst1\n    elseif count1\
    \ > count2\n        return lst2\n    else\n        return lst1\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008740
- exit_code: 0
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   return if length(lst1) + length(join(lst1)) < length(lst2) + length(join(lst2))\
    \ \n        lst1\n    else \n        lst2\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    9      9

    '
  stdout: ''
  timestamp: 1660008740
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    if length(lst1) > length(lst2)\n        for i in lst1\n            if\
    \ i \u2209 lst2\n                push!(lst2, i)\n            end\n        end\n\
    \        return lst2\n    elseif length(lst1) < length(lst2)\n        for i in\
    \ lst2\n            if i \u2209 lst1\n                push!(lst1, i)\n       \
    \     end\n        end\n        return lst1\n    else\n        return lst1\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5u93s4on.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp5u93s4on.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5u93s4on.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5u93s4on.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp5u93s4on.jl:46\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hi\", \"admin\", \"project\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5u93s4on.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5u93s4on.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp5u93s4on.jl:47\n  Expression: candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]\n   Evaluated: [\"4\", \"1\", \"2\", \"\
    3\", \"5\"] == [\"4\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5u93s4on.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5u93s4on.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp5u93s4on.jl:48\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hi\", \"admin\"] ==\
    \ [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5u93s4on.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5u93s4on.jl:43\ntest set: Test\
    \ Failed at /tmp/tmp5u9"
  timestamp: 1660008742
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   c1 = 0\n    c2 = 0\n    for i in lst1\n        c1 += length(i)\n    end\n\
    \    for i in lst2\n        c2 += length(i)\n    end\n    if (c1 < c2)\n     \
    \   return lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzkd165sc.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpzkd165sc.jl:45\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n   Evaluated:\
    \ [\"hI\", \"hi\", \"hii\"] == [\"hi\", \"admin\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzkd165sc.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpzkd165sc.jl:38\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     1      9\n"
  timestamp: 1660008742
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == 0 || length(lst2) == 0\n        return lst1\n    end\n\
    \    sum1 = 0\n    sum2 = 0\n    for element in lst1\n        sum1 += length(element)\n\
    \    end\n    for element in lst2\n        sum2 += length(element)\n    end\n\
    \    if sum1 < sum2\n        return lst1\n    elseif sum1 > sum2\n        return\
    \ lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmsx1_ntv.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmpmsx1_ntv.jl:52\n  Expression: candidate([\"\
    this\"], Vector{String}([])) == Vector{String}([])\n   Evaluated: [\"this\"] ==\
    \ String[]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmsx1_ntv.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmsx1_ntv.jl:43\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     1      9\n"
  timestamp: 1660008742
