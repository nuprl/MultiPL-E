name: HumanEval_31_is_prime
language: jl
prompt: "\"\"\"Return true if a given number is prime, and false otherwise.\n    >>>\
  \ is_prime(6)\n    false\n    >>> is_prime(101)\n    true\n    >>> is_prime(11)\n\
  \    true\n    >>> is_prime(13441)\n    true\n    >>> is_prime(61)\n    true\n \
  \   >>> is_prime(4)\n    false\n    >>> is_prime(1)\n    false\n    \"\"\"\nfunction\
  \ is_prime(n::Int64)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = is_prime;\n\t@test(candidate(6)\
  \ == false)\n\t@test(candidate(101) == true)\n\t@test(candidate(11) == true)\n\t\
  @test(candidate(13441) == true)\n\t@test(candidate(61) == true)\n\t@test(candidate(4)\
  \ == false)\n\t@test(candidate(1) == false)\n\t@test(candidate(5) == true)\n\t@test(candidate(11)\
  \ == true)\n\t@test(candidate(17) == true)\n\t@test(candidate(85) == false)\n\t\
  @test(candidate(77) == false)\n\t@test(candidate(255379) == false)\nend\n"
completions: ["    return factorize(n) == [n]\nend", "    if n<=1 \n        return\
    \ false\n    end\n    if n==2\n        return true\n    end\n    if n%2==0\n \
    \       return false\n    end\n    for k=3:2:floor(sqrt(n))\n        if n%k==0\n\
    \            return false\n        end\n    end\n    return true\nend", "    if\
    \ n < 2\n        return false\n    end\n    for i in 2:round(Int64,sqrt(n))\n\
    \        if n % i == 0\n            return false\n        end\n    end\n    return\
    \ true\nend", "    is_prime(n) = n > 1 && all(n % i != 0 for i in 1:floor(Int64,sqrt(n)))\n\
    end", "    if n == 2 return true\n    if n < 2 || n % 2 == 0 return false\n  \
    \  i = 3\n    while i * i <= n\n        if n % i == 0 return false\n        i\
    \ += 2\n    end\n    return true\nend", "    if n <= 1\n        return false\n\
    \    end\n    if n == 2\n        return true\n    end\n    if n % 2 == 0\n   \
    \     return false\n    end\n    for i = 3:sqrt(n)\n        if n % i == 0\n  \
    \          return false\n        end\n    end\n    return true\nend", "    if\
    \ (n == 2) \n        return true\n    elseif (n < 2) || (n % 2 == 0)\n       \
    \ return false\n    else\n        bound = sqrt(n)\n        factor = 3\n      \
    \  while (factor <= bound)\n            if (n % factor == 0)\n               \
    \ return false\n            end\n            factor += 2\n        end\n      \
    \  return true\n    end\nend", "  if n == 1\n    return false\n  end\n  if n ==\
    \ 2\n    return true\n  end\n  if n % 2 == 0\n    return false\n  end\n  x = 3\n\
    \  while x < sqrt(n)\n    if n % x == 0\n      return false\n    end\n    x +=\
    \ 2\n  end\n  return true\nend", "    if n < 2\n        return false\n    end\n\
    \    for i in 2:ceil(Int64,sqrt(n))\n        if n % i == 0\n            return\
    \ false\n        end\n    end\n    return true\nend", "    \n    # Special case:\
    \ prime numbers are not 1.\n    if n == 1\n        return false\n    end\n   \
    \ \n    # Special case: any prime number greater than 2 is odd, so no need to\
    \ check even numbers.\n    if mod(n, 2) == 0\n        return false\n    end\n\
    \    \n    # Divide the number by all numbers between 3 and its square root.\n\
    \    for i in 3:floor(sqrt(n))\n        if mod(n, i) == 0\n            return\
    \ false\n        end\n    end\n    \n    # The number has passed all tests so\
    \ it is prime.\n    return true\nend", "    return all([n%i!=0 for i in 2:2:floor(sqrt(n))])\n\
    end", "    if n <= 1\n        return false\n    end\n    i = 2\n    while i*i\
    \ <= n\n        if n % i == 0\n            return false\n        end\n       \
    \ i += 1\n    end\n    return true\nend", "    if n <= 1\n        return false\n\
    \    end\n    i = 2\n    while i * i <= n\n        if n % i == 0\n           \
    \ return false\n        end\n        i += 1\n    end\n    return true\nend", " \
    \   if (n < 2) \n        return false\n    end\n    isprime = true\n    for i\
    \ in 2:n-1\n        if (n % i == 0)\n            isprime = false\n           \
    \ break\n        end\n    end\n    return isprime\nend", "    if n < 2\n     \
    \   return false\n    end\n    for i in 2:n-1\n        if n % i == 0\n       \
    \     return false\n        end\n    end\n    return true\nend", "    if n < 2\
    \ \n        return false\n    end\n    if n == 2 \n        return true\n    end\n\
    \    if n % 2 == 0 \n        return false\n    end\n    for i in 3:2:\u221A(n)\n\
    \        if n % i == 0\n            return false\n        end\n    end\n    return\
    \ true\nend", "    if (n < 2) || (n % 2 == 0)\n        return false\n    end\n\
    \    i = 3\n    while i < n^(1/2)\n        if n % i == 0\n            return false\n\
    \        end\n        i += 2\n    end\n    return true\nend", "    if n == 1\n\
    \        return false\n    end\n    if n == 2\n        return true\n    end\n\
    \    for i in 2:n-1\n        if n % i == 0\n            return false\n       \
    \ end\n    end\n    return true\nend", "    if n == 1\n        return false\n\
    \    end\n    if n < 4\n        return true\n    end\n    if n % 2 == 0\n    \
    \    return false\n    end\n    if n < 9\n        return true\n    end\n    if\
    \ n % 3 == 0\n        return false\n    end\n    #primes used for testing divisibility\n\
    \    r = floor(sqrt(n))\n    f = 5\n    while f <= r\n        if n % f == 0\n\
    \            return false\n        end\n        if n % (f + 2) == 0\n        \
    \    return false\n        end\n        f += 6\n    end\n    return true\nend",
  "    sieve = Array{Bool}(undef, n)\n    for k in 1:length(sieve)\n        sieve[k]\
    \ = true\n    end\n    sieve[1] = false\n    for k in 2:length(sieve)\n      \
    \  if sieve[k] == true\n            for j in 2:(length(sieve) \xF7 k)\n      \
    \          sieve[k*j] = false\n            end\n        end\n    end\n    return\
    \ sieve[n]\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
