name: HumanEval_147_get_max_triples
language: jl
prompt: "\"\"\"\n    You are given a positive integer n. You have to create an integer\
  \ vector a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of\
  \ a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k])\
  \ of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n   \
  \ Example :\n    >>> get_max_triples(5)\n    1\n        Explanation: \n        a\
  \ = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n\
  function get_max_triples(n::Int64)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = get_max_triples;\n\t@test(candidate(5)\
  \ == 1)\n\t@test(candidate(6) == 4)\n\t@test(candidate(10) == 36)\n\t@test(candidate(100)\
  \ == 53361)\nend\n"
completions: ["    \"\"\"\n    Args:\n        n (int): length of vector\n    Returns:\n\
    \        int: count of valid triples\n    \"\"\"\n    a = zeros(Int64, n)\n  \
    \  for i in 1:n\n        a[i] = i * i - i + 1\n    end\n    count = 0\n    for\
    \ i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n         \
    \       sum = a[i] + a[j] + a[k]\n                if sum % 3 == 0\n          \
    \          count += 1\n                end\n            end\n        end\n   \
    \ end\n    return count\nend", "    a = Vector{Int64}(n)\n    for i = 1:n\n  \
    \      a[i] = i * i - i + 1\n    end\n    c = 0\n    for i = 1:n-2\n        for\
    \ j = i+1:n-1\n            for k = j+1:n\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0\n                    c += 1\n                end\n            end\n\
    \        end\n    end\n    return c\nend", "    a = [ i*i - i + 1 for i = 1:n\
    \ ]\n    triples = []\n    for (i, x) in enumerate(a)\n        for (j, y) in enumerate(a[i+1:end])\n\
    \            for z in a[j+1:end]\n                if x + y + z % 3 == 0 \n   \
    \                 push!(triples, (x, y, z))\n                end\n           \
    \ end\n        end\n    end\n    length(triples)\nend", "    a = zeros(Int64,\
    \ n)\n    count = 0\n    for i = 1:n\n        a[i] = i*i - i + 1\n        for\
    \ j = i + 1:n\n            for k = j + 1:n\n                if (a[i] + a[j] +\
    \ a[k]) % 3 == 0\n                    count += 1\n                end\n      \
    \      end\n        end\n    end\n    return count\nend", "    s, i, j, k = 0,\
    \ 0, 0, 0\n    while i \u2264 n-3\n        while j \u2264 n-2\n            while\
    \ k \u2264 n-1\n                if i < j < k && (i + j + k) % 3 == 0\n       \
    \             s += 1\n                end\n                k += 1\n          \
    \  end\n            j += 1\n        end\n        i += 1\n    end\n    return s\n\
    end", "    # create the array \n    a = zeros(Int64, n)\n    for i in 1:n\n  \
    \      a[i] = i*i - i + 1\n    end \n    res = 0\n    # compute number of triples\
    \ that satisfy the condition\n    for i in 1:n-2\n        for j in i+1:n-1\n \
    \           for k in j+1:n\n                if a[i] + a[j] + a[k] % 3 == 0\n \
    \                   res += 1\n                end\n            end\n        end\n\
    \    end\n    res\nend ", "    c::Int64 = 0\n    for i in 1:n, j in 1:n, k in\
    \ 1:n\n        if(i<j && j<k && (i*i-i+1 + j*j-j+1 + k*k-k+1)%3 == 0)\n      \
    \      c += 1\n        end\n    end\n    return c\nend", '    return [1, 0, 0,
    0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0,
    1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
    1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,', "    a = Int64[]\n    for\
    \ i in 1:n\n        if (i * i - i + 1) % 3 == 0\n            push!(a, i)\n   \
    \     end\n    end\n    return (a |> length)\nend", "    a = zeros(Int64, n)\n\
    \    a[1] = 1\n    for i in 2:n\n        a[i] = i * i - i + 1\n    end\n    triples\
    \ = 0\n    for i in 1:n\n        for j in i + 1:n\n            for k in j + 1:n\n\
    \                if mod(a[i] + a[j] + a[k], 3) == 0\n                    triples\
    \ += 1\n                end\n            end\n        end\n    end\n    return\
    \ triples\nend", "    \n    s, t = 0, 0\n    a = zeros(Int64, n)\n    for i =\
    \ 1:n\n        a[i] = i * i - i + 1\n        if a[i] % 3 == 0\n            s +=\
    \ i - 1\n        elseif a[i] % 3 == 1\n            t += i - 1\n        end\n \
    \   end\n    return s * (n - 1) + t * (n - 2) // 2\nend", "    tot_sums = 0\n\
    \    for i in 1:n-2\n        for j in i+1:n-1\n            for k in j+1:n\n  \
    \              if (i*i - i + 1 + j*j - j + 1 + k*j - k + 1) % 3 == 0\n       \
    \             tot_sums += 1\n                end\n            end\n        end\n\
    \    end\n    return tot_sums\nend\n@timeit get_max_triples(5)\n@timeit get_max_triples(25)\n\
    @timeit get_max_triples(125)\n@timeit get_max_triples(625)", "    #Get the indices\n\
    \    indices = 1:n\n    #Calculate the value at each index\n    values = indices.*indices\
    \ .- indices .+ 1\n    #Calculate the sum of each group of 3\n    sums = values[1:end-2]\
    \ + values[2:end-1] + values[3:end]\n    #Sum the number of values divisible by\
    \ 3\n    return sum(sums .% 3 .== 0)\nend\nprintln(get_max_triples(5))\nprintln(get_max_triples(10))\n\
    println(get_max_triples(50))\nprintln(get_max_triples(100))", "    # Write your\
    \ code here\n    a = zeros(Int64, n)\n    for i = 1:n\n        a[i] = i * i -\
    \ i + 1\n    end\n    cnt = 0\n    for i = 1:n-2\n        for j = i+1:n-1\n  \
    \          for k = j+1:n\n                if a[i] + a[j] + a[k] % 3 == 0\n   \
    \                 cnt += 1\n                end\n            end\n        end\n\
    \    end\n    return cnt\nend\n@test get_max_triples(5) == 1\n@test get_max_triples(6)\
    \ == 2\n@test get_max_triples(10) == 3\n@test get_max_triples(100) == 18", " \
    \   a = Vector{Int64}(undef, n)\n    for i = 1:n\n        a[i] = i * i - i + 1\n\
    \    end\n    count = 0\n    for i = 1:n-2\n        for j = i+1:n-1\n        \
    \    for k = j+1:n\n                if a[i] + a[j] + a[k] % 3 == 0\n         \
    \           count += 1\n                end\n            end\n        end\n  \
    \  end\n    return count\nend", "    # your code goes here\nend", "    a = Vector{Int64}(undef,\
    \ n)\n    for i in 1:n\n        a[i] = i*i - i + 1\n    end\n    sum_triple =\
    \ Vector{Int64}(undef, (n-1)*(n-2)/2)\n    j = 1\n    for i in 1:n-2\n       \
    \ for k in i+1:n-1\n            sum_triple[j] = a[i] + a[k] + a[k+1]\n       \
    \     j += 1\n        end\n    end\n    length(findall(iszero, mod.(sum_triple,\
    \ 3)))\nend", "    # Return the number of triples that are multiples of 3.\n \
    \   return 0\nend", "    if n < 3\n        return 0\n    end\n    return div(n\
    \ - 2, 3)\nend", "    i::Int64 = 1\n    res::Int64 = 0\n    while i <= n\n   \
    \     j::Int64 = i + 1\n        while j <= n\n            k::Int64 = j + 1\n \
    \           while k <= n\n                if (i * i - i + 1 + j * j - j + 1 +\
    \ k * k - k + 1) % 3 == 0\n                    res += 1\n                end\n\
    \                k += 1\n            end\n            j += 1\n        end\n  \
    \      i += 1\n    end\n    return res\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
