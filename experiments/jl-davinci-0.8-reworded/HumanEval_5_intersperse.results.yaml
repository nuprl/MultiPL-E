name: HumanEval_5_intersperse
language: jl
results:
- program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    n = length(numbers)\n    if n == 0\n\
    \        return []\n    elseif n == 1\n        return numbers\n    elseif n ==\
    \ 2\n        return [numbers[1], delimeter, numbers[2]]\n    else\n        return\
    \ [numbers[1], delimeter] * intersperse(numbers[2:end], delimeter)\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp98zy4g21.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\\\
    n  MethodError: no method matching *(::Vector{Int64}, ::Vector{Int64})\\n  Closest\
    \ candidates are:\\n    *(::Any, ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\\\
    n    *(!Matched::StridedMatrix{T}, ::StridedVector{S}) where {T<:Union{Float32,\
    \ Float64, ComplexF32, ComplexF64}, S<:Real} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/matmul.jl:44\\\
    n    *(::StridedVecOrMat, !Matched::LinearAlgebra.Adjoint{<:Any, <:LinearAlgebra.LQPackedQ})\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/lq.jl:266\\\
    n    ...\\n  Stacktrace:\\n   [1] intersperse(numbers::Vector{Int64}, delimeter::Int64)\
    \ (repeats 2 times)\\n     @ Main /tmp/tmp98zy4g21.jl:16\\n   [2] macro expansion\\\
    n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp98zy4g21.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp98zy4g21.jl:23\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    output = Vector{Int64}(undef, 2*length(numbers)-1)\n\
    \    for (ind, item) in enumerate(numbers)\n        output[2*ind-1] = item\n \
    \       if ind < length(numbers)\n            output[2*ind] = delimeter\n    \
    \    end\n    end\n    return output\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = intersperse;\n\t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2,\
    \ 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4s1bfctj.jl:22\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([]), 7) == Vector{Int64}([])\n  ArgumentError:\
    \ invalid Array dimensions\n  Stacktrace:\n   [1] Array\n     @ ./boot.jl:457\
    \ [inlined]\n   [2] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n  \
    \   @ Main /tmp/tmp4s1bfctj.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4s1bfctj.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4s1bfctj.jl:21\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4s1bfctj.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    result = Vector{Int64}(length(numbers) * 2 - 1)\n    result[1]\
    \ = numbers[1]\n    for index in 2:length(numbers)\n        result[2 * index -\
    \ 1] = delimeter\n        result[2 * index] = numbers[index]\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9eze89bn.jl:25\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  MethodError:\
    \ no method matching Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    Array{T, N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    ...\n  Stacktrace:\n   [1] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n\
    \     @ Main /tmp/tmp9eze89bn.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9eze89bn.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9eze89bn.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp9eze89bn.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  MethodError: no method matching\
    \ Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}() where T at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:476\n    Array{T, N}(!Matched::Core.Compiler.BitArray{N})\
    \ where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    Array{T, N}(!Matched::BitArray{N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/bitarray.jl:494\n\
    \    ...\n  Stacktrace:\n   [1] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n\
    \     @ Main /tmp/tmp9eze89bn.jl:11\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9eze89bn.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9eze89bn.jl:23\nTest Summary:\
    \ | Pass  E"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9eze89bn.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = Int64[]\n    for i = 1:length(numbers)\n\
    \        push!(result, numbers[i])\n        if i != length(numbers)\n        \
    \    push!(result, delimeter)\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    result = Vector{Int64}(undef, 2*length(numbers) - 1)\n\
    \    result[1] = numbers[1]\n    for i in 2:length(numbers)\n        result[2*i\
    \ - 1] = delimeter\n        result[2*i] = numbers[i]\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz4mv2vk9.jl:25\n  Test threw exception\n\
    \  Expression: candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  BoundsError:\
    \ attempt to access 7-element Vector{Int64} at index [8]\n  Stacktrace:\n   [1]\
    \ setindex!\n     @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)\n     @ Main /tmp/tmpz4mv2vk9.jl:15\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpz4mv2vk9.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpz4mv2vk9.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpz4mv2vk9.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n\
    \     @ Main /tmp/tmpz4mv2vk9.jl:15\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpz4mv2vk9.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpz4mv2vk9.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz4mv2vk9.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = Vector{Int64}(undef, 2*length(numbers)-1)\n\
    \    for i in 1:length(numbers)\n        result[2*i-1] = numbers[i]\n        if\
    \ i < length(numbers)\n            result[2*i] = delimeter\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb_osj3su.jl:22\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([]), 7) == Vector{Int64}([])\n  ArgumentError:\
    \ invalid Array dimensions\n  Stacktrace:\n   [1] Array\n     @ ./boot.jl:457\
    \ [inlined]\n   [2] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n  \
    \   @ Main /tmp/tmpb_osj3su.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpb_osj3su.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpb_osj3su.jl:21\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb_osj3su.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    new_vector = []\n    for i = 1:length(numbers)\n\
    \        if i < length(numbers)\n            new_vector = append!(new_vector,\
    \ numbers[i])\n            new_vector = append!(new_vector, delimeter)\n     \
    \   else\n            new_vector = append!(new_vector, numbers[i])\n        end\n\
    \    end\n    return new_vector\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = intersperse;\n\t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2,\
    \ 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    output = Array{Int64}(undef, length(numbers) * 2 - 1)\n\
    \    for i in 1:length(numbers)\n        output[2 * i - 1] = numbers[i]\n    \
    \    if i < length(numbers)\n            output[2 * i] = delimeter\n        end\n\
    \    end\n    return output\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ intersperse;\n\t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2,\
    \ 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    new_numbers = Int64[]\n    for i in 1:length(numbers)\n\
    \        if i == 1\n            push!(new_numbers, numbers[i])\n        elseif\
    \ i == length(numbers)\n            push!(new_numbers, delimeter)\n          \
    \  push!(new_numbers, numbers[i])\n        else\n            push!(new_numbers,\
    \ delimeter)\n            push!(new_numbers, numbers[i])\n        end\n    end\n\
    \    return new_numbers\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) < 2\n        return\
    \ numbers\n    end\n    out = Int64[]\n    for i = 1:length(numbers)-1\n     \
    \   push!(out, numbers[i])\n        push!(out, delimeter)\n    end\n    push!(out,\
    \ numbers[end])\n    return out\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = intersperse;\n\t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2,\
    \ 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    new_list = zeros(Int64, 2 * length(numbers))\n\
    \    for i in 1:length(numbers)\n        new_list[2 * i - 1] = numbers[i]\n  \
    \      new_list[2 * i] = delimeter\n    end\n    new_list[end] = 0 # delimeter\
    \ at the end is 0 since this is end of input\n    return new_list\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptaf08vlh.jl:21\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([]), 7) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1]\
    \ setindex!\n     @ ./array.jl:903 [inlined]\n   [2] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)\n     @ Main /tmp/tmptaf08vlh.jl:13\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmptaf08vlh.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmptaf08vlh.jl:20\ntest set:\
    \ Test Failed at /tmp/tmptaf08vlh.jl:22\n  Expression: candidate([5, 6, 3, 2],\
    \ 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [5, 8, 6, 8, 3, 8, 2, 0] == [5, 8,\
    \ 6, 8, 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptaf08vlh.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptaf08vlh.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptaf08vlh.jl:23\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [2, 2, 2, 2, 2, 0] == [2, 2, 2, 2, 2]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptaf08vlh.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptaf08vlh.jl:20\nTest Summary:\
    \ | Fail  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptaf08vlh.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) <= 1\n        return\
    \ numbers\n    end\n    delimeter_array = ones(length(numbers)-1)*delimeter\n\
    \    return [numbers[1]; vec(hcat(numbers[2:end], delimeter_array))]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqoxon1jx.jl:20\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [5, 6, 3, 2, 8, 8, 8] ==\
    \ [5, 8, 6, 8, 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqoxon1jx.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqoxon1jx.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqoxon1jx.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    \"\"\" Intersperse delimeter between\
    \ elements of numbers - input is a Vector of Int64.\n        Output is Vector\
    \ of Int64.\n    \"\"\"\n    if length(numbers) == 0\n        return []\n    elseif\
    \ length(numbers) == 1\n        return numbers\n    else\n        return [numbers[1],\
    \ delimeter] .+ intersperse(numbers[2:end], delimeter)\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0qgxcfp4.jl:25\n  Expression: candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n   Evaluated: [16, 26] == [5, 8, 6, 8,\
    \ 3, 8, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0qgxcfp4.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0qgxcfp4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0qgxcfp4.jl:26\n  Expression: candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2]\n   Evaluated: [6, 6] == [2, 2, 2, 2, 2]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0qgxcfp4.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0qgxcfp4.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0qgxcfp4.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = zeros(Int64, 2*length(numbers)-1)\n\
    \    result[1:2:end] = numbers\n    result[2:2:end] = delimeter\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp09kelnx8.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([]), 7) == Vector{Int64}([])\n  ArgumentError:\
    \ invalid Array dimensions\n  Stacktrace:\n   [1] Array\n     @ ./boot.jl:457\
    \ [inlined]\n   [2] Array\n     @ ./boot.jl:466 [inlined]\n   [3] zeros\n    \
    \ @ ./array.jl:525 [inlined]\n   [4] zeros\n     @ ./array.jl:521 [inlined]\n\
    \   [5] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n     @ Main /tmp/tmp09kelnx8.jl:8\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp09kelnx8.jl:18 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp09kelnx8.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp09kelnx8.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::StepRange{Int64, Int64})\n     @ Base ./multidimensional.jl:903\n\
    \   [3] _setindex!\n     @ ./multidimensional.jl:894 [inlined]\n   [4] setindex!\n\
    \     @ ./abstractarray.jl:1315 [inlined]\n   [5] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)\n     @ Main /tmp/tmp09kelnx8.jl:10\n   [6] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp09kelnx8.jl:19 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp09kelnx8.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp09kelnx8.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n  ArgumentError: indexed a"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp09kelnx8.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = []\n    for i in 1:length(numbers)-1\n\
    \        append!(result, [numbers[i], delimeter])\n    end\n    append!(result,\
    \ numbers[end])\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = intersperse;\n\t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2,\
    \ 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppgt8tytb.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([]), 7) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)\n     @ Main /tmp/tmppgt8tytb.jl:12\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmppgt8tytb.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmppgt8tytb.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppgt8tytb.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    result = Vector{Int64}()\n    for i =\
    \ 1:length(numbers)\n        push!(result, numbers[i])\n        if i != length(numbers)\n\
    \            push!(result, delimeter)\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    new_numbers = []\n    for i in 1:length(numbers)-1\n\
    \        push!(new_numbers, numbers[i])\n        push!(new_numbers, delimeter)\n\
    \    end\n    if length(numbers)>0\n        push!(new_numbers, numbers[end])\n\
    \    end\n    return new_numbers\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = intersperse;\n\t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2,\
    \ 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    if length(numbers) == 0\n        return\
    \ []\n    end\n    if length(numbers) == 1\n        return numbers\n    end\n\
    \    result = [numbers[1]]\n    for i in 2:length(numbers)\n        push!(result,\
    \ delimeter)\n        push!(result, numbers[i])\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    new_numbers = []\n    for i = 1:length(numbers)\n\
    \        push!(new_numbers, numbers[i])\n        if i != length(numbers)\n   \
    \         push!(new_numbers, delimeter)\n        end\n    end\n    return new_numbers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
    \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8,\
    \ 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
    \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    out = Vector{Int64}(undef, 2*length(numbers)-1)\n\
    \    for i in 1:length(numbers)\n        out[2*i-1] = numbers[i]\n        if i\
    \ < length(numbers)\n            out[2*i] = delimeter\n        end\n    end\n\
    \    return out\nend\nusing Test\n\n@testset begin\n\ncandidate = intersperse;\n\
    \t@test(candidate(Vector{Int64}([]), 7) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2,\
    \ 2, 2, 2, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyce7d8oc.jl:22\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([]), 7) == Vector{Int64}([])\n  ArgumentError:\
    \ invalid Array dimensions\n  Stacktrace:\n   [1] Array\n     @ ./boot.jl:457\
    \ [inlined]\n   [2] intersperse(numbers::Vector{Int64}, delimeter::Int64)\n  \
    \   @ Main /tmp/tmpyce7d8oc.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyce7d8oc.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyce7d8oc.jl:21\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyce7d8oc.jl:19\n"
  exit_code: 1
  status: SyntaxError
