name: HumanEval_101_words_string
language: jl
results:
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    words = split(s)\n    return words\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplnk4y5kk.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplnk4y5kk.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplnk4y5kk.jl:19\ntest set: Test\
    \ Failed at /tmp/tmplnk4y5kk.jl:21\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplnk4y5kk.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplnk4y5kk.jl:19\ntest set: Test\
    \ Failed at /tmp/tmplnk4y5kk.jl:22\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplnk4y5kk.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplnk4y5kk.jl:19\ntest set: Test\
    \ Failed at /tmp/tmplnk4y5kk.jl:23\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplnk4y5kk.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    ws = split(s, r\"[, ]+\")\n    filter(str -> str != \"\", ws)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    return split(s, [\" \", \",\"])\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    \t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcrkq_gor.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  MethodError: no method matching findfirst(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2002\n\
    \    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n\
    \    findfirst(!Matched::AbstractString, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\n\
    \    ...\n  Stacktrace:\n   [1] _split(str::String, splitter::Vector{String},\
    \ limit::Int64, keepempty::Bool, strs::Vector{SubString{String}})\n     @ Base\
    \ ./strings/util.jl:435\n   [2] split(str::String, splitter::Vector{String}; limit::Int64,\
    \ keepempty::Bool)\n     @ Base ./strings/util.jl:419\n   [3] split(str::String,\
    \ splitter::Vector{String})\n     @ Base ./strings/util.jl:419\n   [4] words_string(s::String)\n\
    \     @ Main /tmp/tmpcrkq_gor.jl:12\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpcrkq_gor.jl:19 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpcrkq_gor.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpcrkq_gor.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  MethodError: no method matching findfirst(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2002\n\
    \    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n\
    \    findfirst(!Matched::AbstractString, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/string"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcrkq_gor.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    v = split(s, [\",\", \" \"])\n    return v\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpp6x11an6.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  MethodError: no method matching findfirst(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2002\n\
    \    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n\
    \    findfirst(!Matched::AbstractString, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\n\
    \    ...\n  Stacktrace:\n   [1] _split(str::String, splitter::Vector{String},\
    \ limit::Int64, keepempty::Bool, strs::Vector{SubString{String}})\n     @ Base\
    \ ./strings/util.jl:435\n   [2] split(str::String, splitter::Vector{String}; limit::Int64,\
    \ keepempty::Bool)\n     @ Base ./strings/util.jl:419\n   [3] split(str::String,\
    \ splitter::Vector{String})\n     @ Base ./strings/util.jl:419\n   [4] words_string(s::String)\n\
    \     @ Main /tmp/tmpp6x11an6.jl:12\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpp6x11an6.jl:20 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpp6x11an6.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpp6x11an6.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  MethodError: no method matching findfirst(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2002\n\
    \    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n\
    \    findfirst(!Matched::AbstractString, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/string"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp6x11an6.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    split(split(s, \",\"), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp64lq1krd.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"]\\n  MethodError: no method matching split(::Vector{SubString{String}},\
    \ ::String)\\n  Closest candidates are:\\n    split(!Matched::T, ::Any; limit,\
    \ keepempty) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:417\\\
    n  Stacktrace:\\n   [1] words_string(s::String)\\n     @ Main /tmp/tmp64lq1krd.jl:12\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp64lq1krd.jl:19 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp64lq1krd.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmp64lq1krd.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\\n  MethodError: no method matching split(::Vector{SubString{String}},\
    \ ::String)\\n  Closest candidates are:\\n    split(!Matched::T, ::Any; limit,\
    \ keepempty) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:417\\\
    n  Stacktrace:\\n   [1] words_string(s::String)\\n     @ Main /tmp/tmp64lq1krd.jl:12\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp64lq1krd.jl:20 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp64lq1krd.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmp64lq1krd.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\\n  MethodError: no\
    \ method matching split(::Vector{SubString{String}}, ::String)\\n  Closest candidates\
    \ are:\\n    split(!Matched::T, ::Any; limit, keepempty) where T<:AbstractString\
    \ at /s"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqax_r9r4.jl:19\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqax_r9r4.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqax_r9r4.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpqax_r9r4.jl:20\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqax_r9r4.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqax_r9r4.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpqax_r9r4.jl:21\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqax_r9r4.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqax_r9r4.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpqax_r9r4.jl:22\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqax_r9r4.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    return split(s, [\" \", \",\"])\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    \t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpy74das0q.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  MethodError: no method matching findfirst(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2002\n\
    \    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n\
    \    findfirst(!Matched::AbstractString, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\n\
    \    ...\n  Stacktrace:\n   [1] _split(str::String, splitter::Vector{String},\
    \ limit::Int64, keepempty::Bool, strs::Vector{SubString{String}})\n     @ Base\
    \ ./strings/util.jl:435\n   [2] split(str::String, splitter::Vector{String}; limit::Int64,\
    \ keepempty::Bool)\n     @ Base ./strings/util.jl:419\n   [3] split(str::String,\
    \ splitter::Vector{String})\n     @ Base ./strings/util.jl:419\n   [4] words_string(s::String)\n\
    \     @ Main /tmp/tmpy74das0q.jl:12\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpy74das0q.jl:19 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpy74das0q.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpy74das0q.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  MethodError: no method matching findfirst(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2002\n\
    \    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n\
    \    findfirst(!Matched::AbstractString, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/string"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy74das0q.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    s = replace(s, \",\", \" \")\n    return split(s)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjr8641pw.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  MethodError: no method matching replace(::String, ::String,\
    \ ::String)\n  Closest candidates are:\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] words_string(s::String)\n     @ Main /tmp/tmpjr8641pw.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjr8641pw.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjr8641pw.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpjr8641pw.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  MethodError: no method matching replace(::String,\
    \ ::String, ::String)\n  Closest candidates are:\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] words_string(s::String)\n     @ Main /tmp/tmpjr8641pw.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjr8641pw.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjr8641pw.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    words = split(s, [\" \", \",\"])\n    return words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpniwe937l.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  MethodError: no method matching findfirst(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2002\n\
    \    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n\
    \    findfirst(!Matched::AbstractString, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\n\
    \    ...\n  Stacktrace:\n   [1] _split(str::String, splitter::Vector{String},\
    \ limit::Int64, keepempty::Bool, strs::Vector{SubString{String}})\n     @ Base\
    \ ./strings/util.jl:435\n   [2] split(str::String, splitter::Vector{String}; limit::Int64,\
    \ keepempty::Bool)\n     @ Base ./strings/util.jl:419\n   [3] split(str::String,\
    \ splitter::Vector{String})\n     @ Base ./strings/util.jl:419\n   [4] words_string(s::String)\n\
    \     @ Main /tmp/tmpniwe937l.jl:12\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpniwe937l.jl:20 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpniwe937l.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpniwe937l.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  MethodError: no method matching findfirst(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2002\n\
    \    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n\
    \    findfirst(!Matched::AbstractString, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/string"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpniwe937l.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    split(s, ',')\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppw77eru_.jl:19\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppw77eru_.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppw77eru_.jl:18\ntest set: Test\
    \ Failed at /tmp/tmppw77eru_.jl:20\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One\", \" two\", \" three\", \" four\", \" five\", \" six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppw77eru_.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppw77eru_.jl:18\ntest set: Test\
    \ Failed at /tmp/tmppw77eru_.jl:21\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \" my name\"] == [\"Hi\"\
    , \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppw77eru_.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppw77eru_.jl:18\ntest set: Test\
    \ Failed at /tmp/tmppw77eru_.jl:22\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One\", \"\", \" two\", \" three\", \" four\", \" five\"\
    , \" six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppw77eru_.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    s = strip(s)\n    output = split(s, [\" \", \",\"])\n    return output\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpo6u3f95b.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  MethodError: no method matching findfirst(::Vector{String},\
    \ ::SubString{String})\n  Closest candidates are:\n    findfirst(!Matched::Function,\
    \ ::Union{AbstractString, AbstractArray}) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2002\n\
    \    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n\
    \    findfirst(!Matched::AbstractString, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\n\
    \    ...\n  Stacktrace:\n   [1] _split(str::SubString{String}, splitter::Vector{String},\
    \ limit::Int64, keepempty::Bool, strs::Vector{SubString{String}})\n     @ Base\
    \ ./strings/util.jl:435\n   [2] split(str::SubString{String}, splitter::Vector{String};\
    \ limit::Int64, keepempty::Bool)\n     @ Base ./strings/util.jl:419\n   [3] split(str::SubString{String},\
    \ splitter::Vector{String})\n     @ Base ./strings/util.jl:419\n   [4] words_string(s::String)\n\
    \     @ Main /tmp/tmpo6u3f95b.jl:13\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpo6u3f95b.jl:21 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpo6u3f95b.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpo6u3f95b.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  MethodError: no method matching findfirst(::Vector{String},\
    \ ::SubString{String})\n  Closest candidates are:\n    findfirst(!Matched::Function,\
    \ ::Union{AbstractString, AbstractArray}) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2002\n\
    \    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n\
    \    findfirst(!Matched::AbstractString, ::AbstractString)"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo6u3f95b.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    ws = split(s, \" ,;\") # Splits by both spaces and commas\n    # return\
    \ ws[1:end-1] # Ignore the last \"\" string\n    return ws\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqcdtufeb.jl:21\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi, my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqcdtufeb.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqcdtufeb.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpqcdtufeb.jl:22\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One, two, three, four, five, six\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqcdtufeb.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqcdtufeb.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpqcdtufeb.jl:23\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi, my name\"] == [\"Hi\", \"my\"\
    , \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqcdtufeb.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqcdtufeb.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpqcdtufeb.jl:24\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,, two, three, four, five, six,\"] == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro exp"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqcdtufeb.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    words = split(s)\n    return words\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg6jgl8qm.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg6jgl8qm.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg6jgl8qm.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpg6jgl8qm.jl:21\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg6jgl8qm.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg6jgl8qm.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpg6jgl8qm.jl:22\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg6jgl8qm.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg6jgl8qm.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpg6jgl8qm.jl:23\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg6jgl8qm.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe8y8bcta.jl:19\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe8y8bcta.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe8y8bcta.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpe8y8bcta.jl:20\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe8y8bcta.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe8y8bcta.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpe8y8bcta.jl:21\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe8y8bcta.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe8y8bcta.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpe8y8bcta.jl:22\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe8y8bcta.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s, [\" \", \",\", \".\"])\n    return [x for x in\
    \ words if x != \"\"]\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp63sssjcn.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  MethodError: no method matching findfirst(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2002\n\
    \    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n\
    \    findfirst(!Matched::AbstractString, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\n\
    \    ...\n  Stacktrace:\n   [1] _split(str::String, splitter::Vector{String},\
    \ limit::Int64, keepempty::Bool, strs::Vector{SubString{String}})\n     @ Base\
    \ ./strings/util.jl:435\n   [2] split(str::String, splitter::Vector{String}; limit::Int64,\
    \ keepempty::Bool)\n     @ Base ./strings/util.jl:419\n   [3] split(str::String,\
    \ splitter::Vector{String})\n     @ Base ./strings/util.jl:419\n   [4] words_string(s::String)\n\
    \     @ Main /tmp/tmp63sssjcn.jl:13\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp63sssjcn.jl:21 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp63sssjcn.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp63sssjcn.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  MethodError: no method matching findfirst(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2002\n\
    \    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n\
    \    findfirst(!Matched::AbstractString, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/string"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp63sssjcn.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    words = split(s)\n    return words\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo0w6iuhr.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo0w6iuhr.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo0w6iuhr.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo0w6iuhr.jl:21\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo0w6iuhr.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo0w6iuhr.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo0w6iuhr.jl:22\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo0w6iuhr.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo0w6iuhr.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo0w6iuhr.jl:23\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo0w6iuhr.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoi069uwy.jl:22\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoi069uwy.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoi069uwy.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpoi069uwy.jl:23\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoi069uwy.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoi069uwy.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoi069uwy.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    s =  replace(s, \",\" => \" \")\n    out = split(s)\n    return out\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    return split(s, \"[ \\\\,]+\")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    \t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp57f7bxb9.jl:19\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi, my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp57f7bxb9.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp57f7bxb9.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp57f7bxb9.jl:20\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One, two, three, four, five, six\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp57f7bxb9.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp57f7bxb9.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp57f7bxb9.jl:21\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi, my name\"] == [\"Hi\", \"my\"\
    , \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp57f7bxb9.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp57f7bxb9.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp57f7bxb9.jl:22\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,, two, three, four, five, six,\"] == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro exp"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp57f7bxb9.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    a = split(s, [\" \", \",\"])\n    return a\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp19ap3dpn.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  MethodError: no method matching findfirst(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2002\n\
    \    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n\
    \    findfirst(!Matched::AbstractString, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\n\
    \    ...\n  Stacktrace:\n   [1] _split(str::String, splitter::Vector{String},\
    \ limit::Int64, keepempty::Bool, strs::Vector{SubString{String}})\n     @ Base\
    \ ./strings/util.jl:435\n   [2] split(str::String, splitter::Vector{String}; limit::Int64,\
    \ keepempty::Bool)\n     @ Base ./strings/util.jl:419\n   [3] split(str::String,\
    \ splitter::Vector{String})\n     @ Base ./strings/util.jl:419\n   [4] words_string(s::String)\n\
    \     @ Main /tmp/tmp19ap3dpn.jl:12\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp19ap3dpn.jl:20 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp19ap3dpn.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp19ap3dpn.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  MethodError: no method matching findfirst(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2002\n\
    \    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n\
    \    findfirst(!Matched::AbstractString, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/string"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp19ap3dpn.jl:17\n"
  exit_code: 1
  status: SyntaxError
